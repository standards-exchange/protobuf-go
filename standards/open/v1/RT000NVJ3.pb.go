// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/RT000NVJ3.proto

package v1

import (
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumerations of type of fund
type RT000NVJ3_Record_FundType int32

const (
	// Not specified by user
	RT000NVJ3_Record_FUND_TYPE_UNSPECIFIED RT000NVJ3_Record_FundType = 0
	// Segregated mandate
	RT000NVJ3_Record_SEGREGATED RT000NVJ3_Record_FundType = 1
	// Unit trust
	RT000NVJ3_Record_UNIT_TRUST RT000NVJ3_Record_FundType = 2
	// Pooled investment
	RT000NVJ3_Record_POOLED RT000NVJ3_Record_FundType = 3
)

// Enum value maps for RT000NVJ3_Record_FundType.
var (
	RT000NVJ3_Record_FundType_name = map[int32]string{
		0: "FUND_TYPE_UNSPECIFIED",
		1: "SEGREGATED",
		2: "UNIT_TRUST",
		3: "POOLED",
	}
	RT000NVJ3_Record_FundType_value = map[string]int32{
		"FUND_TYPE_UNSPECIFIED": 0,
		"SEGREGATED":            1,
		"UNIT_TRUST":            2,
		"POOLED":                3,
	}
)

func (x RT000NVJ3_Record_FundType) Enum() *RT000NVJ3_Record_FundType {
	p := new(RT000NVJ3_Record_FundType)
	*p = x
	return p
}

func (x RT000NVJ3_Record_FundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000NVJ3_Record_FundType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000NVJ3_proto_enumTypes[0].Descriptor()
}

func (RT000NVJ3_Record_FundType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000NVJ3_proto_enumTypes[0]
}

func (x RT000NVJ3_Record_FundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000NVJ3_Record_FundType.Descriptor instead.
func (RT000NVJ3_Record_FundType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Enumerations of the risk classification
type RT000NVJ3_Record_RiskClassification int32

const (
	// Not specified
	RT000NVJ3_Record_RISK_CLASSIFICATION_UNSPECIFIED RT000NVJ3_Record_RiskClassification = 0
	// Aggressive risk
	RT000NVJ3_Record_AGGRESSIVE RT000NVJ3_Record_RiskClassification = 1
	// Moderate risk
	RT000NVJ3_Record_MODERATE RT000NVJ3_Record_RiskClassification = 2
	// Conservative risk
	RT000NVJ3_Record_CONSERVATIVE RT000NVJ3_Record_RiskClassification = 3
)

// Enum value maps for RT000NVJ3_Record_RiskClassification.
var (
	RT000NVJ3_Record_RiskClassification_name = map[int32]string{
		0: "RISK_CLASSIFICATION_UNSPECIFIED",
		1: "AGGRESSIVE",
		2: "MODERATE",
		3: "CONSERVATIVE",
	}
	RT000NVJ3_Record_RiskClassification_value = map[string]int32{
		"RISK_CLASSIFICATION_UNSPECIFIED": 0,
		"AGGRESSIVE":                      1,
		"MODERATE":                        2,
		"CONSERVATIVE":                    3,
	}
)

func (x RT000NVJ3_Record_RiskClassification) Enum() *RT000NVJ3_Record_RiskClassification {
	p := new(RT000NVJ3_Record_RiskClassification)
	*p = x
	return p
}

func (x RT000NVJ3_Record_RiskClassification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000NVJ3_Record_RiskClassification) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000NVJ3_proto_enumTypes[1].Descriptor()
}

func (RT000NVJ3_Record_RiskClassification) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000NVJ3_proto_enumTypes[1]
}

func (x RT000NVJ3_Record_RiskClassification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000NVJ3_Record_RiskClassification.Descriptor instead.
func (RT000NVJ3_Record_RiskClassification) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 1}
}

// A proto defined object representing the data parsed from a Alexander Forbes
// Regulation 28 Survey Template
type RT000NVJ3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of records
	// There could be more than one Reg28 sheet withing a particular spreadsheet, which would represent individual
	// records.
	Records []*RT000NVJ3_Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RT000NVJ3) Reset() {
	*x = RT000NVJ3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3) ProtoMessage() {}

func (x *RT000NVJ3) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3.ProtoReflect.Descriptor instead.
func (*RT000NVJ3) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0}
}

func (x *RT000NVJ3) GetRecords() []*RT000NVJ3_Record {
	if x != nil {
		return x.Records
	}
	return nil
}

// Defining a single record / row within excel
type RT000NVJ3_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Survey Type (B6)
	Survey string `protobuf:"bytes,1,opt,name=survey,proto3" json:"survey,omitempty"`
	// The name of the fund (B7)
	Fund string `protobuf:"bytes,2,opt,name=fund,proto3" json:"fund,omitempty"`
	// The AF product ID (I7)
	ProductId string `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// The Management Company
	ManagementCompany string `protobuf:"bytes,4,opt,name=management_company,json=managementCompany,proto3" json:"management_company,omitempty"`
	// The effective month of the report
	Month *date.Date `protobuf:"bytes,5,opt,name=month,proto3" json:"month,omitempty"`
	// type of fund (C12:C14)
	FundType RT000NVJ3_Record_FundType `protobuf:"varint,6,opt,name=fund_type,json=fundType,proto3,enum=standards.open.v1.RT000NVJ3_Record_FundType" json:"fund_type,omitempty"`
	// risk classification (F12:F14)
	RiskClassification RT000NVJ3_Record_RiskClassification `protobuf:"varint,7,opt,name=risk_classification,json=riskClassification,proto3,enum=standards.open.v1.RT000NVJ3_Record_RiskClassification" json:"risk_classification,omitempty"`
	// Investment returns for the Portfolio
	PortfolioReturns *RT000NVJ3_Record_Returns `protobuf:"bytes,8,opt,name=portfolio_returns,json=portfolioReturns,proto3" json:"portfolio_returns,omitempty"`
	// Investment returns for the Benchmark
	BenchmarkReturns *RT000NVJ3_Record_Returns `protobuf:"bytes,9,opt,name=benchmark_returns,json=benchmarkReturns,proto3" json:"benchmark_returns,omitempty"`
	// the physical exposure by category and subcategory
	PhysicalExposure *RT000NVJ3_Record_Exposure `protobuf:"bytes,10,opt,name=physical_exposure,json=physicalExposure,proto3" json:"physical_exposure,omitempty"`
	// the effective exposure by category and subcategory
	EffectiveExposure *RT000NVJ3_Record_Exposure `protobuf:"bytes,11,opt,name=effective_exposure,json=effectiveExposure,proto3" json:"effective_exposure,omitempty"`
	// the benchmark exposure by category and subcategory
	BenchmarkExposure *RT000NVJ3_Record_Exposure `protobuf:"bytes,12,opt,name=benchmark_exposure,json=benchmarkExposure,proto3" json:"benchmark_exposure,omitempty"`
	// 3. Market Value information
	MarketValueInfo *RT000NVJ3_Record_MarketValueInfo `protobuf:"bytes,13,opt,name=market_value_info,json=marketValueInfo,proto3" json:"market_value_info,omitempty"`
	// 4. Segregated portfolios
	SegregatedPortfolios *RT000NVJ3_Record_SegregatedPortfolios `protobuf:"bytes,14,opt,name=segregated_portfolios,json=segregatedPortfolios,proto3" json:"segregated_portfolios,omitempty"`
	// 5. Yields and Duration
	YieldsAndDurations *RT000NVJ3_Record_YieldsAndDurations `protobuf:"bytes,15,opt,name=yields_and_durations,json=yieldsAndDurations,proto3" json:"yields_and_durations,omitempty"`
	// 6. TOP TEN DOMESTIC EQUITY HOLDINGS (TO BE SUPPLIED QUARTERLY)
	TopTenDomesticEquityHoldings []*RT000NVJ3_Record_Holding `protobuf:"bytes,25,rep,name=top_ten_domestic_equity_holdings,json=topTenDomesticEquityHoldings,proto3" json:"top_ten_domestic_equity_holdings,omitempty"`
	// 7. RETURN CALCULATION METHOD USED, e.g. NAV-NAV, gross of fees, and with income reinvested
	ReturnCalculationMethodUsed string `protobuf:"bytes,26,opt,name=return_calculation_method_used,json=returnCalculationMethodUsed,proto3" json:"return_calculation_method_used,omitempty"`
	// 8.  BENCHMARK DESCRIPTION: Specify the Benchmark per asset class as well as the total fund benchmark
	BenchmarkDescription string `protobuf:"bytes,27,opt,name=benchmark_description,json=benchmarkDescription,proto3" json:"benchmark_description,omitempty"`
	// 9a. Market Value Reconciliation
	MarketValueReconciliation *RT000NVJ3_Record_MarketValueReconciliation `protobuf:"bytes,28,opt,name=market_value_reconciliation,json=marketValueReconciliation,proto3" json:"market_value_reconciliation,omitempty"`
	// 9b. Composite Reconciliation
	CompositeReconciliation *RT000NVJ3_Record_CompositeReconciliation `protobuf:"bytes,29,opt,name=composite_reconciliation,json=compositeReconciliation,proto3" json:"composite_reconciliation,omitempty"`
	// Additional Equity information
	EquityInfo *RT000NVJ3_Record_EquityInfo `protobuf:"bytes,30,opt,name=equity_info,json=equityInfo,proto3" json:"equity_info,omitempty"`
	// Additional Bond information
	BondInfo *RT000NVJ3_Record_BondInfo `protobuf:"bytes,31,opt,name=bond_info,json=bondInfo,proto3" json:"bond_info,omitempty"`
	// Additional Cash information
	CashInfo *RT000NVJ3_Record_CashInfo `protobuf:"bytes,32,opt,name=cash_info,json=cashInfo,proto3" json:"cash_info,omitempty"`
}

func (x *RT000NVJ3_Record) Reset() {
	*x = RT000NVJ3_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record) ProtoMessage() {}

func (x *RT000NVJ3_Record) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000NVJ3_Record) GetSurvey() string {
	if x != nil {
		return x.Survey
	}
	return ""
}

func (x *RT000NVJ3_Record) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000NVJ3_Record) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *RT000NVJ3_Record) GetManagementCompany() string {
	if x != nil {
		return x.ManagementCompany
	}
	return ""
}

func (x *RT000NVJ3_Record) GetMonth() *date.Date {
	if x != nil {
		return x.Month
	}
	return nil
}

func (x *RT000NVJ3_Record) GetFundType() RT000NVJ3_Record_FundType {
	if x != nil {
		return x.FundType
	}
	return RT000NVJ3_Record_FUND_TYPE_UNSPECIFIED
}

func (x *RT000NVJ3_Record) GetRiskClassification() RT000NVJ3_Record_RiskClassification {
	if x != nil {
		return x.RiskClassification
	}
	return RT000NVJ3_Record_RISK_CLASSIFICATION_UNSPECIFIED
}

func (x *RT000NVJ3_Record) GetPortfolioReturns() *RT000NVJ3_Record_Returns {
	if x != nil {
		return x.PortfolioReturns
	}
	return nil
}

func (x *RT000NVJ3_Record) GetBenchmarkReturns() *RT000NVJ3_Record_Returns {
	if x != nil {
		return x.BenchmarkReturns
	}
	return nil
}

func (x *RT000NVJ3_Record) GetPhysicalExposure() *RT000NVJ3_Record_Exposure {
	if x != nil {
		return x.PhysicalExposure
	}
	return nil
}

func (x *RT000NVJ3_Record) GetEffectiveExposure() *RT000NVJ3_Record_Exposure {
	if x != nil {
		return x.EffectiveExposure
	}
	return nil
}

func (x *RT000NVJ3_Record) GetBenchmarkExposure() *RT000NVJ3_Record_Exposure {
	if x != nil {
		return x.BenchmarkExposure
	}
	return nil
}

func (x *RT000NVJ3_Record) GetMarketValueInfo() *RT000NVJ3_Record_MarketValueInfo {
	if x != nil {
		return x.MarketValueInfo
	}
	return nil
}

func (x *RT000NVJ3_Record) GetSegregatedPortfolios() *RT000NVJ3_Record_SegregatedPortfolios {
	if x != nil {
		return x.SegregatedPortfolios
	}
	return nil
}

func (x *RT000NVJ3_Record) GetYieldsAndDurations() *RT000NVJ3_Record_YieldsAndDurations {
	if x != nil {
		return x.YieldsAndDurations
	}
	return nil
}

func (x *RT000NVJ3_Record) GetTopTenDomesticEquityHoldings() []*RT000NVJ3_Record_Holding {
	if x != nil {
		return x.TopTenDomesticEquityHoldings
	}
	return nil
}

func (x *RT000NVJ3_Record) GetReturnCalculationMethodUsed() string {
	if x != nil {
		return x.ReturnCalculationMethodUsed
	}
	return ""
}

func (x *RT000NVJ3_Record) GetBenchmarkDescription() string {
	if x != nil {
		return x.BenchmarkDescription
	}
	return ""
}

func (x *RT000NVJ3_Record) GetMarketValueReconciliation() *RT000NVJ3_Record_MarketValueReconciliation {
	if x != nil {
		return x.MarketValueReconciliation
	}
	return nil
}

func (x *RT000NVJ3_Record) GetCompositeReconciliation() *RT000NVJ3_Record_CompositeReconciliation {
	if x != nil {
		return x.CompositeReconciliation
	}
	return nil
}

func (x *RT000NVJ3_Record) GetEquityInfo() *RT000NVJ3_Record_EquityInfo {
	if x != nil {
		return x.EquityInfo
	}
	return nil
}

func (x *RT000NVJ3_Record) GetBondInfo() *RT000NVJ3_Record_BondInfo {
	if x != nil {
		return x.BondInfo
	}
	return nil
}

func (x *RT000NVJ3_Record) GetCashInfo() *RT000NVJ3_Record_CashInfo {
	if x != nil {
		return x.CashInfo
	}
	return nil
}

// Message defining the return by category.
// All returns should be populated in percentage terms e.g. 1% and not 0.01
type RT000NVJ3_Record_Returns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Domestic equities
	DomesticEquities float64 `protobuf:"fixed64,1,opt,name=domestic_equities,json=domesticEquities,proto3" json:"domestic_equities,omitempty"`
	// Domestic debt instruments
	DomesticDebtInstruments float64 `protobuf:"fixed64,2,opt,name=domestic_debt_instruments,json=domesticDebtInstruments,proto3" json:"domestic_debt_instruments,omitempty"`
	// Domestic cash and money market
	DomesticCashAndMoneyMarket float64 `protobuf:"fixed64,3,opt,name=domestic_cash_and_money_market,json=domesticCashAndMoneyMarket,proto3" json:"domestic_cash_and_money_market,omitempty"`
	// Domestic immovable property
	DomesticImmovableProperty float64 `protobuf:"fixed64,4,opt,name=domestic_immovable_property,json=domesticImmovableProperty,proto3" json:"domestic_immovable_property,omitempty"`
	// Domestic commodities
	DomesticCommodities float64 `protobuf:"fixed64,5,opt,name=domestic_commodities,json=domesticCommodities,proto3" json:"domestic_commodities,omitempty"`
	// Domestic hedge funds
	DomesticHedgeFunds float64 `protobuf:"fixed64,6,opt,name=domestic_hedge_funds,json=domesticHedgeFunds,proto3" json:"domestic_hedge_funds,omitempty"`
	// Domestic private equity funds
	DomesticPrivateEquityFunds float64 `protobuf:"fixed64,7,opt,name=domestic_private_equity_funds,json=domesticPrivateEquityFunds,proto3" json:"domestic_private_equity_funds,omitempty"`
	// Domestic other
	DomesticOther float64 `protobuf:"fixed64,8,opt,name=domestic_other,json=domesticOther,proto3" json:"domestic_other,omitempty"`
	// Total domestic return
	TotalDomestic float64 `protobuf:"fixed64,9,opt,name=total_domestic,json=totalDomestic,proto3" json:"total_domestic,omitempty"`
	// International equities
	InternationalEquities float64 `protobuf:"fixed64,10,opt,name=international_equities,json=internationalEquities,proto3" json:"international_equities,omitempty"`
	// International debt instruments
	InternationalDebtInstruments float64 `protobuf:"fixed64,11,opt,name=international_debt_instruments,json=internationalDebtInstruments,proto3" json:"international_debt_instruments,omitempty"`
	// International cash and money market
	InternationalCashAndMoneyMarket float64 `protobuf:"fixed64,12,opt,name=international_cash_and_money_market,json=internationalCashAndMoneyMarket,proto3" json:"international_cash_and_money_market,omitempty"`
	// International immovable property
	InternationalImmovableProperty float64 `protobuf:"fixed64,13,opt,name=international_immovable_property,json=internationalImmovableProperty,proto3" json:"international_immovable_property,omitempty"`
	// International commodities
	InternationalCommodities float64 `protobuf:"fixed64,14,opt,name=international_commodities,json=internationalCommodities,proto3" json:"international_commodities,omitempty"`
	// International hedge funds
	InternationalHedgeFunds float64 `protobuf:"fixed64,15,opt,name=international_hedge_funds,json=internationalHedgeFunds,proto3" json:"international_hedge_funds,omitempty"`
	// International private equity funds
	InternationalPrivateEquityFunds float64 `protobuf:"fixed64,16,opt,name=international_private_equity_funds,json=internationalPrivateEquityFunds,proto3" json:"international_private_equity_funds,omitempty"`
	// International other
	InternationalOther float64 `protobuf:"fixed64,17,opt,name=international_other,json=internationalOther,proto3" json:"international_other,omitempty"`
	// Total international return
	TotalInternational float64 `protobuf:"fixed64,18,opt,name=total_international,json=totalInternational,proto3" json:"total_international,omitempty"`
	// Total portfolio return
	TotalPortfolio float64 `protobuf:"fixed64,19,opt,name=total_portfolio,json=totalPortfolio,proto3" json:"total_portfolio,omitempty"`
	// Gross unit price/index value
	GrossUnitPriceOrIndexValue float64 `protobuf:"fixed64,20,opt,name=gross_unit_price_or_index_value,json=grossUnitPriceOrIndexValue,proto3" json:"gross_unit_price_or_index_value,omitempty"`
}

func (x *RT000NVJ3_Record_Returns) Reset() {
	*x = RT000NVJ3_Record_Returns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_Returns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_Returns) ProtoMessage() {}

func (x *RT000NVJ3_Record_Returns) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_Returns.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_Returns) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *RT000NVJ3_Record_Returns) GetDomesticEquities() float64 {
	if x != nil {
		return x.DomesticEquities
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetDomesticDebtInstruments() float64 {
	if x != nil {
		return x.DomesticDebtInstruments
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetDomesticCashAndMoneyMarket() float64 {
	if x != nil {
		return x.DomesticCashAndMoneyMarket
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetDomesticImmovableProperty() float64 {
	if x != nil {
		return x.DomesticImmovableProperty
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetDomesticCommodities() float64 {
	if x != nil {
		return x.DomesticCommodities
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetDomesticHedgeFunds() float64 {
	if x != nil {
		return x.DomesticHedgeFunds
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetDomesticPrivateEquityFunds() float64 {
	if x != nil {
		return x.DomesticPrivateEquityFunds
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetDomesticOther() float64 {
	if x != nil {
		return x.DomesticOther
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetTotalDomestic() float64 {
	if x != nil {
		return x.TotalDomestic
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetInternationalEquities() float64 {
	if x != nil {
		return x.InternationalEquities
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetInternationalDebtInstruments() float64 {
	if x != nil {
		return x.InternationalDebtInstruments
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetInternationalCashAndMoneyMarket() float64 {
	if x != nil {
		return x.InternationalCashAndMoneyMarket
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetInternationalImmovableProperty() float64 {
	if x != nil {
		return x.InternationalImmovableProperty
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetInternationalCommodities() float64 {
	if x != nil {
		return x.InternationalCommodities
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetInternationalHedgeFunds() float64 {
	if x != nil {
		return x.InternationalHedgeFunds
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetInternationalPrivateEquityFunds() float64 {
	if x != nil {
		return x.InternationalPrivateEquityFunds
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetInternationalOther() float64 {
	if x != nil {
		return x.InternationalOther
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetTotalInternational() float64 {
	if x != nil {
		return x.TotalInternational
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetTotalPortfolio() float64 {
	if x != nil {
		return x.TotalPortfolio
	}
	return 0
}

func (x *RT000NVJ3_Record_Returns) GetGrossUnitPriceOrIndexValue() float64 {
	if x != nil {
		return x.GrossUnitPriceOrIndexValue
	}
	return 0
}

// (-- api-linter: core::0140::prepositions=disabled
//
//	aip.dev/not-precedent: We need to do this because it just makes sense to describe time periods
//	by using the word to e.g. 3 to 7 years etc.. --)
//
// Message defining the return by category.
// All exposures should be populated in decimal form e.g. 1% as 0.01
type RT000NVJ3_Record_Exposure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum of all domestic_equities_* should equal the value in total_domestic_equities
	TotalDomesticEquities float64 `protobuf:"fixed64,1,opt,name=total_domestic_equities,json=totalDomesticEquities,proto3" json:"total_domestic_equities,omitempty"`
	// Domestic equities that are in the resources sector
	DomesticEquitiesResources float64 `protobuf:"fixed64,2,opt,name=domestic_equities_resources,json=domesticEquitiesResources,proto3" json:"domestic_equities_resources,omitempty"`
	// Domestic equities that are in the financials sector
	DomesticEquitiesFinancials float64 `protobuf:"fixed64,3,opt,name=domestic_equities_financials,json=domesticEquitiesFinancials,proto3" json:"domestic_equities_financials,omitempty"`
	// Domestic equities that are in the industrials sector
	DomesticEquitiesIndustrials float64 `protobuf:"fixed64,4,opt,name=domestic_equities_industrials,json=domesticEquitiesIndustrials,proto3" json:"domestic_equities_industrials,omitempty"`
	// Other domestic equities (fall in none of the above sectors)
	DomesticEquitiesOtherEquity float64 `protobuf:"fixed64,5,opt,name=domestic_equities_other_equity,json=domesticEquitiesOtherEquity,proto3" json:"domestic_equities_other_equity,omitempty"`
	// Sum of all domestic_debt_instruments_* should equal the value in total_domestic_debt_instruments
	TotalDomesticDebtInstruments float64 `protobuf:"fixed64,6,opt,name=total_domestic_debt_instruments,json=totalDomesticDebtInstruments,proto3" json:"total_domestic_debt_instruments,omitempty"`
	// Domestic debt instruments 0-3 years
	DomesticDebtInstrumentsZeroToThreeYears float64 `protobuf:"fixed64,7,opt,name=domestic_debt_instruments_zero_to_three_years,json=domesticDebtInstrumentsZeroToThreeYears,proto3" json:"domestic_debt_instruments_zero_to_three_years,omitempty"`
	// Domestic debt instruments 3-7 years
	DomesticDebtInstrumentsThreeToSevenYears float64 `protobuf:"fixed64,8,opt,name=domestic_debt_instruments_three_to_seven_years,json=domesticDebtInstrumentsThreeToSevenYears,proto3" json:"domestic_debt_instruments_three_to_seven_years,omitempty"`
	// Domestic debt instruments 7-12 years
	DomesticDebtInstrumentsSevenToTwelveYears float64 `protobuf:"fixed64,9,opt,name=domestic_debt_instruments_seven_to_twelve_years,json=domesticDebtInstrumentsSevenToTwelveYears,proto3" json:"domestic_debt_instruments_seven_to_twelve_years,omitempty"`
	// Domestic debt instruments 12+ years
	DomesticDebtInstrumentsTwelvePlusYears float64 `protobuf:"fixed64,10,opt,name=domestic_debt_instruments_twelve_plus_years,json=domesticDebtInstrumentsTwelvePlusYears,proto3" json:"domestic_debt_instruments_twelve_plus_years,omitempty"`
	// Other domestic debt instruments
	DomesticDebtInstrumentsOther float64 `protobuf:"fixed64,11,opt,name=domestic_debt_instruments_other,json=domesticDebtInstrumentsOther,proto3" json:"domestic_debt_instruments_other,omitempty"`
	// Total domestic cash and money market
	TotalDomesticCashAndMoneyMarket float64 `protobuf:"fixed64,12,opt,name=total_domestic_cash_and_money_market,json=totalDomesticCashAndMoneyMarket,proto3" json:"total_domestic_cash_and_money_market,omitempty"`
	// Sum of all domestic_immovable_property_* should equal the value in total_domestic_immovable_property
	TotalDomesticImmovableProperty float64 `protobuf:"fixed64,13,opt,name=total_domestic_immovable_property,json=totalDomesticImmovableProperty,proto3" json:"total_domestic_immovable_property,omitempty"`
	// Domestic immovable direct property
	DomesticImmovablePropertyDirect float64 `protobuf:"fixed64,14,opt,name=domestic_immovable_property_direct,json=domesticImmovablePropertyDirect,proto3" json:"domestic_immovable_property_direct,omitempty"`
	// Domestic immovable listed property
	DomesticImmovablePropertyListed float64 `protobuf:"fixed64,15,opt,name=domestic_immovable_property_listed,json=domesticImmovablePropertyListed,proto3" json:"domestic_immovable_property_listed,omitempty"`
	// Domestic immovable unlisted property
	DomesticImmovablePropertyUnlisted float64 `protobuf:"fixed64,16,opt,name=domestic_immovable_property_unlisted,json=domesticImmovablePropertyUnlisted,proto3" json:"domestic_immovable_property_unlisted,omitempty"`
	// Total domestic commodities
	TotalDomesticCommodities float64 `protobuf:"fixed64,17,opt,name=total_domestic_commodities,json=totalDomesticCommodities,proto3" json:"total_domestic_commodities,omitempty"`
	// Total domestic hedge funds
	TotalDomesticHedgeFunds float64 `protobuf:"fixed64,18,opt,name=total_domestic_hedge_funds,json=totalDomesticHedgeFunds,proto3" json:"total_domestic_hedge_funds,omitempty"`
	// Total domestic private equity funds
	TotalDomesticPrivateEquityFunds float64 `protobuf:"fixed64,19,opt,name=total_domestic_private_equity_funds,json=totalDomesticPrivateEquityFunds,proto3" json:"total_domestic_private_equity_funds,omitempty"`
	// Total domestic other
	TotalDomesticOther float64 `protobuf:"fixed64,20,opt,name=total_domestic_other,json=totalDomesticOther,proto3" json:"total_domestic_other,omitempty"`
	// Sum of all international_* should equal the value in total_international
	TotalInternational float64 `protobuf:"fixed64,21,opt,name=total_international,json=totalInternational,proto3" json:"total_international,omitempty"`
	// International equities
	InternationalEquities float64 `protobuf:"fixed64,22,opt,name=international_equities,json=internationalEquities,proto3" json:"international_equities,omitempty"`
	// International debt instruments
	InternationalDebtInstruments float64 `protobuf:"fixed64,23,opt,name=international_debt_instruments,json=internationalDebtInstruments,proto3" json:"international_debt_instruments,omitempty"`
	// International cash and money and market
	InternationalCashAndMoneyMarket float64 `protobuf:"fixed64,24,opt,name=international_cash_and_money_market,json=internationalCashAndMoneyMarket,proto3" json:"international_cash_and_money_market,omitempty"`
	// International immovable property
	InternationalImmovableProperty float64 `protobuf:"fixed64,25,opt,name=international_immovable_property,json=internationalImmovableProperty,proto3" json:"international_immovable_property,omitempty"`
	// International commodities
	InternationalCommodities float64 `protobuf:"fixed64,26,opt,name=international_commodities,json=internationalCommodities,proto3" json:"international_commodities,omitempty"`
	// International hedge funds
	InternationalHedgeFunds float64 `protobuf:"fixed64,27,opt,name=international_hedge_funds,json=internationalHedgeFunds,proto3" json:"international_hedge_funds,omitempty"`
	// International private equity funds
	InternationalPrivateEquityFunds float64 `protobuf:"fixed64,28,opt,name=international_private_equity_funds,json=internationalPrivateEquityFunds,proto3" json:"international_private_equity_funds,omitempty"`
	// International other
	InternationalOther float64 `protobuf:"fixed64,29,opt,name=international_other,json=internationalOther,proto3" json:"international_other,omitempty"`
	// Total portfolio exposure. Sum of all total_domestic_* and total_international should equal thr value in total_portfolio
	TotalPortfolio float64 `protobuf:"fixed64,30,opt,name=total_portfolio,json=totalPortfolio,proto3" json:"total_portfolio,omitempty"`
}

func (x *RT000NVJ3_Record_Exposure) Reset() {
	*x = RT000NVJ3_Record_Exposure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_Exposure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_Exposure) ProtoMessage() {}

func (x *RT000NVJ3_Record_Exposure) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_Exposure.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_Exposure) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *RT000NVJ3_Record_Exposure) GetTotalDomesticEquities() float64 {
	if x != nil {
		return x.TotalDomesticEquities
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticEquitiesResources() float64 {
	if x != nil {
		return x.DomesticEquitiesResources
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticEquitiesFinancials() float64 {
	if x != nil {
		return x.DomesticEquitiesFinancials
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticEquitiesIndustrials() float64 {
	if x != nil {
		return x.DomesticEquitiesIndustrials
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticEquitiesOtherEquity() float64 {
	if x != nil {
		return x.DomesticEquitiesOtherEquity
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetTotalDomesticDebtInstruments() float64 {
	if x != nil {
		return x.TotalDomesticDebtInstruments
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticDebtInstrumentsZeroToThreeYears() float64 {
	if x != nil {
		return x.DomesticDebtInstrumentsZeroToThreeYears
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticDebtInstrumentsThreeToSevenYears() float64 {
	if x != nil {
		return x.DomesticDebtInstrumentsThreeToSevenYears
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticDebtInstrumentsSevenToTwelveYears() float64 {
	if x != nil {
		return x.DomesticDebtInstrumentsSevenToTwelveYears
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticDebtInstrumentsTwelvePlusYears() float64 {
	if x != nil {
		return x.DomesticDebtInstrumentsTwelvePlusYears
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticDebtInstrumentsOther() float64 {
	if x != nil {
		return x.DomesticDebtInstrumentsOther
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetTotalDomesticCashAndMoneyMarket() float64 {
	if x != nil {
		return x.TotalDomesticCashAndMoneyMarket
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetTotalDomesticImmovableProperty() float64 {
	if x != nil {
		return x.TotalDomesticImmovableProperty
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticImmovablePropertyDirect() float64 {
	if x != nil {
		return x.DomesticImmovablePropertyDirect
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticImmovablePropertyListed() float64 {
	if x != nil {
		return x.DomesticImmovablePropertyListed
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetDomesticImmovablePropertyUnlisted() float64 {
	if x != nil {
		return x.DomesticImmovablePropertyUnlisted
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetTotalDomesticCommodities() float64 {
	if x != nil {
		return x.TotalDomesticCommodities
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetTotalDomesticHedgeFunds() float64 {
	if x != nil {
		return x.TotalDomesticHedgeFunds
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetTotalDomesticPrivateEquityFunds() float64 {
	if x != nil {
		return x.TotalDomesticPrivateEquityFunds
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetTotalDomesticOther() float64 {
	if x != nil {
		return x.TotalDomesticOther
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetTotalInternational() float64 {
	if x != nil {
		return x.TotalInternational
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetInternationalEquities() float64 {
	if x != nil {
		return x.InternationalEquities
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetInternationalDebtInstruments() float64 {
	if x != nil {
		return x.InternationalDebtInstruments
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetInternationalCashAndMoneyMarket() float64 {
	if x != nil {
		return x.InternationalCashAndMoneyMarket
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetInternationalImmovableProperty() float64 {
	if x != nil {
		return x.InternationalImmovableProperty
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetInternationalCommodities() float64 {
	if x != nil {
		return x.InternationalCommodities
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetInternationalHedgeFunds() float64 {
	if x != nil {
		return x.InternationalHedgeFunds
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetInternationalPrivateEquityFunds() float64 {
	if x != nil {
		return x.InternationalPrivateEquityFunds
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetInternationalOther() float64 {
	if x != nil {
		return x.InternationalOther
	}
	return 0
}

func (x *RT000NVJ3_Record_Exposure) GetTotalPortfolio() float64 {
	if x != nil {
		return x.TotalPortfolio
	}
	return 0
}

// Attributes of Market Value info.
type RT000NVJ3_Record_MarketValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 3. Market value of Portfolio on which performance is measured (in Rands)
	PerformancePortfolio float64 `protobuf:"fixed64,1,opt,name=performance_portfolio,json=performancePortfolio,proto3" json:"performance_portfolio,omitempty"`
	// 3a. Market value of total balanced portfolios (Rands)
	TotalBalancedPortfolio float64 `protobuf:"fixed64,2,opt,name=total_balanced_portfolio,json=totalBalancedPortfolio,proto3" json:"total_balanced_portfolio,omitempty"`
}

func (x *RT000NVJ3_Record_MarketValueInfo) Reset() {
	*x = RT000NVJ3_Record_MarketValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_MarketValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_MarketValueInfo) ProtoMessage() {}

func (x *RT000NVJ3_Record_MarketValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_MarketValueInfo.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_MarketValueInfo) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *RT000NVJ3_Record_MarketValueInfo) GetPerformancePortfolio() float64 {
	if x != nil {
		return x.PerformancePortfolio
	}
	return 0
}

func (x *RT000NVJ3_Record_MarketValueInfo) GetTotalBalancedPortfolio() float64 {
	if x != nil {
		return x.TotalBalancedPortfolio
	}
	return 0
}

// Attributes of Segregated portfolios
type RT000NVJ3_Record_SegregatedPortfolios struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 4. # OF SEGREGATED PORTFOLIOS THAT MAKE UP THE COMPOSITE (IF COMPOSITE CONSISTS OF SEGREGATED ACCOUNTS)
	SegregatedPortfoliosCount int32 `protobuf:"varint,1,opt,name=segregated_portfolios_count,json=segregatedPortfoliosCount,proto3" json:"segregated_portfolios_count,omitempty"`
	// 4a.  HIGHEST RETURN segregated portfolios
	HighestReturn float64 `protobuf:"fixed64,2,opt,name=highest_return,json=highestReturn,proto3" json:"highest_return,omitempty"`
	// 4b.  LOWEST RETURN segregated portfolios
	LowestReturn float64 `protobuf:"fixed64,3,opt,name=lowest_return,json=lowestReturn,proto3" json:"lowest_return,omitempty"`
	// 4c.  MEDIAN RETURN segregated portfolios
	MedianReturn float64 `protobuf:"fixed64,4,opt,name=median_return,json=medianReturn,proto3" json:"median_return,omitempty"`
	// 4d.  INTERNAL DISPERSION segregated portfolios (Calculated as the standard deviation of returns around the composite return.)
	InternalDispersion float64 `protobuf:"fixed64,5,opt,name=internal_dispersion,json=internalDispersion,proto3" json:"internal_dispersion,omitempty"`
}

func (x *RT000NVJ3_Record_SegregatedPortfolios) Reset() {
	*x = RT000NVJ3_Record_SegregatedPortfolios{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_SegregatedPortfolios) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_SegregatedPortfolios) ProtoMessage() {}

func (x *RT000NVJ3_Record_SegregatedPortfolios) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_SegregatedPortfolios.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_SegregatedPortfolios) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *RT000NVJ3_Record_SegregatedPortfolios) GetSegregatedPortfoliosCount() int32 {
	if x != nil {
		return x.SegregatedPortfoliosCount
	}
	return 0
}

func (x *RT000NVJ3_Record_SegregatedPortfolios) GetHighestReturn() float64 {
	if x != nil {
		return x.HighestReturn
	}
	return 0
}

func (x *RT000NVJ3_Record_SegregatedPortfolios) GetLowestReturn() float64 {
	if x != nil {
		return x.LowestReturn
	}
	return 0
}

func (x *RT000NVJ3_Record_SegregatedPortfolios) GetMedianReturn() float64 {
	if x != nil {
		return x.MedianReturn
	}
	return 0
}

func (x *RT000NVJ3_Record_SegregatedPortfolios) GetInternalDispersion() float64 {
	if x != nil {
		return x.InternalDispersion
	}
	return 0
}

// Attributes of the YieldsAndDurations object.
type RT000NVJ3_Record_YieldsAndDurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 5a. MODIFIED DURATION - DOMESTIC CASH AND MONEY MARKET HOLDINGS (DAYS)
	ModifiedDurationDomesticCashAndMoneyMarketHoldings float64 `protobuf:"fixed64,20,opt,name=modified_duration_domestic_cash_and_money_market_holdings,json=modifiedDurationDomesticCashAndMoneyMarketHoldings,proto3" json:"modified_duration_domestic_cash_and_money_market_holdings,omitempty"`
	// 5b. MODIFIED DURATION - DOMESTIC DEBT HOLDINGS (YEARS)
	ModifiedDurationDomesticDebtHoldings float64 `protobuf:"fixed64,21,opt,name=modified_duration_domestic_debt_holdings,json=modifiedDurationDomesticDebtHoldings,proto3" json:"modified_duration_domestic_debt_holdings,omitempty"`
	// 5c. MODIFIED DURATION - DOMESTIC TOTAL FIXED INTEREST HOLDINGS (YEARS)
	ModifiedDurationDomesticTotalFixedInterestHoldings float64 `protobuf:"fixed64,22,opt,name=modified_duration_domestic_total_fixed_interest_holdings,json=modifiedDurationDomesticTotalFixedInterestHoldings,proto3" json:"modified_duration_domestic_total_fixed_interest_holdings,omitempty"`
	// 5d. WEIGHTED AVERAGE PRICE:EARNINGS RATIO - DOMESTIC EQUITIES
	WeightedAveragePeRatioDomesticEquities float64 `protobuf:"fixed64,23,opt,name=weighted_average_pe_ratio_domestic_equities,json=weightedAveragePeRatioDomesticEquities,proto3" json:"weighted_average_pe_ratio_domestic_equities,omitempty"`
	// 5e.  WEIGHTED AVERAGE DIVIDEND YIELD - DOMESTIC EQUITIES
	WeightedAverageDividendYieldDomesticEquities float64 `protobuf:"fixed64,24,opt,name=weighted_average_dividend_yield_domestic_equities,json=weightedAverageDividendYieldDomesticEquities,proto3" json:"weighted_average_dividend_yield_domestic_equities,omitempty"`
}

func (x *RT000NVJ3_Record_YieldsAndDurations) Reset() {
	*x = RT000NVJ3_Record_YieldsAndDurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_YieldsAndDurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_YieldsAndDurations) ProtoMessage() {}

func (x *RT000NVJ3_Record_YieldsAndDurations) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_YieldsAndDurations.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_YieldsAndDurations) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *RT000NVJ3_Record_YieldsAndDurations) GetModifiedDurationDomesticCashAndMoneyMarketHoldings() float64 {
	if x != nil {
		return x.ModifiedDurationDomesticCashAndMoneyMarketHoldings
	}
	return 0
}

func (x *RT000NVJ3_Record_YieldsAndDurations) GetModifiedDurationDomesticDebtHoldings() float64 {
	if x != nil {
		return x.ModifiedDurationDomesticDebtHoldings
	}
	return 0
}

func (x *RT000NVJ3_Record_YieldsAndDurations) GetModifiedDurationDomesticTotalFixedInterestHoldings() float64 {
	if x != nil {
		return x.ModifiedDurationDomesticTotalFixedInterestHoldings
	}
	return 0
}

func (x *RT000NVJ3_Record_YieldsAndDurations) GetWeightedAveragePeRatioDomesticEquities() float64 {
	if x != nil {
		return x.WeightedAveragePeRatioDomesticEquities
	}
	return 0
}

func (x *RT000NVJ3_Record_YieldsAndDurations) GetWeightedAverageDividendYieldDomesticEquities() float64 {
	if x != nil {
		return x.WeightedAverageDividendYieldDomesticEquities
	}
	return 0
}

// Definition of a holding reported
type RT000NVJ3_Record_Holding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Display name of holding
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// JSE code of the holding, for example: DSY
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Percentage allocation of total equities
	EquitiesAllocation float64 `protobuf:"fixed64,3,opt,name=equities_allocation,json=equitiesAllocation,proto3" json:"equities_allocation,omitempty"`
	// Percentage allocation of total Portfolio
	PortfolioAllocation float64 `protobuf:"fixed64,4,opt,name=portfolio_allocation,json=portfolioAllocation,proto3" json:"portfolio_allocation,omitempty"`
}

func (x *RT000NVJ3_Record_Holding) Reset() {
	*x = RT000NVJ3_Record_Holding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_Holding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_Holding) ProtoMessage() {}

func (x *RT000NVJ3_Record_Holding) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_Holding.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_Holding) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *RT000NVJ3_Record_Holding) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RT000NVJ3_Record_Holding) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RT000NVJ3_Record_Holding) GetEquitiesAllocation() float64 {
	if x != nil {
		return x.EquitiesAllocation
	}
	return 0
}

func (x *RT000NVJ3_Record_Holding) GetPortfolioAllocation() float64 {
	if x != nil {
		return x.PortfolioAllocation
	}
	return 0
}

// Defining a Market Value Reconciliation attributes.
type RT000NVJ3_Record_MarketValueReconciliation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opening Market Value
	OpeningMarketValue float64 `protobuf:"fixed64,1,opt,name=opening_market_value,json=openingMarketValue,proto3" json:"opening_market_value,omitempty"`
	// Total Contributions
	TotalContributions float64 `protobuf:"fixed64,2,opt,name=total_contributions,json=totalContributions,proto3" json:"total_contributions,omitempty"`
	// Total Withdrawals
	TotalWithdrawals float64 `protobuf:"fixed64,3,opt,name=total_withdrawals,json=totalWithdrawals,proto3" json:"total_withdrawals,omitempty"`
	// Adjustment for market movement (+/-)
	MarketMovement float64 `protobuf:"fixed64,4,opt,name=market_movement,json=marketMovement,proto3" json:"market_movement,omitempty"`
	// Closing Market Value
	ClosingValue float64 `protobuf:"fixed64,5,opt,name=closing_value,json=closingValue,proto3" json:"closing_value,omitempty"`
}

func (x *RT000NVJ3_Record_MarketValueReconciliation) Reset() {
	*x = RT000NVJ3_Record_MarketValueReconciliation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_MarketValueReconciliation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_MarketValueReconciliation) ProtoMessage() {}

func (x *RT000NVJ3_Record_MarketValueReconciliation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_MarketValueReconciliation.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_MarketValueReconciliation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *RT000NVJ3_Record_MarketValueReconciliation) GetOpeningMarketValue() float64 {
	if x != nil {
		return x.OpeningMarketValue
	}
	return 0
}

func (x *RT000NVJ3_Record_MarketValueReconciliation) GetTotalContributions() float64 {
	if x != nil {
		return x.TotalContributions
	}
	return 0
}

func (x *RT000NVJ3_Record_MarketValueReconciliation) GetTotalWithdrawals() float64 {
	if x != nil {
		return x.TotalWithdrawals
	}
	return 0
}

func (x *RT000NVJ3_Record_MarketValueReconciliation) GetMarketMovement() float64 {
	if x != nil {
		return x.MarketMovement
	}
	return 0
}

func (x *RT000NVJ3_Record_MarketValueReconciliation) GetClosingValue() float64 {
	if x != nil {
		return x.ClosingValue
	}
	return 0
}

// Defining a Composite Reconciliation attributes.
type RT000NVJ3_Record_CompositeReconciliation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opening number of funds
	OpeningFundsCount int32 `protobuf:"varint,1,opt,name=opening_funds_count,json=openingFundsCount,proto3" json:"opening_funds_count,omitempty"`
	// 9b.  COMPOSITE RECONCILIATION : ADD NEW FUNDS
	NewFundsCount int32 `protobuf:"varint,2,opt,name=new_funds_count,json=newFundsCount,proto3" json:"new_funds_count,omitempty"`
	// Reason for new funds
	NewFundsReason string `protobuf:"bytes,3,opt,name=new_funds_reason,json=newFundsReason,proto3" json:"new_funds_reason,omitempty"`
	// 9b.  COMPOSITE RECONCILIATION : ADD NEW FUNDS
	RemovedFundsCount int32 `protobuf:"varint,4,opt,name=removed_funds_count,json=removedFundsCount,proto3" json:"removed_funds_count,omitempty"`
	// Reason for funds removed
	RemovedFundsReason string `protobuf:"bytes,5,opt,name=removed_funds_reason,json=removedFundsReason,proto3" json:"removed_funds_reason,omitempty"`
	// 9b.  COMPOSITE RECONCILIATION : LESS FUNDS REMOVED COMPOSITE
	ClosingFundsCount int32 `protobuf:"varint,6,opt,name=closing_funds_count,json=closingFundsCount,proto3" json:"closing_funds_count,omitempty"`
}

func (x *RT000NVJ3_Record_CompositeReconciliation) Reset() {
	*x = RT000NVJ3_Record_CompositeReconciliation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_CompositeReconciliation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_CompositeReconciliation) ProtoMessage() {}

func (x *RT000NVJ3_Record_CompositeReconciliation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_CompositeReconciliation.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_CompositeReconciliation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *RT000NVJ3_Record_CompositeReconciliation) GetOpeningFundsCount() int32 {
	if x != nil {
		return x.OpeningFundsCount
	}
	return 0
}

func (x *RT000NVJ3_Record_CompositeReconciliation) GetNewFundsCount() int32 {
	if x != nil {
		return x.NewFundsCount
	}
	return 0
}

func (x *RT000NVJ3_Record_CompositeReconciliation) GetNewFundsReason() string {
	if x != nil {
		return x.NewFundsReason
	}
	return ""
}

func (x *RT000NVJ3_Record_CompositeReconciliation) GetRemovedFundsCount() int32 {
	if x != nil {
		return x.RemovedFundsCount
	}
	return 0
}

func (x *RT000NVJ3_Record_CompositeReconciliation) GetRemovedFundsReason() string {
	if x != nil {
		return x.RemovedFundsReason
	}
	return ""
}

func (x *RT000NVJ3_Record_CompositeReconciliation) GetClosingFundsCount() int32 {
	if x != nil {
		return x.ClosingFundsCount
	}
	return 0
}

// Defining Equity Info attributes.
type RT000NVJ3_Record_EquityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 10. Equity % of assets off benchmark
	PercentAssetsOffBenchmark float64 `protobuf:"fixed64,1,opt,name=percent_assets_off_benchmark,json=percentAssetsOffBenchmark,proto3" json:"percent_assets_off_benchmark,omitempty"`
	// 10. Equity % average cash holding for the month
	AverageMonthlyCashPercentage float64 `protobuf:"fixed64,2,opt,name=average_monthly_cash_percentage,json=averageMonthlyCashPercentage,proto3" json:"average_monthly_cash_percentage,omitempty"`
	// 10. Equity % gold held
	GoldPercentage float64 `protobuf:"fixed64,3,opt,name=gold_percentage,json=goldPercentage,proto3" json:"gold_percentage,omitempty"`
	// 10. Equity % listed property held
	ListedPropertyPercentage float64 `protobuf:"fixed64,4,opt,name=listed_property_percentage,json=listedPropertyPercentage,proto3" json:"listed_property_percentage,omitempty"`
	// % unlisted property held
	UnlistedPropertyPercentage float64 `protobuf:"fixed64,5,opt,name=unlisted_property_percentage,json=unlistedPropertyPercentage,proto3" json:"unlisted_property_percentage,omitempty"`
}

func (x *RT000NVJ3_Record_EquityInfo) Reset() {
	*x = RT000NVJ3_Record_EquityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_EquityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_EquityInfo) ProtoMessage() {}

func (x *RT000NVJ3_Record_EquityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_EquityInfo.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_EquityInfo) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 8}
}

func (x *RT000NVJ3_Record_EquityInfo) GetPercentAssetsOffBenchmark() float64 {
	if x != nil {
		return x.PercentAssetsOffBenchmark
	}
	return 0
}

func (x *RT000NVJ3_Record_EquityInfo) GetAverageMonthlyCashPercentage() float64 {
	if x != nil {
		return x.AverageMonthlyCashPercentage
	}
	return 0
}

func (x *RT000NVJ3_Record_EquityInfo) GetGoldPercentage() float64 {
	if x != nil {
		return x.GoldPercentage
	}
	return 0
}

func (x *RT000NVJ3_Record_EquityInfo) GetListedPropertyPercentage() float64 {
	if x != nil {
		return x.ListedPropertyPercentage
	}
	return 0
}

func (x *RT000NVJ3_Record_EquityInfo) GetUnlistedPropertyPercentage() float64 {
	if x != nil {
		return x.UnlistedPropertyPercentage
	}
	return 0
}

// Defining Bond Info attributes.
type RT000NVJ3_Record_BondInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 11. Percentage in ILB’s
	IlbsPercentage float64 `protobuf:"fixed64,1,opt,name=ilbs_percentage,json=ilbsPercentage,proto3" json:"ilbs_percentage,omitempty"`
	// 11. Percentage in cash
	CashPercentage float64 `protobuf:"fixed64,2,opt,name=cash_percentage,json=cashPercentage,proto3" json:"cash_percentage,omitempty"`
	// 11. Restrictions ito derivatives
	RestrictionsItoDerivatives string `protobuf:"bytes,3,opt,name=restrictions_ito_derivatives,json=restrictionsItoDerivatives,proto3" json:"restrictions_ito_derivatives,omitempty"`
	// 11. % of assets off benchmark
	BondsPercentAssetsOffBenchmark float64 `protobuf:"fixed64,4,opt,name=bonds_percent_assets_off_benchmark,json=bondsPercentAssetsOffBenchmark,proto3" json:"bonds_percent_assets_off_benchmark,omitempty"`
	// 11. Modified duration limit
	BondsModifiedDurationLimit float64 `protobuf:"fixed64,5,opt,name=bonds_modified_duration_limit,json=bondsModifiedDurationLimit,proto3" json:"bonds_modified_duration_limit,omitempty"`
	// 11. Running yield
	BondsRunningYield float64 `protobuf:"fixed64,6,opt,name=bonds_running_yield,json=bondsRunningYield,proto3" json:"bonds_running_yield,omitempty"`
	// 11. Weighted average term to maturity
	WeightedAverageTtm float64 `protobuf:"fixed64,7,opt,name=weighted_average_ttm,json=weightedAverageTtm,proto3" json:"weighted_average_ttm,omitempty"`
	// 11. Credit spread modified duration
	CreditSpreadModifiedDuration float64 `protobuf:"fixed64,8,opt,name=credit_spread_modified_duration,json=creditSpreadModifiedDuration,proto3" json:"credit_spread_modified_duration,omitempty"`
	// 11. % listed vs unlisted instruments
	ListedVsUnlistedInstruments float64 `protobuf:"fixed64,9,opt,name=listed_vs_unlisted_instruments,json=listedVsUnlistedInstruments,proto3" json:"listed_vs_unlisted_instruments,omitempty"`
	// 11. % of instruments below investment grade
	BelowInvestmentGradePercentage float64 `protobuf:"fixed64,10,opt,name=below_investment_grade_percentage,json=belowInvestmentGradePercentage,proto3" json:"below_investment_grade_percentage,omitempty"`
}

func (x *RT000NVJ3_Record_BondInfo) Reset() {
	*x = RT000NVJ3_Record_BondInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_BondInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_BondInfo) ProtoMessage() {}

func (x *RT000NVJ3_Record_BondInfo) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_BondInfo.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_BondInfo) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 9}
}

func (x *RT000NVJ3_Record_BondInfo) GetIlbsPercentage() float64 {
	if x != nil {
		return x.IlbsPercentage
	}
	return 0
}

func (x *RT000NVJ3_Record_BondInfo) GetCashPercentage() float64 {
	if x != nil {
		return x.CashPercentage
	}
	return 0
}

func (x *RT000NVJ3_Record_BondInfo) GetRestrictionsItoDerivatives() string {
	if x != nil {
		return x.RestrictionsItoDerivatives
	}
	return ""
}

func (x *RT000NVJ3_Record_BondInfo) GetBondsPercentAssetsOffBenchmark() float64 {
	if x != nil {
		return x.BondsPercentAssetsOffBenchmark
	}
	return 0
}

func (x *RT000NVJ3_Record_BondInfo) GetBondsModifiedDurationLimit() float64 {
	if x != nil {
		return x.BondsModifiedDurationLimit
	}
	return 0
}

func (x *RT000NVJ3_Record_BondInfo) GetBondsRunningYield() float64 {
	if x != nil {
		return x.BondsRunningYield
	}
	return 0
}

func (x *RT000NVJ3_Record_BondInfo) GetWeightedAverageTtm() float64 {
	if x != nil {
		return x.WeightedAverageTtm
	}
	return 0
}

func (x *RT000NVJ3_Record_BondInfo) GetCreditSpreadModifiedDuration() float64 {
	if x != nil {
		return x.CreditSpreadModifiedDuration
	}
	return 0
}

func (x *RT000NVJ3_Record_BondInfo) GetListedVsUnlistedInstruments() float64 {
	if x != nil {
		return x.ListedVsUnlistedInstruments
	}
	return 0
}

func (x *RT000NVJ3_Record_BondInfo) GetBelowInvestmentGradePercentage() float64 {
	if x != nil {
		return x.BelowInvestmentGradePercentage
	}
	return 0
}

// Defining Bond Info attributes.
type RT000NVJ3_Record_CashInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 12. CASH - Running yield
	RunningYield float64 `protobuf:"fixed64,1,opt,name=running_yield,json=runningYield,proto3" json:"running_yield,omitempty"`
	// 12. CASH - Weighted average term to maturity
	WeightedAverageTtm float64 `protobuf:"fixed64,2,opt,name=weighted_average_ttm,json=weightedAverageTtm,proto3" json:"weighted_average_ttm,omitempty"`
}

func (x *RT000NVJ3_Record_CashInfo) Reset() {
	*x = RT000NVJ3_Record_CashInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000NVJ3_Record_CashInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000NVJ3_Record_CashInfo) ProtoMessage() {}

func (x *RT000NVJ3_Record_CashInfo) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000NVJ3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000NVJ3_Record_CashInfo.ProtoReflect.Descriptor instead.
func (*RT000NVJ3_Record_CashInfo) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP(), []int{0, 0, 10}
}

func (x *RT000NVJ3_Record_CashInfo) GetRunningYield() float64 {
	if x != nil {
		return x.RunningYield
	}
	return 0
}

func (x *RT000NVJ3_Record_CashInfo) GetWeightedAverageTtm() float64 {
	if x != nil {
		return x.WeightedAverageTtm
	}
	return 0
}

var File_standards_open_v1_RT000NVJ3_proto protoreflect.FileDescriptor

var file_standards_open_v1_RT000NVJ3_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9a, 0x3f, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x12, 0x3d, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0xcd, 0x3e, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x09, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x13, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x69, 0x73, 0x6b,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a,
	0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x52, 0x10, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x10, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x5b, 0x0a,
	0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x11, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6d, 0x0a, 0x15, 0x73, 0x65, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x73, 0x52, 0x14, 0x73, 0x65, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x12, 0x68, 0x0a, 0x14, 0x79, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e,
	0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x59, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x41, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x73, 0x0a, 0x20, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x6d,
	0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x74, 0x6f, 0x70, 0x54, 0x65, 0x6e,
	0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x48, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x7d, 0x0a, 0x1b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e,
	0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x76, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x65, 0x71,
	0x75, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x6f, 0x6e, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x6f, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x4e, 0x56, 0x4a, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x97,
	0x09, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x45,
	0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x6f, 0x6d, 0x65, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x64, 0x6f, 0x6d, 0x65,
	0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x62, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x63, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x64, 0x6f, 0x6d,
	0x65, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x6f, 0x6d, 0x65, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x64, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6d, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x6f, 0x6d, 0x65, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x1d,
	0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69,
	0x63, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x12, 0x35, 0x0a,
	0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x62, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x6d, 0x6f, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6d, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x3b, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x12, 0x43, 0x0a, 0x1f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x67, 0x72,
	0x6f, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc4, 0x10, 0x0a, 0x08, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6d,
	0x65, 0x73, 0x74, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x1b, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x19, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x1c, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x45, 0x71, 0x75,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x42, 0x0a, 0x1d, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x64, 0x6f, 0x6d,
	0x65, 0x73, 0x74, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63,
	0x44, 0x65, 0x62, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x5e, 0x0a, 0x2d, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x62, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x7a, 0x65, 0x72,
	0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x27, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63,
	0x44, 0x65, 0x62, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12,
	0x60, 0x0a, 0x2e, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x62, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x28, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69,
	0x63, 0x44, 0x65, 0x62, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x59, 0x65, 0x61, 0x72,
	0x73, 0x12, 0x62, 0x0a, 0x2f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x65,
	0x62, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x76, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x29, 0x64, 0x6f, 0x6d, 0x65,
	0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x62, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x54, 0x6f, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x2b, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69,
	0x63, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x74, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x26, 0x64, 0x6f, 0x6d, 0x65,
	0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x62, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x59, 0x65, 0x61,
	0x72, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x64,
	0x65, 0x62, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x64, 0x6f, 0x6d,
	0x65, 0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x62, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x24, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x73, 0x68,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x6d, 0x6f, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x49, 0x6d, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x22, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x69, 0x6d, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6d, 0x6d, 0x6f, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x4b, 0x0a, 0x22, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x6d,
	0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x64, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6d, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a,
	0x24, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x6d, 0x6f, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x64, 0x6f, 0x6d,
	0x65, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6d, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x55, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x48,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6d,
	0x65, 0x73, 0x74, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x65,
	0x73, 0x74, 0x69, 0x63, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x62, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d,
	0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x3b, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x1a,
	0x80, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x1a, 0xf8, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x73,
	0x65, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x19, 0x73, 0x65, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x9f, 0x04,
	0x0a, 0x12, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x39, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x32, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69,
	0x63, 0x43, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x56, 0x0a, 0x28, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x24, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x62, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x74, 0x0a, 0x38, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69,
	0x63, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x32, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5b, 0x0a, 0x2b, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x26,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x45, 0x71,
	0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x31, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x2c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0xa4, 0x01, 0x0a, 0x07, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x65, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf9, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xad, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6e, 0x65, 0x77, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0xbd, 0x02, 0x0a, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x66, 0x66, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x61, 0x73, 0x68, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x40, 0x0a, 0x1c, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x1a, 0xe6, 0x04, 0x0a, 0x08, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6c, 0x62, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6c, 0x62, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x73, 0x68,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x40, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x69, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x74, 0x6f, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x5f,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1e, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x4f, 0x66, 0x66, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x41, 0x0a, 0x1d, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x59, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x74, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x74, 0x6d, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x56, 0x73, 0x55, 0x6e, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x49, 0x0a, 0x21, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x62, 0x65, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x61, 0x0a, 0x08, 0x43,
	0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x74, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x74, 0x6d, 0x22, 0x51,
	0x0a, 0x08, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x55,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x52,
	0x55, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x22, 0x69, 0x0a, 0x12, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_standards_open_v1_RT000NVJ3_proto_rawDescOnce sync.Once
	file_standards_open_v1_RT000NVJ3_proto_rawDescData = file_standards_open_v1_RT000NVJ3_proto_rawDesc
)

func file_standards_open_v1_RT000NVJ3_proto_rawDescGZIP() []byte {
	file_standards_open_v1_RT000NVJ3_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_RT000NVJ3_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_RT000NVJ3_proto_rawDescData)
	})
	return file_standards_open_v1_RT000NVJ3_proto_rawDescData
}

var file_standards_open_v1_RT000NVJ3_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_standards_open_v1_RT000NVJ3_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_standards_open_v1_RT000NVJ3_proto_goTypes = []interface{}{
	(RT000NVJ3_Record_FundType)(0),                     // 0: standards.open.v1.RT000NVJ3.Record.FundType
	(RT000NVJ3_Record_RiskClassification)(0),           // 1: standards.open.v1.RT000NVJ3.Record.RiskClassification
	(*RT000NVJ3)(nil),                                  // 2: standards.open.v1.RT000NVJ3
	(*RT000NVJ3_Record)(nil),                           // 3: standards.open.v1.RT000NVJ3.Record
	(*RT000NVJ3_Record_Returns)(nil),                   // 4: standards.open.v1.RT000NVJ3.Record.Returns
	(*RT000NVJ3_Record_Exposure)(nil),                  // 5: standards.open.v1.RT000NVJ3.Record.Exposure
	(*RT000NVJ3_Record_MarketValueInfo)(nil),           // 6: standards.open.v1.RT000NVJ3.Record.MarketValueInfo
	(*RT000NVJ3_Record_SegregatedPortfolios)(nil),      // 7: standards.open.v1.RT000NVJ3.Record.SegregatedPortfolios
	(*RT000NVJ3_Record_YieldsAndDurations)(nil),        // 8: standards.open.v1.RT000NVJ3.Record.YieldsAndDurations
	(*RT000NVJ3_Record_Holding)(nil),                   // 9: standards.open.v1.RT000NVJ3.Record.Holding
	(*RT000NVJ3_Record_MarketValueReconciliation)(nil), // 10: standards.open.v1.RT000NVJ3.Record.MarketValueReconciliation
	(*RT000NVJ3_Record_CompositeReconciliation)(nil),   // 11: standards.open.v1.RT000NVJ3.Record.CompositeReconciliation
	(*RT000NVJ3_Record_EquityInfo)(nil),                // 12: standards.open.v1.RT000NVJ3.Record.EquityInfo
	(*RT000NVJ3_Record_BondInfo)(nil),                  // 13: standards.open.v1.RT000NVJ3.Record.BondInfo
	(*RT000NVJ3_Record_CashInfo)(nil),                  // 14: standards.open.v1.RT000NVJ3.Record.CashInfo
	(*date.Date)(nil),                                  // 15: google.type.Date
}
var file_standards_open_v1_RT000NVJ3_proto_depIdxs = []int32{
	3,  // 0: standards.open.v1.RT000NVJ3.records:type_name -> standards.open.v1.RT000NVJ3.Record
	15, // 1: standards.open.v1.RT000NVJ3.Record.month:type_name -> google.type.Date
	0,  // 2: standards.open.v1.RT000NVJ3.Record.fund_type:type_name -> standards.open.v1.RT000NVJ3.Record.FundType
	1,  // 3: standards.open.v1.RT000NVJ3.Record.risk_classification:type_name -> standards.open.v1.RT000NVJ3.Record.RiskClassification
	4,  // 4: standards.open.v1.RT000NVJ3.Record.portfolio_returns:type_name -> standards.open.v1.RT000NVJ3.Record.Returns
	4,  // 5: standards.open.v1.RT000NVJ3.Record.benchmark_returns:type_name -> standards.open.v1.RT000NVJ3.Record.Returns
	5,  // 6: standards.open.v1.RT000NVJ3.Record.physical_exposure:type_name -> standards.open.v1.RT000NVJ3.Record.Exposure
	5,  // 7: standards.open.v1.RT000NVJ3.Record.effective_exposure:type_name -> standards.open.v1.RT000NVJ3.Record.Exposure
	5,  // 8: standards.open.v1.RT000NVJ3.Record.benchmark_exposure:type_name -> standards.open.v1.RT000NVJ3.Record.Exposure
	6,  // 9: standards.open.v1.RT000NVJ3.Record.market_value_info:type_name -> standards.open.v1.RT000NVJ3.Record.MarketValueInfo
	7,  // 10: standards.open.v1.RT000NVJ3.Record.segregated_portfolios:type_name -> standards.open.v1.RT000NVJ3.Record.SegregatedPortfolios
	8,  // 11: standards.open.v1.RT000NVJ3.Record.yields_and_durations:type_name -> standards.open.v1.RT000NVJ3.Record.YieldsAndDurations
	9,  // 12: standards.open.v1.RT000NVJ3.Record.top_ten_domestic_equity_holdings:type_name -> standards.open.v1.RT000NVJ3.Record.Holding
	10, // 13: standards.open.v1.RT000NVJ3.Record.market_value_reconciliation:type_name -> standards.open.v1.RT000NVJ3.Record.MarketValueReconciliation
	11, // 14: standards.open.v1.RT000NVJ3.Record.composite_reconciliation:type_name -> standards.open.v1.RT000NVJ3.Record.CompositeReconciliation
	12, // 15: standards.open.v1.RT000NVJ3.Record.equity_info:type_name -> standards.open.v1.RT000NVJ3.Record.EquityInfo
	13, // 16: standards.open.v1.RT000NVJ3.Record.bond_info:type_name -> standards.open.v1.RT000NVJ3.Record.BondInfo
	14, // 17: standards.open.v1.RT000NVJ3.Record.cash_info:type_name -> standards.open.v1.RT000NVJ3.Record.CashInfo
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_standards_open_v1_RT000NVJ3_proto_init() }
func file_standards_open_v1_RT000NVJ3_proto_init() {
	if File_standards_open_v1_RT000NVJ3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_Returns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_Exposure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_MarketValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_SegregatedPortfolios); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_YieldsAndDurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_Holding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_MarketValueReconciliation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_CompositeReconciliation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_EquityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_BondInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000NVJ3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000NVJ3_Record_CashInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_RT000NVJ3_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_RT000NVJ3_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_RT000NVJ3_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_RT000NVJ3_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_RT000NVJ3_proto_msgTypes,
	}.Build()
	File_standards_open_v1_RT000NVJ3_proto = out.File
	file_standards_open_v1_RT000NVJ3_proto_rawDesc = nil
	file_standards_open_v1_RT000NVJ3_proto_goTypes = nil
	file_standards_open_v1_RT000NVJ3_proto_depIdxs = nil
}
