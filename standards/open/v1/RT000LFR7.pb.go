// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/RT000LFR7.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	_ "google.golang.org/genproto/googleapis/type/month"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of metricIDs
type RT000LFR7_Metric_MetricID int32

const (
	// The enumeration of the metrics measured
	RT000LFR7_Metric_METRIC_ID_UNSPECIFIED RT000LFR7_Metric_MetricID = 0
	// Number of NAVs calculated during the month
	RT000LFR7_Metric_NAVS_CALCULATED RT000LFR7_Metric_MetricID = 1
	// Count of the number of delays in the period caused by the provider
	RT000LFR7_Metric_NAVS_PROVIDER_DELAYED RT000LFR7_Metric_MetricID = 2
	// Count of the number of delays in the period not caused by the provider
	RT000LFR7_Metric_NAVS_NON_PROVIDER_DELAYED RT000LFR7_Metric_MetricID = 3
	// Percentage of total NAVs delivered within the agreed timescale during the reporting month.
	// NAV_TIMELINESS should equal  1- (NAVS_PROVIDER_DELAYED + NAVS_NON_PROVIDER_DELAYED) / NAVS_CALCULATED
	// in a period
	RT000LFR7_Metric_NAV_TIMELINESS RT000LFR7_Metric_MetricID = 4
	// Percentage of total NAVs delivered within the agreed timescale during the reporting month,
	// excluding non-provider caused delays.
	// NAVS_TIMELINESS_PROVIDER should equal 1 - (NAVS_PROVIDER_DELAYED / NAVS_CALCULATED)
	RT000LFR7_Metric_NAV_TIMELINESS_PROVIDER RT000LFR7_Metric_MetricID = 5
	// Percentage of valuations produced during the reporting month where no error(s) has been identified.
	RT000LFR7_Metric_NAV_ACCURACY RT000LFR7_Metric_MetricID = 6
	// Percentage of valuations produced during the reporting month where no error(s) has been identified.
	// This percentage is not impacted by errors where the root cause was identified as not the delegate.
	RT000LFR7_Metric_NAV_ACCURACY_PROVIDER RT000LFR7_Metric_MetricID = 7
	// The count of material nav errors where the delegate was responsible
	RT000LFR7_Metric_NAV_ERRORS_MATERIAL_PROVIDER RT000LFR7_Metric_MetricID = 8
	// The count of material nav errors where the delegate was not responsible
	RT000LFR7_Metric_NAV_ERRORS_MATERIAL_NON_PROVIDER RT000LFR7_Metric_MetricID = 9
	// The count of material nav errors where the delegate was responsible
	RT000LFR7_Metric_NAV_ERRORS_NON_MATERIAL_PROVIDER RT000LFR7_Metric_MetricID = 10
	// The count of material nav errors where the delegate was not responsible
	RT000LFR7_Metric_NAV_ERRORS_NON_MATERIAL_NON_PROVIDER RT000LFR7_Metric_MetricID = 11
	// The number of securities for which there has not been a price movement for an agreed number of consecutive business days.
	RT000LFR7_Metric_STALE_SECURITIES RT000LFR7_Metric_MetricID = 12
	// Total number of
	// Number of cash reconciliations reported between 31 to 60 days
	RT000LFR7_Metric_CASH_RECONCILIATIONS_31_TO_60_DAYS RT000LFR7_Metric_MetricID = 13
	// Number of cash reconciliations reported greater than or equal to 61 days
	RT000LFR7_Metric_CASH_RECONCILIATIONS_GREATER_THAN_60_DAYS RT000LFR7_Metric_MetricID = 14
	// Number of stock reconciliations reported between 31 to 60 days
	RT000LFR7_Metric_STOCK_RECONCILIATIONS_31_TO_60_DAYS RT000LFR7_Metric_MetricID = 15
	// Number of stock reconciliations reported greater than or equal to 61 days
	RT000LFR7_Metric_STOCK_RECONCILIATIONS_GREATER_THAN_60_DAYS RT000LFR7_Metric_MetricID = 16
	// The count of system issues that occurred during the period
	RT000LFR7_Metric_COUNT_SYSTEM_ISSUES RT000LFR7_Metric_MetricID = 17
	// The number of late financial reports
	RT000LFR7_Metric_NUMBER_LATE_FINANCIAL_REPORTS RT000LFR7_Metric_MetricID = 18
	// The net asset value at the end of the period in reporting currency
	RT000LFR7_Metric_NET_ASSET_VALUE_REPORTING_CURRENCY RT000LFR7_Metric_MetricID = 19
	// The net asset value at the end of the period in subject currency
	RT000LFR7_Metric_NET_ASSET_VALUE_SUBJECT_CURRENCY RT000LFR7_Metric_MetricID = 20
	// A security is considered difficult to price when (a) the security is fair-valued, (b) there is a single broker price, (d) stale or unchanged price, (d) it is suspended or delisted, (e) distressed fixed income, (f) defaulted fixed income as of the reporting date
	RT000LFR7_Metric_DIFFICULT_TO_PRICE_SECURITIES RT000LFR7_Metric_MetricID = 21
	// Number of securities where trading has been stopped as of the reporting date
	RT000LFR7_Metric_SUSPENDED_OR_DELISTED_SECURITIES RT000LFR7_Metric_MetricID = 22
	// Number of fixed income securities where the company or government entity is experiencing financial or operational distress, but has not defaulted as of the reporting date
	RT000LFR7_Metric_DISTRESSED_FIXED_INCOME_SECURITIES RT000LFR7_Metric_MetricID = 23
	// Number of fixed income securities where the company or government entity has defaulted as of the reporting date
	RT000LFR7_Metric_DEFAULTED_FIXED_INCOME_SECURITIES RT000LFR7_Metric_MetricID = 24
	// The number of securities held across portfolios
	RT000LFR7_Metric_SECURITIES_HELD RT000LFR7_Metric_MetricID = 25
	// The annualized TER for the reporting period
	RT000LFR7_Metric_ANNUALIZED_TER RT000LFR7_Metric_MetricID = 26
	// The annualized TER, year-to-date, as of the end of the reporting period
	RT000LFR7_Metric_ANNUALIZED_YTD_TER RT000LFR7_Metric_MetricID = 27
	// The self-assessment rating (typically on a scale of 1 - below expectations to 9 - well above expectations)
	RT000LFR7_Metric_PROVIDER_SELF_ASSESSMENT RT000LFR7_Metric_MetricID = 28
	// The service assessment rating (typically on a scale of 1 - below expectations to 9 - well above expectations)
	RT000LFR7_Metric_CUSTOMER_SERVICE_ASSESSMENT RT000LFR7_Metric_MetricID = 29
	// The number of nav delays caused by pricing
	RT000LFR7_Metric_NAV_DELAYS_PRICING RT000LFR7_Metric_MetricID = 30
	// The total number of nav delays
	RT000LFR7_Metric_NAV_DELAYS_TOTAL RT000LFR7_Metric_MetricID = 31
	// The total number of nav delays caused by trade inputs
	RT000LFR7_Metric_NAV_DELAYS_TRADE_INPUT RT000LFR7_Metric_MetricID = 32
	// The total number of nav delays caused by FX
	RT000LFR7_Metric_NAV_DELAYS_FX RT000LFR7_Metric_MetricID = 33
	// The total number of nav delays caused by cash income
	RT000LFR7_Metric_NAV_DELAYS_CASH_INCOME RT000LFR7_Metric_MetricID = 34
	// The total number of nav delays caused by corporate actions
	RT000LFR7_Metric_NAV_DELAYS_CORPORATE_ACTIONS RT000LFR7_Metric_MetricID = 35
	// The total number of nav delays caused by valuation validation
	RT000LFR7_Metric_NAV_DELAYS_VALUATION_VALIDATION RT000LFR7_Metric_MetricID = 36
	// The total number of nav delays caused by quality control
	RT000LFR7_Metric_NAV_DELAYS_QUALITY_CONTROL RT000LFR7_Metric_MetricID = 37
	// The total number of nav delays caused by system issues
	RT000LFR7_Metric_NAV_DELAYS_SYSTEM RT000LFR7_Metric_MetricID = 38
	// The total number of nav delays caused by client or third party
	RT000LFR7_Metric_NAV_DELAYS_CLIENT_OR_THIRD_PARTY RT000LFR7_Metric_MetricID = 39
	// The total number of nav delays caused by other causes
	RT000LFR7_Metric_NAV_DELAYS_OTHER RT000LFR7_Metric_MetricID = 40
	// The number of funds impacted by provider errors errors
	RT000LFR7_Metric_FUNDS_IMPACTED_BY_PROVIDER_ERRORS RT000LFR7_Metric_MetricID = 41
	// The number of funds impacted by provider errors errors
	RT000LFR7_Metric_FUNDS_IMPACTED_BY_PROVIDER_NON_PROVIDER_ERRORS RT000LFR7_Metric_MetricID = 42
	// The number of valuations impacted by provider errors
	RT000LFR7_Metric_VALUATIONS_IMPACTED_PROVIDER_ERRORS RT000LFR7_Metric_MetricID = 43
	// The number of valuations impacted by non-provider errors
	RT000LFR7_Metric_VALUATIONS_IMPACTED_NON_PROVIDER_ERRORS RT000LFR7_Metric_MetricID = 44
	// The number of valuations impacted in the current reporting period by provider errors
	RT000LFR7_Metric_VALUATIONS_IMPACTED_CURRENT_REPORTING_PERIOD_PROVIDER_ERRORS RT000LFR7_Metric_MetricID = 45
	// The number of valuations impacted in the current reporting period by non-provider errors
	RT000LFR7_Metric_VALUATIONS_IMPACTED_CURRENT_REPORTING_PERIOD_NON_PROVIDER_ERRORS RT000LFR7_Metric_MetricID = 46
	// The number of materially impacted valuations
	RT000LFR7_Metric_MATERIALLY_IMPACTED_VALUATIONS_PROVIDER_ERROR RT000LFR7_Metric_MetricID = 47
)

// Enum value maps for RT000LFR7_Metric_MetricID.
var (
	RT000LFR7_Metric_MetricID_name = map[int32]string{
		0:  "METRIC_ID_UNSPECIFIED",
		1:  "NAVS_CALCULATED",
		2:  "NAVS_PROVIDER_DELAYED",
		3:  "NAVS_NON_PROVIDER_DELAYED",
		4:  "NAV_TIMELINESS",
		5:  "NAV_TIMELINESS_PROVIDER",
		6:  "NAV_ACCURACY",
		7:  "NAV_ACCURACY_PROVIDER",
		8:  "NAV_ERRORS_MATERIAL_PROVIDER",
		9:  "NAV_ERRORS_MATERIAL_NON_PROVIDER",
		10: "NAV_ERRORS_NON_MATERIAL_PROVIDER",
		11: "NAV_ERRORS_NON_MATERIAL_NON_PROVIDER",
		12: "STALE_SECURITIES",
		13: "CASH_RECONCILIATIONS_31_TO_60_DAYS",
		14: "CASH_RECONCILIATIONS_GREATER_THAN_60_DAYS",
		15: "STOCK_RECONCILIATIONS_31_TO_60_DAYS",
		16: "STOCK_RECONCILIATIONS_GREATER_THAN_60_DAYS",
		17: "COUNT_SYSTEM_ISSUES",
		18: "NUMBER_LATE_FINANCIAL_REPORTS",
		19: "NET_ASSET_VALUE_REPORTING_CURRENCY",
		20: "NET_ASSET_VALUE_SUBJECT_CURRENCY",
		21: "DIFFICULT_TO_PRICE_SECURITIES",
		22: "SUSPENDED_OR_DELISTED_SECURITIES",
		23: "DISTRESSED_FIXED_INCOME_SECURITIES",
		24: "DEFAULTED_FIXED_INCOME_SECURITIES",
		25: "SECURITIES_HELD",
		26: "ANNUALIZED_TER",
		27: "ANNUALIZED_YTD_TER",
		28: "PROVIDER_SELF_ASSESSMENT",
		29: "CUSTOMER_SERVICE_ASSESSMENT",
		30: "NAV_DELAYS_PRICING",
		31: "NAV_DELAYS_TOTAL",
		32: "NAV_DELAYS_TRADE_INPUT",
		33: "NAV_DELAYS_FX",
		34: "NAV_DELAYS_CASH_INCOME",
		35: "NAV_DELAYS_CORPORATE_ACTIONS",
		36: "NAV_DELAYS_VALUATION_VALIDATION",
		37: "NAV_DELAYS_QUALITY_CONTROL",
		38: "NAV_DELAYS_SYSTEM",
		39: "NAV_DELAYS_CLIENT_OR_THIRD_PARTY",
		40: "NAV_DELAYS_OTHER",
		41: "FUNDS_IMPACTED_BY_PROVIDER_ERRORS",
		42: "FUNDS_IMPACTED_BY_PROVIDER_NON_PROVIDER_ERRORS",
		43: "VALUATIONS_IMPACTED_PROVIDER_ERRORS",
		44: "VALUATIONS_IMPACTED_NON_PROVIDER_ERRORS",
		45: "VALUATIONS_IMPACTED_CURRENT_REPORTING_PERIOD_PROVIDER_ERRORS",
		46: "VALUATIONS_IMPACTED_CURRENT_REPORTING_PERIOD_NON_PROVIDER_ERRORS",
		47: "MATERIALLY_IMPACTED_VALUATIONS_PROVIDER_ERROR",
	}
	RT000LFR7_Metric_MetricID_value = map[string]int32{
		"METRIC_ID_UNSPECIFIED":                                            0,
		"NAVS_CALCULATED":                                                  1,
		"NAVS_PROVIDER_DELAYED":                                            2,
		"NAVS_NON_PROVIDER_DELAYED":                                        3,
		"NAV_TIMELINESS":                                                   4,
		"NAV_TIMELINESS_PROVIDER":                                          5,
		"NAV_ACCURACY":                                                     6,
		"NAV_ACCURACY_PROVIDER":                                            7,
		"NAV_ERRORS_MATERIAL_PROVIDER":                                     8,
		"NAV_ERRORS_MATERIAL_NON_PROVIDER":                                 9,
		"NAV_ERRORS_NON_MATERIAL_PROVIDER":                                 10,
		"NAV_ERRORS_NON_MATERIAL_NON_PROVIDER":                             11,
		"STALE_SECURITIES":                                                 12,
		"CASH_RECONCILIATIONS_31_TO_60_DAYS":                               13,
		"CASH_RECONCILIATIONS_GREATER_THAN_60_DAYS":                        14,
		"STOCK_RECONCILIATIONS_31_TO_60_DAYS":                              15,
		"STOCK_RECONCILIATIONS_GREATER_THAN_60_DAYS":                       16,
		"COUNT_SYSTEM_ISSUES":                                              17,
		"NUMBER_LATE_FINANCIAL_REPORTS":                                    18,
		"NET_ASSET_VALUE_REPORTING_CURRENCY":                               19,
		"NET_ASSET_VALUE_SUBJECT_CURRENCY":                                 20,
		"DIFFICULT_TO_PRICE_SECURITIES":                                    21,
		"SUSPENDED_OR_DELISTED_SECURITIES":                                 22,
		"DISTRESSED_FIXED_INCOME_SECURITIES":                               23,
		"DEFAULTED_FIXED_INCOME_SECURITIES":                                24,
		"SECURITIES_HELD":                                                  25,
		"ANNUALIZED_TER":                                                   26,
		"ANNUALIZED_YTD_TER":                                               27,
		"PROVIDER_SELF_ASSESSMENT":                                         28,
		"CUSTOMER_SERVICE_ASSESSMENT":                                      29,
		"NAV_DELAYS_PRICING":                                               30,
		"NAV_DELAYS_TOTAL":                                                 31,
		"NAV_DELAYS_TRADE_INPUT":                                           32,
		"NAV_DELAYS_FX":                                                    33,
		"NAV_DELAYS_CASH_INCOME":                                           34,
		"NAV_DELAYS_CORPORATE_ACTIONS":                                     35,
		"NAV_DELAYS_VALUATION_VALIDATION":                                  36,
		"NAV_DELAYS_QUALITY_CONTROL":                                       37,
		"NAV_DELAYS_SYSTEM":                                                38,
		"NAV_DELAYS_CLIENT_OR_THIRD_PARTY":                                 39,
		"NAV_DELAYS_OTHER":                                                 40,
		"FUNDS_IMPACTED_BY_PROVIDER_ERRORS":                                41,
		"FUNDS_IMPACTED_BY_PROVIDER_NON_PROVIDER_ERRORS":                   42,
		"VALUATIONS_IMPACTED_PROVIDER_ERRORS":                              43,
		"VALUATIONS_IMPACTED_NON_PROVIDER_ERRORS":                          44,
		"VALUATIONS_IMPACTED_CURRENT_REPORTING_PERIOD_PROVIDER_ERRORS":     45,
		"VALUATIONS_IMPACTED_CURRENT_REPORTING_PERIOD_NON_PROVIDER_ERRORS": 46,
		"MATERIALLY_IMPACTED_VALUATIONS_PROVIDER_ERROR":                    47,
	}
)

func (x RT000LFR7_Metric_MetricID) Enum() *RT000LFR7_Metric_MetricID {
	p := new(RT000LFR7_Metric_MetricID)
	*p = x
	return p
}

func (x RT000LFR7_Metric_MetricID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000LFR7_Metric_MetricID) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000LFR7_proto_enumTypes[0].Descriptor()
}

func (RT000LFR7_Metric_MetricID) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000LFR7_proto_enumTypes[0]
}

func (x RT000LFR7_Metric_MetricID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000LFR7_Metric_MetricID.Descriptor instead.
func (RT000LFR7_Metric_MetricID) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000LFR7_proto_rawDescGZIP(), []int{0, 0, 0}
}

// The type of value used to measure the metric
type RT000LFR7_Metric_ValueType int32

const (
	RT000LFR7_Metric_METRIC_TYPE_UNSPECIFIED RT000LFR7_Metric_ValueType = 0
	RT000LFR7_Metric_NUMBER                  RT000LFR7_Metric_ValueType = 1
	RT000LFR7_Metric_PERCENTAGE              RT000LFR7_Metric_ValueType = 2
	RT000LFR7_Metric_CURRENCY                RT000LFR7_Metric_ValueType = 3
)

// Enum value maps for RT000LFR7_Metric_ValueType.
var (
	RT000LFR7_Metric_ValueType_name = map[int32]string{
		0: "METRIC_TYPE_UNSPECIFIED",
		1: "NUMBER",
		2: "PERCENTAGE",
		3: "CURRENCY",
	}
	RT000LFR7_Metric_ValueType_value = map[string]int32{
		"METRIC_TYPE_UNSPECIFIED": 0,
		"NUMBER":                  1,
		"PERCENTAGE":              2,
		"CURRENCY":                3,
	}
)

func (x RT000LFR7_Metric_ValueType) Enum() *RT000LFR7_Metric_ValueType {
	p := new(RT000LFR7_Metric_ValueType)
	*p = x
	return p
}

func (x RT000LFR7_Metric_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000LFR7_Metric_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000LFR7_proto_enumTypes[1].Descriptor()
}

func (RT000LFR7_Metric_ValueType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000LFR7_proto_enumTypes[1]
}

func (x RT000LFR7_Metric_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000LFR7_Metric_ValueType.Descriptor instead.
func (RT000LFR7_Metric_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000LFR7_proto_rawDescGZIP(), []int{0, 0, 1}
}

// Options for how to evaluate the metric
type RT000LFR7_Metric_EvaluationType int32

const (
	RT000LFR7_Metric_EVALUATION_TYPE_UNSPECIFIED RT000LFR7_Metric_EvaluationType = 0
	// A higher result is more favorable
	RT000LFR7_Metric_MAXIMISE RT000LFR7_Metric_EvaluationType = 1
	// A lower result is more favorable
	RT000LFR7_Metric_MINIMISE RT000LFR7_Metric_EvaluationType = 2
)

// Enum value maps for RT000LFR7_Metric_EvaluationType.
var (
	RT000LFR7_Metric_EvaluationType_name = map[int32]string{
		0: "EVALUATION_TYPE_UNSPECIFIED",
		1: "MAXIMISE",
		2: "MINIMISE",
	}
	RT000LFR7_Metric_EvaluationType_value = map[string]int32{
		"EVALUATION_TYPE_UNSPECIFIED": 0,
		"MAXIMISE":                    1,
		"MINIMISE":                    2,
	}
)

func (x RT000LFR7_Metric_EvaluationType) Enum() *RT000LFR7_Metric_EvaluationType {
	p := new(RT000LFR7_Metric_EvaluationType)
	*p = x
	return p
}

func (x RT000LFR7_Metric_EvaluationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000LFR7_Metric_EvaluationType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000LFR7_proto_enumTypes[2].Descriptor()
}

func (RT000LFR7_Metric_EvaluationType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000LFR7_proto_enumTypes[2]
}

func (x RT000LFR7_Metric_EvaluationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000LFR7_Metric_EvaluationType.Descriptor instead.
func (RT000LFR7_Metric_EvaluationType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000LFR7_proto_rawDescGZIP(), []int{0, 0, 2}
}

// UCITS Fund Accounting KPI and MI Data Exchange Template
type RT000LFR7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KPIs & other key quantitative metrics
	Metrics []*RT000LFR7_Metric `protobuf:"bytes,20,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *RT000LFR7) Reset() {
	*x = RT000LFR7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000LFR7_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000LFR7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000LFR7) ProtoMessage() {}

func (x *RT000LFR7) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000LFR7_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000LFR7.ProtoReflect.Descriptor instead.
func (*RT000LFR7) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000LFR7_proto_rawDescGZIP(), []int{0}
}

func (x *RT000LFR7) GetMetrics() []*RT000LFR7_Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Definition of a metric
type RT000LFR7_Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date the metric was produced
	ProductionDate *date.Date `protobuf:"bytes,1,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
	// The start date of the reporting period of the metric (inclusive)
	// For example, if the metric measures data for the month of December 2022, 2022-12-01
	ReportingPeriodStart *date.Date `protobuf:"bytes,2,opt,name=reporting_period_start,json=reportingPeriodStart,proto3" json:"reporting_period_start,omitempty"`
	// The end date of the reporting period of the metric (inclusive)
	// For example, if the metric measures data for the month of December 2022, 2022-12-01
	ReportingPeriodEnd *date.Date `protobuf:"bytes,3,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
	// The relevant identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,4,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,5,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The relevant identifier of the fund
	FundIdentifier string `protobuf:"bytes,6,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,7,opt,name=fund,proto3" json:"fund,omitempty"`
	// The identifier of what the metric measures
	MetricId RT000LFR7_Metric_MetricID `protobuf:"varint,8,opt,name=metric_id,json=metricId,proto3,enum=standards.open.v1.RT000LFR7_Metric_MetricID" json:"metric_id,omitempty"`
	// Enumeration for how to interpret the metric value
	ValueType RT000LFR7_Metric_ValueType `protobuf:"varint,9,opt,name=value_type,json=valueType,proto3,enum=standards.open.v1.RT000LFR7_Metric_ValueType" json:"value_type,omitempty"`
	// If the metric type is "CURRENCY" then a 3-letter currency code defined in ISO 4217 must be provided.
	// The country code is required to comply with the 3-letter ISO 3166-1 alpha-3 standard.
	// The ISO 3166-1 alpha-3 is a set of 3-letter country codes to represent countries and dependent areas.
	// Make sure the provided country code is in uppercase.
	// Example: 'USA' for the United States, 'GBR' for Great Britain, 'DEU' for Germany, etc.
	CurrencyCode string `protobuf:"bytes,10,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// The value of the metric
	Metric float64 `protobuf:"fixed64,11,opt,name=metric,proto3" json:"metric,omitempty"`
	// How to evaluate the metric (i.e. is a higher or lower value more favorable)
	EvaluationType RT000LFR7_Metric_EvaluationType `protobuf:"varint,12,opt,name=evaluation_type,json=evaluationType,proto3,enum=standards.open.v1.RT000LFR7_Metric_EvaluationType" json:"evaluation_type,omitempty"`
	// The "RED/AMBER/GREEN" designation if applicable
	Rag RedAmberGreen `protobuf:"varint,13,opt,name=rag,proto3,enum=standards.open.v1.RedAmberGreen" json:"rag,omitempty"`
	// The amber cutoff (i.e. the value above which the metric is no longer classified as "RED") if applicable
	AmberCutoff float64 `protobuf:"fixed64,14,opt,name=amber_cutoff,json=amberCutoff,proto3" json:"amber_cutoff,omitempty"`
	// The green cutoff (i.e. the value above which the metric is no longer classified as "AMBER")  if applicable
	GreenCutoff float64 `protobuf:"fixed64,15,opt,name=green_cutoff,json=greenCutoff,proto3" json:"green_cutoff,omitempty"`
	// Optional. The name of the provider
	Provider string `protobuf:"bytes,20,opt,name=provider,proto3" json:"provider,omitempty"`
	// Optional. The metric ID used by the provider
	ProviderMetricId string `protobuf:"bytes,21,opt,name=provider_metric_id,json=providerMetricId,proto3" json:"provider_metric_id,omitempty"`
	// Optional. The KPI name used by the provider
	ProviderMetricName string `protobuf:"bytes,22,opt,name=provider_metric_name,json=providerMetricName,proto3" json:"provider_metric_name,omitempty"`
	// Optional. General comments related to the metric
	GeneralCommentary string `protobuf:"bytes,81,opt,name=general_commentary,json=generalCommentary,proto3" json:"general_commentary,omitempty"`
	// Optional. Comments on the root cause of any issue
	RootCauseCommentary string `protobuf:"bytes,82,opt,name=root_cause_commentary,json=rootCauseCommentary,proto3" json:"root_cause_commentary,omitempty"`
	// Optional. Comments on the actions taken to remediate the root cause
	RemediationsCommentary string `protobuf:"bytes,83,opt,name=remediations_commentary,json=remediationsCommentary,proto3" json:"remediations_commentary,omitempty"`
}

func (x *RT000LFR7_Metric) Reset() {
	*x = RT000LFR7_Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000LFR7_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000LFR7_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000LFR7_Metric) ProtoMessage() {}

func (x *RT000LFR7_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000LFR7_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000LFR7_Metric.ProtoReflect.Descriptor instead.
func (*RT000LFR7_Metric) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000LFR7_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000LFR7_Metric) GetProductionDate() *date.Date {
	if x != nil {
		return x.ProductionDate
	}
	return nil
}

func (x *RT000LFR7_Metric) GetReportingPeriodStart() *date.Date {
	if x != nil {
		return x.ReportingPeriodStart
	}
	return nil
}

func (x *RT000LFR7_Metric) GetReportingPeriodEnd() *date.Date {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return nil
}

func (x *RT000LFR7_Metric) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000LFR7_Metric) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000LFR7_Metric) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000LFR7_Metric) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000LFR7_Metric) GetMetricId() RT000LFR7_Metric_MetricID {
	if x != nil {
		return x.MetricId
	}
	return RT000LFR7_Metric_METRIC_ID_UNSPECIFIED
}

func (x *RT000LFR7_Metric) GetValueType() RT000LFR7_Metric_ValueType {
	if x != nil {
		return x.ValueType
	}
	return RT000LFR7_Metric_METRIC_TYPE_UNSPECIFIED
}

func (x *RT000LFR7_Metric) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *RT000LFR7_Metric) GetMetric() float64 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *RT000LFR7_Metric) GetEvaluationType() RT000LFR7_Metric_EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return RT000LFR7_Metric_EVALUATION_TYPE_UNSPECIFIED
}

func (x *RT000LFR7_Metric) GetRag() RedAmberGreen {
	if x != nil {
		return x.Rag
	}
	return RedAmberGreen_RAG_UNSPECIFIED
}

func (x *RT000LFR7_Metric) GetAmberCutoff() float64 {
	if x != nil {
		return x.AmberCutoff
	}
	return 0
}

func (x *RT000LFR7_Metric) GetGreenCutoff() float64 {
	if x != nil {
		return x.GreenCutoff
	}
	return 0
}

func (x *RT000LFR7_Metric) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RT000LFR7_Metric) GetProviderMetricId() string {
	if x != nil {
		return x.ProviderMetricId
	}
	return ""
}

func (x *RT000LFR7_Metric) GetProviderMetricName() string {
	if x != nil {
		return x.ProviderMetricName
	}
	return ""
}

func (x *RT000LFR7_Metric) GetGeneralCommentary() string {
	if x != nil {
		return x.GeneralCommentary
	}
	return ""
}

func (x *RT000LFR7_Metric) GetRootCauseCommentary() string {
	if x != nil {
		return x.RootCauseCommentary
	}
	return ""
}

func (x *RT000LFR7_Metric) GetRemediationsCommentary() string {
	if x != nil {
		return x.RemediationsCommentary
	}
	return ""
}

var File_standards_open_v1_RT000LFR7_proto protoreflect.FileDescriptor

var file_standards_open_v1_RT000LFR7_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4c, 0x46, 0x52, 0x37, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x17, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x4c, 0x46, 0x52, 0x37, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4c,
	0x46, 0x52, 0x37, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x1a, 0xca, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3a,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x16, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x14, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72,
	0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72,
	0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65,
	0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x75, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x4c, 0x46, 0x52, 0x37, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x49, 0x44, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4c, 0x46, 0x52,
	0x37, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x5b, 0x0a, 0x0f, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x4c, 0x46, 0x52,
	0x37, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x72, 0x61, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x41, 0x6d, 0x62, 0x65,
	0x72, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x03, 0x72, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x12, 0x37, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x22, 0xf1, 0x0c, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x41, 0x56, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x56, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x41, 0x56, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x56, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x41, 0x56, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x41, 0x56, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43,
	0x59, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x56, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52,
	0x41, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x20,
	0x0a, 0x1c, 0x4e, 0x41, 0x56, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x5f, 0x4d, 0x41, 0x54,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x08,
	0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41, 0x56, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x5f, 0x4d,
	0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41, 0x56, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24,
	0x4e, 0x41, 0x56, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4d,
	0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22,
	0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x33, 0x31, 0x5f, 0x54, 0x4f, 0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41,
	0x59, 0x53, 0x10, 0x0d, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41, 0x59,
	0x53, 0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x33, 0x31, 0x5f,
	0x54, 0x4f, 0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x53, 0x53,
	0x55, 0x45, 0x53, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x4c, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x5f,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x13,
	0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x14, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43,
	0x55, 0x4c, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x15, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x16, 0x12,
	0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x54, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x49,
	0x58, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x18, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x4c,
	0x44, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x5f, 0x54, 0x45, 0x52, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4e, 0x4e, 0x55, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x59, 0x54, 0x44, 0x5f, 0x54, 0x45, 0x52, 0x10, 0x1b, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x46,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1d, 0x12, 0x16,
	0x0a, 0x12, 0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x49, 0x4e, 0x47, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x1f, 0x12, 0x1a, 0x0a, 0x16,
	0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x56, 0x5f,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x58, 0x10, 0x21, 0x12, 0x1a, 0x0a, 0x16, 0x4e,
	0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x49,
	0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x22, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x41, 0x56, 0x5f, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x23, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x41, 0x56,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x1e,
	0x0a, 0x1a, 0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x25, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x10, 0x26, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x53, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x54, 0x48,
	0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x4e,
	0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x28, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x29, 0x12, 0x32, 0x0a, 0x2e, 0x46, 0x55, 0x4e, 0x44,
	0x53, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x2a, 0x12, 0x27, 0x0a, 0x23,
	0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x10, 0x2b, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53,
	0x10, 0x2c, 0x12, 0x40, 0x0a, 0x3c, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x53, 0x10, 0x2d, 0x12, 0x44, 0x0a, 0x40, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x2e, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x41,
	0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x45,
	0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x2f, 0x22, 0x52, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x03, 0x22, 0x4d, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x49, 0x53, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x02,
	0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_standards_open_v1_RT000LFR7_proto_rawDescOnce sync.Once
	file_standards_open_v1_RT000LFR7_proto_rawDescData = file_standards_open_v1_RT000LFR7_proto_rawDesc
)

func file_standards_open_v1_RT000LFR7_proto_rawDescGZIP() []byte {
	file_standards_open_v1_RT000LFR7_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_RT000LFR7_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_RT000LFR7_proto_rawDescData)
	})
	return file_standards_open_v1_RT000LFR7_proto_rawDescData
}

var file_standards_open_v1_RT000LFR7_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_standards_open_v1_RT000LFR7_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_standards_open_v1_RT000LFR7_proto_goTypes = []interface{}{
	(RT000LFR7_Metric_MetricID)(0),       // 0: standards.open.v1.RT000LFR7.Metric.MetricID
	(RT000LFR7_Metric_ValueType)(0),      // 1: standards.open.v1.RT000LFR7.Metric.ValueType
	(RT000LFR7_Metric_EvaluationType)(0), // 2: standards.open.v1.RT000LFR7.Metric.EvaluationType
	(*RT000LFR7)(nil),                    // 3: standards.open.v1.RT000LFR7
	(*RT000LFR7_Metric)(nil),             // 4: standards.open.v1.RT000LFR7.Metric
	(*date.Date)(nil),                    // 5: google.type.Date
	(RedAmberGreen)(0),                   // 6: standards.open.v1.RedAmberGreen
}
var file_standards_open_v1_RT000LFR7_proto_depIdxs = []int32{
	4, // 0: standards.open.v1.RT000LFR7.metrics:type_name -> standards.open.v1.RT000LFR7.Metric
	5, // 1: standards.open.v1.RT000LFR7.Metric.production_date:type_name -> google.type.Date
	5, // 2: standards.open.v1.RT000LFR7.Metric.reporting_period_start:type_name -> google.type.Date
	5, // 3: standards.open.v1.RT000LFR7.Metric.reporting_period_end:type_name -> google.type.Date
	0, // 4: standards.open.v1.RT000LFR7.Metric.metric_id:type_name -> standards.open.v1.RT000LFR7.Metric.MetricID
	1, // 5: standards.open.v1.RT000LFR7.Metric.value_type:type_name -> standards.open.v1.RT000LFR7.Metric.ValueType
	2, // 6: standards.open.v1.RT000LFR7.Metric.evaluation_type:type_name -> standards.open.v1.RT000LFR7.Metric.EvaluationType
	6, // 7: standards.open.v1.RT000LFR7.Metric.rag:type_name -> standards.open.v1.RedAmberGreen
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_standards_open_v1_RT000LFR7_proto_init() }
func file_standards_open_v1_RT000LFR7_proto_init() {
	if File_standards_open_v1_RT000LFR7_proto != nil {
		return
	}
	file_standards_open_v1_rag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_RT000LFR7_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000LFR7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000LFR7_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000LFR7_Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_RT000LFR7_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_RT000LFR7_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_RT000LFR7_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_RT000LFR7_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_RT000LFR7_proto_msgTypes,
	}.Build()
	File_standards_open_v1_RT000LFR7_proto = out.File
	file_standards_open_v1_RT000LFR7_proto_rawDesc = nil
	file_standards_open_v1_RT000LFR7_proto_goTypes = nil
	file_standards_open_v1_RT000LFR7_proto_depIdxs = nil
}
