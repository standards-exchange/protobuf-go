// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/metric.proto

package v1

import (
	month "google.golang.org/genproto/googleapis/type/month"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of the metric
type MonthlyRAGMetric_MetricType int32

const (
	MonthlyRAGMetric_METRIC_TYPE_UNSPECIFIED MonthlyRAGMetric_MetricType = 0
	MonthlyRAGMetric_COUNT                   MonthlyRAGMetric_MetricType = 1
	MonthlyRAGMetric_PERCENTAGE              MonthlyRAGMetric_MetricType = 2
	MonthlyRAGMetric_MONEY                   MonthlyRAGMetric_MetricType = 3
)

// Enum value maps for MonthlyRAGMetric_MetricType.
var (
	MonthlyRAGMetric_MetricType_name = map[int32]string{
		0: "METRIC_TYPE_UNSPECIFIED",
		1: "COUNT",
		2: "PERCENTAGE",
		3: "MONEY",
	}
	MonthlyRAGMetric_MetricType_value = map[string]int32{
		"METRIC_TYPE_UNSPECIFIED": 0,
		"COUNT":                   1,
		"PERCENTAGE":              2,
		"MONEY":                   3,
	}
)

func (x MonthlyRAGMetric_MetricType) Enum() *MonthlyRAGMetric_MetricType {
	p := new(MonthlyRAGMetric_MetricType)
	*p = x
	return p
}

func (x MonthlyRAGMetric_MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonthlyRAGMetric_MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_metric_proto_enumTypes[0].Descriptor()
}

func (MonthlyRAGMetric_MetricType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_metric_proto_enumTypes[0]
}

func (x MonthlyRAGMetric_MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonthlyRAGMetric_MetricType.Descriptor instead.
func (MonthlyRAGMetric_MetricType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_metric_proto_rawDescGZIP(), []int{0, 0}
}

// Definition of a monthly RAG metric
type MonthlyRAGMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The year of the metric
	Year int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	// The month of the metric
	Month month.Month `protobuf:"varint,2,opt,name=month,proto3,enum=google.type.Month" json:"month,omitempty"`
	// The type of metric
	MetricType MonthlyRAGMetric_MetricType `protobuf:"varint,3,opt,name=metric_type,json=metricType,proto3,enum=standards.open.v1.MonthlyRAGMetric_MetricType" json:"metric_type,omitempty"`
	// The value of the metric
	Metric float64 `protobuf:"fixed64,4,opt,name=metric,proto3" json:"metric,omitempty"`
	// If the metric type is "MONEY" then a 3-letter currency code defined in ISO 4217 must be provided.
	CurrencyCode string `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// The amber cutoff (i.e. the value above which the metric is no longer classified as "RED") if applicable
	AmberCutoff int64 `protobuf:"varint,6,opt,name=amber_cutoff,json=amberCutoff,proto3" json:"amber_cutoff,omitempty"`
	// The green cutoff (i.e. the value above which the metric is no longer classified as "AMBER")  if applicable
	GreenCutoff int64 `protobuf:"varint,7,opt,name=green_cutoff,json=greenCutoff,proto3" json:"green_cutoff,omitempty"`
	// The "RED/AMBER/GREEN" designation if applicable
	Rag RedAmberGreen `protobuf:"varint,8,opt,name=rag,proto3,enum=standards.open.v1.RedAmberGreen" json:"rag,omitempty"`
	// Any comments attached to the metric
	Comments string `protobuf:"bytes,9,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *MonthlyRAGMetric) Reset() {
	*x = MonthlyRAGMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyRAGMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyRAGMetric) ProtoMessage() {}

func (x *MonthlyRAGMetric) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyRAGMetric.ProtoReflect.Descriptor instead.
func (*MonthlyRAGMetric) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_metric_proto_rawDescGZIP(), []int{0}
}

func (x *MonthlyRAGMetric) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *MonthlyRAGMetric) GetMonth() month.Month {
	if x != nil {
		return x.Month
	}
	return month.Month(0)
}

func (x *MonthlyRAGMetric) GetMetricType() MonthlyRAGMetric_MetricType {
	if x != nil {
		return x.MetricType
	}
	return MonthlyRAGMetric_METRIC_TYPE_UNSPECIFIED
}

func (x *MonthlyRAGMetric) GetMetric() float64 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *MonthlyRAGMetric) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *MonthlyRAGMetric) GetAmberCutoff() int64 {
	if x != nil {
		return x.AmberCutoff
	}
	return 0
}

func (x *MonthlyRAGMetric) GetGreenCutoff() int64 {
	if x != nil {
		return x.GreenCutoff
	}
	return 0
}

func (x *MonthlyRAGMetric) GetRag() RedAmberGreen {
	if x != nil {
		return x.Rag
	}
	return RedAmberGreen_RAG_UNSPECIFIED
}

func (x *MonthlyRAGMetric) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

var File_standards_open_v1_metric_proto protoreflect.FileDescriptor

var file_standards_open_v1_metric_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x03, 0x0a, 0x10, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66,
	0x12, 0x32, 0x0a, 0x03, 0x72, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x64, 0x41, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x52,
	0x03, 0x72, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x4f, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10,
	0x03, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_standards_open_v1_metric_proto_rawDescOnce sync.Once
	file_standards_open_v1_metric_proto_rawDescData = file_standards_open_v1_metric_proto_rawDesc
)

func file_standards_open_v1_metric_proto_rawDescGZIP() []byte {
	file_standards_open_v1_metric_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_metric_proto_rawDescData)
	})
	return file_standards_open_v1_metric_proto_rawDescData
}

var file_standards_open_v1_metric_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_standards_open_v1_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_standards_open_v1_metric_proto_goTypes = []interface{}{
	(MonthlyRAGMetric_MetricType)(0), // 0: standards.open.v1.MonthlyRAGMetric.MetricType
	(*MonthlyRAGMetric)(nil),         // 1: standards.open.v1.MonthlyRAGMetric
	(month.Month)(0),                 // 2: google.type.Month
	(RedAmberGreen)(0),               // 3: standards.open.v1.RedAmberGreen
}
var file_standards_open_v1_metric_proto_depIdxs = []int32{
	2, // 0: standards.open.v1.MonthlyRAGMetric.month:type_name -> google.type.Month
	0, // 1: standards.open.v1.MonthlyRAGMetric.metric_type:type_name -> standards.open.v1.MonthlyRAGMetric.MetricType
	3, // 2: standards.open.v1.MonthlyRAGMetric.rag:type_name -> standards.open.v1.RedAmberGreen
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_standards_open_v1_metric_proto_init() }
func file_standards_open_v1_metric_proto_init() {
	if File_standards_open_v1_metric_proto != nil {
		return
	}
	file_standards_open_v1_rag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyRAGMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_metric_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_metric_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_metric_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_metric_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_metric_proto_msgTypes,
	}.Build()
	File_standards_open_v1_metric_proto = out.File
	file_standards_open_v1_metric_proto_rawDesc = nil
	file_standards_open_v1_metric_proto_goTypes = nil
	file_standards_open_v1_metric_proto_depIdxs = nil
}
