// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/SFDR_PERIODIC.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/type/date"
	_ "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Y / N requiring no further explanation
type SFDR_PERIODIC_YesNo int32

const (
	// Not Applicable
	SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED SFDR_PERIODIC_YesNo = 0
	// Yes
	SFDR_PERIODIC_Y SFDR_PERIODIC_YesNo = 1
	// No
	SFDR_PERIODIC_N SFDR_PERIODIC_YesNo = 2
)

// Enum value maps for SFDR_PERIODIC_YesNo.
var (
	SFDR_PERIODIC_YesNo_name = map[int32]string{
		0: "YES_NO_NA_UNSPECIFIED",
		1: "Y",
		2: "N",
	}
	SFDR_PERIODIC_YesNo_value = map[string]int32{
		"YES_NO_NA_UNSPECIFIED": 0,
		"Y":                     1,
		"N":                     2,
	}
)

func (x SFDR_PERIODIC_YesNo) Enum() *SFDR_PERIODIC_YesNo {
	p := new(SFDR_PERIODIC_YesNo)
	*p = x
	return p
}

func (x SFDR_PERIODIC_YesNo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SFDR_PERIODIC_YesNo) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[0].Descriptor()
}

func (SFDR_PERIODIC_YesNo) Type() protoreflect.EnumType {
	return &file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[0]
}

func (x SFDR_PERIODIC_YesNo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SFDR_PERIODIC_YesNo.Descriptor instead.
func (SFDR_PERIODIC_YesNo) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 0}
}

type SFDR_PERIODIC_Header_ReportType int32

const (
	// Unspecified
	SFDR_PERIODIC_Header_REPORT_TYPE_UNSPECIFIED SFDR_PERIODIC_Header_ReportType = 0
	// SFDR_PERIODIC_FUND
	SFDR_PERIODIC_Header_SFDR_PERIODIC_FUND SFDR_PERIODIC_Header_ReportType = 1
)

// Enum value maps for SFDR_PERIODIC_Header_ReportType.
var (
	SFDR_PERIODIC_Header_ReportType_name = map[int32]string{
		0: "REPORT_TYPE_UNSPECIFIED",
		1: "SFDR_PERIODIC_FUND",
	}
	SFDR_PERIODIC_Header_ReportType_value = map[string]int32{
		"REPORT_TYPE_UNSPECIFIED": 0,
		"SFDR_PERIODIC_FUND":      1,
	}
)

func (x SFDR_PERIODIC_Header_ReportType) Enum() *SFDR_PERIODIC_Header_ReportType {
	p := new(SFDR_PERIODIC_Header_ReportType)
	*p = x
	return p
}

func (x SFDR_PERIODIC_Header_ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SFDR_PERIODIC_Header_ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[1].Descriptor()
}

func (SFDR_PERIODIC_Header_ReportType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[1]
}

func (x SFDR_PERIODIC_Header_ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SFDR_PERIODIC_Header_ReportType.Descriptor instead.
func (SFDR_PERIODIC_Header_ReportType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 0, 0}
}

type SFDR_PERIODIC_Header_Version int32

const (
	// Unspecified
	SFDR_PERIODIC_Header_VERSION_UNSPECIFIED SFDR_PERIODIC_Header_Version = 0
	// v1.0.0
	SFDR_PERIODIC_Header_V1_0_0 SFDR_PERIODIC_Header_Version = 1
)

// Enum value maps for SFDR_PERIODIC_Header_Version.
var (
	SFDR_PERIODIC_Header_Version_name = map[int32]string{
		0: "VERSION_UNSPECIFIED",
		1: "V1_0_0",
	}
	SFDR_PERIODIC_Header_Version_value = map[string]int32{
		"VERSION_UNSPECIFIED": 0,
		"V1_0_0":              1,
	}
)

func (x SFDR_PERIODIC_Header_Version) Enum() *SFDR_PERIODIC_Header_Version {
	p := new(SFDR_PERIODIC_Header_Version)
	*p = x
	return p
}

func (x SFDR_PERIODIC_Header_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SFDR_PERIODIC_Header_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[2].Descriptor()
}

func (SFDR_PERIODIC_Header_Version) Type() protoreflect.EnumType {
	return &file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[2]
}

func (x SFDR_PERIODIC_Header_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SFDR_PERIODIC_Header_Version.Descriptor instead.
func (SFDR_PERIODIC_Header_Version) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 0, 1}
}

type SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic int32

const (
	SFDR_PERIODIC_Article8Subfund_E_AND_S_CHARACTERISTICS_UNSPECIFIED SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 0  // Not Applicable
	SFDR_PERIODIC_Article8Subfund_EEN                                 SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 1  // Environmental - energy
	SFDR_PERIODIC_Article8Subfund_EREN                                SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 2  // Environmental - renewable energy
	SFDR_PERIODIC_Article8Subfund_ERMA                                SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 3  // Environmental - raw materials
	SFDR_PERIODIC_Article8Subfund_EWL                                 SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 4  // Environmental - water and land
	SFDR_PERIODIC_Article8Subfund_EWAS                                SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 5  // Environmental - waste
	SFDR_PERIODIC_Article8Subfund_EGGE                                SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 6  // Environmental - greenhouse gas emissions
	SFDR_PERIODIC_Article8Subfund_EBIO                                SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 7  // Environmental - biodiversity
	SFDR_PERIODIC_Article8Subfund_ECECO                               SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 8  // Environmental - circular economy
	SFDR_PERIODIC_Article8Subfund_EOTH                                SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 9  // Environmental - other
	SFDR_PERIODIC_Article8Subfund_SINEQ                               SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 10 // Social - inequality
	SFDR_PERIODIC_Article8Subfund_SSOCO                               SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 11 // Social - social cohesion
	SFDR_PERIODIC_Article8Subfund_SSOIN                               SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 12 // Social - social integration
	SFDR_PERIODIC_Article8Subfund_SLARE                               SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 13 // Social - labour relations
	SFDR_PERIODIC_Article8Subfund_SIHC                                SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 14 // Social - investment in human capital
	SFDR_PERIODIC_Article8Subfund_SESDC                               SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 15 // Social - economically or socially disadvantaged communities
	SFDR_PERIODIC_Article8Subfund_SOTH                                SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic = 16 // Social - other
)

// Enum value maps for SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic.
var (
	SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic_name = map[int32]string{
		0:  "E_AND_S_CHARACTERISTICS_UNSPECIFIED",
		1:  "EEN",
		2:  "EREN",
		3:  "ERMA",
		4:  "EWL",
		5:  "EWAS",
		6:  "EGGE",
		7:  "EBIO",
		8:  "ECECO",
		9:  "EOTH",
		10: "SINEQ",
		11: "SSOCO",
		12: "SSOIN",
		13: "SLARE",
		14: "SIHC",
		15: "SESDC",
		16: "SOTH",
	}
	SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic_value = map[string]int32{
		"E_AND_S_CHARACTERISTICS_UNSPECIFIED": 0,
		"EEN":                                 1,
		"EREN":                                2,
		"ERMA":                                3,
		"EWL":                                 4,
		"EWAS":                                5,
		"EGGE":                                6,
		"EBIO":                                7,
		"ECECO":                               8,
		"EOTH":                                9,
		"SINEQ":                               10,
		"SSOCO":                               11,
		"SSOIN":                               12,
		"SLARE":                               13,
		"SIHC":                                14,
		"SESDC":                               15,
		"SOTH":                                16,
	}
)

func (x SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic) Enum() *SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic {
	p := new(SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic)
	*p = x
	return p
}

func (x SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[3].Descriptor()
}

func (SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic) Type() protoreflect.EnumType {
	return &file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[3]
}

func (x SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic.Descriptor instead.
func (SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 3, 0}
}

type SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective int32

const (
	SFDR_PERIODIC_Article8Subfund_SUSTAINABLE_INVESTMENT_OBJECTIVES_UNSPECIFIED SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective = 0 // Not Applicable
	SFDR_PERIODIC_Article8Subfund_CCM                                           SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective = 1 // Climate change mitigation
	SFDR_PERIODIC_Article8Subfund_CCA                                           SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective = 2 // Climate change adaptation
	SFDR_PERIODIC_Article8Subfund_UPWM                                          SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective = 3 // The sustainable use and protection of water and marine resources
	SFDR_PERIODIC_Article8Subfund_TCE                                           SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective = 4 // The transition to a circular economy
	SFDR_PERIODIC_Article8Subfund_PPC                                           SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective = 5 // Pollution prevention and control
	SFDR_PERIODIC_Article8Subfund_PRBE                                          SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective = 6 // The protection and restoration of biodiversity and ecosystems
	SFDR_PERIODIC_Article8Subfund_SO                                            SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective = 7 // Social objective
)

// Enum value maps for SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective.
var (
	SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective_name = map[int32]string{
		0: "SUSTAINABLE_INVESTMENT_OBJECTIVES_UNSPECIFIED",
		1: "CCM",
		2: "CCA",
		3: "UPWM",
		4: "TCE",
		5: "PPC",
		6: "PRBE",
		7: "SO",
	}
	SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective_value = map[string]int32{
		"SUSTAINABLE_INVESTMENT_OBJECTIVES_UNSPECIFIED": 0,
		"CCM":  1,
		"CCA":  2,
		"UPWM": 3,
		"TCE":  4,
		"PPC":  5,
		"PRBE": 6,
		"SO":   7,
	}
)

func (x SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective) Enum() *SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective {
	p := new(SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective)
	*p = x
	return p
}

func (x SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[4].Descriptor()
}

func (SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective) Type() protoreflect.EnumType {
	return &file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[4]
}

func (x SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective.Descriptor instead.
func (SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 3, 1}
}

type SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective int32

const (
	SFDR_PERIODIC_Article9Subfund_SUSTAINABLE_INVESTMENT_OBJECTIVES_UNSPECIFIED SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective = 0 // Not Applicable
	SFDR_PERIODIC_Article9Subfund_CCM                                           SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective = 1 // Climate change mitigation
	SFDR_PERIODIC_Article9Subfund_CCA                                           SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective = 2 // Climate change adaptation
	SFDR_PERIODIC_Article9Subfund_UPWM                                          SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective = 3 // The sustainable use and protection of water and marine resources
	SFDR_PERIODIC_Article9Subfund_TCE                                           SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective = 4 // The transition to a circular economy
	SFDR_PERIODIC_Article9Subfund_PPC                                           SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective = 5 // Pollution prevention and control
	SFDR_PERIODIC_Article9Subfund_PRBE                                          SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective = 6 // The protection and restoration of biodiversity and ecosystems
	SFDR_PERIODIC_Article9Subfund_SO                                            SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective = 7 // Social objective
)

// Enum value maps for SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective.
var (
	SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective_name = map[int32]string{
		0: "SUSTAINABLE_INVESTMENT_OBJECTIVES_UNSPECIFIED",
		1: "CCM",
		2: "CCA",
		3: "UPWM",
		4: "TCE",
		5: "PPC",
		6: "PRBE",
		7: "SO",
	}
	SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective_value = map[string]int32{
		"SUSTAINABLE_INVESTMENT_OBJECTIVES_UNSPECIFIED": 0,
		"CCM":  1,
		"CCA":  2,
		"UPWM": 3,
		"TCE":  4,
		"PPC":  5,
		"PRBE": 6,
		"SO":   7,
	}
)

func (x SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective) Enum() *SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective {
	p := new(SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective)
	*p = x
	return p
}

func (x SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[5].Descriptor()
}

func (SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective) Type() protoreflect.EnumType {
	return &file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes[5]
}

func (x SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective.Descriptor instead.
func (SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 4, 0}
}

// The CSSF SFDR Periodic Disclosure is a  data collection exercise is to collect, in a digital format,
// information contained in precontractual disclosure documents/templates.
//
// See https://www.cssf.lu/en/2023/06/sfdr-data-collection-exercise-applicable-to-investment-fund-managers-ifms-and-institutions-for-occupational-retirement-provision-iorps-on-periodic-disclosures-in-relation-to-regulation-eu-2019-2/
// See the following for the technical guidance: https://www.cssf.lu/en/Document/sfdr-uci-periodic-data-collection-practical-and-technical-guidance/
// See https://edesk.apps.cssf.lu/edesk-dashboard/docs/sfdr-periodic/jsonschema/v1_0_0/sfdr-periodic-input-jsonschema-v1_0_0
// for JSON Schema
type SFDR_PERIODIC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The header of the report (required)
	Header *SFDR_PERIODIC_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The payload of the report
	Payload *SFDR_PERIODIC_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SFDR_PERIODIC) Reset() {
	*x = SFDR_PERIODIC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFDR_PERIODIC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFDR_PERIODIC) ProtoMessage() {}

func (x *SFDR_PERIODIC) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFDR_PERIODIC.ProtoReflect.Descriptor instead.
func (*SFDR_PERIODIC) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0}
}

func (x *SFDR_PERIODIC) GetHeader() *SFDR_PERIODIC_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SFDR_PERIODIC) GetPayload() *SFDR_PERIODIC_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SFDR_PERIODIC_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// UUID format Unique identifier following the rfc 4122 norm (see https://www.rfc-editor.org/rfc/rfc4122)
	ReportUid string `protobuf:"bytes,1,opt,name=report_uid,json=reportUid,proto3" json:"report_uid,omitempty"`
	// Required
	ReportType SFDR_PERIODIC_Header_ReportType `protobuf:"varint,2,opt,name=report_type,json=reportType,proto3,enum=standards.open.v1.SFDR_PERIODIC_Header_ReportType" json:"report_type,omitempty"`
	// Required
	Version     SFDR_PERIODIC_Header_Version `protobuf:"varint,3,opt,name=version,proto3,enum=standards.open.v1.SFDR_PERIODIC_Header_Version" json:"version,omitempty"`
	CreatedBy   string                       `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	SubmittedBy string                       `protobuf:"bytes,5,opt,name=submitted_by,json=submittedBy,proto3" json:"submitted_by,omitempty"`
	// Format "date-time"
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
}

func (x *SFDR_PERIODIC_Header) Reset() {
	*x = SFDR_PERIODIC_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFDR_PERIODIC_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFDR_PERIODIC_Header) ProtoMessage() {}

func (x *SFDR_PERIODIC_Header) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFDR_PERIODIC_Header.ProtoReflect.Descriptor instead.
func (*SFDR_PERIODIC_Header) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SFDR_PERIODIC_Header) GetReportUid() string {
	if x != nil {
		return x.ReportUid
	}
	return ""
}

func (x *SFDR_PERIODIC_Header) GetReportType() SFDR_PERIODIC_Header_ReportType {
	if x != nil {
		return x.ReportType
	}
	return SFDR_PERIODIC_Header_REPORT_TYPE_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Header) GetVersion() SFDR_PERIODIC_Header_Version {
	if x != nil {
		return x.Version
	}
	return SFDR_PERIODIC_Header_VERSION_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Header) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SFDR_PERIODIC_Header) GetSubmittedBy() string {
	if x != nil {
		return x.SubmittedBy
	}
	return ""
}

func (x *SFDR_PERIODIC_Header) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

// The payload of the report (required)
type SFDR_PERIODIC_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SfdrPeriodicReport *SFDR_PERIODIC_SFDRPeriodicReport `protobuf:"bytes,1,opt,name=sfdr_periodic_report,json=sfdrPeriodicReport,proto3" json:"sfdr_periodic_report,omitempty"`
}

func (x *SFDR_PERIODIC_Payload) Reset() {
	*x = SFDR_PERIODIC_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFDR_PERIODIC_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFDR_PERIODIC_Payload) ProtoMessage() {}

func (x *SFDR_PERIODIC_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFDR_PERIODIC_Payload.ProtoReflect.Descriptor instead.
func (*SFDR_PERIODIC_Payload) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SFDR_PERIODIC_Payload) GetSfdrPeriodicReport() *SFDR_PERIODIC_SFDRPeriodicReport {
	if x != nil {
		return x.SfdrPeriodicReport
	}
	return nil
}

// The SFDR Periodic Report
type SFDR_PERIODIC_SFDRPeriodicReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CSSF code of the entity
	EntityCssfCode string `protobuf:"bytes,1,opt,name=entity_cssf_code,json=entityCssfCode,proto3" json:"entity_cssf_code,omitempty"`
	// The Exercise End Date
	// The ISO 8601 formatted date (e.g. 2018-11-13)
	ExerciseEndDate string `protobuf:"bytes,2,opt,name=exercise_end_date,json=exerciseEndDate,proto3" json:"exercise_end_date,omitempty"`
	// List of Article 8 subfunds
	Article8Subfunds []*SFDR_PERIODIC_Article8Subfund `protobuf:"bytes,3,rep,name=article8_subfunds,json=article8Subfunds,proto3" json:"article8_subfunds,omitempty"`
	// List of Article 9 subfunds
	Article9Subfunds []*SFDR_PERIODIC_Article9Subfund `protobuf:"bytes,4,rep,name=article9_subfunds,json=article9Subfunds,proto3" json:"article9_subfunds,omitempty"`
	// List of Article 9 subfunds
	TopInvestmentsSubfunds []*SFDR_PERIODIC_TopInvestmentsSubfunds `protobuf:"bytes,5,rep,name=top_investments_subfunds,json=topInvestmentsSubfunds,proto3" json:"top_investments_subfunds,omitempty"`
}

func (x *SFDR_PERIODIC_SFDRPeriodicReport) Reset() {
	*x = SFDR_PERIODIC_SFDRPeriodicReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFDR_PERIODIC_SFDRPeriodicReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFDR_PERIODIC_SFDRPeriodicReport) ProtoMessage() {}

func (x *SFDR_PERIODIC_SFDRPeriodicReport) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFDR_PERIODIC_SFDRPeriodicReport.ProtoReflect.Descriptor instead.
func (*SFDR_PERIODIC_SFDRPeriodicReport) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SFDR_PERIODIC_SFDRPeriodicReport) GetEntityCssfCode() string {
	if x != nil {
		return x.EntityCssfCode
	}
	return ""
}

func (x *SFDR_PERIODIC_SFDRPeriodicReport) GetExerciseEndDate() string {
	if x != nil {
		return x.ExerciseEndDate
	}
	return ""
}

func (x *SFDR_PERIODIC_SFDRPeriodicReport) GetArticle8Subfunds() []*SFDR_PERIODIC_Article8Subfund {
	if x != nil {
		return x.Article8Subfunds
	}
	return nil
}

func (x *SFDR_PERIODIC_SFDRPeriodicReport) GetArticle9Subfunds() []*SFDR_PERIODIC_Article9Subfund {
	if x != nil {
		return x.Article9Subfunds
	}
	return nil
}

func (x *SFDR_PERIODIC_SFDRPeriodicReport) GetTopInvestmentsSubfunds() []*SFDR_PERIODIC_TopInvestmentsSubfunds {
	if x != nil {
		return x.TopInvestmentsSubfunds
	}
	return nil
}

// Definition of information to be provided per Article 8 sub fund
type SFDR_PERIODIC_Article8Subfund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CSSF code of the sub-fund. Number corresponding to the compartment without zero in front of the number. For a stand-alone fund, please enter 0. For a multiple compartment fund, please indicate the corresponding number.
	SubfundCssfCode string `protobuf:"bytes,1,opt,name=subfund_cssf_code,json=subfundCssfCode,proto3" json:"subfund_cssf_code,omitempty"`
	// Has the subfund been liquidated during the year?
	SubfundLiquidatedIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,2,opt,name=subfund_liquidated_indicator,json=subfundLiquidatedIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"subfund_liquidated_indicator,omitempty"`
	// If yes, indicate the date of the start of the liquidation period
	// The ISO 8601 formatted date (e.g. 2018-11-13)
	SubfundStartDateLiquidationPeriod string `protobuf:"bytes,3,opt,name=subfundStartDateLiquidationPeriod,json=subfundLiquidatedIndicator,proto3" json:"subfundStartDateLiquidationPeriod,omitempty"`
	// The subfund promoted Environmental/Social characterisitics and while it did not have as its objective a sustainable investment, it made sustainable investments
	SustainableInvestmentsIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,4,opt,name=sustainable_investments_indicator,json=sustainableInvestmentsIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"sustainable_investments_indicator,omitempty"`
	// Proportion (in %) of sustainable investments
	SustainableInvestmentsProportion1 float64 `protobuf:"fixed64,5,opt,name=sustainable_investments_proportion1,json=sustainableInvestmentsProportion1,proto3" json:"sustainable_investments_proportion1,omitempty"`
	// with an environmental objective in economic activities that qualify as environmentally sustainable under the EU Taxonomy
	EnvironmentalObjectiveTaxonomyIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,6,opt,name=environmental_objective_taxonomy_indicator,json=environmentalObjectiveTaxonomyIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"environmental_objective_taxonomy_indicator,omitempty"`
	// with an environmental objective in economic activities that do not qualify as environmentally sustainable under the EU Taxonomy
	EnvironmentalObjectiveNoTaxonomyIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,7,opt,name=environmental_objective_no_taxonomy_indicator,json=environmentalObjectiveNoTaxonomyIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"environmental_objective_no_taxonomy_indicator,omitempty"`
	// with a social objective
	SocialObjectiveIndicator SFDR_PERIODIC_YesNo                                 `protobuf:"varint,8,opt,name=social_objective_indicator,json=socialObjectiveIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"social_objective_indicator,omitempty"`
	EAndSCharacteristics     []SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic `protobuf:"varint,9,rep,packed,name=e_and_s_characteristics,json=eAndSCharacteristics,proto3,enum=standards.open.v1.SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic" json:"e_and_s_characteristics,omitempty"`
	// Please specify other environmental characteristics.
	// The field is required if EOTH is defined in the list of values for the field eAndSCharacteristics
	OtherEnvironmentalCharacteristicsDescription string `protobuf:"bytes,10,opt,name=other_environmental_characteristics_description,json=otherEnvironmentalCharacteristicsDescription,proto3" json:"other_environmental_characteristics_description,omitempty"`
	// Please specify other social characteristics
	// The field is required if SOTH is defined in the list of values for the field eAndSCharacteristics
	OtherSocialCharacteristicsDescription string `protobuf:"bytes,11,opt,name=other_social_characteristics_description,json=otherSocialCharacteristicsDescription,proto3" json:"other_social_characteristics_description,omitempty"`
	// Were good governance practices of the investee companies considered for investments aligned to environmental and/or social characteristics respectively investments with a sustainable objectives?
	GoodGovernancePracticesIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,12,opt,name=good_governance_practices_indicator,json=goodGovernancePracticesIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"good_governance_practices_indicator,omitempty"`
	// If no, please explain
	// The field is required if the value of the field goodGovernancePolicyIndicator is N
	NoGoodGovernancePracticesDescription string `protobuf:"bytes,13,opt,name=no_good_governance_practices_description,json=noGoodGovernancePracticesDescription,proto3" json:"no_good_governance_practices_description,omitempty"`
	// What were the objectives of the sustainable investments that the subfund partially made?
	SustainableInvestmentsObjectives []SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective `protobuf:"varint,15,rep,packed,name=sustainable_investments_objectives,json=sustainableInvestmentsObjectives,proto3,enum=standards.open.v1.SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective" json:"sustainable_investments_objectives,omitempty"`
	// Does the sub-fund consider principle adverse impacts on sustainability factors?
	PrincipalAdverseImpactConsiderationIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,16,opt,name=principal_adverse_impact_consideration_indicator,json=principalAdverseImpactConsiderationIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"principal_adverse_impact_consideration_indicator,omitempty"`
	// Proportion of investments aligned with environmental or social characteristics (in %)
	AlignedESCharacteristicsInvestmentsProportion float64 `protobuf:"fixed64,17,opt,name=aligned_e_s_characteristics_investments_proportion,json=alignedESCharacteristicsInvestmentsProportion,proto3" json:"aligned_e_s_characteristics_investments_proportion,omitempty"`
	// Proportion of sustainable investments (in %)
	SustainableInvestmentsProportion2 float64 `protobuf:"fixed64,18,opt,name=sustainable_investments_proportion2,json=sustainableInvestmentsProportion2,proto3" json:"sustainable_investments_proportion2,omitempty"`
	// Proportion of Taxonomy-aligned (in %)
	TaInvestmentsProportion float64 `protobuf:"fixed64,19,opt,name=ta_investments_proportion,json=taInvestmentsProportion,proto3" json:"ta_investments_proportion,omitempty"`
	// Proportion of Other environmental (in %)
	OtherEnvironmentalProportion float64 `protobuf:"fixed64,21,opt,name=other_environmental_proportion,json=otherEnvironmentalProportion,proto3" json:"other_environmental_proportion,omitempty"`
	// Proportion of Social (in %)
	SocialProportion float64 `protobuf:"fixed64,22,opt,name=social_proportion,json=socialProportion,proto3" json:"social_proportion,omitempty"`
	// Proportion of investments aligned with environmental or social characteristics that do not qualify as sustainable investments (in %)
	OtherESCharacteristicsInvestmentsProportion float64 `protobuf:"fixed64,23,opt,name=other_e_s_characteristics_investments_proportion,json=otherESCharacteristicsInvestmentsProportion,proto3" json:"other_e_s_characteristics_investments_proportion,omitempty"`
	// Proportion of remaining investments which are neither aligned with the environmental or social characteristics, nor are qualified as sustainable investments (in %)
	RemainingInvestmentsProportion float64 `protobuf:"fixed64,24,opt,name=remaining_investments_proportion,json=remainingInvestmentsProportion,proto3" json:"remaining_investments_proportion,omitempty"`
	// Did the subfund invest in fossil gas related activities complying with the EU Taxonomy ?
	FossilGasInvestmentsIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,25,opt,name=fossil_gas_investments_indicator,json=fossilGasInvestmentsIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"fossil_gas_investments_indicator,omitempty"`
	// Did the subfund invest in nuclear energy related activities complying with the EU Taxonomy ?
	NuclearEnergyInvestmentsIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,26,opt,name=nuclear_energy_investments_indicator,json=nuclearEnergyInvestmentsIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"nuclear_energy_investments_indicator,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities  including sovereign bonds expressed as a share of turnover (in %)
	FossilGasInvestmentsInclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,27,opt,name=fossil_gas_investments_incl_sovereign_bonds_turnover_proportion,json=fossilGasInvestmentsInclSovereignBondsTurnoverProportion,proto3" json:"fossil_gas_investments_incl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities  including sovereign bonds expressed as a share of turnover (in %).
	NuclearEnergyInvestmentsInclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,28,opt,name=nuclear_energy_investments_incl_sovereign_bonds_turnover_proportion,json=nuclearEnergyInvestmentsInclSovereignBondsTurnoverProportion,proto3" json:"nuclear_energy_investments_incl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities) including sovereign bonds expressed as a share of turnover (in %)
	RemainingInvestmentsInclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,29,opt,name=remaining_investments_incl_sovereign_bonds_turnover_proportion,json=remainingInvestmentsInclSovereignBondsTurnoverProportion,proto3" json:"remaining_investments_incl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities) including sovereign bonds expressed as a share of turnover (in %)
	FossilGasInvestmentsInclSovereignBondsCapexProportion float64 `protobuf:"fixed64,30,opt,name=fossil_gas_investments_incl_sovereign_bonds_capex_proportion,json=fossilGasInvestmentsInclSovereignBondsCapexProportion,proto3" json:"fossil_gas_investments_incl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities including sovereign bonds expressed as a share of CapEx (in %)
	NuclearEnergyInvestmentsInclSovereignBondsCapexProportion float64 `protobuf:"fixed64,31,opt,name=nuclear_energy_investments_incl_sovereign_bonds_capex_proportion,json=nuclearEnergyInvestmentsInclSovereignBondsCapexProportion,proto3" json:"nuclear_energy_investments_incl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  including sovereign bonds expressed as a share of CapEx (in %)
	RemainingInvestmentsInclSovereignBondsCapexProportion float64 `protobuf:"fixed64,32,opt,name=remaining_investments_incl_sovereign_bonds_capex_proportion,json=remainingInvestmentsInclSovereignBondsCapexProportion,proto3" json:"remaining_investments_incl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities including sovereign bonds expressed as a share of OpEx (in %)
	FossilGasInvestmentsInclSovereignBondsOpexProportion float64 `protobuf:"fixed64,33,opt,name=fossil_gas_investments_incl_sovereign_bonds_opex_proportion,json=fossilGasInvestmentsInclSovereignBondsOpexProportion,proto3" json:"fossil_gas_investments_incl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities including sovereign bonds expressed as a share of OpEx (in %)
	NuclearEnergyInvestmentsInclSovereignBondsOpexProportion float64 `protobuf:"fixed64,34,opt,name=nuclear_energy_investments_incl_sovereign_bonds_opex_proportion,json=nuclearEnergyInvestmentsInclSovereignBondsOpexProportion,proto3" json:"nuclear_energy_investments_incl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  including sovereign bonds expressed as a share of OpEx (in %)
	RemainingInvestmentsInclSovereignBondsOpexProportion float64 `protobuf:"fixed64,35,opt,name=remaining_investments_incl_sovereign_bonds_opex_proportion,json=remainingInvestmentsInclSovereignBondsOpexProportion,proto3" json:"remaining_investments_incl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities excluding sovereign bonds expressed as a share of turnover (in %)
	FossilGasInvestmentsExclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,36,opt,name=fossil_gas_investments_excl_sovereign_bonds_turnover_proportion,json=fossilGasInvestmentsExclSovereignBondsTurnoverProportion,proto3" json:"fossil_gas_investments_excl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities excluding sovereign bonds expressed as a share of turnover (in %)
	NuclearEnergyInvestmentsExclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,37,opt,name=nuclear_energy_investments_excl_sovereign_bonds_turnover_proportion,json=nuclearEnergyInvestmentsExclSovereignBondsTurnoverProportion,proto3" json:"nuclear_energy_investments_excl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  excluding sovereign bonds expressed as a share of turnover (in %)
	RemainingInvestmentsExclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,38,opt,name=remaining_investments_excl_sovereign_bonds_turnover_proportion,json=remainingInvestmentsExclSovereignBondsTurnoverProportion,proto3" json:"remaining_investments_excl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities excluding sovereign bonds expressed as a share of CapEx (in %)
	FossilGasInvestmentsExclSovereignBondsCapexProportion float64 `protobuf:"fixed64,39,opt,name=fossil_gas_investments_excl_sovereign_bonds_capex_proportion,json=fossilGasInvestmentsExclSovereignBondsCapexProportion,proto3" json:"fossil_gas_investments_excl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities excluding sovereign bonds expressed as a share of CapEx (in %)
	NuclearEnergyInvestmentsExclSovereignBondsCapexProportion float64 `protobuf:"fixed64,40,opt,name=nuclear_energy_investments_excl_sovereign_bonds_capex_proportion,json=nuclearEnergyInvestmentsExclSovereignBondsCapexProportion,proto3" json:"nuclear_energy_investments_excl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  excluding sovereign bonds expressed as a share of
	RemainingInvestmentsExclSovereignBondsCapexProportion float64 `protobuf:"fixed64,41,opt,name=remaining_investments_excl_sovereign_bonds_capex_proportion,json=remainingInvestmentsExclSovereignBondsCapexProportion,proto3" json:"remaining_investments_excl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities excluding sovereign bonds expressed as a share of OpEx (in %)
	FossilGasInvestmentsExclSovereignBondsOpexProportion float64 `protobuf:"fixed64,42,opt,name=fossil_gas_investments_excl_sovereign_bonds_opex_proportion,json=fossilGasInvestmentsExclSovereignBondsOpexProportion,proto3" json:"fossil_gas_investments_excl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities excluding sovereign bonds expressed as a share of OpEx (in %)
	NuclearEnergyInvestmentsExclSovereignBondsOpexProportion float64 `protobuf:"fixed64,43,opt,name=nuclear_energy_investments_excl_sovereign_bonds_opex_proportion,json=nuclearEnergyInvestmentsExclSovereignBondsOpexProportion,proto3" json:"nuclear_energy_investments_excl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  excluding sovereign bonds expressed as a share of OpEx (in %)
	RemainingInvestmentsExclSovereignBondsOpexProportion float64 `protobuf:"fixed64,44,opt,name=remaining_investments_excl_sovereign_bonds_opex_proportion,json=remainingInvestmentsExclSovereignBondsOpexProportion,proto3" json:"remaining_investments_excl_sovereign_bonds_opex_proportion,omitempty"`
	// What was the share of investments made in transitional activities (in %)?
	TransitionalActivitiesInvestmentsShare float64 `protobuf:"fixed64,45,opt,name=transitional_activities_investments_share,json=transitionalActivitiesInvestmentsShare,proto3" json:"transitional_activities_investments_share,omitempty"`
	// What was the share of investments made in enabling activities (in %)?
	EnablingActivitiesInvestmentsShare float64 `protobuf:"fixed64,46,opt,name=enabling_activities_investments_share,json=enablingActivitiesInvestmentsShare,proto3" json:"enabling_activities_investments_share,omitempty"`
	// Has a specific index been designated as a reference benchmark for the purpose of attaining the environmental and/or social characteristics promoted by the subfund?
	ReferenceBenchmarkDesignatedIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,47,opt,name=reference_benchmark_designated_indicator,json=referenceBenchmarkDesignatedIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"reference_benchmark_designated_indicator,omitempty"`
	// Is an ISIN code available for the reference benchmark?
	ReferenceBenchmarkIsinCodeIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,48,opt,name=reference_benchmark_isin_code_indicator,json=referenceBenchmarkIsinCodeIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"reference_benchmark_isin_code_indicator,omitempty"`
	// Specify the ISIN code of the reference benchmark
	ReferenceBenchmarkIsinCode string `protobuf:"bytes,49,opt,name=reference_benchmark_isin_code,json=referenceBenchmarkIsinCode,proto3" json:"reference_benchmark_isin_code,omitempty"`
	// Specify the name of the reference benchmark
	ReferenceBenchmarkName string `protobuf:"bytes,50,opt,name=reference_benchmark_name,json=referenceBenchmarkName,proto3" json:"reference_benchmark_name,omitempty"`
	// Out/under performance of the subfund compared to the reference benchmark (in %):
	PerformanceComparedReferenceBenchmark float64 `protobuf:"fixed64,51,opt,name=performance_compared_reference_benchmark,json=performanceComparedReferenceBenchmark,proto3" json:"performance_compared_reference_benchmark,omitempty"`
}

func (x *SFDR_PERIODIC_Article8Subfund) Reset() {
	*x = SFDR_PERIODIC_Article8Subfund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFDR_PERIODIC_Article8Subfund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFDR_PERIODIC_Article8Subfund) ProtoMessage() {}

func (x *SFDR_PERIODIC_Article8Subfund) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFDR_PERIODIC_Article8Subfund.ProtoReflect.Descriptor instead.
func (*SFDR_PERIODIC_Article8Subfund) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SFDR_PERIODIC_Article8Subfund) GetSubfundCssfCode() string {
	if x != nil {
		return x.SubfundCssfCode
	}
	return ""
}

func (x *SFDR_PERIODIC_Article8Subfund) GetSubfundLiquidatedIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.SubfundLiquidatedIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetSubfundStartDateLiquidationPeriod() string {
	if x != nil {
		return x.SubfundStartDateLiquidationPeriod
	}
	return ""
}

func (x *SFDR_PERIODIC_Article8Subfund) GetSustainableInvestmentsIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.SustainableInvestmentsIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetSustainableInvestmentsProportion1() float64 {
	if x != nil {
		return x.SustainableInvestmentsProportion1
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetEnvironmentalObjectiveTaxonomyIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.EnvironmentalObjectiveTaxonomyIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetEnvironmentalObjectiveNoTaxonomyIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.EnvironmentalObjectiveNoTaxonomyIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetSocialObjectiveIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.SocialObjectiveIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetEAndSCharacteristics() []SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic {
	if x != nil {
		return x.EAndSCharacteristics
	}
	return nil
}

func (x *SFDR_PERIODIC_Article8Subfund) GetOtherEnvironmentalCharacteristicsDescription() string {
	if x != nil {
		return x.OtherEnvironmentalCharacteristicsDescription
	}
	return ""
}

func (x *SFDR_PERIODIC_Article8Subfund) GetOtherSocialCharacteristicsDescription() string {
	if x != nil {
		return x.OtherSocialCharacteristicsDescription
	}
	return ""
}

func (x *SFDR_PERIODIC_Article8Subfund) GetGoodGovernancePracticesIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.GoodGovernancePracticesIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetNoGoodGovernancePracticesDescription() string {
	if x != nil {
		return x.NoGoodGovernancePracticesDescription
	}
	return ""
}

func (x *SFDR_PERIODIC_Article8Subfund) GetSustainableInvestmentsObjectives() []SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective {
	if x != nil {
		return x.SustainableInvestmentsObjectives
	}
	return nil
}

func (x *SFDR_PERIODIC_Article8Subfund) GetPrincipalAdverseImpactConsiderationIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.PrincipalAdverseImpactConsiderationIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetAlignedESCharacteristicsInvestmentsProportion() float64 {
	if x != nil {
		return x.AlignedESCharacteristicsInvestmentsProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetSustainableInvestmentsProportion2() float64 {
	if x != nil {
		return x.SustainableInvestmentsProportion2
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetTaInvestmentsProportion() float64 {
	if x != nil {
		return x.TaInvestmentsProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetOtherEnvironmentalProportion() float64 {
	if x != nil {
		return x.OtherEnvironmentalProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetSocialProportion() float64 {
	if x != nil {
		return x.SocialProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetOtherESCharacteristicsInvestmentsProportion() float64 {
	if x != nil {
		return x.OtherESCharacteristicsInvestmentsProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetRemainingInvestmentsProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetFossilGasInvestmentsIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.FossilGasInvestmentsIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetNuclearEnergyInvestmentsIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.NuclearEnergyInvestmentsIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetFossilGasInvestmentsInclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsInclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetNuclearEnergyInvestmentsInclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsInclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetRemainingInvestmentsInclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsInclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetFossilGasInvestmentsInclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsInclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetNuclearEnergyInvestmentsInclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsInclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetRemainingInvestmentsInclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsInclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetFossilGasInvestmentsInclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsInclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetNuclearEnergyInvestmentsInclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsInclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetRemainingInvestmentsInclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsInclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetFossilGasInvestmentsExclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsExclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetNuclearEnergyInvestmentsExclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsExclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetRemainingInvestmentsExclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsExclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetFossilGasInvestmentsExclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsExclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetNuclearEnergyInvestmentsExclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsExclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetRemainingInvestmentsExclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsExclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetFossilGasInvestmentsExclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsExclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetNuclearEnergyInvestmentsExclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsExclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetRemainingInvestmentsExclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsExclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetTransitionalActivitiesInvestmentsShare() float64 {
	if x != nil {
		return x.TransitionalActivitiesInvestmentsShare
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetEnablingActivitiesInvestmentsShare() float64 {
	if x != nil {
		return x.EnablingActivitiesInvestmentsShare
	}
	return 0
}

func (x *SFDR_PERIODIC_Article8Subfund) GetReferenceBenchmarkDesignatedIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.ReferenceBenchmarkDesignatedIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetReferenceBenchmarkIsinCodeIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.ReferenceBenchmarkIsinCodeIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article8Subfund) GetReferenceBenchmarkIsinCode() string {
	if x != nil {
		return x.ReferenceBenchmarkIsinCode
	}
	return ""
}

func (x *SFDR_PERIODIC_Article8Subfund) GetReferenceBenchmarkName() string {
	if x != nil {
		return x.ReferenceBenchmarkName
	}
	return ""
}

func (x *SFDR_PERIODIC_Article8Subfund) GetPerformanceComparedReferenceBenchmark() float64 {
	if x != nil {
		return x.PerformanceComparedReferenceBenchmark
	}
	return 0
}

// Definition of information to be provided per Article 9 sub fund
type SFDR_PERIODIC_Article9Subfund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CSSF code of the sub-fund. Number corresponding to the compartment without zero in front of the number. For a stand-alone fund, please enter 0. For a multiple compartment fund, please indicate the corresponding number.
	SubfundCssfCode string `protobuf:"bytes,1,opt,name=subfund_cssf_code,json=subfundCssfCode,proto3" json:"subfund_cssf_code,omitempty"`
	// Has the subfund been liquidated during the year?
	SubfundLiquidatedIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,2,opt,name=subfund_liquidated_indicator,json=subfundLiquidatedIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"subfund_liquidated_indicator,omitempty"`
	// If yes, indicate the date of the start of the liquidation period
	// The ISO 8601 formatted date (e.g. 2018-11-13)
	SubfundStartDateLiquidationPeriod string `protobuf:"bytes,3,opt,name=subfundStartDateLiquidationPeriod,json=subfundLiquidatedIndicator,proto3" json:"subfundStartDateLiquidationPeriod,omitempty"`
	// The subfund made sustainable investments with an environmental objective
	SustainableInvestmentsIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,4,opt,name=sustainable_investments_indicator,json=sustainableInvestmentsIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"sustainable_investments_indicator,omitempty"`
	// Proportion of sustainable investments with an environmental objective
	SustainableInvestmentsEnvironmentalProportion1 float64 `protobuf:"fixed64,5,opt,name=sustainable_investments_environmental_proportion1,json=sustainableInvestmentsEnvironmentalProportion1,proto3" json:"sustainable_investments_environmental_proportion1,omitempty"`
	// In economic activities that qualify as environmentally sustainable under the EU Taxonomy
	EnvironmentalObjectiveTaxonomyIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,6,opt,name=environmental_objective_taxonomy_indicator,json=environmentalObjectiveTaxonomyIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"environmental_objective_taxonomy_indicator,omitempty"`
	// with an environmental objective in economic activities that do not qualify as environmentally sustainable under the EU Taxonomy
	// The field is required if the value of the field sustainableInvestmentsIndicator is Y
	EnvironmentalObjectiveNoTaxonomyIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,7,opt,name=environmental_objective_no_taxonomy_indicator,json=environmentalObjectiveNoTaxonomyIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"environmental_objective_no_taxonomy_indicator,omitempty"`
	// The subfund made sustainable investments with a social objective
	SocialObjectiveIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,8,opt,name=social_objective_indicator,json=socialObjectiveIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"social_objective_indicator,omitempty"`
	// Proportion of sustainable investments with a social objective
	SustainableInvestmentsSocialProportion1 float64 `protobuf:"fixed64,9,opt,name=sustainable_investments_social_proportion1,json=sustainableInvestmentsSocialProportion1,proto3" json:"sustainable_investments_social_proportion1,omitempty"`
	// Were good governance practices of the investee companies considered for investments with sustainable objectives?
	GoodGovernancePracticesIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,10,opt,name=good_governance_practices_indicator,json=goodGovernancePracticesIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"good_governance_practices_indicator,omitempty"`
	// If no to goodGovernancePracticesIndicator, please explain
	// The field is required if the value of the field goodGovernancePolicyIndicator is N
	NoGoodGovernancePolicyDescription string `protobuf:"bytes,11,opt,name=no_good_governance_policy_description,json=noGoodGovernancePolicyDescription,proto3" json:"no_good_governance_policy_description,omitempty"`
	// What were the objectives of the sustainable investments that the subfund made?
	SustainableInvestmentsObjectives []SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective `protobuf:"varint,12,rep,packed,name=sustainable_investments_objectives,json=sustainableInvestmentsObjectives,proto3,enum=standards.open.v1.SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective" json:"sustainable_investments_objectives,omitempty"`
	// Did the subfund consider principle adverse impacts on sustainability factors?
	PrincipalAdverseImpactConsiderationIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,16,opt,name=principal_adverse_impact_consideration_indicator,json=principalAdverseImpactConsiderationIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"principal_adverse_impact_consideration_indicator,omitempty"`
	// Proportion of sustainable environmental investments (in %)
	SustainableInvestmentsEnvironmentalProportion2 float64 `protobuf:"fixed64,17,opt,name=sustainable_investments_environmental_proportion2,json=sustainableInvestmentsEnvironmentalProportion2,proto3" json:"sustainable_investments_environmental_proportion2,omitempty"`
	// Proportion of Taxonomy-aligned (in %)
	SustainableInvestmentsEnvironmentalTaProportion float64 `protobuf:"fixed64,18,opt,name=sustainable_investments_environmental_ta_proportion,json=sustainableInvestmentsEnvironmentalTaProportion,proto3" json:"sustainable_investments_environmental_ta_proportion,omitempty"`
	// Proportion of sustainable social investments (in %)
	SustainableInvestmentsSocialProportion2 float64 `protobuf:"fixed64,19,opt,name=sustainable_investments_social_proportion2,json=sustainableInvestmentsSocialProportion2,proto3" json:"sustainable_investments_social_proportion2,omitempty"`
	// Proportion of not sustainable investments (in%)
	NotSustainableInvestmentsProportion float64 `protobuf:"fixed64,20,opt,name=not_sustainable_investments_proportion,json=notSustainableInvestmentsProportion,proto3" json:"not_sustainable_investments_proportion,omitempty"`
	// Did the subfund invest in fossil gas related activities complying with the EU Taxonomy ?
	FossilGasInvestmentsIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,21,opt,name=fossil_gas_investments_indicator,json=fossilGasInvestmentsIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"fossil_gas_investments_indicator,omitempty"`
	// Did the subfund invest in nuclear energy related activities complying with the EU Taxonomy ?
	NuclearEnergyInvestmentsIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,22,opt,name=nuclear_energy_investments_indicator,json=nuclearEnergyInvestmentsIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"nuclear_energy_investments_indicator,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities  including sovereign bonds expressed as a share of turnover (in %)
	FossilGasInvestmentsInclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,23,opt,name=fossil_gas_investments_incl_sovereign_bonds_turnover_proportion,json=fossilGasInvestmentsInclSovereignBondsTurnoverProportion,proto3" json:"fossil_gas_investments_incl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities  including sovereign bonds expressed as a share of turnover (in %).
	NuclearEnergyInvestmentsInclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,28,opt,name=nuclear_energy_investments_incl_sovereign_bonds_turnover_proportion,json=nuclearEnergyInvestmentsInclSovereignBondsTurnoverProportion,proto3" json:"nuclear_energy_investments_incl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities) including sovereign bonds expressed as a share of turnover (in %)
	RemainingInvestmentsInclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,29,opt,name=remaining_investments_incl_sovereign_bonds_turnover_proportion,json=remainingInvestmentsInclSovereignBondsTurnoverProportion,proto3" json:"remaining_investments_incl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities) including sovereign bonds expressed as a share of turnover (in %)
	FossilGasInvestmentsInclSovereignBondsCapexProportion float64 `protobuf:"fixed64,30,opt,name=fossil_gas_investments_incl_sovereign_bonds_capex_proportion,json=fossilGasInvestmentsInclSovereignBondsCapexProportion,proto3" json:"fossil_gas_investments_incl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities including sovereign bonds expressed as a share of CapEx (in %)
	NuclearEnergyInvestmentsInclSovereignBondsCapexProportion float64 `protobuf:"fixed64,31,opt,name=nuclear_energy_investments_incl_sovereign_bonds_capex_proportion,json=nuclearEnergyInvestmentsInclSovereignBondsCapexProportion,proto3" json:"nuclear_energy_investments_incl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  including sovereign bonds expressed as a share of CapEx (in %)
	RemainingInvestmentsInclSovereignBondsCapexProportion float64 `protobuf:"fixed64,32,opt,name=remaining_investments_incl_sovereign_bonds_capex_proportion,json=remainingInvestmentsInclSovereignBondsCapexProportion,proto3" json:"remaining_investments_incl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities including sovereign bonds expressed as a share of OpEx (in %)
	FossilGasInvestmentsInclSovereignBondsOpexProportion float64 `protobuf:"fixed64,33,opt,name=fossil_gas_investments_incl_sovereign_bonds_opex_proportion,json=fossilGasInvestmentsInclSovereignBondsOpexProportion,proto3" json:"fossil_gas_investments_incl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities including sovereign bonds expressed as a share of OpEx (in %)
	NuclearEnergyInvestmentsInclSovereignBondsOpexProportion float64 `protobuf:"fixed64,34,opt,name=nuclear_energy_investments_incl_sovereign_bonds_opex_proportion,json=nuclearEnergyInvestmentsInclSovereignBondsOpexProportion,proto3" json:"nuclear_energy_investments_incl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  including sovereign bonds expressed as a share of OpEx (in %)
	RemainingInvestmentsInclSovereignBondsOpexProportion float64 `protobuf:"fixed64,35,opt,name=remaining_investments_incl_sovereign_bonds_opex_proportion,json=remainingInvestmentsInclSovereignBondsOpexProportion,proto3" json:"remaining_investments_incl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities excluding sovereign bonds expressed as a share of turnover (in %)
	FossilGasInvestmentsExclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,36,opt,name=fossil_gas_investments_excl_sovereign_bonds_turnover_proportion,json=fossilGasInvestmentsExclSovereignBondsTurnoverProportion,proto3" json:"fossil_gas_investments_excl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities excluding sovereign bonds expressed as a share of turnover (in %)
	NuclearEnergyInvestmentsExclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,37,opt,name=nuclear_energy_investments_excl_sovereign_bonds_turnover_proportion,json=nuclearEnergyInvestmentsExclSovereignBondsTurnoverProportion,proto3" json:"nuclear_energy_investments_excl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  excluding sovereign bonds expressed as a share of turnover (in %)
	RemainingInvestmentsExclSovereignBondsTurnoverProportion float64 `protobuf:"fixed64,38,opt,name=remaining_investments_excl_sovereign_bonds_turnover_proportion,json=remainingInvestmentsExclSovereignBondsTurnoverProportion,proto3" json:"remaining_investments_excl_sovereign_bonds_turnover_proportion,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities excluding sovereign bonds expressed as a share of CapEx (in %)
	FossilGasInvestmentsExclSovereignBondsCapexProportion float64 `protobuf:"fixed64,39,opt,name=fossil_gas_investments_excl_sovereign_bonds_capex_proportion,json=fossilGasInvestmentsExclSovereignBondsCapexProportion,proto3" json:"fossil_gas_investments_excl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities excluding sovereign bonds expressed as a share of CapEx (in %)
	NuclearEnergyInvestmentsExclSovereignBondsCapexProportion float64 `protobuf:"fixed64,40,opt,name=nuclear_energy_investments_excl_sovereign_bonds_capex_proportion,json=nuclearEnergyInvestmentsExclSovereignBondsCapexProportion,proto3" json:"nuclear_energy_investments_excl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  excluding sovereign bonds expressed as a share of
	RemainingInvestmentsExclSovereignBondsCapexProportion float64 `protobuf:"fixed64,41,opt,name=remaining_investments_excl_sovereign_bonds_capex_proportion,json=remainingInvestmentsExclSovereignBondsCapexProportion,proto3" json:"remaining_investments_excl_sovereign_bonds_capex_proportion,omitempty"`
	// Taxonomy aligned investments in fossil gas related activities excluding sovereign bonds expressed as a share of OpEx (in %)
	FossilGasInvestmentsExclSovereignBondsOpexProportion float64 `protobuf:"fixed64,42,opt,name=fossil_gas_investments_excl_sovereign_bonds_opex_proportion,json=fossilGasInvestmentsExclSovereignBondsOpexProportion,proto3" json:"fossil_gas_investments_excl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments in nuclear energy related activities excluding sovereign bonds expressed as a share of OpEx (in %)
	NuclearEnergyInvestmentsExclSovereignBondsOpexProportion float64 `protobuf:"fixed64,43,opt,name=nuclear_energy_investments_excl_sovereign_bonds_opex_proportion,json=nuclearEnergyInvestmentsExclSovereignBondsOpexProportion,proto3" json:"nuclear_energy_investments_excl_sovereign_bonds_opex_proportion,omitempty"`
	// Taxonomy aligned investments (excluding fossil gas and nuclear energy related activities)  excluding sovereign bonds expressed as a share of OpEx (in %)
	RemainingInvestmentsExclSovereignBondsOpexProportion float64 `protobuf:"fixed64,44,opt,name=remaining_investments_excl_sovereign_bonds_opex_proportion,json=remainingInvestmentsExclSovereignBondsOpexProportion,proto3" json:"remaining_investments_excl_sovereign_bonds_opex_proportion,omitempty"`
	// What was the share of investments made in transitional activities (in %)?
	TransitionalActivitiesInvestmentsShare float64 `protobuf:"fixed64,45,opt,name=transitional_activities_investments_share,json=transitionalActivitiesInvestmentsShare,proto3" json:"transitional_activities_investments_share,omitempty"`
	// What was the share of investments made in enabling activities (in %)?
	EnablingActivitiesInvestmentsShare float64 `protobuf:"fixed64,46,opt,name=enabling_activities_investments_share,json=enablingActivitiesInvestmentsShare,proto3" json:"enabling_activities_investments_share,omitempty"`
	// Has a specific index been designated as a reference benchmark for the purpose of attaining the environmental and/or social characteristics promoted by the subfund?
	ReferenceBenchmarkDesignatedIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,47,opt,name=reference_benchmark_designated_indicator,json=referenceBenchmarkDesignatedIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"reference_benchmark_designated_indicator,omitempty"`
	// Is an ISIN code available for the reference benchmark?
	ReferenceBenchmarkIsinCodeIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,48,opt,name=reference_benchmark_isin_code_indicator,json=referenceBenchmarkIsinCodeIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"reference_benchmark_isin_code_indicator,omitempty"`
	// Specify the ISIN code of the reference benchmark
	ReferenceBenchmarkIsinCode string `protobuf:"bytes,49,opt,name=reference_benchmark_isin_code,json=referenceBenchmarkIsinCode,proto3" json:"reference_benchmark_isin_code,omitempty"`
	// Specify the name of the reference benchmark
	ReferenceBenchmarkName string `protobuf:"bytes,50,opt,name=reference_benchmark_name,json=referenceBenchmarkName,proto3" json:"reference_benchmark_name,omitempty"`
	// Out/under performance of the subfund compared to the reference benchmark (in %):
	PerformanceComparedReferenceBenchmark float64 `protobuf:"fixed64,51,opt,name=performance_compared_reference_benchmark,json=performanceComparedReferenceBenchmark,proto3" json:"performance_compared_reference_benchmark,omitempty"`
}

func (x *SFDR_PERIODIC_Article9Subfund) Reset() {
	*x = SFDR_PERIODIC_Article9Subfund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFDR_PERIODIC_Article9Subfund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFDR_PERIODIC_Article9Subfund) ProtoMessage() {}

func (x *SFDR_PERIODIC_Article9Subfund) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFDR_PERIODIC_Article9Subfund.ProtoReflect.Descriptor instead.
func (*SFDR_PERIODIC_Article9Subfund) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 4}
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSubfundCssfCode() string {
	if x != nil {
		return x.SubfundCssfCode
	}
	return ""
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSubfundLiquidatedIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.SubfundLiquidatedIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSubfundStartDateLiquidationPeriod() string {
	if x != nil {
		return x.SubfundStartDateLiquidationPeriod
	}
	return ""
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSustainableInvestmentsIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.SustainableInvestmentsIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSustainableInvestmentsEnvironmentalProportion1() float64 {
	if x != nil {
		return x.SustainableInvestmentsEnvironmentalProportion1
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetEnvironmentalObjectiveTaxonomyIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.EnvironmentalObjectiveTaxonomyIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetEnvironmentalObjectiveNoTaxonomyIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.EnvironmentalObjectiveNoTaxonomyIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSocialObjectiveIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.SocialObjectiveIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSustainableInvestmentsSocialProportion1() float64 {
	if x != nil {
		return x.SustainableInvestmentsSocialProportion1
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetGoodGovernancePracticesIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.GoodGovernancePracticesIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetNoGoodGovernancePolicyDescription() string {
	if x != nil {
		return x.NoGoodGovernancePolicyDescription
	}
	return ""
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSustainableInvestmentsObjectives() []SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective {
	if x != nil {
		return x.SustainableInvestmentsObjectives
	}
	return nil
}

func (x *SFDR_PERIODIC_Article9Subfund) GetPrincipalAdverseImpactConsiderationIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.PrincipalAdverseImpactConsiderationIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSustainableInvestmentsEnvironmentalProportion2() float64 {
	if x != nil {
		return x.SustainableInvestmentsEnvironmentalProportion2
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSustainableInvestmentsEnvironmentalTaProportion() float64 {
	if x != nil {
		return x.SustainableInvestmentsEnvironmentalTaProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetSustainableInvestmentsSocialProportion2() float64 {
	if x != nil {
		return x.SustainableInvestmentsSocialProportion2
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetNotSustainableInvestmentsProportion() float64 {
	if x != nil {
		return x.NotSustainableInvestmentsProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetFossilGasInvestmentsIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.FossilGasInvestmentsIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetNuclearEnergyInvestmentsIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.NuclearEnergyInvestmentsIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetFossilGasInvestmentsInclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsInclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetNuclearEnergyInvestmentsInclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsInclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetRemainingInvestmentsInclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsInclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetFossilGasInvestmentsInclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsInclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetNuclearEnergyInvestmentsInclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsInclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetRemainingInvestmentsInclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsInclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetFossilGasInvestmentsInclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsInclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetNuclearEnergyInvestmentsInclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsInclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetRemainingInvestmentsInclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsInclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetFossilGasInvestmentsExclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsExclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetNuclearEnergyInvestmentsExclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsExclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetRemainingInvestmentsExclSovereignBondsTurnoverProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsExclSovereignBondsTurnoverProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetFossilGasInvestmentsExclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsExclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetNuclearEnergyInvestmentsExclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsExclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetRemainingInvestmentsExclSovereignBondsCapexProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsExclSovereignBondsCapexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetFossilGasInvestmentsExclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.FossilGasInvestmentsExclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetNuclearEnergyInvestmentsExclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.NuclearEnergyInvestmentsExclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetRemainingInvestmentsExclSovereignBondsOpexProportion() float64 {
	if x != nil {
		return x.RemainingInvestmentsExclSovereignBondsOpexProportion
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetTransitionalActivitiesInvestmentsShare() float64 {
	if x != nil {
		return x.TransitionalActivitiesInvestmentsShare
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetEnablingActivitiesInvestmentsShare() float64 {
	if x != nil {
		return x.EnablingActivitiesInvestmentsShare
	}
	return 0
}

func (x *SFDR_PERIODIC_Article9Subfund) GetReferenceBenchmarkDesignatedIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.ReferenceBenchmarkDesignatedIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetReferenceBenchmarkIsinCodeIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.ReferenceBenchmarkIsinCodeIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_Article9Subfund) GetReferenceBenchmarkIsinCode() string {
	if x != nil {
		return x.ReferenceBenchmarkIsinCode
	}
	return ""
}

func (x *SFDR_PERIODIC_Article9Subfund) GetReferenceBenchmarkName() string {
	if x != nil {
		return x.ReferenceBenchmarkName
	}
	return ""
}

func (x *SFDR_PERIODIC_Article9Subfund) GetPerformanceComparedReferenceBenchmark() float64 {
	if x != nil {
		return x.PerformanceComparedReferenceBenchmark
	}
	return 0
}

// Definition of information to be provided for the topInvestmentsSubfunds section
type SFDR_PERIODIC_TopInvestmentsSubfunds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CSSF code of the sub-fund. Number corresponding to the compartment without zero in front of the number. For a stand-alone fund, please enter 0. For a multiple compartment fund, please indicate the corresponding number.
	SubfundCssfCode string `protobuf:"bytes,1,opt,name=subfund_cssf_code,json=subfundCssfCode,proto3" json:"subfund_cssf_code,omitempty"`
	// ISIN code available?
	SubfundLiquidatedIndicator SFDR_PERIODIC_YesNo `protobuf:"varint,2,opt,name=subfund_liquidated_indicator,json=largestInvestmentISINCodeIndicator,proto3,enum=standards.open.v1.SFDR_PERIODIC_YesNo" json:"subfund_liquidated_indicator,omitempty"`
	// Largest investments ISIN code
	LargestInvestmentISINCode string `protobuf:"bytes,3,opt,name=largest_investment_i_s_i_n_code,json=largestInvestmentISINCode,proto3" json:"largest_investment_i_s_i_n_code,omitempty"`
	// Largest investments name
	LargestInvestmentName string `protobuf:"bytes,4,opt,name=largest_investment_name,json=largestInvestmentName,proto3" json:"largest_investment_name,omitempty"`
	// Percentage of assets
	LargestInvestmentAssetsPercentage float64 `protobuf:"fixed64,5,opt,name=largest_investment_assets_percentage,json=largestInvestmentAssetsPercentage,proto3" json:"largest_investment_assets_percentage,omitempty"`
}

func (x *SFDR_PERIODIC_TopInvestmentsSubfunds) Reset() {
	*x = SFDR_PERIODIC_TopInvestmentsSubfunds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFDR_PERIODIC_TopInvestmentsSubfunds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFDR_PERIODIC_TopInvestmentsSubfunds) ProtoMessage() {}

func (x *SFDR_PERIODIC_TopInvestmentsSubfunds) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFDR_PERIODIC_TopInvestmentsSubfunds.ProtoReflect.Descriptor instead.
func (*SFDR_PERIODIC_TopInvestmentsSubfunds) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SFDR_PERIODIC_TopInvestmentsSubfunds) GetSubfundCssfCode() string {
	if x != nil {
		return x.SubfundCssfCode
	}
	return ""
}

func (x *SFDR_PERIODIC_TopInvestmentsSubfunds) GetSubfundLiquidatedIndicator() SFDR_PERIODIC_YesNo {
	if x != nil {
		return x.SubfundLiquidatedIndicator
	}
	return SFDR_PERIODIC_YES_NO_NA_UNSPECIFIED
}

func (x *SFDR_PERIODIC_TopInvestmentsSubfunds) GetLargestInvestmentISINCode() string {
	if x != nil {
		return x.LargestInvestmentISINCode
	}
	return ""
}

func (x *SFDR_PERIODIC_TopInvestmentsSubfunds) GetLargestInvestmentName() string {
	if x != nil {
		return x.LargestInvestmentName
	}
	return ""
}

func (x *SFDR_PERIODIC_TopInvestmentsSubfunds) GetLargestInvestmentAssetsPercentage() float64 {
	if x != nil {
		return x.LargestInvestmentAssetsPercentage
	}
	return 0
}

var File_standards_open_v1_SFDR_PERIODIC_proto protoreflect.FileDescriptor

var file_standards_open_v1_SFDR_PERIODIC_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49,
	0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x79, 0x65, 0x73, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8,
	0xc8, 0x01, 0x0a, 0x0d, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49,
	0x43, 0x12, 0x62, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x49, 0x43, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x21, 0x8a, 0x97, 0x22, 0x1d,
	0x0a, 0x19, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x58, 0x01, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x28, 0x8a, 0x97, 0x22, 0x24, 0x0a, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x43, 0x53, 0x53, 0x46, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x82, 0x06, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x8d,
	0x01, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x6e, 0x8a, 0x97, 0x22, 0x6a, 0x0a, 0x66, 0x55, 0x55, 0x49, 0x44, 0x20,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x66, 0x63, 0x20, 0x34, 0x31, 0x32, 0x32, 0x20,
	0x6e, 0x6f, 0x72, 0x6d, 0x20, 0x28, 0x73, 0x65, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x72, 0x66, 0x63, 0x2d, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x72, 0x66, 0x63, 0x2f, 0x72, 0x66, 0x63, 0x34, 0x31, 0x32, 0x32,
	0x29, 0x58, 0x01, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x64, 0x12, 0x87,
	0x01, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x32, 0x8a, 0x97, 0x22, 0x2e, 0x0a, 0x2a,
	0x54, 0x68, 0x65, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20,
	0x28, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x55, 0x41, 0x4c, 0x29, 0x58, 0x01, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46,
	0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1d, 0x8a, 0x97, 0x22, 0x19,
	0x0a, 0x15, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x69, 0x2e, 0x65, 0x2e, 0x20,
	0x56, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x29, 0x58, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x8a, 0x97, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x42, 0x79, 0x3a, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x8a, 0x97, 0x22, 0x0f,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x42, 0x79, 0x3a, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x96, 0x01, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x4b, 0x8a, 0x97, 0x22, 0x47, 0x0a, 0x45, 0x54, 0x68, 0x65,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x36, 0x30,
	0x31, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x59, 0x59, 0x59, 0x59, 0x2d, 0x4d, 0x4d,
	0x2d, 0x44, 0x44, 0x54, 0x48, 0x48, 0x3a, 0x6d, 0x6d, 0x3a, 0x73, 0x73, 0x2e, 0x73, 0x73, 0x73,
	0x5a, 0x20, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x41, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49,
	0x43, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x2e, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x01, 0x1a, 0xb3, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x73, 0x66, 0x64, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x40, 0x8a, 0x97, 0x22, 0x3c, 0x0a, 0x38,
	0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x58, 0x01, 0x52, 0x12, 0x73, 0x66, 0x64, 0x72,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xb4,
	0x05, 0x0a, 0x12, 0x53, 0x46, 0x44, 0x52, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0x8a, 0x97, 0x22, 0x1b, 0x0a, 0x17, 0x43, 0x53, 0x53, 0x46, 0x20, 0x63, 0x6f, 0x64, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x58, 0x01,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x8a, 0x97, 0x22,
	0x1b, 0x0a, 0x17, 0x43, 0x53, 0x53, 0x46, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x58, 0x01, 0x52, 0x0f, 0x65, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0xa2, 0x01,
	0x0a, 0x11, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46,
	0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x38, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x43, 0x8a, 0x97, 0x22,
	0x3f, 0x0a, 0x3b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x20, 0x38, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x58, 0x01,
	0x52, 0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x5f,
	0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64,
	0x42, 0x42, 0x8a, 0x97, 0x22, 0x3e, 0x0a, 0x3a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x20, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x58, 0x01, 0x52, 0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x53, 0x75,
	0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x18, 0x74, 0x6f, 0x70, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46,
	0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x54, 0x6f, 0x70, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x42, 0x49, 0x8a, 0x97, 0x22, 0x45, 0x0a, 0x41, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x20, 0x38, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x20, 0x39, 0x20, 0x73, 0x75, 0x62,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x58, 0x01, 0x52, 0x16, 0x74,
	0x6f, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0xe5, 0x5f, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x38, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x92, 0x02, 0x0a, 0x11, 0x73, 0x75,
	0x62, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xe5, 0x01, 0x8a, 0x97, 0x22, 0xe0, 0x01, 0x0a, 0x1a, 0x43,
	0x53, 0x53, 0x46, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x75, 0x62, 0x2d, 0x66, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0xbf, 0x01, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x7a, 0x65, 0x72, 0x6f,
	0x20, 0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x2d, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x2c,
	0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x30, 0x2e,
	0x20, 0x46, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64,
	0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x58, 0x01, 0x52, 0x0f, 0x73,
	0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xa5,
	0x01, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x3b, 0x8a,
	0x97, 0x22, 0x37, 0x0a, 0x30, 0x48, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62,
	0x66, 0x75, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x79, 0x65, 0x61, 0x72, 0x3f, 0x4a, 0x01, 0x32, 0x58, 0x01, 0x52, 0x1a, 0x73, 0x75, 0x62, 0x66,
	0x75, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xe0, 0x01, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x98, 0x01, 0x8a, 0x97, 0x22, 0x93, 0x01, 0x0a, 0x40, 0x49, 0x66, 0x20, 0x79,
	0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x4c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x66, 0x64, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x38, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x66,
	0x75, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f, 0x31, 0x3a, 0x32, 0x4a, 0x01, 0x32, 0x52, 0x1a, 0x73,
	0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xa1, 0x02, 0x0a, 0x21, 0x73, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0xac, 0x01,
	0x8a, 0x97, 0x22, 0xa7, 0x01, 0x0a, 0x9f, 0x01, 0x54, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66,
	0x75, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x20, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x63, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x74, 0x20,
	0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x73, 0x20,
	0x69, 0x74, 0x73, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x20,
	0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20,
	0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x01, 0x31, 0x58, 0x01, 0x52, 0x1f, 0x73, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x82, 0x01,
	0x0a, 0x23, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x32, 0x8a, 0x97, 0x22,
	0x2e, 0x0a, 0x2c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x69,
	0x6e, 0x20, 0x25, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x21, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x31, 0x12, 0x83, 0x02, 0x0a, 0x2a, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42,
	0x7e, 0x8a, 0x97, 0x22, 0x7a, 0x0a, 0x78, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x20, 0x61, 0x73, 0x20, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x45, 0x55, 0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52,
	0x27, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x9b, 0x02, 0x0a, 0x2d, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x90, 0x01, 0x8a, 0x97, 0x22, 0x8b, 0x01,
	0x0a, 0x88, 0x01, 0x54, 0x68, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x61, 0x6e, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x20, 0x61, 0x73, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45,
	0x55, 0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x52, 0x29, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4e, 0x6f, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x42, 0x1d, 0x8a, 0x97, 0x22, 0x19, 0x0a, 0x17, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x61, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x18, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xad, 0x02, 0x0a,
	0x17, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x44,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64,
	0x2e, 0x45, 0x41, 0x6e, 0x64, 0x53, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x42, 0xaf, 0x01, 0x8a, 0x97, 0x22, 0xaa, 0x01, 0x0a, 0x4e, 0x57, 0x68,
	0x61, 0x74, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x66, 0x75, 0x6e, 0x64, 0x3f, 0x12, 0x56, 0x54, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x53, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20,
	0x69, 0x73, 0x20, 0x59, 0x58, 0x01, 0x52, 0x14, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x85, 0x02, 0x0a,
	0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9d, 0x01, 0x8a, 0x97, 0x22, 0x98, 0x01, 0x0a, 0x33,
	0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x12, 0x61, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x45, 0x4f,
	0x54, 0x48, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x20, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x2c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xef, 0x01, 0x0a, 0x28, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x95, 0x01, 0x8a, 0x97, 0x22, 0x90, 0x01, 0x0a,
	0x2b, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x61, 0x54, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x53, 0x4f, 0x54, 0x48, 0x20, 0x69, 0x73, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x65, 0x41, 0x6e, 0x64, 0x53,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x25, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc7, 0x02, 0x0a, 0x23, 0x67, 0x6f, 0x6f, 0x64, 0x5f,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0xcf, 0x01, 0x8a,
	0x97, 0x22, 0xca, 0x01, 0x0a, 0xc2, 0x01, 0x57, 0x65, 0x72, 0x65, 0x20, 0x67, 0x6f, 0x6f, 0x64,
	0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x70, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x65, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x61, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x3f, 0x4a, 0x01, 0x32, 0x58, 0x01, 0x52, 0x20,
	0x67, 0x6f, 0x6f, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x9d, 0x02, 0x0a, 0x28, 0x6e, 0x6f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65,
	0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xc4, 0x01, 0x8a, 0x97, 0x22, 0xbf, 0x01, 0x0a, 0x15, 0x49, 0x66, 0x20,
	0x6e, 0x6f, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x12, 0x52, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x20, 0x67, 0x6f, 0x6f, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x20, 0x69, 0x73, 0x20, 0x4e, 0x22, 0x52, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x53, 0x66, 0x64, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x53, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x2e, 0x30, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f, 0x32, 0x3a, 0x31, 0x52, 0x24, 0x6e, 0x6f, 0x47, 0x6f,
	0x6f, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x63, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xfd, 0x01, 0x0a, 0x22, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x4f, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x2e,
	0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x5e,
	0x8a, 0x97, 0x22, 0x5a, 0x0a, 0x58, 0x57, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x3f, 0x52, 0x20,
	0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x12, 0xea, 0x01, 0x0a, 0x30, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x42, 0x5a, 0x8a, 0x97, 0x22, 0x56, 0x0a, 0x4f, 0x44, 0x6f, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x72, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x20,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x20,
	0x6f, 0x6e, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x4a, 0x01, 0x32, 0x58, 0x01, 0x52,
	0x2c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xc8, 0x01,
	0x0a, 0x32, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x5f, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x42, 0x5d, 0x8a, 0x97, 0x22, 0x59,
	0x0a, 0x55, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x58, 0x01, 0x52, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x45, 0x53, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x73, 0x75, 0x73,
	0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x42, 0x32, 0x8a, 0x97, 0x22, 0x2e, 0x0a, 0x2c, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x73, 0x74,
	0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x21, 0x73, 0x75, 0x73, 0x74,
	0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x67, 0x0a,
	0x19, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x2b, 0x8a, 0x97, 0x22, 0x27, 0x0a, 0x25, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2d, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x17, 0x74,
	0x61, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x42, 0x2e,
	0x8a, 0x97, 0x22, 0x2a, 0x0a, 0x28, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x1c,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x11,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x42, 0x21, 0x8a, 0x97, 0x22, 0x1d, 0x0a, 0x1b, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf6, 0x01, 0x0a,
	0x30, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x5f, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x42, 0x8e, 0x01, 0x8a, 0x97, 0x22, 0x89, 0x01, 0x0a,
	0x84, 0x01, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x20, 0x61, 0x73, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x58, 0x01, 0x52, 0x2b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45,
	0x53, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf8, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01,
	0x42, 0xad, 0x01, 0x8a, 0x97, 0x22, 0xa8, 0x01, 0x0a, 0xa3, 0x01, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20,
	0x6f, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2c, 0x20, 0x6e, 0x6f, 0x72, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20,
	0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x58, 0x01,
	0x52, 0x1e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xd2, 0x01, 0x0a, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x42, 0x61, 0x8a, 0x97, 0x22, 0x5d, 0x0a, 0x58, 0x44, 0x69, 0x64, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x55, 0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x20, 0x3f, 0x4a, 0x01, 0x32, 0x52, 0x1d, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61,
	0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xc1, 0x02, 0x0a, 0x24, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0xc7, 0x01, 0x8a,
	0x97, 0x22, 0xc2, 0x01, 0x0a, 0x5c, 0x44, 0x69, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75,
	0x62, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x20,
	0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x55, 0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x20, 0x3f, 0x22, 0x5f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x66, 0x64, 0x72,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x53, 0x75, 0x62,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x30, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f,
	0x31, 0x3a, 0x32, 0x4a, 0x01, 0x32, 0x52, 0x21, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x8c, 0x02, 0x0a, 0x3f, 0x66, 0x6f,
	0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x88, 0x01, 0x8a, 0x97, 0x22, 0x83, 0x01, 0x0a, 0x80, 0x01, 0x54, 0x61,
	0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6f,
	0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x20, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x38,
	0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x98, 0x02, 0x0a, 0x43, 0x6e, 0x75, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x8c, 0x01, 0x8a, 0x97, 0x22, 0x87, 0x01, 0x0a, 0x84,
	0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x20, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x28,
	0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x3c, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49,
	0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64,
	0x73, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xa7, 0x02, 0x0a, 0x3e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x42, 0xa4, 0x01, 0x8a,
	0x97, 0x22, 0x9f, 0x01, 0x0a, 0x9c, 0x01, 0x54, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e,
	0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x29, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x28, 0x69, 0x6e,
	0x20, 0x25, 0x29, 0x52, 0x38, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x02,
	0x0a, 0x3c, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x61,
	0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x83, 0x01, 0x8a, 0x97, 0x22, 0x7f, 0x0a, 0x7d, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x73,
	0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x20, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20,
	0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20,
	0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x61,
	0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x35, 0x66, 0x6f, 0x73, 0x73,
	0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e,
	0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x8e, 0x02, 0x0a, 0x40, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f,
	0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x42, 0x88, 0x01, 0x8a,
	0x97, 0x22, 0x83, 0x01, 0x0a, 0x80, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
	0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e,
	0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20,
	0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x61, 0x70, 0x45, 0x78,
	0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x39, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f,
	0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x9e, 0x02, 0x0a, 0x3b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x42, 0xa1, 0x01, 0x8a, 0x97, 0x22, 0x9c, 0x01,
	0x0a, 0x99, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69,
	0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20, 0x20, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x43, 0x61, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x35, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42,
	0x6f, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xfd, 0x01, 0x0a, 0x3b, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67,
	0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x42, 0x81, 0x01, 0x8a, 0x97, 0x22, 0x7d,
	0x0a, 0x7b, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x4f, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x34, 0x66,
	0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x02, 0x0a, 0x3f, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x42, 0x86, 0x01,
	0x8a, 0x97, 0x22, 0x81, 0x01, 0x0a, 0x7f, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
	0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e,
	0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20,
	0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x4f, 0x70, 0x45, 0x78, 0x20,
	0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x38, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e,
	0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x9b, 0x02, 0x0a, 0x3a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f,
	0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x01, 0x42, 0xa0, 0x01, 0x8a, 0x97, 0x22, 0x9b, 0x01, 0x0a, 0x98, 0x01,
	0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67,
	0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62,
	0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61,
	0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x4f, 0x70, 0x45,
	0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x34, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73,
	0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a,
	0x02, 0x0a, 0x3f, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x42, 0x86, 0x01, 0x8a, 0x97, 0x22, 0x81, 0x01,
	0x0a, 0x7f, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25,
	0x29, 0x52, 0x38, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x02, 0x0a, 0x43,
	0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f,
	0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x42, 0x8b, 0x01, 0x8a, 0x97, 0x22, 0x86,
	0x01, 0x0a, 0x83, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x3c, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f,
	0x6e, 0x64, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7, 0x02, 0x0a, 0x3e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x42, 0xa4,
	0x01, 0x8a, 0x97, 0x22, 0x9f, 0x01, 0x0a, 0x9c, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x29, 0x20, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x28,
	0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x38, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x80, 0x02, 0x0a, 0x3c, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f,
	0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x42, 0x82, 0x01, 0x8a, 0x97, 0x22, 0x7e, 0x0a, 0x7c, 0x54,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x66,
	0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x43,
	0x61, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x35, 0x66, 0x6f, 0x73,
	0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f,
	0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x8e, 0x02, 0x0a, 0x40, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x42, 0x88, 0x01,
	0x8a, 0x97, 0x22, 0x83, 0x01, 0x0a, 0x80, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f,
	0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73,
	0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x61, 0x70, 0x45,
	0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x39, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42,
	0x6f, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x91, 0x02, 0x0a, 0x3b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x42, 0x94, 0x01, 0x8a, 0x97, 0x22, 0x8f,
	0x01, 0x0a, 0x8c, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x73, 0x73,
	0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20, 0x20, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66,
	0x52, 0x35, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xfd, 0x01, 0x0a, 0x3b, 0x66, 0x6f, 0x73, 0x73,
	0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x81, 0x01,
	0x8a, 0x97, 0x22, 0x7d, 0x0a, 0x7b, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73,
	0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x4f, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25,
	0x29, 0x52, 0x34, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x02, 0x0a, 0x3f, 0x6e, 0x75, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x86, 0x01, 0x8a, 0x97, 0x22, 0x81, 0x01, 0x0a, 0x7f, 0x54, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x4f,
	0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x38, 0x6e, 0x75, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x02, 0x0a, 0x3a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x42, 0xa0, 0x01, 0x8a, 0x97, 0x22, 0x9b,
	0x01, 0x0a, 0x98, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x73, 0x73,
	0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20, 0x20, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x4f, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x34, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42,
	0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x29, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x4f, 0x8a, 0x97, 0x22, 0x4b, 0x0a, 0x49, 0x57, 0x68,
	0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x6d, 0x61, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20,
	0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x3f, 0x52, 0x26, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x9e, 0x01, 0x0a, 0x25, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x4b, 0x8a, 0x97, 0x22, 0x47, 0x0a, 0x45, 0x57, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x69, 0x6e,
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x3f, 0x52, 0x22, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0xb2, 0x02, 0x0a, 0x28, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0xb0, 0x01, 0x8a, 0x97,
	0x22, 0xab, 0x01, 0x0a, 0xa3, 0x01, 0x48, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x74, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x20, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x3f, 0x4a, 0x01, 0x31, 0x58, 0x01, 0x52, 0x25,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x9e, 0x02, 0x0a, 0x27, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x73,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42,
	0x9f, 0x01, 0x8a, 0x97, 0x22, 0x9a, 0x01, 0x0a, 0x36, 0x49, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x49,
	0x53, 0x49, 0x4e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x3f, 0x22,
	0x5d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x66, 0x64, 0x72, 0x50, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x2e, 0x30, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f, 0x31, 0x3a, 0x32, 0x4a, 0x01,
	0x32, 0x52, 0x23, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xd8, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69,
	0x73, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x42, 0x94,
	0x01, 0x8a, 0x97, 0x22, 0x8f, 0x01, 0x0a, 0x30, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x49, 0x53, 0x49, 0x4e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x5b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x53, 0x66, 0x64, 0x72, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x38, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x30, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x49, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0xcc, 0x01, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x91, 0x01, 0x8a, 0x97, 0x22, 0x8c, 0x01, 0x0a, 0x2b, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x5d, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x53, 0x66, 0x64, 0x72, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x38, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x30, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0xaf, 0x01, 0x0a, 0x28, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x56, 0x8a, 0x97, 0x22, 0x52, 0x0a, 0x50, 0x4f, 0x75, 0x74, 0x2f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x3a, 0x52, 0x25, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x45, 0x41, 0x6e, 0x64, 0x53, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49,
	0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x45, 0x52, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x52, 0x4d, 0x41, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x57, 0x4c, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x57, 0x41,
	0x53, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x47, 0x47, 0x45, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x42, 0x49, 0x4f, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x43, 0x45, 0x43, 0x4f,
	0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x4f, 0x54, 0x48, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x49, 0x4e, 0x45, 0x51, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x53, 0x4f, 0x43, 0x4f,
	0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x53, 0x4f, 0x49, 0x4e, 0x10, 0x0c, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x4c, 0x41, 0x52, 0x45, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x48, 0x43,
	0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x53, 0x44, 0x43, 0x10, 0x0f, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x4f, 0x54, 0x48, 0x10, 0x10, 0x22, 0x93, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x73, 0x74,
	0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x55,
	0x53, 0x54, 0x41, 0x49, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x43, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x43, 0x41, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x55, 0x50, 0x57, 0x4d, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x45,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x50, 0x43, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x52, 0x42, 0x45, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x4f, 0x10, 0x07, 0x1a, 0xea, 0x52,
	0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e,
	0x64, 0x12, 0x92, 0x02, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x73,
	0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xe5, 0x01,
	0x8a, 0x97, 0x22, 0xe0, 0x01, 0x0a, 0x1a, 0x43, 0x53, 0x53, 0x46, 0x20, 0x63, 0x6f, 0x64, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x66, 0x75, 0x6e, 0x64,
	0x2e, 0x12, 0xbf, 0x01, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x20, 0x46, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2d, 0x61, 0x6c, 0x6f,
	0x6e, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x30, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x58, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x73,
	0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x3b, 0x8a, 0x97, 0x22, 0x37, 0x0a, 0x30, 0x48, 0x61, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x65,
	0x6e, 0x20, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x3f, 0x4a, 0x01, 0x32,
	0x58, 0x01, 0x52, 0x1a, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xe0,
	0x01, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x98, 0x01, 0x8a, 0x97, 0x22,
	0x93, 0x01, 0x0a, 0x40, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0x4c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x66,
	0x64, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x2e, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f, 0x31,
	0x3a, 0x32, 0x4a, 0x01, 0x32, 0x52, 0x1a, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0xc5, 0x01, 0x0a, 0x21, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x51, 0x8a, 0x97, 0x22, 0x4d, 0x0a, 0x48, 0x54, 0x68, 0x65,
	0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x73, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x01, 0x32, 0x52, 0x1f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xb6, 0x01, 0x0a, 0x31, 0x73, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x4b, 0x8a, 0x97, 0x22, 0x47, 0x0a, 0x45, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x2e, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x31, 0x12, 0xe6, 0x01, 0x0a, 0x2a, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42,
	0x61, 0x8a, 0x97, 0x22, 0x5d, 0x0a, 0x58, 0x49, 0x6e, 0x20, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x20, 0x61, 0x73, 0x20, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x45, 0x55, 0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4a,
	0x01, 0x32, 0x52, 0x27, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xf2, 0x01, 0x0a, 0x2d,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x68, 0x8a, 0x97, 0x22,
	0x64, 0x0a, 0x5f, 0x49, 0x6e, 0x20, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64,
	0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x20, 0x61, 0x73,
	0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79,
	0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x55, 0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x4a, 0x01, 0x32, 0x52, 0x29, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x54,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0xb1, 0x01, 0x0a, 0x1a, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x4b, 0x8a,
	0x97, 0x22, 0x47, 0x0a, 0x40, 0x54, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64,
	0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x61, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x01, 0x32, 0x58, 0x01, 0x52, 0x18, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x2a, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x43, 0x8a, 0x97, 0x22, 0x3f, 0x0a,
	0x3d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73,
	0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x27,
	0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0xf2, 0x01, 0x0a, 0x23, 0x67, 0x6f, 0x6f, 0x64,
	0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x7b, 0x8a,
	0x97, 0x22, 0x77, 0x0a, 0x70, 0x57, 0x65, 0x72, 0x65, 0x20, 0x67, 0x6f, 0x6f, 0x64, 0x20, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x65, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x3f, 0x4a, 0x01, 0x32, 0x58, 0x01, 0x52, 0x20, 0x67, 0x6f, 0x6f, 0x64,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x94, 0x02, 0x0a,
	0x25, 0x6e, 0x6f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc1, 0x01, 0x8a,
	0x97, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x2c, 0x20, 0x70, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x52, 0x54, 0x68, 0x65,
	0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x67, 0x6f, 0x6f,
	0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x73, 0x20, 0x4e, 0x22,
	0x4f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x66, 0x64, 0x72, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x39, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x30, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f, 0x32, 0x3a, 0x31,
	0x52, 0x21, 0x6e, 0x6f, 0x47, 0x6f, 0x6f, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xf5, 0x01, 0x0a, 0x22, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x4f, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x49, 0x43, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x53, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x2e, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x56, 0x8a, 0x97, 0x22, 0x52, 0x0a, 0x4e, 0x57, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65,
	0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e,
	0x64, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x3f, 0x58, 0x01, 0x52, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x30,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x58,
	0x8a, 0x97, 0x22, 0x54, 0x0a, 0x4d, 0x44, 0x69, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75,
	0x62, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x20, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x20, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x75, 0x73, 0x74,
	0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x3f, 0x4a, 0x01, 0x32, 0x58, 0x01, 0x52, 0x2c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xab, 0x01, 0x0a, 0x31, 0x73, 0x75, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x40, 0x8a, 0x97, 0x22, 0x3c, 0x0a, 0x3a, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x69,
	0x6e, 0x20, 0x25, 0x29, 0x52, 0x2e, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x12, 0x99, 0x01, 0x0a, 0x33, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x2b, 0x8a, 0x97, 0x22, 0x27, 0x0a, 0x25, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52,
	0x2f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x96, 0x01, 0x0a, 0x2a, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x42, 0x39, 0x8a, 0x97, 0x22, 0x35, 0x0a, 0x33, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29,
	0x52, 0x27, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x8c, 0x01, 0x0a, 0x26, 0x6e, 0x6f,
	0x74, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x42, 0x37, 0x8a, 0x97, 0x22, 0x33,
	0x0a, 0x2f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x25,
	0x29, 0x58, 0x01, 0x52, 0x23, 0x6e, 0x6f, 0x74, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xcf, 0x01, 0x0a, 0x20, 0x66, 0x6f, 0x73,
	0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x5e, 0x8a, 0x97, 0x22,
	0x5a, 0x0a, 0x58, 0x44, 0x69, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x73,
	0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x55,
	0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x3f, 0x52, 0x1d, 0x66, 0x6f, 0x73,
	0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xde, 0x01, 0x0a, 0x24, 0x6e,
	0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46,
	0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x42, 0x65, 0x8a, 0x97, 0x22, 0x61, 0x0a, 0x5c, 0x44, 0x69, 0x64, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x55, 0x20, 0x54, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x20, 0x3f, 0x4a, 0x01, 0x32, 0x52, 0x21, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x8c, 0x02, 0x0a, 0x3f,
	0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x42, 0x88, 0x01, 0x8a, 0x97, 0x22, 0x83, 0x01, 0x0a, 0x80, 0x01,
	0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x20, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29,
	0x52, 0x38, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x98, 0x02, 0x0a, 0x43, 0x6e,
	0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x8c, 0x01, 0x8a, 0x97, 0x22, 0x87, 0x01,
	0x0a, 0x84, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x20, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x3c, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f,
	0x6e, 0x64, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7, 0x02, 0x0a, 0x3e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x42, 0xa4,
	0x01, 0x8a, 0x97, 0x22, 0x9f, 0x01, 0x0a, 0x9c, 0x01, 0x54, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x29, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x28,
	0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x38, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x81, 0x02, 0x0a, 0x3c, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f,
	0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x83, 0x01, 0x8a, 0x97, 0x22, 0x7f, 0x0a, 0x7d, 0x54,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x66,
	0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x20, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x43, 0x61, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x35, 0x66, 0x6f,
	0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42,
	0x6f, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x02, 0x0a, 0x40, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x42, 0x88,
	0x01, 0x8a, 0x97, 0x22, 0x83, 0x01, 0x0a, 0x80, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62,
	0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61,
	0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x61, 0x70,
	0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x39, 0x6e, 0x75, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x42, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9e, 0x02, 0x0a, 0x3b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x42, 0xa1, 0x01, 0x8a, 0x97, 0x22,
	0x9c, 0x01, 0x0a, 0x99, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x73,
	0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x75, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20, 0x20,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x43, 0x61, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x35,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xfd, 0x01, 0x0a, 0x3b, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c,
	0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f,
	0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x42, 0x81, 0x01, 0x8a, 0x97,
	0x22, 0x7d, 0x0a, 0x7b, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x4f, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52,
	0x34, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x02, 0x0a, 0x3f, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x86, 0x01, 0x8a, 0x97, 0x22, 0x81, 0x01, 0x0a, 0x7f, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62,
	0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61,
	0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x4f, 0x70, 0x45,
	0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x38, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42,
	0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x9b, 0x02, 0x0a, 0x3a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x42, 0xa0, 0x01, 0x8a, 0x97, 0x22, 0x9b, 0x01, 0x0a,
	0x98, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c,
	0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20, 0x20, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x4f,
	0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x34, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e,
	0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x8a, 0x02, 0x0a, 0x3f, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c,
	0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x42, 0x86, 0x01, 0x8a, 0x97, 0x22,
	0x81, 0x01, 0x0a, 0x7f, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x28, 0x69, 0x6e,
	0x20, 0x25, 0x29, 0x52, 0x38, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x02,
	0x0a, 0x43, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x42, 0x8b, 0x01, 0x8a, 0x97,
	0x22, 0x86, 0x01, 0x0a, 0x83, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64,
	0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61,
	0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76,
	0x65, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x3c, 0x6e, 0x75, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x42, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7, 0x02, 0x0a, 0x3e, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01,
	0x42, 0xa4, 0x01, 0x8a, 0x97, 0x22, 0x9f, 0x01, 0x0a, 0x9c, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69,
	0x6e, 0x67, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x29, 0x20, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x38, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63,
	0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x80, 0x02, 0x0a, 0x3c, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x42, 0x82, 0x01, 0x8a, 0x97, 0x22, 0x7e, 0x0a,
	0x7c, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x43, 0x61, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x35, 0x66,
	0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x42, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x02, 0x0a, 0x40, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x88, 0x01, 0x8a, 0x97, 0x22, 0x83, 0x01, 0x0a, 0x80, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20,
	0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20,
	0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x61,
	0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x39, 0x6e, 0x75, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x02, 0x0a, 0x3b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x42, 0x94, 0x01, 0x8a, 0x97,
	0x22, 0x8f, 0x01, 0x0a, 0x8c, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f,
	0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x75, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20,
	0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20,
	0x6f, 0x66, 0x52, 0x35, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x70, 0x65, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xfd, 0x01, 0x0a, 0x3b, 0x66, 0x6f,
	0x73, 0x73, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x81, 0x01, 0x8a, 0x97, 0x22, 0x7d, 0x0a, 0x7b, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x20, 0x67,
	0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x4f, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e,
	0x20, 0x25, 0x29, 0x52, 0x34, 0x66, 0x6f, 0x73, 0x73, 0x69, 0x6c, 0x47, 0x61, 0x73, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x02, 0x0a, 0x3f, 0x6e, 0x75,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x86, 0x01, 0x8a, 0x97, 0x22, 0x81, 0x01, 0x0a, 0x7f, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x4f, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x38, 0x6e, 0x75,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x02, 0x0a, 0x3a, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f,
	0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x42, 0xa0, 0x01, 0x8a, 0x97,
	0x22, 0x9b, 0x01, 0x0a, 0x98, 0x01, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x20, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f,
	0x73, 0x73, 0x69, 0x6c, 0x20, 0x67, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x75, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20,
	0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x4f, 0x70, 0x45, 0x78, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x52, 0x34,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x29, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x4f, 0x8a, 0x97, 0x22, 0x4b, 0x0a, 0x49,
	0x57, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x3f, 0x52, 0x26, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x9e, 0x01, 0x0a, 0x25, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x4b, 0x8a, 0x97, 0x22, 0x47, 0x0a, 0x45, 0x57, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x3f, 0x52, 0x22,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0xb2, 0x02, 0x0a, 0x28, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0xb0, 0x01,
	0x8a, 0x97, 0x22, 0xab, 0x01, 0x0a, 0xa3, 0x01, 0x48, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x62, 0x65, 0x65,
	0x6e, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20,
	0x61, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x74, 0x74, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x3f, 0x4a, 0x01, 0x31, 0x58, 0x01,
	0x52, 0x25, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x9e, 0x02, 0x0a, 0x27, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x69, 0x73, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46,
	0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x42, 0x9f, 0x01, 0x8a, 0x97, 0x22, 0x9a, 0x01, 0x0a, 0x36, 0x49, 0x73, 0x20, 0x61, 0x6e,
	0x20, 0x49, 0x53, 0x49, 0x4e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x3f, 0x22, 0x5d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x66, 0x64, 0x72, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x53, 0x75, 0x62, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x2e, 0x30, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f, 0x31, 0x3a, 0x32,
	0x4a, 0x01, 0x32, 0x52, 0x23, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xd8, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x69, 0x73, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x94, 0x01, 0x8a, 0x97, 0x22, 0x8f, 0x01, 0x0a, 0x30, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x53, 0x49, 0x4e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x20, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x5b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x53, 0x66, 0x64, 0x72, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x39, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x30, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x49, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x73, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x42, 0x91, 0x01, 0x8a, 0x97, 0x22, 0x8c, 0x01, 0x0a, 0x2b,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x20, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x5d, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x66, 0x64, 0x72, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x30,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x16, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x28, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x01, 0x42, 0x56, 0x8a, 0x97, 0x22, 0x52, 0x0a, 0x50, 0x4f, 0x75, 0x74,
	0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e,
	0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x3a, 0x52, 0x25, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x93, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x55, 0x53, 0x54, 0x41,
	0x49, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x43,
	0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x43, 0x41, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x55, 0x50, 0x57, 0x4d, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x45, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x50, 0x50, 0x43, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x52, 0x42, 0x45,
	0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x4f, 0x10, 0x07, 0x1a, 0xdb, 0x06, 0x0a, 0x16, 0x54,
	0x6f, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x92, 0x02, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xe5, 0x01, 0x8a, 0x97, 0x22, 0xe0, 0x01, 0x0a, 0x1a, 0x43, 0x53, 0x53, 0x46, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x2d,
	0x66, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0xbf, 0x01, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x69, 0x6e, 0x20,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x2d, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x2c, 0x20, 0x70, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x30, 0x2e, 0x20, 0x46, 0x6f, 0x72,
	0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x2c, 0x20, 0x70, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x58, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x43, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x1c, 0x73,
	0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x49, 0x43, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x1f, 0x8a, 0x97, 0x22, 0x1b, 0x0a,
	0x14, 0x49, 0x53, 0x49, 0x4e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x3f, 0x4a, 0x01, 0x32, 0x58, 0x01, 0x52, 0x22, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x53, 0x49,
	0x4e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xcb,
	0x01, 0x0a, 0x1f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x5f, 0x73, 0x5f, 0x69, 0x5f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x86, 0x01, 0x8a, 0x97, 0x22, 0x81, 0x01,
	0x0a, 0x1d, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x49, 0x53, 0x49, 0x4e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x60, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x66, 0x64, 0x72, 0x50, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x54, 0x6f, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x30, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x53, 0x49, 0x4e,
	0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f, 0x31, 0x3a,
	0x32, 0x52, 0x19, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x53, 0x49, 0x4e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x17,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x8a,
	0x97, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x49, 0x53, 0x49, 0x4e, 0x20, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x15, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x24, 0x6c, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1c, 0x8a, 0x97, 0x22, 0x18, 0x0a, 0x14, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x58, 0x01, 0x52, 0x21, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x05, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x41, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01,
	0x59, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x4e, 0x10, 0x02, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_standards_open_v1_SFDR_PERIODIC_proto_rawDescOnce sync.Once
	file_standards_open_v1_SFDR_PERIODIC_proto_rawDescData = file_standards_open_v1_SFDR_PERIODIC_proto_rawDesc
)

func file_standards_open_v1_SFDR_PERIODIC_proto_rawDescGZIP() []byte {
	file_standards_open_v1_SFDR_PERIODIC_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_SFDR_PERIODIC_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_SFDR_PERIODIC_proto_rawDescData)
	})
	return file_standards_open_v1_SFDR_PERIODIC_proto_rawDescData
}

var file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_standards_open_v1_SFDR_PERIODIC_proto_goTypes = []interface{}{
	(SFDR_PERIODIC_YesNo)(0),                                          // 0: standards.open.v1.SFDR_PERIODIC.YesNo
	(SFDR_PERIODIC_Header_ReportType)(0),                              // 1: standards.open.v1.SFDR_PERIODIC.Header.ReportType
	(SFDR_PERIODIC_Header_Version)(0),                                 // 2: standards.open.v1.SFDR_PERIODIC.Header.Version
	(SFDR_PERIODIC_Article8Subfund_EAndSCharacteristic)(0),            // 3: standards.open.v1.SFDR_PERIODIC.Article8Subfund.EAndSCharacteristic
	(SFDR_PERIODIC_Article8Subfund_SustainableInvestmentObjective)(0), // 4: standards.open.v1.SFDR_PERIODIC.Article8Subfund.SustainableInvestmentObjective
	(SFDR_PERIODIC_Article9Subfund_SustainableInvestmentObjective)(0), // 5: standards.open.v1.SFDR_PERIODIC.Article9Subfund.SustainableInvestmentObjective
	(*SFDR_PERIODIC)(nil),                                             // 6: standards.open.v1.SFDR_PERIODIC
	(*SFDR_PERIODIC_Header)(nil),                                      // 7: standards.open.v1.SFDR_PERIODIC.Header
	(*SFDR_PERIODIC_Payload)(nil),                                     // 8: standards.open.v1.SFDR_PERIODIC.Payload
	(*SFDR_PERIODIC_SFDRPeriodicReport)(nil),                          // 9: standards.open.v1.SFDR_PERIODIC.SFDRPeriodicReport
	(*SFDR_PERIODIC_Article8Subfund)(nil),                             // 10: standards.open.v1.SFDR_PERIODIC.Article8Subfund
	(*SFDR_PERIODIC_Article9Subfund)(nil),                             // 11: standards.open.v1.SFDR_PERIODIC.Article9Subfund
	(*SFDR_PERIODIC_TopInvestmentsSubfunds)(nil),                      // 12: standards.open.v1.SFDR_PERIODIC.TopInvestmentsSubfunds
	(*timestamppb.Timestamp)(nil),                                     // 13: google.protobuf.Timestamp
}
var file_standards_open_v1_SFDR_PERIODIC_proto_depIdxs = []int32{
	7,  // 0: standards.open.v1.SFDR_PERIODIC.header:type_name -> standards.open.v1.SFDR_PERIODIC.Header
	8,  // 1: standards.open.v1.SFDR_PERIODIC.payload:type_name -> standards.open.v1.SFDR_PERIODIC.Payload
	1,  // 2: standards.open.v1.SFDR_PERIODIC.Header.report_type:type_name -> standards.open.v1.SFDR_PERIODIC.Header.ReportType
	2,  // 3: standards.open.v1.SFDR_PERIODIC.Header.version:type_name -> standards.open.v1.SFDR_PERIODIC.Header.Version
	13, // 4: standards.open.v1.SFDR_PERIODIC.Header.creation_timestamp:type_name -> google.protobuf.Timestamp
	9,  // 5: standards.open.v1.SFDR_PERIODIC.Payload.sfdr_periodic_report:type_name -> standards.open.v1.SFDR_PERIODIC.SFDRPeriodicReport
	10, // 6: standards.open.v1.SFDR_PERIODIC.SFDRPeriodicReport.article8_subfunds:type_name -> standards.open.v1.SFDR_PERIODIC.Article8Subfund
	11, // 7: standards.open.v1.SFDR_PERIODIC.SFDRPeriodicReport.article9_subfunds:type_name -> standards.open.v1.SFDR_PERIODIC.Article9Subfund
	12, // 8: standards.open.v1.SFDR_PERIODIC.SFDRPeriodicReport.top_investments_subfunds:type_name -> standards.open.v1.SFDR_PERIODIC.TopInvestmentsSubfunds
	0,  // 9: standards.open.v1.SFDR_PERIODIC.Article8Subfund.subfund_liquidated_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 10: standards.open.v1.SFDR_PERIODIC.Article8Subfund.sustainable_investments_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 11: standards.open.v1.SFDR_PERIODIC.Article8Subfund.environmental_objective_taxonomy_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 12: standards.open.v1.SFDR_PERIODIC.Article8Subfund.environmental_objective_no_taxonomy_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 13: standards.open.v1.SFDR_PERIODIC.Article8Subfund.social_objective_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	3,  // 14: standards.open.v1.SFDR_PERIODIC.Article8Subfund.e_and_s_characteristics:type_name -> standards.open.v1.SFDR_PERIODIC.Article8Subfund.EAndSCharacteristic
	0,  // 15: standards.open.v1.SFDR_PERIODIC.Article8Subfund.good_governance_practices_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	4,  // 16: standards.open.v1.SFDR_PERIODIC.Article8Subfund.sustainable_investments_objectives:type_name -> standards.open.v1.SFDR_PERIODIC.Article8Subfund.SustainableInvestmentObjective
	0,  // 17: standards.open.v1.SFDR_PERIODIC.Article8Subfund.principal_adverse_impact_consideration_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 18: standards.open.v1.SFDR_PERIODIC.Article8Subfund.fossil_gas_investments_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 19: standards.open.v1.SFDR_PERIODIC.Article8Subfund.nuclear_energy_investments_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 20: standards.open.v1.SFDR_PERIODIC.Article8Subfund.reference_benchmark_designated_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 21: standards.open.v1.SFDR_PERIODIC.Article8Subfund.reference_benchmark_isin_code_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 22: standards.open.v1.SFDR_PERIODIC.Article9Subfund.subfund_liquidated_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 23: standards.open.v1.SFDR_PERIODIC.Article9Subfund.sustainable_investments_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 24: standards.open.v1.SFDR_PERIODIC.Article9Subfund.environmental_objective_taxonomy_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 25: standards.open.v1.SFDR_PERIODIC.Article9Subfund.environmental_objective_no_taxonomy_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 26: standards.open.v1.SFDR_PERIODIC.Article9Subfund.social_objective_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 27: standards.open.v1.SFDR_PERIODIC.Article9Subfund.good_governance_practices_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	5,  // 28: standards.open.v1.SFDR_PERIODIC.Article9Subfund.sustainable_investments_objectives:type_name -> standards.open.v1.SFDR_PERIODIC.Article9Subfund.SustainableInvestmentObjective
	0,  // 29: standards.open.v1.SFDR_PERIODIC.Article9Subfund.principal_adverse_impact_consideration_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 30: standards.open.v1.SFDR_PERIODIC.Article9Subfund.fossil_gas_investments_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 31: standards.open.v1.SFDR_PERIODIC.Article9Subfund.nuclear_energy_investments_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 32: standards.open.v1.SFDR_PERIODIC.Article9Subfund.reference_benchmark_designated_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 33: standards.open.v1.SFDR_PERIODIC.Article9Subfund.reference_benchmark_isin_code_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	0,  // 34: standards.open.v1.SFDR_PERIODIC.TopInvestmentsSubfunds.subfund_liquidated_indicator:type_name -> standards.open.v1.SFDR_PERIODIC.YesNo
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_standards_open_v1_SFDR_PERIODIC_proto_init() }
func file_standards_open_v1_SFDR_PERIODIC_proto_init() {
	if File_standards_open_v1_SFDR_PERIODIC_proto != nil {
		return
	}
	file_standards_open_v1_yesno_proto_init()
	file_standards_open_v1_fieldOptionsExtentions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFDR_PERIODIC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFDR_PERIODIC_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFDR_PERIODIC_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFDR_PERIODIC_SFDRPeriodicReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFDR_PERIODIC_Article8Subfund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFDR_PERIODIC_Article9Subfund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFDR_PERIODIC_TopInvestmentsSubfunds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_SFDR_PERIODIC_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_SFDR_PERIODIC_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_SFDR_PERIODIC_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_SFDR_PERIODIC_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_SFDR_PERIODIC_proto_msgTypes,
	}.Build()
	File_standards_open_v1_SFDR_PERIODIC_proto = out.File
	file_standards_open_v1_SFDR_PERIODIC_proto_rawDesc = nil
	file_standards_open_v1_SFDR_PERIODIC_proto_goTypes = nil
	file_standards_open_v1_SFDR_PERIODIC_proto_depIdxs = nil
}
