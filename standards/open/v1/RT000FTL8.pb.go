// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/RT000FTL8.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	_ "google.golang.org/genproto/googleapis/type/month"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of metricIDs
type RT000FTL8_Metric_MetricID int32

const (
	// The enumeration of the metrics measured
	RT000FTL8_Metric_METRIC_ID_UNSPECIFIED RT000FTL8_Metric_MetricID = 0
	// Number of NAVs calculated during the month
	RT000FTL8_Metric_NAVS_CALCULATED RT000FTL8_Metric_MetricID = 1
	// Count of the number of delays in the period caused by the provider
	RT000FTL8_Metric_NAVS_PROVIDER_DELAYED RT000FTL8_Metric_MetricID = 2
	// Count of the number of delays in the period not caused by the provider
	RT000FTL8_Metric_NAVS_NON_PROVIDER_DELAYED RT000FTL8_Metric_MetricID = 3
	// Percentage of total NAVs delivered within the agreed timescale during the reporting month.
	// NAV_TIMELINESS should equal  1- (NAVS_PROVIDER_DELAYED + NAVS_NON_PROVIDER_DELAYED) / NAVS_CALCULATED
	// in a period
	RT000FTL8_Metric_NAV_TIMELINESS RT000FTL8_Metric_MetricID = 4
	// Percentage of total NAVs delivered within the agreed timescale during the reporting month,
	// excluding non-provider caused delays.
	// NAVS_TIMELINESS_PROVIDER should equal 1 - (NAVS_PROVIDER_DELAYED / NAVS_CALCULATED)
	RT000FTL8_Metric_NAV_TIMELINESS_PROVIDER RT000FTL8_Metric_MetricID = 5
	// Percentage of valuations produced during the reporting month where no error(s) has been identified.
	RT000FTL8_Metric_NAV_ACCURACY RT000FTL8_Metric_MetricID = 6
	// Percentage of valuations produced during the reporting month where no error(s) has been identified.
	// This percentage is not impacted by errors where the root cause was identified as not the delegate.
	RT000FTL8_Metric_NAV_ACCURACY_PROVIDER RT000FTL8_Metric_MetricID = 7
	// The count of material nav errors where the delegate was responsible
	RT000FTL8_Metric_NAV_ERRORS_MATERIAL_PROVIDER RT000FTL8_Metric_MetricID = 8
	// The count of material nav errors where the delegate was not responsible
	RT000FTL8_Metric_NAV_ERRORS_MATERIAL_NON_PROVIDER RT000FTL8_Metric_MetricID = 9
	// The count of material nav errors where the delegate was responsible
	RT000FTL8_Metric_NAV_ERRORS_NON_MATERIAL_PROVIDER RT000FTL8_Metric_MetricID = 10
	// The count of material nav errors where the delegate was not responsible
	RT000FTL8_Metric_NAV_ERRORS_NON_MATERIAL_NON_PROVIDER RT000FTL8_Metric_MetricID = 11
	// The number of securities for which there has not been a price movement for an agreed number of consecutive business days.
	RT000FTL8_Metric_STALE_SECURITIES RT000FTL8_Metric_MetricID = 12
	// Total number of
	// Number of cash reconciliations reported between 31 to 60 days
	RT000FTL8_Metric_CASH_RECONCILIATIONS_31_TO_60_DAYS RT000FTL8_Metric_MetricID = 13
	// Number of cash reconciliations reported greater than or equal to 61 days
	RT000FTL8_Metric_CASH_RECONCILIATIONS_GREATER_THAN_60_DAYS RT000FTL8_Metric_MetricID = 14
	// Number of stock reconciliations reported between 31 to 60 days
	RT000FTL8_Metric_STOCK_RECONCILIATIONS_31_TO_60_DAYS RT000FTL8_Metric_MetricID = 15
	// Number of stock reconciliations reported greater than or equal to 61 days
	RT000FTL8_Metric_STOCK_RECONCILIATIONS_GREATER_THAN_60_DAYS RT000FTL8_Metric_MetricID = 16
	// The count of system issues that occurred during the period
	RT000FTL8_Metric_COUNT_SYSTEM_ISSUES RT000FTL8_Metric_MetricID = 17
	// The number of late financial reports
	RT000FTL8_Metric_NUMBER_LATE_FINANCIAL_REPORTS RT000FTL8_Metric_MetricID = 18
	// The net asset value at the end of the period in reporting currency
	RT000FTL8_Metric_NET_ASSET_VALUE_REPORTING_CURRENCY RT000FTL8_Metric_MetricID = 19
	// The net asset value at the end of the period in subject currency
	RT000FTL8_Metric_NET_ASSET_VALUE_SUBJECT_CURRENCY RT000FTL8_Metric_MetricID = 20
	// A security is considered difficult to price when (a) the security is fair-valued, (b) there is a single broker price, (d) stale or unchanged price, (d) it is suspended or delisted, (e) distressed fixed income, (f) defaulted fixed income as of the reporting date
	RT000FTL8_Metric_DIFFICULT_TO_PRICE_SECURITIES RT000FTL8_Metric_MetricID = 21
	// Number of securities where trading has been stopped as of the reporting date
	RT000FTL8_Metric_SUSPENDED_OR_DELISTED_SECURITIES RT000FTL8_Metric_MetricID = 22
	// Number of fixed income securities where the company or government entity is experiencing financial or operational distress, but has not defaulted as of the reporting date
	RT000FTL8_Metric_DISTRESSED_FIXED_INCOME_SECURITIES RT000FTL8_Metric_MetricID = 23
	// Number of fixed income securities where the company or government entity has defaulted as of the reporting date
	RT000FTL8_Metric_DEFAULTED_FIXED_INCOME_SECURITIES RT000FTL8_Metric_MetricID = 24
	// The number of securities held across portfolios
	RT000FTL8_Metric_SECURITIES_HELD RT000FTL8_Metric_MetricID = 25
	// The annualized TER for the reporting period
	RT000FTL8_Metric_ANNUALIZED_TER RT000FTL8_Metric_MetricID = 26
	// The annualized TER, year-to-date, as of the end of the reporting period
	RT000FTL8_Metric_ANNUALIZED_YTD_TER RT000FTL8_Metric_MetricID = 27
	// The self-assessment rating (typically on a scale of 1 - below expectations to 5 - well above expectations)
	RT000FTL8_Metric_PROVIDER_SELF_ASSESSMENT RT000FTL8_Metric_MetricID = 28
	// The service assessment rating (typically on a scale of 1 - below expectations to 5 - well above expectations)
	RT000FTL8_Metric_CUSTOMER_SERVICE_ASSESSMENT RT000FTL8_Metric_MetricID = 29
	// The number of nav delays caused by pricing
	RT000FTL8_Metric_NAV_DELAYS_PRICING RT000FTL8_Metric_MetricID = 30
	// The total number of nav delays
	RT000FTL8_Metric_NAV_DELAYS_TOTAL RT000FTL8_Metric_MetricID = 31
	// The total number of nav delays caused by trade inputs
	RT000FTL8_Metric_NAV_DELAYS_TRADE_INPUT RT000FTL8_Metric_MetricID = 32
	// The total number of nav delays caused by FX
	RT000FTL8_Metric_NAV_DELAYS_FX RT000FTL8_Metric_MetricID = 33
	// The total number of nav delays caused by cash income
	RT000FTL8_Metric_NAV_DELAYS_CASH_INCOME RT000FTL8_Metric_MetricID = 34
	// The total number of nav delays caused by corporate actions
	RT000FTL8_Metric_NAV_DELAYS_CORPORATE_ACTIONS RT000FTL8_Metric_MetricID = 35
	// The total number of nav delays caused by valuation validation
	RT000FTL8_Metric_NAV_DELAYS_VALUATION_VALIDATION RT000FTL8_Metric_MetricID = 36
	// The total number of nav delays caused by quality control
	RT000FTL8_Metric_NAV_DELAYS_QUALITY_CONTROL RT000FTL8_Metric_MetricID = 37
	// The total number of nav delays caused by system issues
	RT000FTL8_Metric_NAV_DELAYS_SYSTEM RT000FTL8_Metric_MetricID = 38
	// The total number of nav delays caused by client or third party
	RT000FTL8_Metric_NAV_DELAYS_CLIENT_OR_THIRD_PARTY RT000FTL8_Metric_MetricID = 39
	// The total number of nav delays caused by other causes
	RT000FTL8_Metric_NAV_DELAYS_OTHER RT000FTL8_Metric_MetricID = 40
)

// Enum value maps for RT000FTL8_Metric_MetricID.
var (
	RT000FTL8_Metric_MetricID_name = map[int32]string{
		0:  "METRIC_ID_UNSPECIFIED",
		1:  "NAVS_CALCULATED",
		2:  "NAVS_PROVIDER_DELAYED",
		3:  "NAVS_NON_PROVIDER_DELAYED",
		4:  "NAV_TIMELINESS",
		5:  "NAV_TIMELINESS_PROVIDER",
		6:  "NAV_ACCURACY",
		7:  "NAV_ACCURACY_PROVIDER",
		8:  "NAV_ERRORS_MATERIAL_PROVIDER",
		9:  "NAV_ERRORS_MATERIAL_NON_PROVIDER",
		10: "NAV_ERRORS_NON_MATERIAL_PROVIDER",
		11: "NAV_ERRORS_NON_MATERIAL_NON_PROVIDER",
		12: "STALE_SECURITIES",
		13: "CASH_RECONCILIATIONS_31_TO_60_DAYS",
		14: "CASH_RECONCILIATIONS_GREATER_THAN_60_DAYS",
		15: "STOCK_RECONCILIATIONS_31_TO_60_DAYS",
		16: "STOCK_RECONCILIATIONS_GREATER_THAN_60_DAYS",
		17: "COUNT_SYSTEM_ISSUES",
		18: "NUMBER_LATE_FINANCIAL_REPORTS",
		19: "NET_ASSET_VALUE_REPORTING_CURRENCY",
		20: "NET_ASSET_VALUE_SUBJECT_CURRENCY",
		21: "DIFFICULT_TO_PRICE_SECURITIES",
		22: "SUSPENDED_OR_DELISTED_SECURITIES",
		23: "DISTRESSED_FIXED_INCOME_SECURITIES",
		24: "DEFAULTED_FIXED_INCOME_SECURITIES",
		25: "SECURITIES_HELD",
		26: "ANNUALIZED_TER",
		27: "ANNUALIZED_YTD_TER",
		28: "PROVIDER_SELF_ASSESSMENT",
		29: "CUSTOMER_SERVICE_ASSESSMENT",
		30: "NAV_DELAYS_PRICING",
		31: "NAV_DELAYS_TOTAL",
		32: "NAV_DELAYS_TRADE_INPUT",
		33: "NAV_DELAYS_FX",
		34: "NAV_DELAYS_CASH_INCOME",
		35: "NAV_DELAYS_CORPORATE_ACTIONS",
		36: "NAV_DELAYS_VALUATION_VALIDATION",
		37: "NAV_DELAYS_QUALITY_CONTROL",
		38: "NAV_DELAYS_SYSTEM",
		39: "NAV_DELAYS_CLIENT_OR_THIRD_PARTY",
		40: "NAV_DELAYS_OTHER",
	}
	RT000FTL8_Metric_MetricID_value = map[string]int32{
		"METRIC_ID_UNSPECIFIED":                      0,
		"NAVS_CALCULATED":                            1,
		"NAVS_PROVIDER_DELAYED":                      2,
		"NAVS_NON_PROVIDER_DELAYED":                  3,
		"NAV_TIMELINESS":                             4,
		"NAV_TIMELINESS_PROVIDER":                    5,
		"NAV_ACCURACY":                               6,
		"NAV_ACCURACY_PROVIDER":                      7,
		"NAV_ERRORS_MATERIAL_PROVIDER":               8,
		"NAV_ERRORS_MATERIAL_NON_PROVIDER":           9,
		"NAV_ERRORS_NON_MATERIAL_PROVIDER":           10,
		"NAV_ERRORS_NON_MATERIAL_NON_PROVIDER":       11,
		"STALE_SECURITIES":                           12,
		"CASH_RECONCILIATIONS_31_TO_60_DAYS":         13,
		"CASH_RECONCILIATIONS_GREATER_THAN_60_DAYS":  14,
		"STOCK_RECONCILIATIONS_31_TO_60_DAYS":        15,
		"STOCK_RECONCILIATIONS_GREATER_THAN_60_DAYS": 16,
		"COUNT_SYSTEM_ISSUES":                        17,
		"NUMBER_LATE_FINANCIAL_REPORTS":              18,
		"NET_ASSET_VALUE_REPORTING_CURRENCY":         19,
		"NET_ASSET_VALUE_SUBJECT_CURRENCY":           20,
		"DIFFICULT_TO_PRICE_SECURITIES":              21,
		"SUSPENDED_OR_DELISTED_SECURITIES":           22,
		"DISTRESSED_FIXED_INCOME_SECURITIES":         23,
		"DEFAULTED_FIXED_INCOME_SECURITIES":          24,
		"SECURITIES_HELD":                            25,
		"ANNUALIZED_TER":                             26,
		"ANNUALIZED_YTD_TER":                         27,
		"PROVIDER_SELF_ASSESSMENT":                   28,
		"CUSTOMER_SERVICE_ASSESSMENT":                29,
		"NAV_DELAYS_PRICING":                         30,
		"NAV_DELAYS_TOTAL":                           31,
		"NAV_DELAYS_TRADE_INPUT":                     32,
		"NAV_DELAYS_FX":                              33,
		"NAV_DELAYS_CASH_INCOME":                     34,
		"NAV_DELAYS_CORPORATE_ACTIONS":               35,
		"NAV_DELAYS_VALUATION_VALIDATION":            36,
		"NAV_DELAYS_QUALITY_CONTROL":                 37,
		"NAV_DELAYS_SYSTEM":                          38,
		"NAV_DELAYS_CLIENT_OR_THIRD_PARTY":           39,
		"NAV_DELAYS_OTHER":                           40,
	}
)

func (x RT000FTL8_Metric_MetricID) Enum() *RT000FTL8_Metric_MetricID {
	p := new(RT000FTL8_Metric_MetricID)
	*p = x
	return p
}

func (x RT000FTL8_Metric_MetricID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_Metric_MetricID) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[0].Descriptor()
}

func (RT000FTL8_Metric_MetricID) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[0]
}

func (x RT000FTL8_Metric_MetricID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_Metric_MetricID.Descriptor instead.
func (RT000FTL8_Metric_MetricID) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 0, 0}
}

// The type of value used to measure the metric
type RT000FTL8_Metric_ValueType int32

const (
	RT000FTL8_Metric_METRIC_TYPE_UNSPECIFIED RT000FTL8_Metric_ValueType = 0
	RT000FTL8_Metric_NUMBER                  RT000FTL8_Metric_ValueType = 1
	RT000FTL8_Metric_PERCENTAGE              RT000FTL8_Metric_ValueType = 2
	RT000FTL8_Metric_CURRENCY                RT000FTL8_Metric_ValueType = 3
)

// Enum value maps for RT000FTL8_Metric_ValueType.
var (
	RT000FTL8_Metric_ValueType_name = map[int32]string{
		0: "METRIC_TYPE_UNSPECIFIED",
		1: "NUMBER",
		2: "PERCENTAGE",
		3: "CURRENCY",
	}
	RT000FTL8_Metric_ValueType_value = map[string]int32{
		"METRIC_TYPE_UNSPECIFIED": 0,
		"NUMBER":                  1,
		"PERCENTAGE":              2,
		"CURRENCY":                3,
	}
)

func (x RT000FTL8_Metric_ValueType) Enum() *RT000FTL8_Metric_ValueType {
	p := new(RT000FTL8_Metric_ValueType)
	*p = x
	return p
}

func (x RT000FTL8_Metric_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_Metric_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[1].Descriptor()
}

func (RT000FTL8_Metric_ValueType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[1]
}

func (x RT000FTL8_Metric_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_Metric_ValueType.Descriptor instead.
func (RT000FTL8_Metric_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 0, 1}
}

// Options for how to evaluate the metric
type RT000FTL8_Metric_EvaluationType int32

const (
	RT000FTL8_Metric_EVALUATION_TYPE_UNSPECIFIED RT000FTL8_Metric_EvaluationType = 0
	// A higher result is more favorable
	RT000FTL8_Metric_MAXIMISE RT000FTL8_Metric_EvaluationType = 1
	// A lower result is more favorable
	RT000FTL8_Metric_MINIMISE RT000FTL8_Metric_EvaluationType = 2
)

// Enum value maps for RT000FTL8_Metric_EvaluationType.
var (
	RT000FTL8_Metric_EvaluationType_name = map[int32]string{
		0: "EVALUATION_TYPE_UNSPECIFIED",
		1: "MAXIMISE",
		2: "MINIMISE",
	}
	RT000FTL8_Metric_EvaluationType_value = map[string]int32{
		"EVALUATION_TYPE_UNSPECIFIED": 0,
		"MAXIMISE":                    1,
		"MINIMISE":                    2,
	}
)

func (x RT000FTL8_Metric_EvaluationType) Enum() *RT000FTL8_Metric_EvaluationType {
	p := new(RT000FTL8_Metric_EvaluationType)
	*p = x
	return p
}

func (x RT000FTL8_Metric_EvaluationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_Metric_EvaluationType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[2].Descriptor()
}

func (RT000FTL8_Metric_EvaluationType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[2]
}

func (x RT000FTL8_Metric_EvaluationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_Metric_EvaluationType.Descriptor instead.
func (RT000FTL8_Metric_EvaluationType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 0, 2}
}

// Enumerations of financial identifiers
type RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT000FTL8_SecurityPricingError_IDENTIFIER_UNSPECIFIED RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 0
	// ISO 6166 code of ISIN when available
	RT000FTL8_SecurityPricingError_ISIN RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000FTL8_SecurityPricingError_CUSIP RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000FTL8_SecurityPricingError_SEDOL RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000FTL8_SecurityPricingError_WKN RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000FTL8_SecurityPricingError_BBG_TICKER RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 5
	// BBGID (The Bloomberg Global ID)
	RT000FTL8_SecurityPricingError_BBGID RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 6
	// Reuters RIC (Reuters instrument code)
	RT000FTL8_SecurityPricingError_RIC RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000FTL8_SecurityPricingError_FIGI RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 8
	// LEI 0 Legal Entity Identifier
	RT000FTL8_SecurityPricingError_LEI RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000FTL8_SecurityPricingError_PERM_ID RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 10
)

// Enum value maps for RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier.
var (
	RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) Enum() *RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier {
	p := new(RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[3].Descriptor()
}

func (RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[3]
}

func (x RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier.Descriptor instead.
func (RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Enumeration of asset class
type RT000FTL8_SecurityPricingError_AssetClass int32

const (
	// Asset class not specified
	RT000FTL8_SecurityPricingError_ASSET_CLASS_UNSPECIFIED RT000FTL8_SecurityPricingError_AssetClass = 0
	// Commodities
	RT000FTL8_SecurityPricingError_COMMODITY RT000FTL8_SecurityPricingError_AssetClass = 1
	// Corporate Bonds
	RT000FTL8_SecurityPricingError_CORPORATE RT000FTL8_SecurityPricingError_AssetClass = 2
	// Currency
	RT000FTL8_SecurityPricingError_CURRENCY RT000FTL8_SecurityPricingError_AssetClass = 3
	// Equity
	RT000FTL8_SecurityPricingError_EQUITY RT000FTL8_SecurityPricingError_AssetClass = 4
	// Market index
	RT000FTL8_SecurityPricingError_INDEX RT000FTL8_SecurityPricingError_AssetClass = 5
	// Money Market
	RT000FTL8_SecurityPricingError_MONEY_MARKET RT000FTL8_SecurityPricingError_AssetClass = 6
	// Government Bonds
	RT000FTL8_SecurityPricingError_GOVERNMENT RT000FTL8_SecurityPricingError_AssetClass = 7
	// Mortgage Backed
	RT000FTL8_SecurityPricingError_MTGE RT000FTL8_SecurityPricingError_AssetClass = 8
	// Municipal Bonds
	RT000FTL8_SecurityPricingError_MUNI RT000FTL8_SecurityPricingError_AssetClass = 9
	// Total return swap on a basket
	RT000FTL8_SecurityPricingError_TOTAL_RETURN_SWAP RT000FTL8_SecurityPricingError_AssetClass = 10
)

// Enum value maps for RT000FTL8_SecurityPricingError_AssetClass.
var (
	RT000FTL8_SecurityPricingError_AssetClass_name = map[int32]string{
		0:  "ASSET_CLASS_UNSPECIFIED",
		1:  "COMMODITY",
		2:  "CORPORATE",
		3:  "CURRENCY",
		4:  "EQUITY",
		5:  "INDEX",
		6:  "MONEY_MARKET",
		7:  "GOVERNMENT",
		8:  "MTGE",
		9:  "MUNI",
		10: "TOTAL_RETURN_SWAP",
	}
	RT000FTL8_SecurityPricingError_AssetClass_value = map[string]int32{
		"ASSET_CLASS_UNSPECIFIED": 0,
		"COMMODITY":               1,
		"CORPORATE":               2,
		"CURRENCY":                3,
		"EQUITY":                  4,
		"INDEX":                   5,
		"MONEY_MARKET":            6,
		"GOVERNMENT":              7,
		"MTGE":                    8,
		"MUNI":                    9,
		"TOTAL_RETURN_SWAP":       10,
	}
)

func (x RT000FTL8_SecurityPricingError_AssetClass) Enum() *RT000FTL8_SecurityPricingError_AssetClass {
	p := new(RT000FTL8_SecurityPricingError_AssetClass)
	*p = x
	return p
}

func (x RT000FTL8_SecurityPricingError_AssetClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_SecurityPricingError_AssetClass) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[4].Descriptor()
}

func (RT000FTL8_SecurityPricingError_AssetClass) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[4]
}

func (x RT000FTL8_SecurityPricingError_AssetClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_SecurityPricingError_AssetClass.Descriptor instead.
func (RT000FTL8_SecurityPricingError_AssetClass) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 2, 1}
}

// Enumerations of financial identifiers
type RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT000FTL8_StaleSecurity_IDENTIFIER_UNSPECIFIED RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 0
	// ISO 6166 code of ISIN when available
	RT000FTL8_StaleSecurity_ISIN RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000FTL8_StaleSecurity_CUSIP RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000FTL8_StaleSecurity_SEDOL RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000FTL8_StaleSecurity_WKN RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000FTL8_StaleSecurity_BBG_TICKER RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 5
	// BBGID (The Bloomberg Global ID)
	RT000FTL8_StaleSecurity_BBGID RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 6
	// Reuters RIC (Reuters instrument code)
	RT000FTL8_StaleSecurity_RIC RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000FTL8_StaleSecurity_FIGI RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 8
	// LEI 0 Legal Entity Identifier
	RT000FTL8_StaleSecurity_LEI RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000FTL8_StaleSecurity_PERM_ID RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 10
)

// Enum value maps for RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier.
var (
	RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) Enum() *RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier {
	p := new(RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[5].Descriptor()
}

func (RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[5]
}

func (x RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier.Descriptor instead.
func (RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 3, 0}
}

// Enumeration of asset class
type RT000FTL8_StaleSecurity_AssetClass int32

const (
	// Asset class not specified
	RT000FTL8_StaleSecurity_ASSET_CLASS_UNSPECIFIED RT000FTL8_StaleSecurity_AssetClass = 0
	// Commodities
	RT000FTL8_StaleSecurity_COMMODITY RT000FTL8_StaleSecurity_AssetClass = 1
	// Corporate Bonds
	RT000FTL8_StaleSecurity_CORPORATE RT000FTL8_StaleSecurity_AssetClass = 2
	// Currency
	RT000FTL8_StaleSecurity_CURRENCY RT000FTL8_StaleSecurity_AssetClass = 3
	// Equity
	RT000FTL8_StaleSecurity_EQUITY RT000FTL8_StaleSecurity_AssetClass = 4
	// Market index
	RT000FTL8_StaleSecurity_INDEX RT000FTL8_StaleSecurity_AssetClass = 5
	// Money Market
	RT000FTL8_StaleSecurity_MONEY_MARKET RT000FTL8_StaleSecurity_AssetClass = 6
	// Government Bonds
	RT000FTL8_StaleSecurity_GOVERNMENT RT000FTL8_StaleSecurity_AssetClass = 7
	// Mortgage Backed
	RT000FTL8_StaleSecurity_MTGE RT000FTL8_StaleSecurity_AssetClass = 8
	// Municipal Bonds
	RT000FTL8_StaleSecurity_MUNI RT000FTL8_StaleSecurity_AssetClass = 9
	// Total return swap on a basket
	RT000FTL8_StaleSecurity_TOTAL_RETURN_SWAP RT000FTL8_StaleSecurity_AssetClass = 10
)

// Enum value maps for RT000FTL8_StaleSecurity_AssetClass.
var (
	RT000FTL8_StaleSecurity_AssetClass_name = map[int32]string{
		0:  "ASSET_CLASS_UNSPECIFIED",
		1:  "COMMODITY",
		2:  "CORPORATE",
		3:  "CURRENCY",
		4:  "EQUITY",
		5:  "INDEX",
		6:  "MONEY_MARKET",
		7:  "GOVERNMENT",
		8:  "MTGE",
		9:  "MUNI",
		10: "TOTAL_RETURN_SWAP",
	}
	RT000FTL8_StaleSecurity_AssetClass_value = map[string]int32{
		"ASSET_CLASS_UNSPECIFIED": 0,
		"COMMODITY":               1,
		"CORPORATE":               2,
		"CURRENCY":                3,
		"EQUITY":                  4,
		"INDEX":                   5,
		"MONEY_MARKET":            6,
		"GOVERNMENT":              7,
		"MTGE":                    8,
		"MUNI":                    9,
		"TOTAL_RETURN_SWAP":       10,
	}
)

func (x RT000FTL8_StaleSecurity_AssetClass) Enum() *RT000FTL8_StaleSecurity_AssetClass {
	p := new(RT000FTL8_StaleSecurity_AssetClass)
	*p = x
	return p
}

func (x RT000FTL8_StaleSecurity_AssetClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_StaleSecurity_AssetClass) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[6].Descriptor()
}

func (RT000FTL8_StaleSecurity_AssetClass) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[6]
}

func (x RT000FTL8_StaleSecurity_AssetClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_StaleSecurity_AssetClass.Descriptor instead.
func (RT000FTL8_StaleSecurity_AssetClass) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 3, 1}
}

// Enumerations of financial identifiers
type RT000FTL8_StockBreak_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT000FTL8_StockBreak_IDENTIFIER_UNSPECIFIED RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 0
	// ISO 6166 code of ISIN when available
	RT000FTL8_StockBreak_ISIN RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000FTL8_StockBreak_CUSIP RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000FTL8_StockBreak_SEDOL RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000FTL8_StockBreak_WKN RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000FTL8_StockBreak_BBG_TICKER RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 5
	// BBGID (The Bloomberg Global ID)
	RT000FTL8_StockBreak_BBGID RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 6
	// Reuters RIC (Reuters instrument code)
	RT000FTL8_StockBreak_RIC RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000FTL8_StockBreak_FIGI RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 8
	// LEI 0 Legal Entity Identifier
	RT000FTL8_StockBreak_LEI RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000FTL8_StockBreak_PERM_ID RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 10
)

// Enum value maps for RT000FTL8_StockBreak_FinancialInstrumentIdentifier.
var (
	RT000FTL8_StockBreak_FinancialInstrumentIdentifier_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000FTL8_StockBreak_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000FTL8_StockBreak_FinancialInstrumentIdentifier) Enum() *RT000FTL8_StockBreak_FinancialInstrumentIdentifier {
	p := new(RT000FTL8_StockBreak_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT000FTL8_StockBreak_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_StockBreak_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[7].Descriptor()
}

func (RT000FTL8_StockBreak_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[7]
}

func (x RT000FTL8_StockBreak_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_StockBreak_FinancialInstrumentIdentifier.Descriptor instead.
func (RT000FTL8_StockBreak_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 4, 0}
}

// Enumeration of asset class
type RT000FTL8_StockBreak_AssetClass int32

const (
	// Asset class not specified
	RT000FTL8_StockBreak_ASSET_CLASS_UNSPECIFIED RT000FTL8_StockBreak_AssetClass = 0
	// Commodities
	RT000FTL8_StockBreak_COMMODITY RT000FTL8_StockBreak_AssetClass = 1
	// Corporate Bonds
	RT000FTL8_StockBreak_CORPORATE RT000FTL8_StockBreak_AssetClass = 2
	// Currency
	RT000FTL8_StockBreak_CURRENCY RT000FTL8_StockBreak_AssetClass = 3
	// Equity
	RT000FTL8_StockBreak_EQUITY RT000FTL8_StockBreak_AssetClass = 4
	// Market index
	RT000FTL8_StockBreak_INDEX RT000FTL8_StockBreak_AssetClass = 5
	// Money Market
	RT000FTL8_StockBreak_MONEY_MARKET RT000FTL8_StockBreak_AssetClass = 6
	// Government Bonds
	RT000FTL8_StockBreak_GOVERNMENT RT000FTL8_StockBreak_AssetClass = 7
	// Mortgage Backed
	RT000FTL8_StockBreak_MTGE RT000FTL8_StockBreak_AssetClass = 8
	// Municipal Bonds
	RT000FTL8_StockBreak_MUNI RT000FTL8_StockBreak_AssetClass = 9
	// Total return swap on a basket
	RT000FTL8_StockBreak_TOTAL_RETURN_SWAP RT000FTL8_StockBreak_AssetClass = 10
)

// Enum value maps for RT000FTL8_StockBreak_AssetClass.
var (
	RT000FTL8_StockBreak_AssetClass_name = map[int32]string{
		0:  "ASSET_CLASS_UNSPECIFIED",
		1:  "COMMODITY",
		2:  "CORPORATE",
		3:  "CURRENCY",
		4:  "EQUITY",
		5:  "INDEX",
		6:  "MONEY_MARKET",
		7:  "GOVERNMENT",
		8:  "MTGE",
		9:  "MUNI",
		10: "TOTAL_RETURN_SWAP",
	}
	RT000FTL8_StockBreak_AssetClass_value = map[string]int32{
		"ASSET_CLASS_UNSPECIFIED": 0,
		"COMMODITY":               1,
		"CORPORATE":               2,
		"CURRENCY":                3,
		"EQUITY":                  4,
		"INDEX":                   5,
		"MONEY_MARKET":            6,
		"GOVERNMENT":              7,
		"MTGE":                    8,
		"MUNI":                    9,
		"TOTAL_RETURN_SWAP":       10,
	}
)

func (x RT000FTL8_StockBreak_AssetClass) Enum() *RT000FTL8_StockBreak_AssetClass {
	p := new(RT000FTL8_StockBreak_AssetClass)
	*p = x
	return p
}

func (x RT000FTL8_StockBreak_AssetClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_StockBreak_AssetClass) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[8].Descriptor()
}

func (RT000FTL8_StockBreak_AssetClass) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[8]
}

func (x RT000FTL8_StockBreak_AssetClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_StockBreak_AssetClass.Descriptor instead.
func (RT000FTL8_StockBreak_AssetClass) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 4, 1}
}

// Enumerations of financial identifiers
type RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes int32

const (
	// Source not specified by the user.
	RT000FTL8_TotalExpenseRatio_IDENTIFIER_UNSPECIFIED RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 0
	// ISO 6166 code of ISIN when available
	RT000FTL8_TotalExpenseRatio_ISIN RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000FTL8_TotalExpenseRatio_CUSIP RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000FTL8_TotalExpenseRatio_SEDOL RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000FTL8_TotalExpenseRatio_WKN RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000FTL8_TotalExpenseRatio_BBG_TICKER RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 5
	// BBGID (The Bloomberg Global ID)
	RT000FTL8_TotalExpenseRatio_BBGID RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 6
	// Reuters RIC (Reuters instrument code)
	RT000FTL8_TotalExpenseRatio_RIC RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000FTL8_TotalExpenseRatio_FIGI RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 8
	// LEI 0 Legal Entity Identifier
	RT000FTL8_TotalExpenseRatio_LEI RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000FTL8_TotalExpenseRatio_PERM_ID RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 10
)

// Enum value maps for RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes.
var (
	RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) Enum() *RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes {
	p := new(RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes)
	*p = x
	return p
}

func (x RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[9].Descriptor()
}

func (RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[9]
}

func (x RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes.Descriptor instead.
func (RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 6, 0}
}

// Enumerations of financial identifiers
type RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes int32

const (
	// Source not specified by the user.
	RT000FTL8_PerShareClassNAV_IDENTIFIER_UNSPECIFIED RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 0
	// ISO 6166 code of ISIN when available
	RT000FTL8_PerShareClassNAV_ISIN RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000FTL8_PerShareClassNAV_CUSIP RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000FTL8_PerShareClassNAV_SEDOL RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000FTL8_PerShareClassNAV_WKN RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000FTL8_PerShareClassNAV_BBG_TICKER RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 5
	// BBGID (The Bloomberg Global ID)
	RT000FTL8_PerShareClassNAV_BBGID RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 6
	// Reuters RIC (Reuters instrument code)
	RT000FTL8_PerShareClassNAV_RIC RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000FTL8_PerShareClassNAV_FIGI RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 8
	// LEI 0 Legal Entity Identifier
	RT000FTL8_PerShareClassNAV_LEI RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000FTL8_PerShareClassNAV_PERM_ID RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes = 10
)

// Enum value maps for RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes.
var (
	RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes) Enum() *RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes {
	p := new(RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes)
	*p = x
	return p
}

func (x RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[10].Descriptor()
}

func (RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[10]
}

func (x RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes.Descriptor instead.
func (RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 9, 0}
}

// Enumerations of types of errors
type RT000FTL8_NAVCalculationErrorInformation_ErrorType int32

const (
	RT000FTL8_NAVCalculationErrorInformation_ERROR_TYPE_UNSPECIFIED                        RT000FTL8_NAVCalculationErrorInformation_ErrorType = 0
	RT000FTL8_NAVCalculationErrorInformation_SECURITIES_EXCEPT_DERIVATIVES_VALUATION_ERROR RT000FTL8_NAVCalculationErrorInformation_ErrorType = 1
	RT000FTL8_NAVCalculationErrorInformation_ACCOUNTING_ERROR                              RT000FTL8_NAVCalculationErrorInformation_ErrorType = 2
	RT000FTL8_NAVCalculationErrorInformation_FEES_AND_ACCRUALS_ERROR                       RT000FTL8_NAVCalculationErrorInformation_ErrorType = 3
	RT000FTL8_NAVCalculationErrorInformation_CORPORATE_ACTION_ERROR                        RT000FTL8_NAVCalculationErrorInformation_ErrorType = 4
	RT000FTL8_NAVCalculationErrorInformation_DERIVATIVES_VALUATION_ERROR                   RT000FTL8_NAVCalculationErrorInformation_ErrorType = 5
	RT000FTL8_NAVCalculationErrorInformation_OTHER_ERROR                                   RT000FTL8_NAVCalculationErrorInformation_ErrorType = 6
)

// Enum value maps for RT000FTL8_NAVCalculationErrorInformation_ErrorType.
var (
	RT000FTL8_NAVCalculationErrorInformation_ErrorType_name = map[int32]string{
		0: "ERROR_TYPE_UNSPECIFIED",
		1: "SECURITIES_EXCEPT_DERIVATIVES_VALUATION_ERROR",
		2: "ACCOUNTING_ERROR",
		3: "FEES_AND_ACCRUALS_ERROR",
		4: "CORPORATE_ACTION_ERROR",
		5: "DERIVATIVES_VALUATION_ERROR",
		6: "OTHER_ERROR",
	}
	RT000FTL8_NAVCalculationErrorInformation_ErrorType_value = map[string]int32{
		"ERROR_TYPE_UNSPECIFIED":                        0,
		"SECURITIES_EXCEPT_DERIVATIVES_VALUATION_ERROR": 1,
		"ACCOUNTING_ERROR":                              2,
		"FEES_AND_ACCRUALS_ERROR":                       3,
		"CORPORATE_ACTION_ERROR":                        4,
		"DERIVATIVES_VALUATION_ERROR":                   5,
		"OTHER_ERROR":                                   6,
	}
)

func (x RT000FTL8_NAVCalculationErrorInformation_ErrorType) Enum() *RT000FTL8_NAVCalculationErrorInformation_ErrorType {
	p := new(RT000FTL8_NAVCalculationErrorInformation_ErrorType)
	*p = x
	return p
}

func (x RT000FTL8_NAVCalculationErrorInformation_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_NAVCalculationErrorInformation_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[11].Descriptor()
}

func (RT000FTL8_NAVCalculationErrorInformation_ErrorType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[11]
}

func (x RT000FTL8_NAVCalculationErrorInformation_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_NAVCalculationErrorInformation_ErrorType.Descriptor instead.
func (RT000FTL8_NAVCalculationErrorInformation_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 10, 0}
}

// Enumerations of impact of the error
type RT000FTL8_NAVCalculationErrorInformation_Impact int32

const (
	RT000FTL8_NAVCalculationErrorInformation_IMPACT_UNSPECIFIED RT000FTL8_NAVCalculationErrorInformation_Impact = 0
	RT000FTL8_NAVCalculationErrorInformation_WITHOUT_IMPACT     RT000FTL8_NAVCalculationErrorInformation_Impact = 1
	RT000FTL8_NAVCalculationErrorInformation_IMMATERIAL_IMPACT  RT000FTL8_NAVCalculationErrorInformation_Impact = 2
	RT000FTL8_NAVCalculationErrorInformation_MATERIAL_IMPACT    RT000FTL8_NAVCalculationErrorInformation_Impact = 3
)

// Enum value maps for RT000FTL8_NAVCalculationErrorInformation_Impact.
var (
	RT000FTL8_NAVCalculationErrorInformation_Impact_name = map[int32]string{
		0: "IMPACT_UNSPECIFIED",
		1: "WITHOUT_IMPACT",
		2: "IMMATERIAL_IMPACT",
		3: "MATERIAL_IMPACT",
	}
	RT000FTL8_NAVCalculationErrorInformation_Impact_value = map[string]int32{
		"IMPACT_UNSPECIFIED": 0,
		"WITHOUT_IMPACT":     1,
		"IMMATERIAL_IMPACT":  2,
		"MATERIAL_IMPACT":    3,
	}
)

func (x RT000FTL8_NAVCalculationErrorInformation_Impact) Enum() *RT000FTL8_NAVCalculationErrorInformation_Impact {
	p := new(RT000FTL8_NAVCalculationErrorInformation_Impact)
	*p = x
	return p
}

func (x RT000FTL8_NAVCalculationErrorInformation_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_NAVCalculationErrorInformation_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[12].Descriptor()
}

func (RT000FTL8_NAVCalculationErrorInformation_Impact) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[12]
}

func (x RT000FTL8_NAVCalculationErrorInformation_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_NAVCalculationErrorInformation_Impact.Descriptor instead.
func (RT000FTL8_NAVCalculationErrorInformation_Impact) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 10, 1}
}

// Enumerations of types of breaches
type RT000FTL8_InvestmentBreach_BreachType int32

const (
	RT000FTL8_InvestmentBreach_BREACH_TYPE_UNSPECIFIED RT000FTL8_InvestmentBreach_BreachType = 0
	// Luxembourg UCI Art. 41 (1) L2010 - Eligibility requirements
	RT000FTL8_InvestmentBreach_LUX_ART_41_ELIGIBILITY_REQUIREMENTS RT000FTL8_InvestmentBreach_BreachType = 1
	// Luxembourg UCI Art. 41 (2) L2010 - 10% TS/MMI (Trash Ratio)
	RT000FTL8_InvestmentBreach_LUX_ART_41_10_PERCENT_TS_MMI_TRASH_RATIO RT000FTL8_InvestmentBreach_BreachType = 2
	// Luxembourg UCI Art. 43 (1) L2010 - 10% issuer TS/MMI
	RT000FTL8_InvestmentBreach_LUX_ART_43_10_PERCENT_ISSUER RT000FTL8_InvestmentBreach_BreachType = 3
	// Luxembourg UCI Art. 43 (1) L2010 - 20% deposits
	RT000FTL8_InvestmentBreach_LUX_ART_43_20_PERCENT_DEPOSITS RT000FTL8_InvestmentBreach_BreachType = 4
	// Luxembourg UCI Art. 43 (1) L2010 - 5%/10% FDI counterparty risk
	RT000FTL8_InvestmentBreach_LUX_ART_43_FDI_COUNTERPARTY_RISK RT000FTL8_InvestmentBreach_BreachType = 5
	// Luxembourg UCI Art. 43 (2) L2010 - 5%/10%/40% - issuer TS/MMI
	RT000FTL8_InvestmentBreach_LUX_ART_43_ISSUER_TS_MMI RT000FTL8_InvestmentBreach_BreachType = 6
	// Luxembourg UCI Art. 43 (2) L2010 - 20% combined limit TS/MMI/deposits/FDI
	RT000FTL8_InvestmentBreach_LUX_ART_43_20_PERCENT_COMBINED_LIMIT RT000FTL8_InvestmentBreach_BreachType = 7
	// Luxembourg UCI Art. 43 (3) L2010 - 35% TS/MMI
	RT000FTL8_InvestmentBreach_LUX_ART_43_35_PERCENT_TS_MMI RT000FTL8_InvestmentBreach_BreachType = 8
	// Luxembourg UCI Art. 45 (1) L2010 - 100%/6 issues/30% TS/MMI (above 35%)
	RT000FTL8_InvestmentBreach_LUX_ART_45_100_PERCENT_6_ISSUES RT000FTL8_InvestmentBreach_BreachType = 9
	// Luxembourg UCI Art. 46 (1) L2010 - 20% UCITS/UCI
	RT000FTL8_InvestmentBreach_LUX_ART_46_20_PERCENT_UCITS_UCI RT000FTL8_InvestmentBreach_BreachType = 10
	// Luxembourg UCI Art. 48 (2) L2010 - significant influence
	RT000FTL8_InvestmentBreach_LUX_ART_48_SIGNIFICANT_INFLUENCE RT000FTL8_InvestmentBreach_BreachType = 11
	// Luxembourg UCI Art. 50 (2) L2010 - 10% borrowings on a temporary basis
	RT000FTL8_InvestmentBreach_LUX_ART_50_10_PERCENT_BORROWINGS_TEMP_BASIS RT000FTL8_InvestmentBreach_BreachType = 12
	// Luxembourg UCI Art. 52 L2010 - No uncovered sales
	RT000FTL8_InvestmentBreach_LUX_ART_52_NO_UNCOVERED_SALES RT000FTL8_InvestmentBreach_BreachType = 13
	// ESMA guidelines (Eligibility/Diversification of collateral)
	RT000FTL8_InvestmentBreach_ESMA_GUIDELINES_COLLATERAL RT000FTL8_InvestmentBreach_BreachType = 14
	// LUX SIF - 30% issuer
	RT000FTL8_InvestmentBreach_LUX_SIF_30_PERCENT_ISSUER RT000FTL8_InvestmentBreach_BreachType = 15
	// Breach of specific prospectus rules
	RT000FTL8_InvestmentBreach_BREACH_OF_PROSPECTUS_RULES RT000FTL8_InvestmentBreach_BreachType = 16
	// Breach of other investment restriction rule
	RT000FTL8_InvestmentBreach_BREACH_OF_OTHER_RULE RT000FTL8_InvestmentBreach_BreachType = 17
)

// Enum value maps for RT000FTL8_InvestmentBreach_BreachType.
var (
	RT000FTL8_InvestmentBreach_BreachType_name = map[int32]string{
		0:  "BREACH_TYPE_UNSPECIFIED",
		1:  "LUX_ART_41_ELIGIBILITY_REQUIREMENTS",
		2:  "LUX_ART_41_10_PERCENT_TS_MMI_TRASH_RATIO",
		3:  "LUX_ART_43_10_PERCENT_ISSUER",
		4:  "LUX_ART_43_20_PERCENT_DEPOSITS",
		5:  "LUX_ART_43_FDI_COUNTERPARTY_RISK",
		6:  "LUX_ART_43_ISSUER_TS_MMI",
		7:  "LUX_ART_43_20_PERCENT_COMBINED_LIMIT",
		8:  "LUX_ART_43_35_PERCENT_TS_MMI",
		9:  "LUX_ART_45_100_PERCENT_6_ISSUES",
		10: "LUX_ART_46_20_PERCENT_UCITS_UCI",
		11: "LUX_ART_48_SIGNIFICANT_INFLUENCE",
		12: "LUX_ART_50_10_PERCENT_BORROWINGS_TEMP_BASIS",
		13: "LUX_ART_52_NO_UNCOVERED_SALES",
		14: "ESMA_GUIDELINES_COLLATERAL",
		15: "LUX_SIF_30_PERCENT_ISSUER",
		16: "BREACH_OF_PROSPECTUS_RULES",
		17: "BREACH_OF_OTHER_RULE",
	}
	RT000FTL8_InvestmentBreach_BreachType_value = map[string]int32{
		"BREACH_TYPE_UNSPECIFIED":                     0,
		"LUX_ART_41_ELIGIBILITY_REQUIREMENTS":         1,
		"LUX_ART_41_10_PERCENT_TS_MMI_TRASH_RATIO":    2,
		"LUX_ART_43_10_PERCENT_ISSUER":                3,
		"LUX_ART_43_20_PERCENT_DEPOSITS":              4,
		"LUX_ART_43_FDI_COUNTERPARTY_RISK":            5,
		"LUX_ART_43_ISSUER_TS_MMI":                    6,
		"LUX_ART_43_20_PERCENT_COMBINED_LIMIT":        7,
		"LUX_ART_43_35_PERCENT_TS_MMI":                8,
		"LUX_ART_45_100_PERCENT_6_ISSUES":             9,
		"LUX_ART_46_20_PERCENT_UCITS_UCI":             10,
		"LUX_ART_48_SIGNIFICANT_INFLUENCE":            11,
		"LUX_ART_50_10_PERCENT_BORROWINGS_TEMP_BASIS": 12,
		"LUX_ART_52_NO_UNCOVERED_SALES":               13,
		"ESMA_GUIDELINES_COLLATERAL":                  14,
		"LUX_SIF_30_PERCENT_ISSUER":                   15,
		"BREACH_OF_PROSPECTUS_RULES":                  16,
		"BREACH_OF_OTHER_RULE":                        17,
	}
)

func (x RT000FTL8_InvestmentBreach_BreachType) Enum() *RT000FTL8_InvestmentBreach_BreachType {
	p := new(RT000FTL8_InvestmentBreach_BreachType)
	*p = x
	return p
}

func (x RT000FTL8_InvestmentBreach_BreachType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_InvestmentBreach_BreachType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[13].Descriptor()
}

func (RT000FTL8_InvestmentBreach_BreachType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[13]
}

func (x RT000FTL8_InvestmentBreach_BreachType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_InvestmentBreach_BreachType.Descriptor instead.
func (RT000FTL8_InvestmentBreach_BreachType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 11, 0}
}

// Enumerations of impact of the error
type RT000FTL8_InvestmentBreach_Impact int32

const (
	RT000FTL8_InvestmentBreach_IMPACT_UNSPECIFIED RT000FTL8_InvestmentBreach_Impact = 0
	RT000FTL8_InvestmentBreach_WITHOUT_IMPACT     RT000FTL8_InvestmentBreach_Impact = 1
	RT000FTL8_InvestmentBreach_IMMATERIAL_LOSS    RT000FTL8_InvestmentBreach_Impact = 2
	RT000FTL8_InvestmentBreach_IMMATERIAL_GAIN    RT000FTL8_InvestmentBreach_Impact = 3
	RT000FTL8_InvestmentBreach_MATERIAL_LOSS      RT000FTL8_InvestmentBreach_Impact = 4
	RT000FTL8_InvestmentBreach_MATERIAL_GAIN      RT000FTL8_InvestmentBreach_Impact = 5
)

// Enum value maps for RT000FTL8_InvestmentBreach_Impact.
var (
	RT000FTL8_InvestmentBreach_Impact_name = map[int32]string{
		0: "IMPACT_UNSPECIFIED",
		1: "WITHOUT_IMPACT",
		2: "IMMATERIAL_LOSS",
		3: "IMMATERIAL_GAIN",
		4: "MATERIAL_LOSS",
		5: "MATERIAL_GAIN",
	}
	RT000FTL8_InvestmentBreach_Impact_value = map[string]int32{
		"IMPACT_UNSPECIFIED": 0,
		"WITHOUT_IMPACT":     1,
		"IMMATERIAL_LOSS":    2,
		"IMMATERIAL_GAIN":    3,
		"MATERIAL_LOSS":      4,
		"MATERIAL_GAIN":      5,
	}
)

func (x RT000FTL8_InvestmentBreach_Impact) Enum() *RT000FTL8_InvestmentBreach_Impact {
	p := new(RT000FTL8_InvestmentBreach_Impact)
	*p = x
	return p
}

func (x RT000FTL8_InvestmentBreach_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_InvestmentBreach_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000FTL8_proto_enumTypes[14].Descriptor()
}

func (RT000FTL8_InvestmentBreach_Impact) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000FTL8_proto_enumTypes[14]
}

func (x RT000FTL8_InvestmentBreach_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_InvestmentBreach_Impact.Descriptor instead.
func (RT000FTL8_InvestmentBreach_Impact) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 11, 1}
}

// Fund Accounting Monthly KPI & MI Report for governance oversight and reporting for UCITS funds
type RT000FTL8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KPIs & other key quantitative metrics
	Metrics []*RT000FTL8_Metric `protobuf:"bytes,20,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Time series of historic net asset value data
	NetAssetValues []*RT000FTL8_NetAssetValueSnapshot `protobuf:"bytes,51,rep,name=net_asset_values,json=netAssetValues,proto3" json:"net_asset_values,omitempty"`
	// Recent instrument pricing errors. Convention is to provide 13 months of history.
	SecurityPricingErrors []*RT000FTL8_SecurityPricingError `protobuf:"bytes,53,rep,name=security_pricing_errors,json=securityPricingErrors,proto3" json:"security_pricing_errors,omitempty"`
	// Stale prices as of the end of the reporting month
	StaleSecurities []*RT000FTL8_StaleSecurity `protobuf:"bytes,54,rep,name=stale_securities,json=staleSecurities,proto3" json:"stale_securities,omitempty"`
	// Recent Stock Breaks greater than 5 days.
	StockBreaks []*RT000FTL8_StockBreak `protobuf:"bytes,55,rep,name=stock_breaks,json=stockBreaks,proto3" json:"stock_breaks,omitempty"`
	// Recent Cash Breaks greater than 5 days.
	CashBreaks []*RT000FTL8_CashBreak `protobuf:"bytes,56,rep,name=cash_breaks,json=cashBreaks,proto3" json:"cash_breaks,omitempty"`
	// The timeseries of TERs per share class.
	TotalExpenseRatios []*RT000FTL8_TotalExpenseRatio `protobuf:"bytes,57,rep,name=total_expense_ratios,json=totalExpenseRatios,proto3" json:"total_expense_ratios,omitempty"`
	// Recent invoices paid. Convention is to provide 6 months of history.
	RecentInvoices []*RT000FTL8_Invoice `protobuf:"bytes,58,rep,name=recent_invoices,json=recentInvoices,proto3" json:"recent_invoices,omitempty"`
	// The list of Swing Pricing events within the fund. Swing pricing is a method used by collective investment schemes to adjust the net asset value (NAV) of the fund in order to protect existing shareholders from the negative impact of large purchases or redemptions by new or existing shareholders. This is done by adjusting the NAV of the fund to reflect the anticipated costs associated with buying or selling the underlying assets of the fund. The adjustment is typically made by charging or crediting a "swing factor" to the NAV of the fund, which is based on the size of the purchase or redemption relative to the fund's assets under management (AUM). The goal of swing pricing is to ensure that the costs of buying and selling assets are borne by those who cause the costs, rather than by all shareholders of the fund.
	SwingPricingEvents []*RT000FTL8_SwingPricingEvent `protobuf:"bytes,59,rep,name=swing_pricing_events,json=swingPricingEvents,proto3" json:"swing_pricing_events,omitempty"`
	// Share class specific nav information
	PerShareClassNavHistorical []*RT000FTL8_PerShareClassNAV `protobuf:"bytes,60,rep,name=per_share_class_nav_historical,json=perShareClassNavHistorical,proto3" json:"per_share_class_nav_historical,omitempty"`
	// NAV Calculation Errors
	NavCalculationErrors []*RT000FTL8_NAVCalculationErrorInformation `protobuf:"bytes,61,rep,name=nav_calculation_errors,json=navCalculationErrors,proto3" json:"nav_calculation_errors,omitempty"`
	// Investment breaches
	InvestmentBreaches []*RT000FTL8_InvestmentBreach `protobuf:"bytes,62,rep,name=investment_breaches,json=investmentBreaches,proto3" json:"investment_breaches,omitempty"`
}

func (x *RT000FTL8) Reset() {
	*x = RT000FTL8{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8) ProtoMessage() {}

func (x *RT000FTL8) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8.ProtoReflect.Descriptor instead.
func (*RT000FTL8) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0}
}

func (x *RT000FTL8) GetMetrics() []*RT000FTL8_Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *RT000FTL8) GetNetAssetValues() []*RT000FTL8_NetAssetValueSnapshot {
	if x != nil {
		return x.NetAssetValues
	}
	return nil
}

func (x *RT000FTL8) GetSecurityPricingErrors() []*RT000FTL8_SecurityPricingError {
	if x != nil {
		return x.SecurityPricingErrors
	}
	return nil
}

func (x *RT000FTL8) GetStaleSecurities() []*RT000FTL8_StaleSecurity {
	if x != nil {
		return x.StaleSecurities
	}
	return nil
}

func (x *RT000FTL8) GetStockBreaks() []*RT000FTL8_StockBreak {
	if x != nil {
		return x.StockBreaks
	}
	return nil
}

func (x *RT000FTL8) GetCashBreaks() []*RT000FTL8_CashBreak {
	if x != nil {
		return x.CashBreaks
	}
	return nil
}

func (x *RT000FTL8) GetTotalExpenseRatios() []*RT000FTL8_TotalExpenseRatio {
	if x != nil {
		return x.TotalExpenseRatios
	}
	return nil
}

func (x *RT000FTL8) GetRecentInvoices() []*RT000FTL8_Invoice {
	if x != nil {
		return x.RecentInvoices
	}
	return nil
}

func (x *RT000FTL8) GetSwingPricingEvents() []*RT000FTL8_SwingPricingEvent {
	if x != nil {
		return x.SwingPricingEvents
	}
	return nil
}

func (x *RT000FTL8) GetPerShareClassNavHistorical() []*RT000FTL8_PerShareClassNAV {
	if x != nil {
		return x.PerShareClassNavHistorical
	}
	return nil
}

func (x *RT000FTL8) GetNavCalculationErrors() []*RT000FTL8_NAVCalculationErrorInformation {
	if x != nil {
		return x.NavCalculationErrors
	}
	return nil
}

func (x *RT000FTL8) GetInvestmentBreaches() []*RT000FTL8_InvestmentBreach {
	if x != nil {
		return x.InvestmentBreaches
	}
	return nil
}

// Batch set of RT000FTL8 responses
type RT000FTL8Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*RT000FTL8 `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *RT000FTL8Batch) Reset() {
	*x = RT000FTL8Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8Batch) ProtoMessage() {}

func (x *RT000FTL8Batch) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8Batch.ProtoReflect.Descriptor instead.
func (*RT000FTL8Batch) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{1}
}

func (x *RT000FTL8Batch) GetResponse() []*RT000FTL8 {
	if x != nil {
		return x.Response
	}
	return nil
}

// Definition of a metric
type RT000FTL8_Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date the data was produced
	ProductionDate *date.Date `protobuf:"bytes,1,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
	// The end date of the reporting period of the metric (inclusive)
	// For example, if the metric measures data for the month of December 2022, 2022-12-31
	ReportingPeriodEnd *date.Date `protobuf:"bytes,2,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
	// The start date of the reporting period of the metric (inclusive)
	// For example, if the metric measures data for the month of December 2022, 2022-12-01
	ReportingPeriodStart *date.Date `protobuf:"bytes,3,opt,name=reporting_period_start,json=reportingPeriodStart,proto3" json:"reporting_period_start,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,4,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,5,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,6,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,7,opt,name=fund,proto3" json:"fund,omitempty"`
	// The identifier of what the metric measures
	MetricId RT000FTL8_Metric_MetricID `protobuf:"varint,8,opt,name=metric_id,json=metricId,proto3,enum=standards.open.v1.RT000FTL8_Metric_MetricID" json:"metric_id,omitempty"`
	// Enumeration for how to interpret the metric value
	ValueType RT000FTL8_Metric_ValueType `protobuf:"varint,9,opt,name=value_type,json=valueType,proto3,enum=standards.open.v1.RT000FTL8_Metric_ValueType" json:"value_type,omitempty"`
	// If the metric type is "MONEY" then a 3-letter currency code defined in ISO 4217 must be provided.
	// The country code is required to comply with the 3-letter ISO 3166-1 alpha-3 standard.
	// The ISO 3166-1 alpha-3 is a set of 3-letter country codes to represent countries and dependent areas.
	// Make sure the provided country code is in uppercase.
	// Example: 'USA' for the United States, 'GBR' for Great Britain, 'DEU' for Germany, etc.
	CurrencyCode string `protobuf:"bytes,10,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// The value of the metric
	Metric float64 `protobuf:"fixed64,11,opt,name=metric,proto3" json:"metric,omitempty"`
	// How to evaluate the metric (i.e. is a higher or lower value more favorable)
	EvaluationType RT000FTL8_Metric_EvaluationType `protobuf:"varint,12,opt,name=evaluation_type,json=evaluationType,proto3,enum=standards.open.v1.RT000FTL8_Metric_EvaluationType" json:"evaluation_type,omitempty"`
	// The "RED/AMBER/GREEN" designation if applicable
	Rag RedAmberGreen `protobuf:"varint,13,opt,name=rag,proto3,enum=standards.open.v1.RedAmberGreen" json:"rag,omitempty"`
	// The amber cutoff (i.e. the value above which the metric is no longer classified as "RED") if applicable
	AmberCutoff float64 `protobuf:"fixed64,14,opt,name=amber_cutoff,json=amberCutoff,proto3" json:"amber_cutoff,omitempty"`
	// The green cutoff (i.e. the value above which the metric is no longer classified as "AMBER")  if applicable
	GreenCutoff float64 `protobuf:"fixed64,15,opt,name=green_cutoff,json=greenCutoff,proto3" json:"green_cutoff,omitempty"`
	// Optional. The name of the provider
	Provider string `protobuf:"bytes,20,opt,name=provider,proto3" json:"provider,omitempty"`
	// Optional. The metric ID used by the provider
	ProviderMetricId string `protobuf:"bytes,21,opt,name=provider_metric_id,json=providerMetricId,proto3" json:"provider_metric_id,omitempty"`
	// Optional. The KPI name used by the provider
	ProviderMetricName string `protobuf:"bytes,22,opt,name=provider_metric_name,json=providerMetricName,proto3" json:"provider_metric_name,omitempty"`
	// Optional. Any comments attached to the metric
	Comments string `protobuf:"bytes,99,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_Metric) Reset() {
	*x = RT000FTL8_Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_Metric) ProtoMessage() {}

func (x *RT000FTL8_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_Metric.ProtoReflect.Descriptor instead.
func (*RT000FTL8_Metric) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000FTL8_Metric) GetProductionDate() *date.Date {
	if x != nil {
		return x.ProductionDate
	}
	return nil
}

func (x *RT000FTL8_Metric) GetReportingPeriodEnd() *date.Date {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return nil
}

func (x *RT000FTL8_Metric) GetReportingPeriodStart() *date.Date {
	if x != nil {
		return x.ReportingPeriodStart
	}
	return nil
}

func (x *RT000FTL8_Metric) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000FTL8_Metric) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8_Metric) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000FTL8_Metric) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8_Metric) GetMetricId() RT000FTL8_Metric_MetricID {
	if x != nil {
		return x.MetricId
	}
	return RT000FTL8_Metric_METRIC_ID_UNSPECIFIED
}

func (x *RT000FTL8_Metric) GetValueType() RT000FTL8_Metric_ValueType {
	if x != nil {
		return x.ValueType
	}
	return RT000FTL8_Metric_METRIC_TYPE_UNSPECIFIED
}

func (x *RT000FTL8_Metric) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *RT000FTL8_Metric) GetMetric() float64 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *RT000FTL8_Metric) GetEvaluationType() RT000FTL8_Metric_EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return RT000FTL8_Metric_EVALUATION_TYPE_UNSPECIFIED
}

func (x *RT000FTL8_Metric) GetRag() RedAmberGreen {
	if x != nil {
		return x.Rag
	}
	return RedAmberGreen_RAG_UNSPECIFIED
}

func (x *RT000FTL8_Metric) GetAmberCutoff() float64 {
	if x != nil {
		return x.AmberCutoff
	}
	return 0
}

func (x *RT000FTL8_Metric) GetGreenCutoff() float64 {
	if x != nil {
		return x.GreenCutoff
	}
	return 0
}

func (x *RT000FTL8_Metric) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RT000FTL8_Metric) GetProviderMetricId() string {
	if x != nil {
		return x.ProviderMetricId
	}
	return ""
}

func (x *RT000FTL8_Metric) GetProviderMetricName() string {
	if x != nil {
		return x.ProviderMetricName
	}
	return ""
}

func (x *RT000FTL8_Metric) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

// The Assets Under Management Definition
type RT000FTL8_NetAssetValueSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date for which the nav snapshot is provided
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The common identifier of the subject.
	// In most instances the subject (i.e the entity being measured by the snapshot) should be the umbrella for which the report is provided.
	// Metrics related to specific sub-funds, however, can be reported alongside the aggregated values
	// so long as the this is consistently applied
	SubjectId string `protobuf:"bytes,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	// The human readable name of the subject of the snapshot
	SubjectName string `protobuf:"bytes,3,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	// The currency code is required to comply with the 3-letter ISO 4217 standard.
	// The ISO 4217 is a set of 3-letter currency codes to represent countries' currencies.
	// Make sure the provided currency code is in uppercase.
	// Example: 'USD' for United States Dollar, 'GBP' for Great Britain Pound, 'EUR' for Euro, etc.
	BaseCurrency string `protobuf:"bytes,11,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
	// The assets under management as of the effective date in the base currency of the fund
	AumBaseCurrency float64 `protobuf:"fixed64,12,opt,name=aum_base_currency,json=aumBaseCurrency,proto3" json:"aum_base_currency,omitempty"`
	// The currency code is required to comply with the 3-letter ISO 4217 standard.
	// The ISO 4217 is a set of 3-letter currency codes to represent countries' currencies.
	// Make sure the provided currency code is in uppercase.
	// Example: 'USD' for United States Dollar, 'GBP' for Great Britain Pound, 'EUR' for Euro, etc.
	ReportingCurrency string `protobuf:"bytes,13,opt,name=reporting_currency,json=reportingCurrency,proto3" json:"reporting_currency,omitempty"`
	// The assets under management as of the effective date in the reporting currency
	AumReportingCurrency float64 `protobuf:"fixed64,14,opt,name=aum_reporting_currency,json=aumReportingCurrency,proto3" json:"aum_reporting_currency,omitempty"`
}

func (x *RT000FTL8_NetAssetValueSnapshot) Reset() {
	*x = RT000FTL8_NetAssetValueSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_NetAssetValueSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_NetAssetValueSnapshot) ProtoMessage() {}

func (x *RT000FTL8_NetAssetValueSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_NetAssetValueSnapshot.ProtoReflect.Descriptor instead.
func (*RT000FTL8_NetAssetValueSnapshot) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT000FTL8_NetAssetValueSnapshot) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_NetAssetValueSnapshot) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *RT000FTL8_NetAssetValueSnapshot) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *RT000FTL8_NetAssetValueSnapshot) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

func (x *RT000FTL8_NetAssetValueSnapshot) GetAumBaseCurrency() float64 {
	if x != nil {
		return x.AumBaseCurrency
	}
	return 0
}

func (x *RT000FTL8_NetAssetValueSnapshot) GetReportingCurrency() string {
	if x != nil {
		return x.ReportingCurrency
	}
	return ""
}

func (x *RT000FTL8_NetAssetValueSnapshot) GetAumReportingCurrency() float64 {
	if x != nil {
		return x.AumReportingCurrency
	}
	return 0
}

// Definition of a pricing error occurred in the pricing of a share class
type RT000FTL8_SecurityPricingError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date the information is being reported
	ReportingDate *date.Date `protobuf:"bytes,1,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The date of the error
	ErrorDate *date.Date `protobuf:"bytes,2,opt,name=error_date,json=errorDate,proto3" json:"error_date,omitempty"`
	// The date the error was identified
	IdentificationDate *date.Date `protobuf:"bytes,3,opt,name=identification_date,json=identificationDate,proto3" json:"identification_date,omitempty"`
	// The date the error was resolved
	ResolutionDate *date.Date `protobuf:"bytes,4,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,5,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,6,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,7,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,8,opt,name=fund,proto3" json:"fund,omitempty"`
	// The identifier used by the producer to track the case internally
	CaseIdentifier string `protobuf:"bytes,9,opt,name=case_identifier,json=caseIdentifier,proto3" json:"case_identifier,omitempty"`
	// The human readable name of the security
	SecurityName string `protobuf:"bytes,50,opt,name=security_name,json=securityName,proto3" json:"security_name,omitempty"`
	// The ISO 6166 code of ISIN when available
	Isin string `protobuf:"bytes,52,opt,name=isin,proto3" json:"isin,omitempty"`
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	Cusip string `protobuf:"bytes,53,opt,name=cusip,proto3" json:"cusip,omitempty"`
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	Sedol string `protobuf:"bytes,54,opt,name=sedol,proto3" json:"sedol,omitempty"`
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	BbgTicker string `protobuf:"bytes,55,opt,name=bbg_ticker,json=bbgTicker,proto3" json:"bbg_ticker,omitempty"`
	// Reuters RIC (Reuters instrument code)
	Ric string `protobuf:"bytes,56,opt,name=ric,proto3" json:"ric,omitempty"`
	// FIGI (Financial_Instrument Global Identifier)
	Figi string `protobuf:"bytes,57,opt,name=figi,proto3" json:"figi,omitempty"`
	// PermID - Refinitiv Permanent Identifiers
	PermId string `protobuf:"bytes,58,opt,name=perm_id,json=permId,proto3" json:"perm_id,omitempty"`
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	Wkn string `protobuf:"bytes,59,opt,name=wkn,proto3" json:"wkn,omitempty"`
	// LEI (Legal Entity Identifier)
	Lei string `protobuf:"bytes,60,opt,name=lei,proto3" json:"lei,omitempty"`
	// The identifier used by the producer internally
	ProducerIdentifier string `protobuf:"bytes,61,opt,name=producer_identifier,json=producerIdentifier,proto3" json:"producer_identifier,omitempty"`
	// The primary identifier relied on to identify the stale security
	// The producer should populate this field with the highest utility security identifier available
	// Tier 1: FIGI or PermID
	// Tier 2: BBG Ticker, RIC
	// Tier 3: WKN, ISIN, CUSIP, SEDOL
	// Tier 4: LEI
	PrimaryIdentifier string `protobuf:"bytes,71,opt,name=primary_identifier,json=primaryIdentifier,proto3" json:"primary_identifier,omitempty"`
	// The type of identifier used as the primary identifier
	PrimaryIdentifierType RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier `protobuf:"varint,72,opt,name=primary_identifier_type,json=primaryIdentifierType,proto3,enum=standards.open.v1.RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier" json:"primary_identifier_type,omitempty"`
	// The asset class of the security
	AssetClass RT000FTL8_SecurityPricingError_AssetClass `protobuf:"varint,10,opt,name=asset_class,json=assetClass,proto3,enum=standards.open.v1.RT000FTL8_SecurityPricingError_AssetClass" json:"asset_class,omitempty"`
	// Magnitude of the error in decimal (position / nav -1)
	Materiality float64 `protobuf:"fixed64,11,opt,name=materiality,proto3" json:"materiality,omitempty"`
	// Cause of the error
	Cause string `protobuf:"bytes,12,opt,name=cause,proto3" json:"cause,omitempty"`
	// Remediation
	Remediation string `protobuf:"bytes,13,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Comments
	Comments string `protobuf:"bytes,14,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_SecurityPricingError) Reset() {
	*x = RT000FTL8_SecurityPricingError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_SecurityPricingError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_SecurityPricingError) ProtoMessage() {}

func (x *RT000FTL8_SecurityPricingError) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_SecurityPricingError.ProtoReflect.Descriptor instead.
func (*RT000FTL8_SecurityPricingError) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT000FTL8_SecurityPricingError) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000FTL8_SecurityPricingError) GetErrorDate() *date.Date {
	if x != nil {
		return x.ErrorDate
	}
	return nil
}

func (x *RT000FTL8_SecurityPricingError) GetIdentificationDate() *date.Date {
	if x != nil {
		return x.IdentificationDate
	}
	return nil
}

func (x *RT000FTL8_SecurityPricingError) GetResolutionDate() *date.Date {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *RT000FTL8_SecurityPricingError) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetCaseIdentifier() string {
	if x != nil {
		return x.CaseIdentifier
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetSedol() string {
	if x != nil {
		return x.Sedol
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetBbgTicker() string {
	if x != nil {
		return x.BbgTicker
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetRic() string {
	if x != nil {
		return x.Ric
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetPermId() string {
	if x != nil {
		return x.PermId
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetWkn() string {
	if x != nil {
		return x.Wkn
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetProducerIdentifier() string {
	if x != nil {
		return x.ProducerIdentifier
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetPrimaryIdentifier() string {
	if x != nil {
		return x.PrimaryIdentifier
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetPrimaryIdentifierType() RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier {
	if x != nil {
		return x.PrimaryIdentifierType
	}
	return RT000FTL8_SecurityPricingError_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_SecurityPricingError) GetAssetClass() RT000FTL8_SecurityPricingError_AssetClass {
	if x != nil {
		return x.AssetClass
	}
	return RT000FTL8_SecurityPricingError_ASSET_CLASS_UNSPECIFIED
}

func (x *RT000FTL8_SecurityPricingError) GetMateriality() float64 {
	if x != nil {
		return x.Materiality
	}
	return 0
}

func (x *RT000FTL8_SecurityPricingError) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

// Definition of a stale security
type RT000FTL8_StaleSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the stale security report
	ReportingDate *date.Date `protobuf:"bytes,1,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,2,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,3,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,4,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,5,opt,name=fund,proto3" json:"fund,omitempty"`
	// The identifier used by the producer to track the case internally
	CaseIdentifier string `protobuf:"bytes,6,opt,name=case_identifier,json=caseIdentifier,proto3" json:"case_identifier,omitempty"`
	// The human readable name of the security
	SecurityName string `protobuf:"bytes,50,opt,name=security_name,json=securityName,proto3" json:"security_name,omitempty"`
	// The ISO 6166 code of ISIN when available
	Isin string `protobuf:"bytes,52,opt,name=isin,proto3" json:"isin,omitempty"`
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	Cusip string `protobuf:"bytes,53,opt,name=cusip,proto3" json:"cusip,omitempty"`
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	Sedol string `protobuf:"bytes,54,opt,name=sedol,proto3" json:"sedol,omitempty"`
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	BbgTicker string `protobuf:"bytes,55,opt,name=bbg_ticker,json=bbgTicker,proto3" json:"bbg_ticker,omitempty"`
	// Reuters RIC (Reuters instrument code)
	Ric string `protobuf:"bytes,56,opt,name=ric,proto3" json:"ric,omitempty"`
	// FIGI (Financial_Instrument Global Identifier)
	Figi string `protobuf:"bytes,57,opt,name=figi,proto3" json:"figi,omitempty"`
	// PermID - Refinitiv Permanent Identifiers
	PermId string `protobuf:"bytes,58,opt,name=perm_id,json=permId,proto3" json:"perm_id,omitempty"`
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	Wkn string `protobuf:"bytes,59,opt,name=wkn,proto3" json:"wkn,omitempty"`
	// LEI (Legal Entity Identifier)
	Lei string `protobuf:"bytes,60,opt,name=lei,proto3" json:"lei,omitempty"`
	// The identifier used by the producer internally
	ProducerIdentifier string `protobuf:"bytes,61,opt,name=producer_identifier,json=producerIdentifier,proto3" json:"producer_identifier,omitempty"`
	// The primary identifier relied on to identify the stale security
	// The producer should populate this field with the highest utility security identifier available
	// Tier 1: FIGI or PermID
	// Tier 2: BBG Ticker, RIC
	// Tier 3: WKN, ISIN, CUSIP, SEDOL
	// Tier 4: LEI
	PrimaryIdentifier string `protobuf:"bytes,71,opt,name=primary_identifier,json=primaryIdentifier,proto3" json:"primary_identifier,omitempty"`
	// The type of identifier used as the primary identifier
	PrimaryIdentifierType RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier `protobuf:"varint,72,opt,name=primary_identifier_type,json=primaryIdentifierType,proto3,enum=standards.open.v1.RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier" json:"primary_identifier_type,omitempty"`
	// The asset class of the security
	AssetClass RT000FTL8_StaleSecurity_AssetClass `protobuf:"varint,7,opt,name=asset_class,json=assetClass,proto3,enum=standards.open.v1.RT000FTL8_StaleSecurity_AssetClass" json:"asset_class,omitempty"`
	// The date the stale price was raised
	RaisedDate *date.Date `protobuf:"bytes,21,opt,name=raised_date,json=raisedDate,proto3" json:"raised_date,omitempty"`
	// The date the security was last priced
	PriceLatestDate *date.Date `protobuf:"bytes,22,opt,name=price_latest_date,json=priceLatestDate,proto3" json:"price_latest_date,omitempty"`
	// The number of days staled
	DaysStaled int32 `protobuf:"varint,9,opt,name=days_staled,json=daysStaled,proto3" json:"days_staled,omitempty"`
	// The pricing currency
	// The currency code is required to comply with the 3-letter ISO 4217 standard.
	// The ISO 4217 is a set of 3-letter currency codes to represent countries' currencies.
	// Make sure the provided currency code is in uppercase.
	// Example: 'USD' for United States Dollar, 'GBP' for Great Britain Pound, 'EUR' for Euro, etc.
	PricingCurrency string `protobuf:"bytes,10,opt,name=pricing_currency,json=pricingCurrency,proto3" json:"pricing_currency,omitempty"`
	// The staled price (i.e. the last price) in the "pricing currency"
	PriceLatest float64 `protobuf:"fixed64,11,opt,name=price_latest,json=priceLatest,proto3" json:"price_latest,omitempty"`
	// The quantity of securities held in the security
	Quantity float64 `protobuf:"fixed64,12,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The total value of the position in the security (price_latest * quantity)
	PositionValue float64 `protobuf:"fixed64,13,opt,name=position_value,json=positionValue,proto3" json:"position_value,omitempty"`
	// The fund currency
	// The currency code is required to comply with the 3-letter ISO 4217 standard.
	// The ISO 4217 is a set of 3-letter currency codes to represent countries' currencies.
	// Make sure the provided currency code is in uppercase.
	// Example: 'USD' for United States Dollar, 'GBP' for Great Britain Pound, 'EUR' for Euro, etc.
	FundCurrency string `protobuf:"bytes,14,opt,name=fund_currency,json=fundCurrency,proto3" json:"fund_currency,omitempty"`
	// The position value in the fund currency (using report date FX)
	PositionValueFundCurrency float64 `protobuf:"fixed64,15,opt,name=position_value_fund_currency,json=positionValueFundCurrency,proto3" json:"position_value_fund_currency,omitempty"`
	// The NAV of the fund in the fund currency
	FundNav float64 `protobuf:"fixed64,16,opt,name=fund_nav,json=fundNav,proto3" json:"fund_nav,omitempty"`
	// Magnitude of the error in decimal (position_value_fund_currency / nav -1)
	Materiality float64 `protobuf:"fixed64,17,opt,name=materiality,proto3" json:"materiality,omitempty"`
	// The primary source of price information
	PrimaryPriceSource string `protobuf:"bytes,18,opt,name=primary_price_source,json=primaryPriceSource,proto3" json:"primary_price_source,omitempty"`
	// The secondary source of price information
	SecondaryPriceSource string `protobuf:"bytes,19,opt,name=secondary_price_source,json=secondaryPriceSource,proto3" json:"secondary_price_source,omitempty"`
	// The reasoning given for the stale price
	Reasoning string `protobuf:"bytes,20,opt,name=reasoning,proto3" json:"reasoning,omitempty"`
	// Additional comments
	Comments string `protobuf:"bytes,30,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_StaleSecurity) Reset() {
	*x = RT000FTL8_StaleSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_StaleSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_StaleSecurity) ProtoMessage() {}

func (x *RT000FTL8_StaleSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_StaleSecurity.ProtoReflect.Descriptor instead.
func (*RT000FTL8_StaleSecurity) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RT000FTL8_StaleSecurity) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000FTL8_StaleSecurity) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetCaseIdentifier() string {
	if x != nil {
		return x.CaseIdentifier
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetSedol() string {
	if x != nil {
		return x.Sedol
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetBbgTicker() string {
	if x != nil {
		return x.BbgTicker
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetRic() string {
	if x != nil {
		return x.Ric
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetPermId() string {
	if x != nil {
		return x.PermId
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetWkn() string {
	if x != nil {
		return x.Wkn
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetProducerIdentifier() string {
	if x != nil {
		return x.ProducerIdentifier
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetPrimaryIdentifier() string {
	if x != nil {
		return x.PrimaryIdentifier
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetPrimaryIdentifierType() RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier {
	if x != nil {
		return x.PrimaryIdentifierType
	}
	return RT000FTL8_StaleSecurity_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_StaleSecurity) GetAssetClass() RT000FTL8_StaleSecurity_AssetClass {
	if x != nil {
		return x.AssetClass
	}
	return RT000FTL8_StaleSecurity_ASSET_CLASS_UNSPECIFIED
}

func (x *RT000FTL8_StaleSecurity) GetRaisedDate() *date.Date {
	if x != nil {
		return x.RaisedDate
	}
	return nil
}

func (x *RT000FTL8_StaleSecurity) GetPriceLatestDate() *date.Date {
	if x != nil {
		return x.PriceLatestDate
	}
	return nil
}

func (x *RT000FTL8_StaleSecurity) GetDaysStaled() int32 {
	if x != nil {
		return x.DaysStaled
	}
	return 0
}

func (x *RT000FTL8_StaleSecurity) GetPricingCurrency() string {
	if x != nil {
		return x.PricingCurrency
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetPriceLatest() float64 {
	if x != nil {
		return x.PriceLatest
	}
	return 0
}

func (x *RT000FTL8_StaleSecurity) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *RT000FTL8_StaleSecurity) GetPositionValue() float64 {
	if x != nil {
		return x.PositionValue
	}
	return 0
}

func (x *RT000FTL8_StaleSecurity) GetFundCurrency() string {
	if x != nil {
		return x.FundCurrency
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetPositionValueFundCurrency() float64 {
	if x != nil {
		return x.PositionValueFundCurrency
	}
	return 0
}

func (x *RT000FTL8_StaleSecurity) GetFundNav() float64 {
	if x != nil {
		return x.FundNav
	}
	return 0
}

func (x *RT000FTL8_StaleSecurity) GetMateriality() float64 {
	if x != nil {
		return x.Materiality
	}
	return 0
}

func (x *RT000FTL8_StaleSecurity) GetPrimaryPriceSource() string {
	if x != nil {
		return x.PrimaryPriceSource
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetSecondaryPriceSource() string {
	if x != nil {
		return x.SecondaryPriceSource
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetReasoning() string {
	if x != nil {
		return x.Reasoning
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

// Definition of a break that occurred in agreement on the non-cash holdings of a sub-fund
type RT000FTL8_StockBreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the stale security report
	ReportDate *date.Date `protobuf:"bytes,1,opt,name=report_date,json=reportDate,proto3" json:"report_date,omitempty"`
	// The date the stock break was identified
	IdentificationDate *date.Date `protobuf:"bytes,2,opt,name=identification_date,json=identificationDate,proto3" json:"identification_date,omitempty"`
	// The date the stock break was resolved
	ResolutionDate *date.Date `protobuf:"bytes,3,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,4,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,5,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier used to ID the sub-fun applicable)
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,6,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// Names of the relevant sub-fund (if applicable)
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,7,opt,name=fund,proto3" json:"fund,omitempty"`
	// The identifier used by the producer to track the case internally
	CaseIdentifier string `protobuf:"bytes,8,opt,name=case_identifier,json=caseIdentifier,proto3" json:"case_identifier,omitempty"`
	// The human readable name of the security
	SecurityName string `protobuf:"bytes,50,opt,name=security_name,json=securityName,proto3" json:"security_name,omitempty"`
	// The ISO 6166 code of ISIN when available
	Isin string `protobuf:"bytes,52,opt,name=isin,proto3" json:"isin,omitempty"`
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	Cusip string `protobuf:"bytes,53,opt,name=cusip,proto3" json:"cusip,omitempty"`
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	Sedol string `protobuf:"bytes,54,opt,name=sedol,proto3" json:"sedol,omitempty"`
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	BbgTicker string `protobuf:"bytes,55,opt,name=bbg_ticker,json=bbgTicker,proto3" json:"bbg_ticker,omitempty"`
	// Reuters RIC (Reuters instrument code)
	Ric string `protobuf:"bytes,56,opt,name=ric,proto3" json:"ric,omitempty"`
	// FIGI (Financial_Instrument Global Identifier)
	Figi string `protobuf:"bytes,57,opt,name=figi,proto3" json:"figi,omitempty"`
	// PermID - Refinitiv Permanent Identifiers
	PermId string `protobuf:"bytes,58,opt,name=perm_id,json=permId,proto3" json:"perm_id,omitempty"`
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	Wkn string `protobuf:"bytes,59,opt,name=wkn,proto3" json:"wkn,omitempty"`
	// LEI (Legal Entity Identifier)
	Lei string `protobuf:"bytes,60,opt,name=lei,proto3" json:"lei,omitempty"`
	// The identifier used by the producer internally
	ProducerIdentifier string `protobuf:"bytes,61,opt,name=producer_identifier,json=producerIdentifier,proto3" json:"producer_identifier,omitempty"`
	// The primary identifier relied on to identify the stale security
	// The producer should populate this field with the highest utility security identifier available
	// Tier 1: FIGI or PermID
	// Tier 2: BBG Ticker, RIC
	// Tier 3: WKN, ISIN, CUSIP, SEDOL
	// Tier 4: LEI
	PrimaryIdentifier string `protobuf:"bytes,71,opt,name=primary_identifier,json=primaryIdentifier,proto3" json:"primary_identifier,omitempty"`
	// The type of identifier used as the primary identifier
	PrimaryIdentifierType RT000FTL8_StockBreak_FinancialInstrumentIdentifier `protobuf:"varint,72,opt,name=primary_identifier_type,json=primaryIdentifierType,proto3,enum=standards.open.v1.RT000FTL8_StockBreak_FinancialInstrumentIdentifier" json:"primary_identifier_type,omitempty"`
	// The asset class of the security
	AssetClass RT000FTL8_StockBreak_AssetClass `protobuf:"varint,9,opt,name=asset_class,json=assetClass,proto3,enum=standards.open.v1.RT000FTL8_StockBreak_AssetClass" json:"asset_class,omitempty"`
	// The date of the stock break
	EffectiveDate *date.Date `protobuf:"bytes,10,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// Magnitude of the error in decimal (position / nav -1)
	Materiality float64 `protobuf:"fixed64,11,opt,name=materiality,proto3" json:"materiality,omitempty"`
	// Cause of the break
	Cause string `protobuf:"bytes,12,opt,name=cause,proto3" json:"cause,omitempty"`
	// Remediation
	Remediation string `protobuf:"bytes,13,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Comments
	Comment string `protobuf:"bytes,14,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RT000FTL8_StockBreak) Reset() {
	*x = RT000FTL8_StockBreak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_StockBreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_StockBreak) ProtoMessage() {}

func (x *RT000FTL8_StockBreak) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_StockBreak.ProtoReflect.Descriptor instead.
func (*RT000FTL8_StockBreak) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RT000FTL8_StockBreak) GetReportDate() *date.Date {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *RT000FTL8_StockBreak) GetIdentificationDate() *date.Date {
	if x != nil {
		return x.IdentificationDate
	}
	return nil
}

func (x *RT000FTL8_StockBreak) GetResolutionDate() *date.Date {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *RT000FTL8_StockBreak) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetCaseIdentifier() string {
	if x != nil {
		return x.CaseIdentifier
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetSedol() string {
	if x != nil {
		return x.Sedol
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetBbgTicker() string {
	if x != nil {
		return x.BbgTicker
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetRic() string {
	if x != nil {
		return x.Ric
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetPermId() string {
	if x != nil {
		return x.PermId
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetWkn() string {
	if x != nil {
		return x.Wkn
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetProducerIdentifier() string {
	if x != nil {
		return x.ProducerIdentifier
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetPrimaryIdentifier() string {
	if x != nil {
		return x.PrimaryIdentifier
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetPrimaryIdentifierType() RT000FTL8_StockBreak_FinancialInstrumentIdentifier {
	if x != nil {
		return x.PrimaryIdentifierType
	}
	return RT000FTL8_StockBreak_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_StockBreak) GetAssetClass() RT000FTL8_StockBreak_AssetClass {
	if x != nil {
		return x.AssetClass
	}
	return RT000FTL8_StockBreak_ASSET_CLASS_UNSPECIFIED
}

func (x *RT000FTL8_StockBreak) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_StockBreak) GetMateriality() float64 {
	if x != nil {
		return x.Materiality
	}
	return 0
}

func (x *RT000FTL8_StockBreak) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// Definition of break that has occurred in agreement on the cash holdings of a sub-fund
type RT000FTL8_CashBreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the stale security report
	ReportDate *date.Date `protobuf:"bytes,1,opt,name=report_date,json=reportDate,proto3" json:"report_date,omitempty"`
	// The date the stock break was identified
	IdentificationDate *date.Date `protobuf:"bytes,2,opt,name=identification_date,json=identificationDate,proto3" json:"identification_date,omitempty"`
	// The date the stock break was resolved
	ResolutionDate *date.Date `protobuf:"bytes,3,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,4,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,5,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier used to ID the sub-fun applicable)
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,6,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// Names of the relevant sub-fund (if applicable)
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,7,opt,name=fund,proto3" json:"fund,omitempty"`
	// The identifier used by the producer to track the case internally
	CaseIdentifier string `protobuf:"bytes,8,opt,name=case_identifier,json=caseIdentifier,proto3" json:"case_identifier,omitempty"`
	// Magnitude of the error in decimal (position / nav -1)
	Materiality float64 `protobuf:"fixed64,9,opt,name=materiality,proto3" json:"materiality,omitempty"`
	// Cause of the break
	Cause string `protobuf:"bytes,10,opt,name=cause,proto3" json:"cause,omitempty"`
	// Remediation
	Remediation string `protobuf:"bytes,11,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Comments
	Comment string `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RT000FTL8_CashBreak) Reset() {
	*x = RT000FTL8_CashBreak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_CashBreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_CashBreak) ProtoMessage() {}

func (x *RT000FTL8_CashBreak) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_CashBreak.ProtoReflect.Descriptor instead.
func (*RT000FTL8_CashBreak) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RT000FTL8_CashBreak) GetReportDate() *date.Date {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *RT000FTL8_CashBreak) GetIdentificationDate() *date.Date {
	if x != nil {
		return x.IdentificationDate
	}
	return nil
}

func (x *RT000FTL8_CashBreak) GetResolutionDate() *date.Date {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *RT000FTL8_CashBreak) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000FTL8_CashBreak) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8_CashBreak) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000FTL8_CashBreak) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8_CashBreak) GetCaseIdentifier() string {
	if x != nil {
		return x.CaseIdentifier
	}
	return ""
}

func (x *RT000FTL8_CashBreak) GetMateriality() float64 {
	if x != nil {
		return x.Materiality
	}
	return 0
}

func (x *RT000FTL8_CashBreak) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000FTL8_CashBreak) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000FTL8_CashBreak) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// Definition of a Total Expense Ratio
type RT000FTL8_TotalExpenseRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the report
	ReportingDate *date.Date `protobuf:"bytes,1,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The date of the TER (should be the last day of the relevant month)
	TerDate *date.Date `protobuf:"bytes,2,opt,name=ter_date,json=terDate,proto3" json:"ter_date,omitempty"`
	// The global identifier of the share class
	ShareClassId string `protobuf:"bytes,3,opt,name=share_class_id,json=shareClassId,proto3" json:"share_class_id,omitempty"`
	// Codification chosen to identify the share class
	ShareClassIdType RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes `protobuf:"varint,4,opt,name=share_class_id_type,json=shareClassIdType,proto3,enum=standards.open.v1.RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes" json:"share_class_id_type,omitempty"`
	// Extension that identifies the share class.
	// Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
	ShareClassExtension string `protobuf:"bytes,5,opt,name=share_class_extension,json=shareClassExtension,proto3" json:"share_class_extension,omitempty"`
	// The expense ratio over the current calendar month
	TerCurrentMonth float64 `protobuf:"fixed64,6,opt,name=ter_current_month,json=terCurrentMonth,proto3" json:"ter_current_month,omitempty"`
	// The monthly expense ratio annualized
	TerCurrentMonthAnnualized float64 `protobuf:"fixed64,7,opt,name=ter_current_month_annualized,json=terCurrentMonthAnnualized,proto3" json:"ter_current_month_annualized,omitempty"`
	// The expense ratio YTD
	TerYtd float64 `protobuf:"fixed64,8,opt,name=ter_ytd,json=terYtd,proto3" json:"ter_ytd,omitempty"`
	// The YTD expense ratio annualized
	TerYtdAnnualized float64 `protobuf:"fixed64,9,opt,name=ter_ytd_annualized,json=terYtdAnnualized,proto3" json:"ter_ytd_annualized,omitempty"`
	// Comments on the expense ratio
	Comments string `protobuf:"bytes,10,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_TotalExpenseRatio) Reset() {
	*x = RT000FTL8_TotalExpenseRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_TotalExpenseRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_TotalExpenseRatio) ProtoMessage() {}

func (x *RT000FTL8_TotalExpenseRatio) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_TotalExpenseRatio.ProtoReflect.Descriptor instead.
func (*RT000FTL8_TotalExpenseRatio) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RT000FTL8_TotalExpenseRatio) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000FTL8_TotalExpenseRatio) GetTerDate() *date.Date {
	if x != nil {
		return x.TerDate
	}
	return nil
}

func (x *RT000FTL8_TotalExpenseRatio) GetShareClassId() string {
	if x != nil {
		return x.ShareClassId
	}
	return ""
}

func (x *RT000FTL8_TotalExpenseRatio) GetShareClassIdType() RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes {
	if x != nil {
		return x.ShareClassIdType
	}
	return RT000FTL8_TotalExpenseRatio_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_TotalExpenseRatio) GetShareClassExtension() string {
	if x != nil {
		return x.ShareClassExtension
	}
	return ""
}

func (x *RT000FTL8_TotalExpenseRatio) GetTerCurrentMonth() float64 {
	if x != nil {
		return x.TerCurrentMonth
	}
	return 0
}

func (x *RT000FTL8_TotalExpenseRatio) GetTerCurrentMonthAnnualized() float64 {
	if x != nil {
		return x.TerCurrentMonthAnnualized
	}
	return 0
}

func (x *RT000FTL8_TotalExpenseRatio) GetTerYtd() float64 {
	if x != nil {
		return x.TerYtd
	}
	return 0
}

func (x *RT000FTL8_TotalExpenseRatio) GetTerYtdAnnualized() float64 {
	if x != nil {
		return x.TerYtdAnnualized
	}
	return 0
}

func (x *RT000FTL8_TotalExpenseRatio) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

// Definition of an invoice
type RT000FTL8_Invoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the report
	ReportingDate *date.Date `protobuf:"bytes,1,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,2,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,3,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,4,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,5,opt,name=fund,proto3" json:"fund,omitempty"`
	// The invoice date
	InvoiceDate *date.Date `protobuf:"bytes,6,opt,name=invoice_date,json=invoiceDate,proto3" json:"invoice_date,omitempty"`
	// The date of authorisation
	AuthorisationDate *date.Date `protobuf:"bytes,7,opt,name=authorisation_date,json=authorisationDate,proto3" json:"authorisation_date,omitempty"`
	// The date of payment
	PaymentDate *date.Date `protobuf:"bytes,8,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	// The invoice number or identifier
	InvoiceIdentifier string `protobuf:"bytes,9,opt,name=invoice_identifier,json=invoiceIdentifier,proto3" json:"invoice_identifier,omitempty"`
	// The Recipient of the invoice
	Recipient string `protobuf:"bytes,10,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// The type of fee
	FeeType string `protobuf:"bytes,11,opt,name=fee_type,json=feeType,proto3" json:"fee_type,omitempty"`
	// The invoiced amount
	InvoicedAmount float64 `protobuf:"fixed64,12,opt,name=invoiced_amount,json=invoicedAmount,proto3" json:"invoiced_amount,omitempty"`
	// The invoiced amount specific to the fund in question
	FundSpecificAmount float64 `protobuf:"fixed64,13,opt,name=fund_specific_amount,json=fundSpecificAmount,proto3" json:"fund_specific_amount,omitempty"`
}

func (x *RT000FTL8_Invoice) Reset() {
	*x = RT000FTL8_Invoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_Invoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_Invoice) ProtoMessage() {}

func (x *RT000FTL8_Invoice) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_Invoice.ProtoReflect.Descriptor instead.
func (*RT000FTL8_Invoice) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 7}
}

func (x *RT000FTL8_Invoice) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000FTL8_Invoice) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetInvoiceDate() *date.Date {
	if x != nil {
		return x.InvoiceDate
	}
	return nil
}

func (x *RT000FTL8_Invoice) GetAuthorisationDate() *date.Date {
	if x != nil {
		return x.AuthorisationDate
	}
	return nil
}

func (x *RT000FTL8_Invoice) GetPaymentDate() *date.Date {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *RT000FTL8_Invoice) GetInvoiceIdentifier() string {
	if x != nil {
		return x.InvoiceIdentifier
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetFeeType() string {
	if x != nil {
		return x.FeeType
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetInvoicedAmount() float64 {
	if x != nil {
		return x.InvoicedAmount
	}
	return 0
}

func (x *RT000FTL8_Invoice) GetFundSpecificAmount() float64 {
	if x != nil {
		return x.FundSpecificAmount
	}
	return 0
}

// Definition of a Swing Pricing Events.
type RT000FTL8_SwingPricingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the report
	ReportingDate *date.Date `protobuf:"bytes,1,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,2,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,3,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,4,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,5,opt,name=fund,proto3" json:"fund,omitempty"`
	// The effective date on which swing pricing was applied
	SwingPriceDate *date.Date `protobuf:"bytes,6,opt,name=swing_price_date,json=swingPriceDate,proto3" json:"swing_price_date,omitempty"`
	// The threshold that was used to evaluate whether swing pricing should be applied
	SwingThreshold float64 `protobuf:"fixed64,7,opt,name=swing_threshold,json=swingThreshold,proto3" json:"swing_threshold,omitempty"`
	// The adjustment factor applied to the nav to account for the anticipated effective of subscriptions or redemptions
	SwingFactor float64 `protobuf:"fixed64,8,opt,name=swing_factor,json=swingFactor,proto3" json:"swing_factor,omitempty"`
	// The NAV before the swing factor had been applied
	NavWithoutSwingFactor float64 `protobuf:"fixed64,9,opt,name=nav_without_swing_factor,json=navWithoutSwingFactor,proto3" json:"nav_without_swing_factor,omitempty"`
	// The NAV after the swing factor had been applied
	NavWithSwingFactor float64 `protobuf:"fixed64,10,opt,name=nav_with_swing_factor,json=navWithSwingFactor,proto3" json:"nav_with_swing_factor,omitempty"`
}

func (x *RT000FTL8_SwingPricingEvent) Reset() {
	*x = RT000FTL8_SwingPricingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_SwingPricingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_SwingPricingEvent) ProtoMessage() {}

func (x *RT000FTL8_SwingPricingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_SwingPricingEvent.ProtoReflect.Descriptor instead.
func (*RT000FTL8_SwingPricingEvent) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 8}
}

func (x *RT000FTL8_SwingPricingEvent) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000FTL8_SwingPricingEvent) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000FTL8_SwingPricingEvent) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8_SwingPricingEvent) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000FTL8_SwingPricingEvent) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8_SwingPricingEvent) GetSwingPriceDate() *date.Date {
	if x != nil {
		return x.SwingPriceDate
	}
	return nil
}

func (x *RT000FTL8_SwingPricingEvent) GetSwingThreshold() float64 {
	if x != nil {
		return x.SwingThreshold
	}
	return 0
}

func (x *RT000FTL8_SwingPricingEvent) GetSwingFactor() float64 {
	if x != nil {
		return x.SwingFactor
	}
	return 0
}

func (x *RT000FTL8_SwingPricingEvent) GetNavWithoutSwingFactor() float64 {
	if x != nil {
		return x.NavWithoutSwingFactor
	}
	return 0
}

func (x *RT000FTL8_SwingPricingEvent) GetNavWithSwingFactor() float64 {
	if x != nil {
		return x.NavWithSwingFactor
	}
	return 0
}

// Definition of NAV information shared per share class at a point in time.
type RT000FTL8_PerShareClassNAV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the report
	ReportingDate *date.Date `protobuf:"bytes,1,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The date of the TER (should be the last day of the relevant month)
	NavDate *date.Date `protobuf:"bytes,2,opt,name=nav_date,json=navDate,proto3" json:"nav_date,omitempty"`
	// The global identifier of the share class
	ShareClassId string `protobuf:"bytes,3,opt,name=share_class_id,json=shareClassId,proto3" json:"share_class_id,omitempty"`
	// Codification chosen to identify the share class
	ShareClassIdType RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes `protobuf:"varint,4,opt,name=share_class_id_type,json=shareClassIdType,proto3,enum=standards.open.v1.RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes" json:"share_class_id_type,omitempty"`
	// Extension that identifies the share class.
	// Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
	ShareClassExtension string `protobuf:"bytes,5,opt,name=share_class_extension,json=shareClassExtension,proto3" json:"share_class_extension,omitempty"`
	// The number of issued units of the share class
	Units float64 `protobuf:"fixed64,6,opt,name=units,proto3" json:"units,omitempty"`
	// The currency code is required to comply with the 3-letter ISO 4217 standard.
	NavPerUnitBaseCurrency float64 `protobuf:"fixed64,7,opt,name=nav_per_unit_base_currency,json=navPerUnitBaseCurrency,proto3" json:"nav_per_unit_base_currency,omitempty"`
	// The currency code is required to comply with the 3-letter ISO 4217 standard.
	TotalNavBaseCurrency float64 `protobuf:"fixed64,8,opt,name=total_nav_base_currency,json=totalNavBaseCurrency,proto3" json:"total_nav_base_currency,omitempty"`
	// The nav per unit in the reporting currency at at the effective_date
	NavPerUnitReportingCurrency float64 `protobuf:"fixed64,9,opt,name=nav_per_unit_reporting_currency,json=navPerUnitReportingCurrency,proto3" json:"nav_per_unit_reporting_currency,omitempty"`
	// The current total nav of the share class in the reporting currency
	TotalNavReportingCurrency float64 `protobuf:"fixed64,10,opt,name=total_nav_reporting_currency,json=totalNavReportingCurrency,proto3" json:"total_nav_reporting_currency,omitempty"`
}

func (x *RT000FTL8_PerShareClassNAV) Reset() {
	*x = RT000FTL8_PerShareClassNAV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_PerShareClassNAV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_PerShareClassNAV) ProtoMessage() {}

func (x *RT000FTL8_PerShareClassNAV) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_PerShareClassNAV.ProtoReflect.Descriptor instead.
func (*RT000FTL8_PerShareClassNAV) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 9}
}

func (x *RT000FTL8_PerShareClassNAV) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000FTL8_PerShareClassNAV) GetNavDate() *date.Date {
	if x != nil {
		return x.NavDate
	}
	return nil
}

func (x *RT000FTL8_PerShareClassNAV) GetShareClassId() string {
	if x != nil {
		return x.ShareClassId
	}
	return ""
}

func (x *RT000FTL8_PerShareClassNAV) GetShareClassIdType() RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes {
	if x != nil {
		return x.ShareClassIdType
	}
	return RT000FTL8_PerShareClassNAV_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_PerShareClassNAV) GetShareClassExtension() string {
	if x != nil {
		return x.ShareClassExtension
	}
	return ""
}

func (x *RT000FTL8_PerShareClassNAV) GetUnits() float64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *RT000FTL8_PerShareClassNAV) GetNavPerUnitBaseCurrency() float64 {
	if x != nil {
		return x.NavPerUnitBaseCurrency
	}
	return 0
}

func (x *RT000FTL8_PerShareClassNAV) GetTotalNavBaseCurrency() float64 {
	if x != nil {
		return x.TotalNavBaseCurrency
	}
	return 0
}

func (x *RT000FTL8_PerShareClassNAV) GetNavPerUnitReportingCurrency() float64 {
	if x != nil {
		return x.NavPerUnitReportingCurrency
	}
	return 0
}

func (x *RT000FTL8_PerShareClassNAV) GetTotalNavReportingCurrency() float64 {
	if x != nil {
		return x.TotalNavReportingCurrency
	}
	return 0
}

// Definition of a NAV calculation error
type RT000FTL8_NAVCalculationErrorInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reporting date for the information
	ReportingDate *date.Date `protobuf:"bytes,1,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal referenceID used to track the error
	ReferenceId string `protobuf:"bytes,2,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// The  identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,3,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,4,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,5,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,6,opt,name=fund,proto3" json:"fund,omitempty"`
	// The date the error was detected
	DetectionDate *date.Date `protobuf:"bytes,7,opt,name=detection_date,json=detectionDate,proto3" json:"detection_date,omitempty"`
	// Period of the impact - Start Date
	ErrorPeriodStartDate *date.Date `protobuf:"bytes,8,opt,name=error_period_start_date,json=errorPeriodStartDate,proto3" json:"error_period_start_date,omitempty"`
	// Period of the impact - End Date
	ErrorPeriodEndDate *date.Date `protobuf:"bytes,9,opt,name=error_period_end_date,json=errorPeriodEndDate,proto3" json:"error_period_end_date,omitempty"`
	// The date the error was resolved
	ResolutionDate *date.Date `protobuf:"bytes,10,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	// The nature of the error
	ErrorType RT000FTL8_NAVCalculationErrorInformation_ErrorType `protobuf:"varint,11,opt,name=error_type,json=errorType,proto3,enum=standards.open.v1.RT000FTL8_NAVCalculationErrorInformation_ErrorType" json:"error_type,omitempty"`
	// Description and cause of the error
	Cause string `protobuf:"bytes,12,opt,name=cause,proto3" json:"cause,omitempty"`
	// Remediation
	Remediation string `protobuf:"bytes,13,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// The impact of the error
	Impact RT000FTL8_NAVCalculationErrorInformation_Impact `protobuf:"varint,14,opt,name=impact,proto3,enum=standards.open.v1.RT000FTL8_NAVCalculationErrorInformation_Impact" json:"impact,omitempty"`
	// The indemnification amount (in the fund currency)
	TotalIndemnificationAmount float64 `protobuf:"fixed64,15,opt,name=total_indemnification_amount,json=totalIndemnificationAmount,proto3" json:"total_indemnification_amount,omitempty"`
	// The indemnification amount for the sub-fund
	FundIndemnificationAmount float64 `protobuf:"fixed64,16,opt,name=fund_indemnification_amount,json=fundIndemnificationAmount,proto3" json:"fund_indemnification_amount,omitempty"`
	// The indemnification amount for investors
	InvestorsIndemnificationAmount float64 `protobuf:"fixed64,17,opt,name=investors_indemnification_amount,json=investorsIndemnificationAmount,proto3" json:"investors_indemnification_amount,omitempty"`
	// Maximum impact as a % of NAV
	MaximumImpact float64 `protobuf:"fixed64,18,opt,name=maximum_impact,json=maximumImpact,proto3" json:"maximum_impact,omitempty"`
	// Whether "De Minimis" amount is applied
	DeMinimisApplied bool `protobuf:"varint,19,opt,name=de_minimis_applied,json=deMinimisApplied,proto3" json:"de_minimis_applied,omitempty"`
	// Level of de miniis
	LevelOfDeMinimis float64 `protobuf:"fixed64,20,opt,name=level_of_de_minimis,json=levelOfDeMinimis,proto3" json:"level_of_de_minimis,omitempty"`
	// Currency of de minimis
	CurrencyOfDeMinimis string `protobuf:"bytes,21,opt,name=currency_of_de_minimis,json=currencyOfDeMinimis,proto3" json:"currency_of_de_minimis,omitempty"`
	// Other information regarding nav impact
	OtherInformationRegardingNavImpact string `protobuf:"bytes,22,opt,name=other_information_regarding_nav_impact,json=otherInformationRegardingNavImpact,proto3" json:"other_information_regarding_nav_impact,omitempty"`
	// Date of booking / recording of the indemnification provision (in the accounting)
	IndemnificationBookingDate *date.Date `protobuf:"bytes,23,opt,name=indemnification_booking_date,json=indemnificationBookingDate,proto3" json:"indemnification_booking_date,omitempty"`
	// Date of payment of the indemnification
	IndemnificationPaymentDate *date.Date `protobuf:"bytes,24,opt,name=indemnification_payment_date,json=indemnificationPaymentDate,proto3" json:"indemnification_payment_date,omitempty"`
	// Entity responsible for payment of the indemnification amount
	EntityResponsibleForPayment string `protobuf:"bytes,25,opt,name=entity_responsible_for_payment,json=entityResponsibleForPayment,proto3" json:"entity_responsible_for_payment,omitempty"`
	// Other Comments
	Comments string `protobuf:"bytes,51,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_NAVCalculationErrorInformation) Reset() {
	*x = RT000FTL8_NAVCalculationErrorInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_NAVCalculationErrorInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_NAVCalculationErrorInformation) ProtoMessage() {}

func (x *RT000FTL8_NAVCalculationErrorInformation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_NAVCalculationErrorInformation.ProtoReflect.Descriptor instead.
func (*RT000FTL8_NAVCalculationErrorInformation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 10}
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetDetectionDate() *date.Date {
	if x != nil {
		return x.DetectionDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetErrorPeriodStartDate() *date.Date {
	if x != nil {
		return x.ErrorPeriodStartDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetErrorPeriodEndDate() *date.Date {
	if x != nil {
		return x.ErrorPeriodEndDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetResolutionDate() *date.Date {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetErrorType() RT000FTL8_NAVCalculationErrorInformation_ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return RT000FTL8_NAVCalculationErrorInformation_ERROR_TYPE_UNSPECIFIED
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetImpact() RT000FTL8_NAVCalculationErrorInformation_Impact {
	if x != nil {
		return x.Impact
	}
	return RT000FTL8_NAVCalculationErrorInformation_IMPACT_UNSPECIFIED
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetTotalIndemnificationAmount() float64 {
	if x != nil {
		return x.TotalIndemnificationAmount
	}
	return 0
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetFundIndemnificationAmount() float64 {
	if x != nil {
		return x.FundIndemnificationAmount
	}
	return 0
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetInvestorsIndemnificationAmount() float64 {
	if x != nil {
		return x.InvestorsIndemnificationAmount
	}
	return 0
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetMaximumImpact() float64 {
	if x != nil {
		return x.MaximumImpact
	}
	return 0
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetDeMinimisApplied() bool {
	if x != nil {
		return x.DeMinimisApplied
	}
	return false
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetLevelOfDeMinimis() float64 {
	if x != nil {
		return x.LevelOfDeMinimis
	}
	return 0
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetCurrencyOfDeMinimis() string {
	if x != nil {
		return x.CurrencyOfDeMinimis
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetOtherInformationRegardingNavImpact() string {
	if x != nil {
		return x.OtherInformationRegardingNavImpact
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetIndemnificationBookingDate() *date.Date {
	if x != nil {
		return x.IndemnificationBookingDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetIndemnificationPaymentDate() *date.Date {
	if x != nil {
		return x.IndemnificationPaymentDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetEntityResponsibleForPayment() string {
	if x != nil {
		return x.EntityResponsibleForPayment
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationErrorInformation) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

// Definition of an investment breach
type RT000FTL8_InvestmentBreach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reporting date for the information
	ReportingDate *date.Date `protobuf:"bytes,1,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal referenceID used to track the breach
	ReferenceId string `protobuf:"bytes,2,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// The identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,3,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,4,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,5,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,6,opt,name=fund,proto3" json:"fund,omitempty"`
	// The date the breach was detected
	DetectionDate *date.Date `protobuf:"bytes,7,opt,name=detection_date,json=detectionDate,proto3" json:"detection_date,omitempty"`
	// Period of the breach - Start Date
	BreachPeriodStartDate *date.Date `protobuf:"bytes,8,opt,name=breach_period_start_date,json=breachPeriodStartDate,proto3" json:"breach_period_start_date,omitempty"`
	// Period of the breach - End Date
	BreachPeriodEndDate *date.Date `protobuf:"bytes,9,opt,name=breach_period_end_date,json=breachPeriodEndDate,proto3" json:"breach_period_end_date,omitempty"`
	// The nature of the error
	BreachType RT000FTL8_InvestmentBreach_BreachType `protobuf:"varint,10,opt,name=breach_type,json=breachType,proto3,enum=standards.open.v1.RT000FTL8_InvestmentBreach_BreachType" json:"breach_type,omitempty"`
	// Description and cause of the error
	Cause string `protobuf:"bytes,11,opt,name=cause,proto3" json:"cause,omitempty"`
	// Corrective measures taken to close the investment breach
	CorrectiveMeasures string `protobuf:"bytes,12,opt,name=corrective_measures,json=correctiveMeasures,proto3" json:"corrective_measures,omitempty"`
	// Measures taken to avoid recurrence
	Remediation string `protobuf:"bytes,13,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// The impact of the error
	Impact RT000FTL8_InvestmentBreach_Impact `protobuf:"varint,14,opt,name=impact,proto3,enum=standards.open.v1.RT000FTL8_InvestmentBreach_Impact" json:"impact,omitempty"`
	// The amount of impact (in currency terms)
	ImpactAmount float64 `protobuf:"fixed64,15,opt,name=impact_amount,json=impactAmount,proto3" json:"impact_amount,omitempty"`
	// The currency code of the impact amount
	// The country code is required to comply with the 3-letter ISO 3166-1 alpha-3 standard.
	// The ISO 3166-1 alpha-3 is a set of 3-letter country codes to represent countries and dependent areas.
	// Make sure the provided country code is in uppercase.
	// Example: 'USA' for the United States, 'GBR' for Great Britain, 'DEU' for Germany, etc.
	ImpactAmountCurrency string `protobuf:"bytes,16,opt,name=impact_amount_currency,json=impactAmountCurrency,proto3" json:"impact_amount_currency,omitempty"`
	// Description of the impact calculation method
	CalculationMethod string `protobuf:"bytes,17,opt,name=calculation_method,json=calculationMethod,proto3" json:"calculation_method,omitempty"`
	// Date of booking / recording of the indemnification provision (in the accounting)
	IndemnificationBookingDate *date.Date `protobuf:"bytes,23,opt,name=indemnification_booking_date,json=indemnificationBookingDate,proto3" json:"indemnification_booking_date,omitempty"`
	// Date of payment of the indemnification
	IndemnificationPaymentDate *date.Date `protobuf:"bytes,24,opt,name=indemnification_payment_date,json=indemnificationPaymentDate,proto3" json:"indemnification_payment_date,omitempty"`
	// Entity responsible for payment of the indemnification amount
	EntityResponsibleForPayment string `protobuf:"bytes,25,opt,name=entity_responsible_for_payment,json=entityResponsibleForPayment,proto3" json:"entity_responsible_for_payment,omitempty"`
	// Other Comments
	Comments string `protobuf:"bytes,51,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_InvestmentBreach) Reset() {
	*x = RT000FTL8_InvestmentBreach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_InvestmentBreach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_InvestmentBreach) ProtoMessage() {}

func (x *RT000FTL8_InvestmentBreach) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000FTL8_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_InvestmentBreach.ProtoReflect.Descriptor instead.
func (*RT000FTL8_InvestmentBreach) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000FTL8_proto_rawDescGZIP(), []int{0, 11}
}

func (x *RT000FTL8_InvestmentBreach) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000FTL8_InvestmentBreach) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetDetectionDate() *date.Date {
	if x != nil {
		return x.DetectionDate
	}
	return nil
}

func (x *RT000FTL8_InvestmentBreach) GetBreachPeriodStartDate() *date.Date {
	if x != nil {
		return x.BreachPeriodStartDate
	}
	return nil
}

func (x *RT000FTL8_InvestmentBreach) GetBreachPeriodEndDate() *date.Date {
	if x != nil {
		return x.BreachPeriodEndDate
	}
	return nil
}

func (x *RT000FTL8_InvestmentBreach) GetBreachType() RT000FTL8_InvestmentBreach_BreachType {
	if x != nil {
		return x.BreachType
	}
	return RT000FTL8_InvestmentBreach_BREACH_TYPE_UNSPECIFIED
}

func (x *RT000FTL8_InvestmentBreach) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetCorrectiveMeasures() string {
	if x != nil {
		return x.CorrectiveMeasures
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetImpact() RT000FTL8_InvestmentBreach_Impact {
	if x != nil {
		return x.Impact
	}
	return RT000FTL8_InvestmentBreach_IMPACT_UNSPECIFIED
}

func (x *RT000FTL8_InvestmentBreach) GetImpactAmount() float64 {
	if x != nil {
		return x.ImpactAmount
	}
	return 0
}

func (x *RT000FTL8_InvestmentBreach) GetImpactAmountCurrency() string {
	if x != nil {
		return x.ImpactAmountCurrency
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetCalculationMethod() string {
	if x != nil {
		return x.CalculationMethod
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetIndemnificationBookingDate() *date.Date {
	if x != nil {
		return x.IndemnificationBookingDate
	}
	return nil
}

func (x *RT000FTL8_InvestmentBreach) GetIndemnificationPaymentDate() *date.Date {
	if x != nil {
		return x.IndemnificationPaymentDate
	}
	return nil
}

func (x *RT000FTL8_InvestmentBreach) GetEntityResponsibleForPayment() string {
	if x != nil {
		return x.EntityResponsibleForPayment
	}
	return ""
}

func (x *RT000FTL8_InvestmentBreach) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

var File_standards_open_v1_RT000FTL8_proto protoreflect.FileDescriptor

var file_standards_open_v1_RT000FTL8_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x78, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x46, 0x54, 0x4c, 0x38, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46,
	0x54, 0x4c, 0x38, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x4e, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x69, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x35, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x12,
	0x47, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x38,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54,
	0x4c, 0x38, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x0a, 0x63, 0x61,
	0x73, 0x68, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73,
	0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x46, 0x54, 0x4c, 0x38, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x3a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c,
	0x38, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x73, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x1e, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x76, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x3c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c,
	0x38, 0x2e, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x41, 0x56, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x76, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x71,
	0x0a, 0x16, 0x6e, 0x61, 0x76, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x4e, 0x41, 0x56,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6e, 0x61, 0x76,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x5e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x52, 0x12, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x73, 0x1a, 0xde, 0x12, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3a, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x47, 0x0a,
	0x16, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c,
	0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c,
	0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c,
	0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75,
	0x6e, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46,
	0x54, 0x4c, 0x38, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x49, 0x44, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x5b, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x72, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x41, 0x6d, 0x62, 0x65, 0x72, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x03, 0x72, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x85, 0x0a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x4e, 0x41, 0x56, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x56, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x4e, 0x41, 0x56, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x41, 0x56, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x41, 0x56, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49,
	0x4e, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x41, 0x56, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10,
	0x06, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x56, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c,
	0x4e, 0x41, 0x56, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x08, 0x12, 0x24,
	0x0a, 0x20, 0x4e, 0x41, 0x56, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x5f, 0x4d, 0x41, 0x54,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41, 0x56, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x41,
	0x56, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x41,
	0x53, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x33, 0x31, 0x5f, 0x54, 0x4f, 0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53,
	0x10, 0x0d, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10,
	0x0e, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x33, 0x31, 0x5f, 0x54, 0x4f,
	0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x53, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x53, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x13, 0x12, 0x24,
	0x0a, 0x20, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x14, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x15, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x55, 0x53, 0x50, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x16, 0x12, 0x26, 0x0a,
	0x22, 0x44, 0x49, 0x53, 0x54, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x49, 0x45, 0x53, 0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x45, 0x44, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x4c, 0x44, 0x10,
	0x19, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f,
	0x54, 0x45, 0x52, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x5f, 0x59, 0x54, 0x44, 0x5f, 0x54, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x41,
	0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12,
	0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x49,
	0x4e, 0x47, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x1f, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41,
	0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x58, 0x10, 0x21, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x56,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x49, 0x4e, 0x43,
	0x4f, 0x4d, 0x45, 0x10, 0x22, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x53, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x23, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x41, 0x56, 0x5f, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a,
	0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x25, 0x12, 0x15, 0x0a, 0x11,
	0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x26, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x53, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x54, 0x48, 0x49, 0x52,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x56,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x28, 0x22,
	0x52, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x10, 0x03, 0x22, 0x4d, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x49,
	0x53, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x53, 0x45,
	0x10, 0x02, 0x1a, 0xc9, 0x02, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x75, 0x6d, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x61, 0x75, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xd4,
	0x0b, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75,
	0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x64, 0x6f, 0x6c,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x64, 0x6f, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x62, 0x67, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x62, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x69, 0x63, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x67, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77,
	0x6b, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x6b, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x69, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x65, 0x69, 0x12,
	0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x87, 0x01, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4f, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa8,
	0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43,
	0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47,
	0x49, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49,
	0x54, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x4f,
	0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x54,
	0x47, 0x45, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x4e, 0x49, 0x10, 0x09, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x53,
	0x57, 0x41, 0x50, 0x10, 0x0a, 0x1a, 0x81, 0x0e, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x69, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x75, 0x73, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x64, 0x6f, 0x6c, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x64, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x62, 0x67, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x62, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69,
	0x63, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x6b, 0x6e,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x6b, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x69, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x65, 0x69, 0x12, 0x2f, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x80, 0x01,
	0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x48, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x56, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46,
	0x54, 0x4c, 0x38, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x61, 0x69, 0x73,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x11,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x79, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x76, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x76, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55,
	0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47,
	0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x42, 0x47,
	0x49, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x07, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10, 0x09,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x22, 0xb9, 0x01,
	0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52, 0x50,
	0x4f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x54, 0x47, 0x45, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x4e, 0x49,
	0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x54, 0x55,
	0x52, 0x4e, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x0a, 0x1a, 0xb5, 0x0b, 0x0a, 0x0a, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x13,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x12, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c,
	0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75,
	0x73, 0x69, 0x70, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x64, 0x6f, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x65, 0x64, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x62, 0x67, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x62, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x63, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x6b, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x77, 0x6b, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x69, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x65, 0x69, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x49, 0x43, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d,
	0x5f, 0x49, 0x44, 0x10, 0x0a, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x54, 0x47, 0x45, 0x10, 0x08,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x4e, 0x49, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10,
	0x0a, 0x1a, 0xf8, 0x03, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x68, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x32, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75,
	0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xc5, 0x05, 0x0a,
	0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x07, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x77, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x72, 0x5f, 0x79, 0x74, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74, 0x65, 0x72,
	0x59, 0x74, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x74, 0x64, 0x5f, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x74, 0x65, 0x72, 0x59, 0x74, 0x64, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa4, 0x01,
	0x0a, 0x19, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x49, 0x43, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f,
	0x49, 0x44, 0x10, 0x0a, 0x1a, 0xd0, 0x04, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d,
	0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d,
	0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62,
	0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x11, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xde, 0x03, 0x0a, 0x11, 0x53, 0x77, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65,
	0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65,
	0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c,
	0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x10, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0e, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x77, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x18,
	0x6e, 0x61, 0x76, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x6e, 0x61, 0x76, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x61, 0x76, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6e, 0x61, 0x76, 0x57, 0x69, 0x74, 0x68, 0x53, 0x77, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x83, 0x06, 0x0a, 0x10, 0x50, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x41, 0x56, 0x12, 0x38, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6e, 0x61, 0x76, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6e, 0x61,
	0x76, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x13, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x41, 0x56, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x1a, 0x6e, 0x61, 0x76, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x6e, 0x61, 0x76, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x61, 0x76, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x44, 0x0a, 0x1f, 0x6e, 0x61, 0x76, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x6e, 0x61, 0x76, 0x50, 0x65,
	0x72, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x55, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x42,
	0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x42,
	0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x07, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x1a, 0xbd,
	0x0e, 0x0a, 0x1e, 0x4e, 0x41, 0x56, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72,
	0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x17, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44,
	0x0a, 0x15, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x64, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54,
	0x4c, 0x38, 0x2e, 0x4e, 0x41, 0x56, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x4e, 0x41, 0x56,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x19, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6d, 0x6e,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x49, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x65, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x69, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4f,
	0x66, 0x44, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x69, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x44, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x73, 0x12,
	0x52, 0x0a, 0x26, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x61, 0x76, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x22, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x12, 0x53, 0x0a, 0x1c, 0x69, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x1a, 0x69, 0x6e,
	0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x1c, 0x69, 0x6e, 0x64, 0x65,
	0x6d, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x1a, 0x69, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x1e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdb,
	0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x44, 0x45,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43,
	0x43, 0x52, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x22, 0x60, 0x0a, 0x06,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x54,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x03, 0x1a, 0x9d,
	0x0f, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d,
	0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0e,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x18, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x15, 0x62, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x46, 0x0a, 0x16, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x13, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x62, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x53, 0x0a, 0x1c, 0x69, 0x6e, 0x64, 0x65, 0x6d, 0x6e,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x1a, 0x69, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x1c, 0x69,
	0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x1a, 0x69, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x1e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x93, 0x05, 0x0a, 0x0a, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x4c, 0x55, 0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x34, 0x31, 0x5f, 0x45, 0x4c, 0x49, 0x47,
	0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4c, 0x55, 0x58, 0x5f, 0x41, 0x52,
	0x54, 0x5f, 0x34, 0x31, 0x5f, 0x31, 0x30, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x53, 0x5f, 0x4d, 0x4d, 0x49, 0x5f, 0x54, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x55, 0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f,
	0x34, 0x33, 0x5f, 0x31, 0x30, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x53,
	0x53, 0x55, 0x45, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x55, 0x58, 0x5f, 0x41, 0x52,
	0x54, 0x5f, 0x34, 0x33, 0x5f, 0x32, 0x30, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x53, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x55,
	0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x34, 0x33, 0x5f, 0x46, 0x44, 0x49, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x55, 0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x34, 0x33, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x52, 0x5f, 0x54, 0x53, 0x5f, 0x4d, 0x4d, 0x49, 0x10, 0x06, 0x12, 0x28,
	0x0a, 0x24, 0x4c, 0x55, 0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x34, 0x33, 0x5f, 0x32, 0x30, 0x5f,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x55, 0x58, 0x5f,
	0x41, 0x52, 0x54, 0x5f, 0x34, 0x33, 0x5f, 0x33, 0x35, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x53, 0x5f, 0x4d, 0x4d, 0x49, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x55,
	0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x34, 0x35, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x5f, 0x36, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x53, 0x10, 0x09, 0x12,
	0x23, 0x0a, 0x1f, 0x4c, 0x55, 0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x34, 0x36, 0x5f, 0x32, 0x30,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x43, 0x49, 0x54, 0x53, 0x5f, 0x55,
	0x43, 0x49, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x55, 0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f,
	0x34, 0x38, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x46, 0x49, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x49,
	0x4e, 0x46, 0x4c, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x4c, 0x55,
	0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x35, 0x30, 0x5f, 0x31, 0x30, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x52, 0x52, 0x4f, 0x57, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54,
	0x45, 0x4d, 0x50, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x53, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x4c,
	0x55, 0x58, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x35, 0x32, 0x5f, 0x4e, 0x4f, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x53, 0x4d, 0x41, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x0e, 0x12, 0x1d,
	0x0a, 0x19, 0x4c, 0x55, 0x58, 0x5f, 0x53, 0x49, 0x46, 0x5f, 0x33, 0x30, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x1e, 0x0a,
	0x1a, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x53, 0x50,
	0x45, 0x43, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x10, 0x12, 0x18, 0x0a,
	0x14, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x11, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49,
	0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4d, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x53,
	0x53, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x45,
	0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x05, 0x22, 0x4b,
	0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c,
	0x38, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_standards_open_v1_RT000FTL8_proto_rawDescOnce sync.Once
	file_standards_open_v1_RT000FTL8_proto_rawDescData = file_standards_open_v1_RT000FTL8_proto_rawDesc
)

func file_standards_open_v1_RT000FTL8_proto_rawDescGZIP() []byte {
	file_standards_open_v1_RT000FTL8_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_RT000FTL8_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_RT000FTL8_proto_rawDescData)
	})
	return file_standards_open_v1_RT000FTL8_proto_rawDescData
}

var file_standards_open_v1_RT000FTL8_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_standards_open_v1_RT000FTL8_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_standards_open_v1_RT000FTL8_proto_goTypes = []interface{}{
	(RT000FTL8_Metric_MetricID)(0),                                    // 0: standards.open.v1.RT000FTL8.Metric.MetricID
	(RT000FTL8_Metric_ValueType)(0),                                   // 1: standards.open.v1.RT000FTL8.Metric.ValueType
	(RT000FTL8_Metric_EvaluationType)(0),                              // 2: standards.open.v1.RT000FTL8.Metric.EvaluationType
	(RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier)(0), // 3: standards.open.v1.RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier
	(RT000FTL8_SecurityPricingError_AssetClass)(0),                    // 4: standards.open.v1.RT000FTL8.SecurityPricingError.AssetClass
	(RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier)(0),        // 5: standards.open.v1.RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier
	(RT000FTL8_StaleSecurity_AssetClass)(0),                           // 6: standards.open.v1.RT000FTL8.StaleSecurity.AssetClass
	(RT000FTL8_StockBreak_FinancialInstrumentIdentifier)(0),           // 7: standards.open.v1.RT000FTL8.StockBreak.FinancialInstrumentIdentifier
	(RT000FTL8_StockBreak_AssetClass)(0),                              // 8: standards.open.v1.RT000FTL8.StockBreak.AssetClass
	(RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes)(0),        // 9: standards.open.v1.RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes
	(RT000FTL8_PerShareClassNAV_ShareClassIdentifierTypes)(0),         // 10: standards.open.v1.RT000FTL8.PerShareClassNAV.ShareClassIdentifierTypes
	(RT000FTL8_NAVCalculationErrorInformation_ErrorType)(0),           // 11: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.ErrorType
	(RT000FTL8_NAVCalculationErrorInformation_Impact)(0),              // 12: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.Impact
	(RT000FTL8_InvestmentBreach_BreachType)(0),                        // 13: standards.open.v1.RT000FTL8.InvestmentBreach.BreachType
	(RT000FTL8_InvestmentBreach_Impact)(0),                            // 14: standards.open.v1.RT000FTL8.InvestmentBreach.Impact
	(*RT000FTL8)(nil),                                                 // 15: standards.open.v1.RT000FTL8
	(*RT000FTL8Batch)(nil),                                            // 16: standards.open.v1.RT000FTL8_batch
	(*RT000FTL8_Metric)(nil),                                          // 17: standards.open.v1.RT000FTL8.Metric
	(*RT000FTL8_NetAssetValueSnapshot)(nil),                           // 18: standards.open.v1.RT000FTL8.NetAssetValueSnapshot
	(*RT000FTL8_SecurityPricingError)(nil),                            // 19: standards.open.v1.RT000FTL8.SecurityPricingError
	(*RT000FTL8_StaleSecurity)(nil),                                   // 20: standards.open.v1.RT000FTL8.StaleSecurity
	(*RT000FTL8_StockBreak)(nil),                                      // 21: standards.open.v1.RT000FTL8.StockBreak
	(*RT000FTL8_CashBreak)(nil),                                       // 22: standards.open.v1.RT000FTL8.CashBreak
	(*RT000FTL8_TotalExpenseRatio)(nil),                               // 23: standards.open.v1.RT000FTL8.TotalExpenseRatio
	(*RT000FTL8_Invoice)(nil),                                         // 24: standards.open.v1.RT000FTL8.Invoice
	(*RT000FTL8_SwingPricingEvent)(nil),                               // 25: standards.open.v1.RT000FTL8.SwingPricingEvent
	(*RT000FTL8_PerShareClassNAV)(nil),                                // 26: standards.open.v1.RT000FTL8.PerShareClassNAV
	(*RT000FTL8_NAVCalculationErrorInformation)(nil),                  // 27: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation
	(*RT000FTL8_InvestmentBreach)(nil),                                // 28: standards.open.v1.RT000FTL8.InvestmentBreach
	(*date.Date)(nil),                                                 // 29: google.type.Date
	(RedAmberGreen)(0),                                                // 30: standards.open.v1.RedAmberGreen
}
var file_standards_open_v1_RT000FTL8_proto_depIdxs = []int32{
	17, // 0: standards.open.v1.RT000FTL8.metrics:type_name -> standards.open.v1.RT000FTL8.Metric
	18, // 1: standards.open.v1.RT000FTL8.net_asset_values:type_name -> standards.open.v1.RT000FTL8.NetAssetValueSnapshot
	19, // 2: standards.open.v1.RT000FTL8.security_pricing_errors:type_name -> standards.open.v1.RT000FTL8.SecurityPricingError
	20, // 3: standards.open.v1.RT000FTL8.stale_securities:type_name -> standards.open.v1.RT000FTL8.StaleSecurity
	21, // 4: standards.open.v1.RT000FTL8.stock_breaks:type_name -> standards.open.v1.RT000FTL8.StockBreak
	22, // 5: standards.open.v1.RT000FTL8.cash_breaks:type_name -> standards.open.v1.RT000FTL8.CashBreak
	23, // 6: standards.open.v1.RT000FTL8.total_expense_ratios:type_name -> standards.open.v1.RT000FTL8.TotalExpenseRatio
	24, // 7: standards.open.v1.RT000FTL8.recent_invoices:type_name -> standards.open.v1.RT000FTL8.Invoice
	25, // 8: standards.open.v1.RT000FTL8.swing_pricing_events:type_name -> standards.open.v1.RT000FTL8.SwingPricingEvent
	26, // 9: standards.open.v1.RT000FTL8.per_share_class_nav_historical:type_name -> standards.open.v1.RT000FTL8.PerShareClassNAV
	27, // 10: standards.open.v1.RT000FTL8.nav_calculation_errors:type_name -> standards.open.v1.RT000FTL8.NAVCalculationErrorInformation
	28, // 11: standards.open.v1.RT000FTL8.investment_breaches:type_name -> standards.open.v1.RT000FTL8.InvestmentBreach
	15, // 12: standards.open.v1.RT000FTL8_batch.response:type_name -> standards.open.v1.RT000FTL8
	29, // 13: standards.open.v1.RT000FTL8.Metric.production_date:type_name -> google.type.Date
	29, // 14: standards.open.v1.RT000FTL8.Metric.reporting_period_end:type_name -> google.type.Date
	29, // 15: standards.open.v1.RT000FTL8.Metric.reporting_period_start:type_name -> google.type.Date
	0,  // 16: standards.open.v1.RT000FTL8.Metric.metric_id:type_name -> standards.open.v1.RT000FTL8.Metric.MetricID
	1,  // 17: standards.open.v1.RT000FTL8.Metric.value_type:type_name -> standards.open.v1.RT000FTL8.Metric.ValueType
	2,  // 18: standards.open.v1.RT000FTL8.Metric.evaluation_type:type_name -> standards.open.v1.RT000FTL8.Metric.EvaluationType
	30, // 19: standards.open.v1.RT000FTL8.Metric.rag:type_name -> standards.open.v1.RedAmberGreen
	29, // 20: standards.open.v1.RT000FTL8.NetAssetValueSnapshot.effective_date:type_name -> google.type.Date
	29, // 21: standards.open.v1.RT000FTL8.SecurityPricingError.reporting_date:type_name -> google.type.Date
	29, // 22: standards.open.v1.RT000FTL8.SecurityPricingError.error_date:type_name -> google.type.Date
	29, // 23: standards.open.v1.RT000FTL8.SecurityPricingError.identification_date:type_name -> google.type.Date
	29, // 24: standards.open.v1.RT000FTL8.SecurityPricingError.resolution_date:type_name -> google.type.Date
	3,  // 25: standards.open.v1.RT000FTL8.SecurityPricingError.primary_identifier_type:type_name -> standards.open.v1.RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier
	4,  // 26: standards.open.v1.RT000FTL8.SecurityPricingError.asset_class:type_name -> standards.open.v1.RT000FTL8.SecurityPricingError.AssetClass
	29, // 27: standards.open.v1.RT000FTL8.StaleSecurity.reporting_date:type_name -> google.type.Date
	5,  // 28: standards.open.v1.RT000FTL8.StaleSecurity.primary_identifier_type:type_name -> standards.open.v1.RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier
	6,  // 29: standards.open.v1.RT000FTL8.StaleSecurity.asset_class:type_name -> standards.open.v1.RT000FTL8.StaleSecurity.AssetClass
	29, // 30: standards.open.v1.RT000FTL8.StaleSecurity.raised_date:type_name -> google.type.Date
	29, // 31: standards.open.v1.RT000FTL8.StaleSecurity.price_latest_date:type_name -> google.type.Date
	29, // 32: standards.open.v1.RT000FTL8.StockBreak.report_date:type_name -> google.type.Date
	29, // 33: standards.open.v1.RT000FTL8.StockBreak.identification_date:type_name -> google.type.Date
	29, // 34: standards.open.v1.RT000FTL8.StockBreak.resolution_date:type_name -> google.type.Date
	7,  // 35: standards.open.v1.RT000FTL8.StockBreak.primary_identifier_type:type_name -> standards.open.v1.RT000FTL8.StockBreak.FinancialInstrumentIdentifier
	8,  // 36: standards.open.v1.RT000FTL8.StockBreak.asset_class:type_name -> standards.open.v1.RT000FTL8.StockBreak.AssetClass
	29, // 37: standards.open.v1.RT000FTL8.StockBreak.effective_date:type_name -> google.type.Date
	29, // 38: standards.open.v1.RT000FTL8.CashBreak.report_date:type_name -> google.type.Date
	29, // 39: standards.open.v1.RT000FTL8.CashBreak.identification_date:type_name -> google.type.Date
	29, // 40: standards.open.v1.RT000FTL8.CashBreak.resolution_date:type_name -> google.type.Date
	29, // 41: standards.open.v1.RT000FTL8.TotalExpenseRatio.reporting_date:type_name -> google.type.Date
	29, // 42: standards.open.v1.RT000FTL8.TotalExpenseRatio.ter_date:type_name -> google.type.Date
	9,  // 43: standards.open.v1.RT000FTL8.TotalExpenseRatio.share_class_id_type:type_name -> standards.open.v1.RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes
	29, // 44: standards.open.v1.RT000FTL8.Invoice.reporting_date:type_name -> google.type.Date
	29, // 45: standards.open.v1.RT000FTL8.Invoice.invoice_date:type_name -> google.type.Date
	29, // 46: standards.open.v1.RT000FTL8.Invoice.authorisation_date:type_name -> google.type.Date
	29, // 47: standards.open.v1.RT000FTL8.Invoice.payment_date:type_name -> google.type.Date
	29, // 48: standards.open.v1.RT000FTL8.SwingPricingEvent.reporting_date:type_name -> google.type.Date
	29, // 49: standards.open.v1.RT000FTL8.SwingPricingEvent.swing_price_date:type_name -> google.type.Date
	29, // 50: standards.open.v1.RT000FTL8.PerShareClassNAV.reporting_date:type_name -> google.type.Date
	29, // 51: standards.open.v1.RT000FTL8.PerShareClassNAV.nav_date:type_name -> google.type.Date
	10, // 52: standards.open.v1.RT000FTL8.PerShareClassNAV.share_class_id_type:type_name -> standards.open.v1.RT000FTL8.PerShareClassNAV.ShareClassIdentifierTypes
	29, // 53: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.reporting_date:type_name -> google.type.Date
	29, // 54: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.detection_date:type_name -> google.type.Date
	29, // 55: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.error_period_start_date:type_name -> google.type.Date
	29, // 56: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.error_period_end_date:type_name -> google.type.Date
	29, // 57: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.resolution_date:type_name -> google.type.Date
	11, // 58: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.error_type:type_name -> standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.ErrorType
	12, // 59: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.impact:type_name -> standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.Impact
	29, // 60: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.indemnification_booking_date:type_name -> google.type.Date
	29, // 61: standards.open.v1.RT000FTL8.NAVCalculationErrorInformation.indemnification_payment_date:type_name -> google.type.Date
	29, // 62: standards.open.v1.RT000FTL8.InvestmentBreach.reporting_date:type_name -> google.type.Date
	29, // 63: standards.open.v1.RT000FTL8.InvestmentBreach.detection_date:type_name -> google.type.Date
	29, // 64: standards.open.v1.RT000FTL8.InvestmentBreach.breach_period_start_date:type_name -> google.type.Date
	29, // 65: standards.open.v1.RT000FTL8.InvestmentBreach.breach_period_end_date:type_name -> google.type.Date
	13, // 66: standards.open.v1.RT000FTL8.InvestmentBreach.breach_type:type_name -> standards.open.v1.RT000FTL8.InvestmentBreach.BreachType
	14, // 67: standards.open.v1.RT000FTL8.InvestmentBreach.impact:type_name -> standards.open.v1.RT000FTL8.InvestmentBreach.Impact
	29, // 68: standards.open.v1.RT000FTL8.InvestmentBreach.indemnification_booking_date:type_name -> google.type.Date
	29, // 69: standards.open.v1.RT000FTL8.InvestmentBreach.indemnification_payment_date:type_name -> google.type.Date
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_standards_open_v1_RT000FTL8_proto_init() }
func file_standards_open_v1_RT000FTL8_proto_init() {
	if File_standards_open_v1_RT000FTL8_proto != nil {
		return
	}
	file_standards_open_v1_rag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_RT000FTL8_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_NetAssetValueSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_SecurityPricingError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_StaleSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_StockBreak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_CashBreak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_TotalExpenseRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_Invoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_SwingPricingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_PerShareClassNAV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_NAVCalculationErrorInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000FTL8_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_InvestmentBreach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_RT000FTL8_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_RT000FTL8_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_RT000FTL8_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_RT000FTL8_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_RT000FTL8_proto_msgTypes,
	}.Build()
	File_standards_open_v1_RT000FTL8_proto = out.File
	file_standards_open_v1_RT000FTL8_proto_rawDesc = nil
	file_standards_open_v1_RT000FTL8_proto_goTypes = nil
	file_standards_open_v1_RT000FTL8_proto_depIdxs = nil
}
