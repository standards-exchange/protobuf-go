// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: RT000FTL8.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	money "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumerations of financial identifiers
type RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT000FTL8_SecurityPricingError_IDENTIFIER_UNSPECIFIED RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 0
	// ISO 6166 code of ISIN when available
	RT000FTL8_SecurityPricingError_ISIN RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000FTL8_SecurityPricingError_CUSIP RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000FTL8_SecurityPricingError_SEDOL RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000FTL8_SecurityPricingError_WKN RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000FTL8_SecurityPricingError_BBG_TICKER RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 5
	// BBGID (The Bloomberg Global ID)
	RT000FTL8_SecurityPricingError_BBGID RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 6
	// Reuters RIC (Reuters instrument code)
	RT000FTL8_SecurityPricingError_RIC RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000FTL8_SecurityPricingError_FIGI RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 8
	// LEI 0 Legal Entity Identifier
	RT000FTL8_SecurityPricingError_LEI RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000FTL8_SecurityPricingError_PERM_ID RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier = 10
)

// Enum value maps for RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier.
var (
	RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) Enum() *RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier {
	p := new(RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000FTL8_proto_enumTypes[0].Descriptor()
}

func (RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_RT000FTL8_proto_enumTypes[0]
}

func (x RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier.Descriptor instead.
func (RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 3, 0}
}

// Enumerations of financial identifiers
type RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT000FTL8_StaleSecurity_IDENTIFIER_UNSPECIFIED RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 0
	// ISO 6166 code of ISIN when available
	RT000FTL8_StaleSecurity_ISIN RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000FTL8_StaleSecurity_CUSIP RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000FTL8_StaleSecurity_SEDOL RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000FTL8_StaleSecurity_WKN RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000FTL8_StaleSecurity_BBG_TICKER RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 5
	// BBGID (The Bloomberg Global ID)
	RT000FTL8_StaleSecurity_BBGID RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 6
	// Reuters RIC (Reuters instrument code)
	RT000FTL8_StaleSecurity_RIC RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000FTL8_StaleSecurity_FIGI RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 8
	// LEI 0 Legal Entity Identifier
	RT000FTL8_StaleSecurity_LEI RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000FTL8_StaleSecurity_PERM_ID RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier = 10
)

// Enum value maps for RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier.
var (
	RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) Enum() *RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier {
	p := new(RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000FTL8_proto_enumTypes[1].Descriptor()
}

func (RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_RT000FTL8_proto_enumTypes[1]
}

func (x RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier.Descriptor instead.
func (RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 4, 0}
}

// Enumerations of financial identifiers
type RT000FTL8_StockBreak_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT000FTL8_StockBreak_IDENTIFIER_UNSPECIFIED RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 0
	// ISO 6166 code of ISIN when available
	RT000FTL8_StockBreak_ISIN RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000FTL8_StockBreak_CUSIP RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000FTL8_StockBreak_SEDOL RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000FTL8_StockBreak_WKN RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000FTL8_StockBreak_BBG_TICKER RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 5
	// BBGID (The Bloomberg Global ID)
	RT000FTL8_StockBreak_BBGID RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 6
	// Reuters RIC (Reuters instrument code)
	RT000FTL8_StockBreak_RIC RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000FTL8_StockBreak_FIGI RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 8
	// LEI 0 Legal Entity Identifier
	RT000FTL8_StockBreak_LEI RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000FTL8_StockBreak_PERM_ID RT000FTL8_StockBreak_FinancialInstrumentIdentifier = 10
)

// Enum value maps for RT000FTL8_StockBreak_FinancialInstrumentIdentifier.
var (
	RT000FTL8_StockBreak_FinancialInstrumentIdentifier_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000FTL8_StockBreak_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000FTL8_StockBreak_FinancialInstrumentIdentifier) Enum() *RT000FTL8_StockBreak_FinancialInstrumentIdentifier {
	p := new(RT000FTL8_StockBreak_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT000FTL8_StockBreak_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_StockBreak_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000FTL8_proto_enumTypes[2].Descriptor()
}

func (RT000FTL8_StockBreak_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_RT000FTL8_proto_enumTypes[2]
}

func (x RT000FTL8_StockBreak_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_StockBreak_FinancialInstrumentIdentifier.Descriptor instead.
func (RT000FTL8_StockBreak_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 5, 0}
}

// Enumerations of financial identifiers
type RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes int32

const (
	// Source not specified by the user.
	RT000FTL8_TotalExpenseRatio_IDENTIFIER_UNSPECIFIED RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 0
	// ISO 6166 code of ISIN when available
	RT000FTL8_TotalExpenseRatio_ISIN RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000FTL8_TotalExpenseRatio_CUSIP RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000FTL8_TotalExpenseRatio_SEDOL RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000FTL8_TotalExpenseRatio_WKN RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000FTL8_TotalExpenseRatio_BBG_TICKER RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 5
	// BBGID (The Bloomberg Global ID)
	RT000FTL8_TotalExpenseRatio_BBGID RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 6
	// Reuters RIC (Reuters instrument code)
	RT000FTL8_TotalExpenseRatio_RIC RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000FTL8_TotalExpenseRatio_FIGI RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 8
	// LEI 0 Legal Entity Identifier
	RT000FTL8_TotalExpenseRatio_LEI RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000FTL8_TotalExpenseRatio_PERM_ID RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes = 10
)

// Enum value maps for RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes.
var (
	RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) Enum() *RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes {
	p := new(RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes)
	*p = x
	return p
}

func (x RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000FTL8_proto_enumTypes[3].Descriptor()
}

func (RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) Type() protoreflect.EnumType {
	return &file_RT000FTL8_proto_enumTypes[3]
}

func (x RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes.Descriptor instead.
func (RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes) EnumDescriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 7, 0}
}

// Enumerations of financial identifiers
type RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT000FTL8_PerShareClassNAV_IDENTIFIER_UNSPECIFIED RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier = 0
	// FIGI (Financial Instrument Global Identifier). To look up the FIGI navigate to https://www.openfigi.com/.
	RT000FTL8_PerShareClassNAV_FIGI RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier = 1
	// PermID (Refinitiv Permanent Identifier). To look up the PermID navigate to https://permid.org/
	RT000FTL8_PerShareClassNAV_PERM_ID RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier = 2
)

// Enum value maps for RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier.
var (
	RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier_name = map[int32]string{
		0: "IDENTIFIER_UNSPECIFIED",
		1: "FIGI",
		2: "PERM_ID",
	}
	RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"FIGI":                   1,
		"PERM_ID":                2,
	}
)

func (x RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier) Enum() *RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier {
	p := new(RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000FTL8_proto_enumTypes[4].Descriptor()
}

func (RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_RT000FTL8_proto_enumTypes[4]
}

func (x RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier.Descriptor instead.
func (RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 10, 0}
}

// Fund Accounting KPI Report for governance oversight and reporting for UCITS funds
type RT000FTL8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The effective date as of which the data is accurate
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The date data was produced
	ProductionDate *date.Date `protobuf:"bytes,3,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
	// The date of the latest portfolio valuation
	ValuationDate *date.Date `protobuf:"bytes,4,opt,name=valuation_date,json=valuationDate,proto3" json:"valuation_date,omitempty"`
	// The legal identifier of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,5,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// Name of the relevant sub-fund
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,6,opt,name=fund,proto3" json:"fund,omitempty"`
	// Time series of historic AUM data
	// Convention is to provide 12 months of history
	AssetsUnderManagementMonthly []*RT000FTL8_AssetsUnderManagement `protobuf:"bytes,7,rep,name=assets_under_management_monthly,json=assetsUnderManagementMonthly,proto3" json:"assets_under_management_monthly,omitempty"`
	// The time series of historic NAV timeliness on a monthly basis
	// Convention is to provide 12 months of history
	NavTimelinessMonthly []*RT000FTL8_NAVTimeliness `protobuf:"bytes,8,rep,name=nav_timeliness_monthly,json=navTimelinessMonthly,proto3" json:"nav_timeliness_monthly,omitempty"`
	// Recent NAV Calculation Errors.
	// Convention is to provide 12 months of history
	NavCalculationErrors []*RT000FTL8_NAVCalculationError `protobuf:"bytes,9,rep,name=nav_calculation_errors,json=navCalculationErrors,proto3" json:"nav_calculation_errors,omitempty"`
	// Recent instrument pricing errors. Convention is to provide 12 months of history.
	SecurityPricingErrors []*RT000FTL8_SecurityPricingError `protobuf:"bytes,10,rep,name=security_pricing_errors,json=securityPricingErrors,proto3" json:"security_pricing_errors,omitempty"`
	// Stale prices as of effective date
	StaleSecurities []*RT000FTL8_StaleSecurity `protobuf:"bytes,11,rep,name=stale_securities,json=staleSecurities,proto3" json:"stale_securities,omitempty"`
	// Recent Stock Breaks greater than 5 days. Convention is to provide 12 months of history.
	StockBreaks []*RT000FTL8_StockBreak `protobuf:"bytes,12,rep,name=stock_breaks,json=stockBreaks,proto3" json:"stock_breaks,omitempty"`
	// Recent Cash Breaks greater than 5 days. Convention is to provide 12 months of history.
	CashBreaks []*RT000FTL8_CashBreak `protobuf:"bytes,13,rep,name=cash_breaks,json=cashBreaks,proto3" json:"cash_breaks,omitempty"`
	// The timeseries of TERs per share class. Convention is to provide 12 months of history.
	TotalExpenseRatios []*RT000FTL8_TotalExpenseRatio `protobuf:"bytes,14,rep,name=total_expense_ratios,json=totalExpenseRatios,proto3" json:"total_expense_ratios,omitempty"`
	// Recent invoices paid. Convention is to provide 6 months of history.
	RecentInvoices []*RT000FTL8_Invoice `protobuf:"bytes,15,rep,name=recent_invoices,json=recentInvoices,proto3" json:"recent_invoices,omitempty"`
	// The list of Swing Pricing events within the fund. Convention is to provide 12 months history. Swing pricing is a method used by collective investment schemes to adjust the net asset value (NAV) of the fund in order to protect existing shareholders from the negative impact of large purchases or redemptions by new or existing shareholders. This is done by adjusting the NAV of the fund to reflect the anticipated costs associated with buying or selling the underlying assets of the fund. The adjustment is typically made by charging or crediting a "swing factor" to the NAV of the fund, which is based on the size of the purchase or redemption relative to the fund's assets under management (AUM). The goal of swing pricing is to ensure that the costs of buying and selling assets are borne by those who cause the costs, rather than by all shareholders of the fund.
	SwingPricingEvents []*RT000FTL8_SwingPricingEvent `protobuf:"bytes,16,rep,name=swing_pricing_events,json=swingPricingEvents,proto3" json:"swing_pricing_events,omitempty"`
	// The time series of share class specific nav information
	// Convention is to provide 12 months of monthly data.
	PerShareClassNavHistorical []*RT000FTL8_PerShareClassNAV `protobuf:"bytes,17,rep,name=per_share_class_nav_historical,json=perShareClassNavHistorical,proto3" json:"per_share_class_nav_historical,omitempty"`
}

func (x *RT000FTL8) Reset() {
	*x = RT000FTL8{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8) ProtoMessage() {}

func (x *RT000FTL8) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8.ProtoReflect.Descriptor instead.
func (*RT000FTL8) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0}
}

func (x *RT000FTL8) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8) GetProductionDate() *date.Date {
	if x != nil {
		return x.ProductionDate
	}
	return nil
}

func (x *RT000FTL8) GetValuationDate() *date.Date {
	if x != nil {
		return x.ValuationDate
	}
	return nil
}

func (x *RT000FTL8) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000FTL8) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000FTL8) GetAssetsUnderManagementMonthly() []*RT000FTL8_AssetsUnderManagement {
	if x != nil {
		return x.AssetsUnderManagementMonthly
	}
	return nil
}

func (x *RT000FTL8) GetNavTimelinessMonthly() []*RT000FTL8_NAVTimeliness {
	if x != nil {
		return x.NavTimelinessMonthly
	}
	return nil
}

func (x *RT000FTL8) GetNavCalculationErrors() []*RT000FTL8_NAVCalculationError {
	if x != nil {
		return x.NavCalculationErrors
	}
	return nil
}

func (x *RT000FTL8) GetSecurityPricingErrors() []*RT000FTL8_SecurityPricingError {
	if x != nil {
		return x.SecurityPricingErrors
	}
	return nil
}

func (x *RT000FTL8) GetStaleSecurities() []*RT000FTL8_StaleSecurity {
	if x != nil {
		return x.StaleSecurities
	}
	return nil
}

func (x *RT000FTL8) GetStockBreaks() []*RT000FTL8_StockBreak {
	if x != nil {
		return x.StockBreaks
	}
	return nil
}

func (x *RT000FTL8) GetCashBreaks() []*RT000FTL8_CashBreak {
	if x != nil {
		return x.CashBreaks
	}
	return nil
}

func (x *RT000FTL8) GetTotalExpenseRatios() []*RT000FTL8_TotalExpenseRatio {
	if x != nil {
		return x.TotalExpenseRatios
	}
	return nil
}

func (x *RT000FTL8) GetRecentInvoices() []*RT000FTL8_Invoice {
	if x != nil {
		return x.RecentInvoices
	}
	return nil
}

func (x *RT000FTL8) GetSwingPricingEvents() []*RT000FTL8_SwingPricingEvent {
	if x != nil {
		return x.SwingPricingEvents
	}
	return nil
}

func (x *RT000FTL8) GetPerShareClassNavHistorical() []*RT000FTL8_PerShareClassNAV {
	if x != nil {
		return x.PerShareClassNavHistorical
	}
	return nil
}

// Batch set of RT000FTL8 responses
type RT000FTL8Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*RT000FTL8 `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *RT000FTL8Batch) Reset() {
	*x = RT000FTL8Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8Batch) ProtoMessage() {}

func (x *RT000FTL8Batch) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8Batch.ProtoReflect.Descriptor instead.
func (*RT000FTL8Batch) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{1}
}

func (x *RT000FTL8Batch) GetResponse() []*RT000FTL8 {
	if x != nil {
		return x.Response
	}
	return nil
}

// The Assets Under Management Definition
type RT000FTL8_AssetsUnderManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The effective date
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The assets under management as of the effective date in the base currency of the fund
	AumBaseCurrency *money.Money `protobuf:"bytes,2,opt,name=aum_base_currency,json=aumBaseCurrency,proto3" json:"aum_base_currency,omitempty"`
	// The assets under management as of the effective date in the reporting currency
	AumReportingCurrency *money.Money `protobuf:"bytes,3,opt,name=aum_reporting_currency,json=aumReportingCurrency,proto3" json:"aum_reporting_currency,omitempty"`
	// The change in AUM from the previous month in assets under management as of the effective date in the base currency of the fund
	MonthlyChangeAumBaseCurrency *money.Money `protobuf:"bytes,4,opt,name=monthly_change_aum_base_currency,json=monthlyChangeAumBaseCurrency,proto3" json:"monthly_change_aum_base_currency,omitempty"`
	// The change in AUM from the previous month in assets under management as of the effective date in the reporting currency
	MonthlyChangeAumReportingCurrency *money.Money `protobuf:"bytes,5,opt,name=monthly_change_aum_reporting_currency,json=monthlyChangeAumReportingCurrency,proto3" json:"monthly_change_aum_reporting_currency,omitempty"`
	// The change in AUM from the previous quarter in assets under management as of the effective date in the base currency of the fund
	QuarterlyChangeAumBaseCurrency *money.Money `protobuf:"bytes,6,opt,name=quarterly_change_aum_base_currency,json=quarterlyChangeAumBaseCurrency,proto3" json:"quarterly_change_aum_base_currency,omitempty"`
	// The change in AUM from the previous quarter in assets under management as of the effective date in the reporting currency
	QuarterlyChangeAumReportingCurrency *money.Money `protobuf:"bytes,7,opt,name=quarterly_change_aum_reporting_currency,json=quarterlyChangeAumReportingCurrency,proto3" json:"quarterly_change_aum_reporting_currency,omitempty"`
}

func (x *RT000FTL8_AssetsUnderManagement) Reset() {
	*x = RT000FTL8_AssetsUnderManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_AssetsUnderManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_AssetsUnderManagement) ProtoMessage() {}

func (x *RT000FTL8_AssetsUnderManagement) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_AssetsUnderManagement.ProtoReflect.Descriptor instead.
func (*RT000FTL8_AssetsUnderManagement) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000FTL8_AssetsUnderManagement) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_AssetsUnderManagement) GetAumBaseCurrency() *money.Money {
	if x != nil {
		return x.AumBaseCurrency
	}
	return nil
}

func (x *RT000FTL8_AssetsUnderManagement) GetAumReportingCurrency() *money.Money {
	if x != nil {
		return x.AumReportingCurrency
	}
	return nil
}

func (x *RT000FTL8_AssetsUnderManagement) GetMonthlyChangeAumBaseCurrency() *money.Money {
	if x != nil {
		return x.MonthlyChangeAumBaseCurrency
	}
	return nil
}

func (x *RT000FTL8_AssetsUnderManagement) GetMonthlyChangeAumReportingCurrency() *money.Money {
	if x != nil {
		return x.MonthlyChangeAumReportingCurrency
	}
	return nil
}

func (x *RT000FTL8_AssetsUnderManagement) GetQuarterlyChangeAumBaseCurrency() *money.Money {
	if x != nil {
		return x.QuarterlyChangeAumBaseCurrency
	}
	return nil
}

func (x *RT000FTL8_AssetsUnderManagement) GetQuarterlyChangeAumReportingCurrency() *money.Money {
	if x != nil {
		return x.QuarterlyChangeAumReportingCurrency
	}
	return nil
}

// Definition of NAV timeliness information to be provided each month
type RT000FTL8_NAVTimeliness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The year for which the NAV timeliness is being reported
	Year int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	// The month for which the NAV timeliness is being reported
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	// Nav timeliness this reporting period
	PercentNavTimeliness float64 `protobuf:"fixed64,3,opt,name=percent_nav_timeliness,json=percentNavTimeliness,proto3" json:"percent_nav_timeliness,omitempty"`
	// Comments from the fund accounting delegate on NAV timeliness
	Comments string `protobuf:"bytes,4,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_NAVTimeliness) Reset() {
	*x = RT000FTL8_NAVTimeliness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_NAVTimeliness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_NAVTimeliness) ProtoMessage() {}

func (x *RT000FTL8_NAVTimeliness) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_NAVTimeliness.ProtoReflect.Descriptor instead.
func (*RT000FTL8_NAVTimeliness) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT000FTL8_NAVTimeliness) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RT000FTL8_NAVTimeliness) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *RT000FTL8_NAVTimeliness) GetPercentNavTimeliness() float64 {
	if x != nil {
		return x.PercentNavTimeliness
	}
	return 0
}

func (x *RT000FTL8_NAVTimeliness) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

// Definition of a NAV calculation error
type RT000FTL8_NAVCalculationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the error
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The date the error was identified
	IdentificationDate *date.Date `protobuf:"bytes,2,opt,name=identification_date,json=identificationDate,proto3" json:"identification_date,omitempty"`
	// The date the error was resolved
	ResolutionDate *date.Date `protobuf:"bytes,3,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	// Magnitude of the error in decimal (IncorrectNav / CorrectNav -1)
	Magnitude float64 `protobuf:"fixed64,4,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	// Cause of the error
	Cause string `protobuf:"bytes,6,opt,name=cause,proto3" json:"cause,omitempty"`
	// Remediation
	Remediation string `protobuf:"bytes,7,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Other Comments
	Comments []string `protobuf:"bytes,8,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_NAVCalculationError) Reset() {
	*x = RT000FTL8_NAVCalculationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_NAVCalculationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_NAVCalculationError) ProtoMessage() {}

func (x *RT000FTL8_NAVCalculationError) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_NAVCalculationError.ProtoReflect.Descriptor instead.
func (*RT000FTL8_NAVCalculationError) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT000FTL8_NAVCalculationError) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationError) GetIdentificationDate() *date.Date {
	if x != nil {
		return x.IdentificationDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationError) GetResolutionDate() *date.Date {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *RT000FTL8_NAVCalculationError) GetMagnitude() float64 {
	if x != nil {
		return x.Magnitude
	}
	return 0
}

func (x *RT000FTL8_NAVCalculationError) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationError) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000FTL8_NAVCalculationError) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

// Definition of a pricing error occurred in the pricing of a share class
type RT000FTL8_SecurityPricingError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the error
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The date the error was identified
	IdentificationDate *date.Date `protobuf:"bytes,2,opt,name=identification_date,json=identificationDate,proto3" json:"identification_date,omitempty"`
	// The date the error was resolved
	ResolutionDate *date.Date `protobuf:"bytes,3,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	// Codification chosen to identify the financial instrument
	FinancialIdentifier RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier `protobuf:"varint,4,opt,name=financial_identifier,json=financialIdentifier,proto3,enum=standards.open.v1.RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier" json:"financial_identifier,omitempty"`
	// Identifier of the affected instrument
	Instrument string `protobuf:"bytes,5,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Magnitude of the error in decimal (position / nav -1)
	Materiality float64 `protobuf:"fixed64,6,opt,name=materiality,proto3" json:"materiality,omitempty"`
	// Cause of the error
	Cause string `protobuf:"bytes,7,opt,name=cause,proto3" json:"cause,omitempty"`
	// Remediation
	Remediation string `protobuf:"bytes,8,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Comments
	Comment []string `protobuf:"bytes,9,rep,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RT000FTL8_SecurityPricingError) Reset() {
	*x = RT000FTL8_SecurityPricingError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_SecurityPricingError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_SecurityPricingError) ProtoMessage() {}

func (x *RT000FTL8_SecurityPricingError) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_SecurityPricingError.ProtoReflect.Descriptor instead.
func (*RT000FTL8_SecurityPricingError) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RT000FTL8_SecurityPricingError) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_SecurityPricingError) GetIdentificationDate() *date.Date {
	if x != nil {
		return x.IdentificationDate
	}
	return nil
}

func (x *RT000FTL8_SecurityPricingError) GetResolutionDate() *date.Date {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *RT000FTL8_SecurityPricingError) GetFinancialIdentifier() RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier {
	if x != nil {
		return x.FinancialIdentifier
	}
	return RT000FTL8_SecurityPricingError_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_SecurityPricingError) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetMateriality() float64 {
	if x != nil {
		return x.Materiality
	}
	return 0
}

func (x *RT000FTL8_SecurityPricingError) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000FTL8_SecurityPricingError) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Definition of a stale security
type RT000FTL8_StaleSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Codification chosen to identify the financial instrument
	FinancialIdentifier RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier `protobuf:"varint,1,opt,name=financial_identifier,json=financialIdentifier,proto3,enum=standards.open.v1.RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier" json:"financial_identifier,omitempty"`
	// Identifier of the affected instrument
	Instrument string `protobuf:"bytes,2,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// The staled date (i.e. the last priced date)
	PriceLatest *money.Money `protobuf:"bytes,3,opt,name=price_latest,json=priceLatest,proto3" json:"price_latest,omitempty"`
	// The date the security was last priced
	PriceLatestDate *date.Date `protobuf:"bytes,4,opt,name=price_latest_date,json=priceLatestDate,proto3" json:"price_latest_date,omitempty"`
	// Magnitude of the error in decimal (position / nav -1)
	Materiality float64 `protobuf:"fixed64,5,opt,name=materiality,proto3" json:"materiality,omitempty"`
	// Additional comments
	Comments []string `protobuf:"bytes,6,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_StaleSecurity) Reset() {
	*x = RT000FTL8_StaleSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_StaleSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_StaleSecurity) ProtoMessage() {}

func (x *RT000FTL8_StaleSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_StaleSecurity.ProtoReflect.Descriptor instead.
func (*RT000FTL8_StaleSecurity) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RT000FTL8_StaleSecurity) GetFinancialIdentifier() RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier {
	if x != nil {
		return x.FinancialIdentifier
	}
	return RT000FTL8_StaleSecurity_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_StaleSecurity) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *RT000FTL8_StaleSecurity) GetPriceLatest() *money.Money {
	if x != nil {
		return x.PriceLatest
	}
	return nil
}

func (x *RT000FTL8_StaleSecurity) GetPriceLatestDate() *date.Date {
	if x != nil {
		return x.PriceLatestDate
	}
	return nil
}

func (x *RT000FTL8_StaleSecurity) GetMateriality() float64 {
	if x != nil {
		return x.Materiality
	}
	return 0
}

func (x *RT000FTL8_StaleSecurity) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

// Definition of a break that occurred in agreement on the non-cash holdings of a sub-fund
type RT000FTL8_StockBreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the stock break
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The date the stock break was identified
	IdentificationDate *date.Date `protobuf:"bytes,2,opt,name=identification_date,json=identificationDate,proto3" json:"identification_date,omitempty"`
	// The date the stock break was resolved
	ResolutionDate *date.Date `protobuf:"bytes,3,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	// Codification chosen to identify the financial instrument
	FinancialIdentifier RT000FTL8_StockBreak_FinancialInstrumentIdentifier `protobuf:"varint,4,opt,name=financial_identifier,json=financialIdentifier,proto3,enum=standards.open.v1.RT000FTL8_StockBreak_FinancialInstrumentIdentifier" json:"financial_identifier,omitempty"`
	// Identifier of the affected instrument
	Instrument string `protobuf:"bytes,5,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Magnitude of the error in decimal (position / nav -1)
	Materiality float64 `protobuf:"fixed64,6,opt,name=materiality,proto3" json:"materiality,omitempty"`
	// Cause of the break
	Cause string `protobuf:"bytes,7,opt,name=cause,proto3" json:"cause,omitempty"`
	// Remediation
	Remediation string `protobuf:"bytes,8,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Comments
	Comment []string `protobuf:"bytes,9,rep,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RT000FTL8_StockBreak) Reset() {
	*x = RT000FTL8_StockBreak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_StockBreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_StockBreak) ProtoMessage() {}

func (x *RT000FTL8_StockBreak) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_StockBreak.ProtoReflect.Descriptor instead.
func (*RT000FTL8_StockBreak) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RT000FTL8_StockBreak) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_StockBreak) GetIdentificationDate() *date.Date {
	if x != nil {
		return x.IdentificationDate
	}
	return nil
}

func (x *RT000FTL8_StockBreak) GetResolutionDate() *date.Date {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *RT000FTL8_StockBreak) GetFinancialIdentifier() RT000FTL8_StockBreak_FinancialInstrumentIdentifier {
	if x != nil {
		return x.FinancialIdentifier
	}
	return RT000FTL8_StockBreak_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_StockBreak) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetMateriality() float64 {
	if x != nil {
		return x.Materiality
	}
	return 0
}

func (x *RT000FTL8_StockBreak) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000FTL8_StockBreak) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Definition of break that has occurred in agreement on the cash holdings of a sub-fund
type RT000FTL8_CashBreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the stock break
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The date the stock break was identified
	IdentificationDate *date.Date `protobuf:"bytes,2,opt,name=identification_date,json=identificationDate,proto3" json:"identification_date,omitempty"`
	// The date the stock break was resolved
	ResolutionDate *date.Date `protobuf:"bytes,3,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	// Magnitude of the error in decimal (position / nav -1)
	Materiality float64 `protobuf:"fixed64,4,opt,name=materiality,proto3" json:"materiality,omitempty"`
	// Cause of the break
	Cause string `protobuf:"bytes,5,opt,name=cause,proto3" json:"cause,omitempty"`
	// Remediation
	Remediation string `protobuf:"bytes,6,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Comments
	Comment []string `protobuf:"bytes,7,rep,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RT000FTL8_CashBreak) Reset() {
	*x = RT000FTL8_CashBreak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_CashBreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_CashBreak) ProtoMessage() {}

func (x *RT000FTL8_CashBreak) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_CashBreak.ProtoReflect.Descriptor instead.
func (*RT000FTL8_CashBreak) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RT000FTL8_CashBreak) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_CashBreak) GetIdentificationDate() *date.Date {
	if x != nil {
		return x.IdentificationDate
	}
	return nil
}

func (x *RT000FTL8_CashBreak) GetResolutionDate() *date.Date {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *RT000FTL8_CashBreak) GetMateriality() float64 {
	if x != nil {
		return x.Materiality
	}
	return 0
}

func (x *RT000FTL8_CashBreak) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000FTL8_CashBreak) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000FTL8_CashBreak) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Definition of a Total Expense Ratio
type RT000FTL8_TotalExpenseRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the TER (should be the last day of the relevant month)
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The global identifier of the share class
	ShareClassId string `protobuf:"bytes,3,opt,name=share_class_id,json=shareClassId,proto3" json:"share_class_id,omitempty"`
	// Codification chosen to identify the share class
	ShareClassIdType RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes `protobuf:"varint,4,opt,name=share_class_id_type,json=shareClassIdType,proto3,enum=standards.open.v1.RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes" json:"share_class_id_type,omitempty"`
	// Extension that identifies the share class.
	// Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
	ShareClassExtension string `protobuf:"bytes,5,opt,name=share_class_extension,json=shareClassExtension,proto3" json:"share_class_extension,omitempty"`
	// The expense ratio over the current calendar month
	TerCurrentMonth float64 `protobuf:"fixed64,6,opt,name=ter_current_month,json=terCurrentMonth,proto3" json:"ter_current_month,omitempty"`
	// The monthly expense ratio annualized
	TerCurrentMonthAnnualized float64 `protobuf:"fixed64,7,opt,name=ter_current_month_annualized,json=terCurrentMonthAnnualized,proto3" json:"ter_current_month_annualized,omitempty"`
	// The expense ratio YTD
	TerYtd float64 `protobuf:"fixed64,8,opt,name=ter_ytd,json=terYtd,proto3" json:"ter_ytd,omitempty"`
	// The YTD expense ratio annualized
	TerYtdAnnualized float64 `protobuf:"fixed64,9,opt,name=ter_ytd_annualized,json=terYtdAnnualized,proto3" json:"ter_ytd_annualized,omitempty"`
	// Comments on the expense ratio
	Comments []string `protobuf:"bytes,10,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000FTL8_TotalExpenseRatio) Reset() {
	*x = RT000FTL8_TotalExpenseRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_TotalExpenseRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_TotalExpenseRatio) ProtoMessage() {}

func (x *RT000FTL8_TotalExpenseRatio) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_TotalExpenseRatio.ProtoReflect.Descriptor instead.
func (*RT000FTL8_TotalExpenseRatio) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 7}
}

func (x *RT000FTL8_TotalExpenseRatio) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_TotalExpenseRatio) GetShareClassId() string {
	if x != nil {
		return x.ShareClassId
	}
	return ""
}

func (x *RT000FTL8_TotalExpenseRatio) GetShareClassIdType() RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes {
	if x != nil {
		return x.ShareClassIdType
	}
	return RT000FTL8_TotalExpenseRatio_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_TotalExpenseRatio) GetShareClassExtension() string {
	if x != nil {
		return x.ShareClassExtension
	}
	return ""
}

func (x *RT000FTL8_TotalExpenseRatio) GetTerCurrentMonth() float64 {
	if x != nil {
		return x.TerCurrentMonth
	}
	return 0
}

func (x *RT000FTL8_TotalExpenseRatio) GetTerCurrentMonthAnnualized() float64 {
	if x != nil {
		return x.TerCurrentMonthAnnualized
	}
	return 0
}

func (x *RT000FTL8_TotalExpenseRatio) GetTerYtd() float64 {
	if x != nil {
		return x.TerYtd
	}
	return 0
}

func (x *RT000FTL8_TotalExpenseRatio) GetTerYtdAnnualized() float64 {
	if x != nil {
		return x.TerYtdAnnualized
	}
	return 0
}

func (x *RT000FTL8_TotalExpenseRatio) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

// Definition of an invoice
type RT000FTL8_Invoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The invoice date
	InvoiceDate *date.Date `protobuf:"bytes,1,opt,name=invoice_date,json=invoiceDate,proto3" json:"invoice_date,omitempty"`
	// The date of authorisation
	AuthorisationDate *date.Date `protobuf:"bytes,2,opt,name=authorisation_date,json=authorisationDate,proto3" json:"authorisation_date,omitempty"`
	// The date of payment
	PaymentDate *date.Date `protobuf:"bytes,3,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	// The invoice number or identifier
	InvoiceIdentifier string `protobuf:"bytes,4,opt,name=invoice_identifier,json=invoiceIdentifier,proto3" json:"invoice_identifier,omitempty"`
	// The Recipient of the invoice
	Recipient string `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// The type of fee
	FeeType string `protobuf:"bytes,6,opt,name=fee_type,json=feeType,proto3" json:"fee_type,omitempty"`
	// The invoiced amount
	InvoicedAmount *money.Money `protobuf:"bytes,7,opt,name=invoiced_amount,json=invoicedAmount,proto3" json:"invoiced_amount,omitempty"`
	// The invoiced amount specific to the fund in question
	FundSpecificAmount *money.Money `protobuf:"bytes,8,opt,name=fund_specific_amount,json=fundSpecificAmount,proto3" json:"fund_specific_amount,omitempty"`
}

func (x *RT000FTL8_Invoice) Reset() {
	*x = RT000FTL8_Invoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_Invoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_Invoice) ProtoMessage() {}

func (x *RT000FTL8_Invoice) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_Invoice.ProtoReflect.Descriptor instead.
func (*RT000FTL8_Invoice) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 8}
}

func (x *RT000FTL8_Invoice) GetInvoiceDate() *date.Date {
	if x != nil {
		return x.InvoiceDate
	}
	return nil
}

func (x *RT000FTL8_Invoice) GetAuthorisationDate() *date.Date {
	if x != nil {
		return x.AuthorisationDate
	}
	return nil
}

func (x *RT000FTL8_Invoice) GetPaymentDate() *date.Date {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *RT000FTL8_Invoice) GetInvoiceIdentifier() string {
	if x != nil {
		return x.InvoiceIdentifier
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetFeeType() string {
	if x != nil {
		return x.FeeType
	}
	return ""
}

func (x *RT000FTL8_Invoice) GetInvoicedAmount() *money.Money {
	if x != nil {
		return x.InvoicedAmount
	}
	return nil
}

func (x *RT000FTL8_Invoice) GetFundSpecificAmount() *money.Money {
	if x != nil {
		return x.FundSpecificAmount
	}
	return nil
}

// Definition of a Swing Pricing Events.
type RT000FTL8_SwingPricingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The effective date on which swing pricing was applied
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The threshold that was used to evaluate whether swing pricing should be applied
	SwingThreshold *money.Money `protobuf:"bytes,2,opt,name=swing_threshold,json=swingThreshold,proto3" json:"swing_threshold,omitempty"`
	// The adjustment factor applied to the nav to account for the anticipated effective of subscriptions or redemptions
	SwingFactor float64 `protobuf:"fixed64,3,opt,name=swing_factor,json=swingFactor,proto3" json:"swing_factor,omitempty"`
	// The NAV before the swing factor had been applied
	NavWithoutSwingFactor *money.Money `protobuf:"bytes,4,opt,name=nav_without_swing_factor,json=navWithoutSwingFactor,proto3" json:"nav_without_swing_factor,omitempty"`
	// The NAV after the swing factor had been applied
	NavWithSwingFactor *money.Money `protobuf:"bytes,5,opt,name=nav_with_swing_factor,json=navWithSwingFactor,proto3" json:"nav_with_swing_factor,omitempty"`
}

func (x *RT000FTL8_SwingPricingEvent) Reset() {
	*x = RT000FTL8_SwingPricingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_SwingPricingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_SwingPricingEvent) ProtoMessage() {}

func (x *RT000FTL8_SwingPricingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_SwingPricingEvent.ProtoReflect.Descriptor instead.
func (*RT000FTL8_SwingPricingEvent) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 9}
}

func (x *RT000FTL8_SwingPricingEvent) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_SwingPricingEvent) GetSwingThreshold() *money.Money {
	if x != nil {
		return x.SwingThreshold
	}
	return nil
}

func (x *RT000FTL8_SwingPricingEvent) GetSwingFactor() float64 {
	if x != nil {
		return x.SwingFactor
	}
	return 0
}

func (x *RT000FTL8_SwingPricingEvent) GetNavWithoutSwingFactor() *money.Money {
	if x != nil {
		return x.NavWithoutSwingFactor
	}
	return nil
}

func (x *RT000FTL8_SwingPricingEvent) GetNavWithSwingFactor() *money.Money {
	if x != nil {
		return x.NavWithSwingFactor
	}
	return nil
}

// Definition of NAV information shared per share class at a point in time.
type RT000FTL8_PerShareClassNAV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The effective date
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// Codification chosen to identify the financial instrument
	FinancialIdentifier RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier `protobuf:"varint,2,opt,name=financial_identifier,json=financialIdentifier,proto3,enum=standards.open.v1.RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier" json:"financial_identifier,omitempty"`
	// The global identifier of the share class
	ShareClassId string `protobuf:"bytes,3,opt,name=share_class_id,json=shareClassId,proto3" json:"share_class_id,omitempty"`
	// Extension that identifies the share class.
	// Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
	ShareClassExtension string `protobuf:"bytes,4,opt,name=share_class_extension,json=shareClassExtension,proto3" json:"share_class_extension,omitempty"`
	// The number of issued units of the share class
	Units float64 `protobuf:"fixed64,5,opt,name=units,proto3" json:"units,omitempty"`
	// The nav per unit in the base currency at at the effective_date
	NavPerUnitBaseCurrency *money.Money `protobuf:"bytes,6,opt,name=nav_per_unit_base_currency,json=navPerUnitBaseCurrency,proto3" json:"nav_per_unit_base_currency,omitempty"`
	// The current total nav of the share class in the base currency
	TotalNavBaseCurrency *money.Money `protobuf:"bytes,7,opt,name=total_nav_base_currency,json=totalNavBaseCurrency,proto3" json:"total_nav_base_currency,omitempty"`
	// The nav per unit in the reporting currency at at the effective_date
	NavPerUnitReportingCurrency *money.Money `protobuf:"bytes,8,opt,name=nav_per_unit_reporting_currency,json=navPerUnitReportingCurrency,proto3" json:"nav_per_unit_reporting_currency,omitempty"`
	// The current total nav of the share class in the reporting currency
	TotalNavReportingCurrency *money.Money `protobuf:"bytes,9,opt,name=total_nav_reporting_currency,json=totalNavReportingCurrency,proto3" json:"total_nav_reporting_currency,omitempty"`
}

func (x *RT000FTL8_PerShareClassNAV) Reset() {
	*x = RT000FTL8_PerShareClassNAV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000FTL8_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000FTL8_PerShareClassNAV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000FTL8_PerShareClassNAV) ProtoMessage() {}

func (x *RT000FTL8_PerShareClassNAV) ProtoReflect() protoreflect.Message {
	mi := &file_RT000FTL8_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000FTL8_PerShareClassNAV.ProtoReflect.Descriptor instead.
func (*RT000FTL8_PerShareClassNAV) Descriptor() ([]byte, []int) {
	return file_RT000FTL8_proto_rawDescGZIP(), []int{0, 10}
}

func (x *RT000FTL8_PerShareClassNAV) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000FTL8_PerShareClassNAV) GetFinancialIdentifier() RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier {
	if x != nil {
		return x.FinancialIdentifier
	}
	return RT000FTL8_PerShareClassNAV_IDENTIFIER_UNSPECIFIED
}

func (x *RT000FTL8_PerShareClassNAV) GetShareClassId() string {
	if x != nil {
		return x.ShareClassId
	}
	return ""
}

func (x *RT000FTL8_PerShareClassNAV) GetShareClassExtension() string {
	if x != nil {
		return x.ShareClassExtension
	}
	return ""
}

func (x *RT000FTL8_PerShareClassNAV) GetUnits() float64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *RT000FTL8_PerShareClassNAV) GetNavPerUnitBaseCurrency() *money.Money {
	if x != nil {
		return x.NavPerUnitBaseCurrency
	}
	return nil
}

func (x *RT000FTL8_PerShareClassNAV) GetTotalNavBaseCurrency() *money.Money {
	if x != nil {
		return x.TotalNavBaseCurrency
	}
	return nil
}

func (x *RT000FTL8_PerShareClassNAV) GetNavPerUnitReportingCurrency() *money.Money {
	if x != nil {
		return x.NavPerUnitReportingCurrency
	}
	return nil
}

func (x *RT000FTL8_PerShareClassNAV) GetTotalNavReportingCurrency() *money.Money {
	if x != nil {
		return x.TotalNavReportingCurrency
	}
	return nil
}

var File_RT000FTL8_proto protoreflect.FileDescriptor

var file_RT000FTL8_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x34, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x46, 0x54, 0x4c, 0x38, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c,
	0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d,
	0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x79,
	0x0a, 0x1f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x16, 0x6e, 0x61, 0x76,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x4e, 0x41, 0x56, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x14, 0x6e, 0x61, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x16, 0x6e,
	0x61, 0x76, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x4e, 0x41, 0x56, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x14, 0x6e,
	0x61, 0x76, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54,
	0x4c, 0x38, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x55,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x73, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x46, 0x54, 0x4c, 0x38, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x0a,
	0x63, 0x61, 0x73, 0x68, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x12, 0x4d, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46,
	0x54, 0x4c, 0x38, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x73,
	0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x77, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x71, 0x0a,
	0x1e, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46,
	0x54, 0x4c, 0x38, 0x2e, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x41, 0x56, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x76, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x1a, 0xe7, 0x04, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x61, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x0f, 0x61, 0x75, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x16, 0x61, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x14, 0x61, 0x75, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5a,
	0x0a, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x61, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1c, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x6d, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x25, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x21, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x5e, 0x0a, 0x22, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6c, 0x79, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x1e, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x75, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x68, 0x0a, 0x27, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6c, 0x79, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x23, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6c, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x8b, 0x01, 0x0a, 0x0d, 0x4e,
	0x41, 0x56, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xc1, 0x02, 0x0a, 0x13, 0x4e, 0x41, 0x56,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d,
	0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x94, 0x05, 0x0a,
	0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x82, 0x01, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x49,
	0x43, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x45, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49,
	0x44, 0x10, 0x0a, 0x1a, 0x8b, 0x04, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x7b, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c,
	0x38, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44,
	0x4f, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10,
	0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x45, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10,
	0x0a, 0x1a, 0xff, 0x04, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x14, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x49,
	0x43, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x45, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49,
	0x44, 0x10, 0x0a, 0x1a, 0xb9, 0x02, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x68, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x12, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x97, 0x05, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x77, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38,
	0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3f,
	0x0a, 0x1c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x74, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x74, 0x65, 0x72, 0x59, 0x74, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x5f,
	0x79, 0x74, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x65, 0x72, 0x59, 0x74, 0x64, 0x41, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43,
	0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47,
	0x49, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x1a, 0xa2, 0x03, 0x0a, 0x07, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x14, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xc1,
	0x02, 0x0a, 0x11, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0f, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0e, 0x73, 0x77, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x77, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4b,
	0x0a, 0x18, 0x6e, 0x61, 0x76, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x77,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x15, 0x6e, 0x61, 0x76, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x53, 0x77, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x15, 0x6e,
	0x61, 0x76, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x12,
	0x6e, 0x61, 0x76, 0x57, 0x69, 0x74, 0x68, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x1a, 0xda, 0x05, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x41, 0x56, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x7e, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x2e, 0x50, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x41, 0x56, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x4e, 0x0a, 0x1a, 0x6e, 0x61, 0x76, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x16, 0x6e, 0x61, 0x76, 0x50, 0x65,
	0x72, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x49, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x76,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x58, 0x0a, 0x1f,
	0x6e, 0x61, 0x76, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1b, 0x6e, 0x61, 0x76, 0x50, 0x65,
	0x72, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x52, 0x0a, 0x1d, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x22,
	0x4b, 0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54, 0x4c, 0x38, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x54,
	0x4c, 0x38, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_RT000FTL8_proto_rawDescOnce sync.Once
	file_RT000FTL8_proto_rawDescData = file_RT000FTL8_proto_rawDesc
)

func file_RT000FTL8_proto_rawDescGZIP() []byte {
	file_RT000FTL8_proto_rawDescOnce.Do(func() {
		file_RT000FTL8_proto_rawDescData = protoimpl.X.CompressGZIP(file_RT000FTL8_proto_rawDescData)
	})
	return file_RT000FTL8_proto_rawDescData
}

var file_RT000FTL8_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_RT000FTL8_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_RT000FTL8_proto_goTypes = []interface{}{
	(RT000FTL8_SecurityPricingError_FinancialInstrumentIdentifier)(0), // 0: standards.open.v1.RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier
	(RT000FTL8_StaleSecurity_FinancialInstrumentIdentifier)(0),        // 1: standards.open.v1.RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier
	(RT000FTL8_StockBreak_FinancialInstrumentIdentifier)(0),           // 2: standards.open.v1.RT000FTL8.StockBreak.FinancialInstrumentIdentifier
	(RT000FTL8_TotalExpenseRatio_ShareClassIdentifierTypes)(0),        // 3: standards.open.v1.RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes
	(RT000FTL8_PerShareClassNAV_FinancialInstrumentIdentifier)(0),     // 4: standards.open.v1.RT000FTL8.PerShareClassNAV.FinancialInstrumentIdentifier
	(*RT000FTL8)(nil),                       // 5: standards.open.v1.RT000FTL8
	(*RT000FTL8Batch)(nil),                  // 6: standards.open.v1.RT000FTL8_batch
	(*RT000FTL8_AssetsUnderManagement)(nil), // 7: standards.open.v1.RT000FTL8.AssetsUnderManagement
	(*RT000FTL8_NAVTimeliness)(nil),         // 8: standards.open.v1.RT000FTL8.NAVTimeliness
	(*RT000FTL8_NAVCalculationError)(nil),   // 9: standards.open.v1.RT000FTL8.NAVCalculationError
	(*RT000FTL8_SecurityPricingError)(nil),  // 10: standards.open.v1.RT000FTL8.SecurityPricingError
	(*RT000FTL8_StaleSecurity)(nil),         // 11: standards.open.v1.RT000FTL8.StaleSecurity
	(*RT000FTL8_StockBreak)(nil),            // 12: standards.open.v1.RT000FTL8.StockBreak
	(*RT000FTL8_CashBreak)(nil),             // 13: standards.open.v1.RT000FTL8.CashBreak
	(*RT000FTL8_TotalExpenseRatio)(nil),     // 14: standards.open.v1.RT000FTL8.TotalExpenseRatio
	(*RT000FTL8_Invoice)(nil),               // 15: standards.open.v1.RT000FTL8.Invoice
	(*RT000FTL8_SwingPricingEvent)(nil),     // 16: standards.open.v1.RT000FTL8.SwingPricingEvent
	(*RT000FTL8_PerShareClassNAV)(nil),      // 17: standards.open.v1.RT000FTL8.PerShareClassNAV
	(*date.Date)(nil),                       // 18: google.type.Date
	(*money.Money)(nil),                     // 19: google.type.Money
}
var file_RT000FTL8_proto_depIdxs = []int32{
	18, // 0: standards.open.v1.RT000FTL8.effective_date:type_name -> google.type.Date
	18, // 1: standards.open.v1.RT000FTL8.production_date:type_name -> google.type.Date
	18, // 2: standards.open.v1.RT000FTL8.valuation_date:type_name -> google.type.Date
	7,  // 3: standards.open.v1.RT000FTL8.assets_under_management_monthly:type_name -> standards.open.v1.RT000FTL8.AssetsUnderManagement
	8,  // 4: standards.open.v1.RT000FTL8.nav_timeliness_monthly:type_name -> standards.open.v1.RT000FTL8.NAVTimeliness
	9,  // 5: standards.open.v1.RT000FTL8.nav_calculation_errors:type_name -> standards.open.v1.RT000FTL8.NAVCalculationError
	10, // 6: standards.open.v1.RT000FTL8.security_pricing_errors:type_name -> standards.open.v1.RT000FTL8.SecurityPricingError
	11, // 7: standards.open.v1.RT000FTL8.stale_securities:type_name -> standards.open.v1.RT000FTL8.StaleSecurity
	12, // 8: standards.open.v1.RT000FTL8.stock_breaks:type_name -> standards.open.v1.RT000FTL8.StockBreak
	13, // 9: standards.open.v1.RT000FTL8.cash_breaks:type_name -> standards.open.v1.RT000FTL8.CashBreak
	14, // 10: standards.open.v1.RT000FTL8.total_expense_ratios:type_name -> standards.open.v1.RT000FTL8.TotalExpenseRatio
	15, // 11: standards.open.v1.RT000FTL8.recent_invoices:type_name -> standards.open.v1.RT000FTL8.Invoice
	16, // 12: standards.open.v1.RT000FTL8.swing_pricing_events:type_name -> standards.open.v1.RT000FTL8.SwingPricingEvent
	17, // 13: standards.open.v1.RT000FTL8.per_share_class_nav_historical:type_name -> standards.open.v1.RT000FTL8.PerShareClassNAV
	5,  // 14: standards.open.v1.RT000FTL8_batch.response:type_name -> standards.open.v1.RT000FTL8
	18, // 15: standards.open.v1.RT000FTL8.AssetsUnderManagement.effective_date:type_name -> google.type.Date
	19, // 16: standards.open.v1.RT000FTL8.AssetsUnderManagement.aum_base_currency:type_name -> google.type.Money
	19, // 17: standards.open.v1.RT000FTL8.AssetsUnderManagement.aum_reporting_currency:type_name -> google.type.Money
	19, // 18: standards.open.v1.RT000FTL8.AssetsUnderManagement.monthly_change_aum_base_currency:type_name -> google.type.Money
	19, // 19: standards.open.v1.RT000FTL8.AssetsUnderManagement.monthly_change_aum_reporting_currency:type_name -> google.type.Money
	19, // 20: standards.open.v1.RT000FTL8.AssetsUnderManagement.quarterly_change_aum_base_currency:type_name -> google.type.Money
	19, // 21: standards.open.v1.RT000FTL8.AssetsUnderManagement.quarterly_change_aum_reporting_currency:type_name -> google.type.Money
	18, // 22: standards.open.v1.RT000FTL8.NAVCalculationError.effective_date:type_name -> google.type.Date
	18, // 23: standards.open.v1.RT000FTL8.NAVCalculationError.identification_date:type_name -> google.type.Date
	18, // 24: standards.open.v1.RT000FTL8.NAVCalculationError.resolution_date:type_name -> google.type.Date
	18, // 25: standards.open.v1.RT000FTL8.SecurityPricingError.effective_date:type_name -> google.type.Date
	18, // 26: standards.open.v1.RT000FTL8.SecurityPricingError.identification_date:type_name -> google.type.Date
	18, // 27: standards.open.v1.RT000FTL8.SecurityPricingError.resolution_date:type_name -> google.type.Date
	0,  // 28: standards.open.v1.RT000FTL8.SecurityPricingError.financial_identifier:type_name -> standards.open.v1.RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier
	1,  // 29: standards.open.v1.RT000FTL8.StaleSecurity.financial_identifier:type_name -> standards.open.v1.RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier
	19, // 30: standards.open.v1.RT000FTL8.StaleSecurity.price_latest:type_name -> google.type.Money
	18, // 31: standards.open.v1.RT000FTL8.StaleSecurity.price_latest_date:type_name -> google.type.Date
	18, // 32: standards.open.v1.RT000FTL8.StockBreak.effective_date:type_name -> google.type.Date
	18, // 33: standards.open.v1.RT000FTL8.StockBreak.identification_date:type_name -> google.type.Date
	18, // 34: standards.open.v1.RT000FTL8.StockBreak.resolution_date:type_name -> google.type.Date
	2,  // 35: standards.open.v1.RT000FTL8.StockBreak.financial_identifier:type_name -> standards.open.v1.RT000FTL8.StockBreak.FinancialInstrumentIdentifier
	18, // 36: standards.open.v1.RT000FTL8.CashBreak.effective_date:type_name -> google.type.Date
	18, // 37: standards.open.v1.RT000FTL8.CashBreak.identification_date:type_name -> google.type.Date
	18, // 38: standards.open.v1.RT000FTL8.CashBreak.resolution_date:type_name -> google.type.Date
	18, // 39: standards.open.v1.RT000FTL8.TotalExpenseRatio.effective_date:type_name -> google.type.Date
	3,  // 40: standards.open.v1.RT000FTL8.TotalExpenseRatio.share_class_id_type:type_name -> standards.open.v1.RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes
	18, // 41: standards.open.v1.RT000FTL8.Invoice.invoice_date:type_name -> google.type.Date
	18, // 42: standards.open.v1.RT000FTL8.Invoice.authorisation_date:type_name -> google.type.Date
	18, // 43: standards.open.v1.RT000FTL8.Invoice.payment_date:type_name -> google.type.Date
	19, // 44: standards.open.v1.RT000FTL8.Invoice.invoiced_amount:type_name -> google.type.Money
	19, // 45: standards.open.v1.RT000FTL8.Invoice.fund_specific_amount:type_name -> google.type.Money
	18, // 46: standards.open.v1.RT000FTL8.SwingPricingEvent.effective_date:type_name -> google.type.Date
	19, // 47: standards.open.v1.RT000FTL8.SwingPricingEvent.swing_threshold:type_name -> google.type.Money
	19, // 48: standards.open.v1.RT000FTL8.SwingPricingEvent.nav_without_swing_factor:type_name -> google.type.Money
	19, // 49: standards.open.v1.RT000FTL8.SwingPricingEvent.nav_with_swing_factor:type_name -> google.type.Money
	18, // 50: standards.open.v1.RT000FTL8.PerShareClassNAV.effective_date:type_name -> google.type.Date
	4,  // 51: standards.open.v1.RT000FTL8.PerShareClassNAV.financial_identifier:type_name -> standards.open.v1.RT000FTL8.PerShareClassNAV.FinancialInstrumentIdentifier
	19, // 52: standards.open.v1.RT000FTL8.PerShareClassNAV.nav_per_unit_base_currency:type_name -> google.type.Money
	19, // 53: standards.open.v1.RT000FTL8.PerShareClassNAV.total_nav_base_currency:type_name -> google.type.Money
	19, // 54: standards.open.v1.RT000FTL8.PerShareClassNAV.nav_per_unit_reporting_currency:type_name -> google.type.Money
	19, // 55: standards.open.v1.RT000FTL8.PerShareClassNAV.total_nav_reporting_currency:type_name -> google.type.Money
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_RT000FTL8_proto_init() }
func file_RT000FTL8_proto_init() {
	if File_RT000FTL8_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RT000FTL8_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_AssetsUnderManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_NAVTimeliness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_NAVCalculationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_SecurityPricingError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_StaleSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_StockBreak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_CashBreak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_TotalExpenseRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_Invoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_SwingPricingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000FTL8_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000FTL8_PerShareClassNAV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RT000FTL8_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RT000FTL8_proto_goTypes,
		DependencyIndexes: file_RT000FTL8_proto_depIdxs,
		EnumInfos:         file_RT000FTL8_proto_enumTypes,
		MessageInfos:      file_RT000FTL8_proto_msgTypes,
	}.Build()
	File_RT000FTL8_proto = out.File
	file_RT000FTL8_proto_rawDesc = nil
	file_RT000FTL8_proto_goTypes = nil
	file_RT000FTL8_proto_depIdxs = nil
}
