// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/RT000DWL9.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/type/date"
	_ "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RT000DWL9_OpenEndedOrClosedEndedStructure int32

const (
	RT000DWL9_OPEN_ENDED_OR_CLOSED_ENDED_STRUCTURE_UNSPECIFIED RT000DWL9_OpenEndedOrClosedEndedStructure = 0
	RT000DWL9_OPEN_ENDED                                       RT000DWL9_OpenEndedOrClosedEndedStructure = 1
	RT000DWL9_CLOSED_ENDED                                     RT000DWL9_OpenEndedOrClosedEndedStructure = 2
)

// Enum value maps for RT000DWL9_OpenEndedOrClosedEndedStructure.
var (
	RT000DWL9_OpenEndedOrClosedEndedStructure_name = map[int32]string{
		0: "OPEN_ENDED_OR_CLOSED_ENDED_STRUCTURE_UNSPECIFIED",
		1: "OPEN_ENDED",
		2: "CLOSED_ENDED",
	}
	RT000DWL9_OpenEndedOrClosedEndedStructure_value = map[string]int32{
		"OPEN_ENDED_OR_CLOSED_ENDED_STRUCTURE_UNSPECIFIED": 0,
		"OPEN_ENDED":   1,
		"CLOSED_ENDED": 2,
	}
)

func (x RT000DWL9_OpenEndedOrClosedEndedStructure) Enum() *RT000DWL9_OpenEndedOrClosedEndedStructure {
	p := new(RT000DWL9_OpenEndedOrClosedEndedStructure)
	*p = x
	return p
}

func (x RT000DWL9_OpenEndedOrClosedEndedStructure) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000DWL9_OpenEndedOrClosedEndedStructure) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000DWL9_proto_enumTypes[0].Descriptor()
}

func (RT000DWL9_OpenEndedOrClosedEndedStructure) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000DWL9_proto_enumTypes[0]
}

func (x RT000DWL9_OpenEndedOrClosedEndedStructure) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000DWL9_OpenEndedOrClosedEndedStructure.Descriptor instead.
func (RT000DWL9_OpenEndedOrClosedEndedStructure) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000DWL9_proto_rawDescGZIP(), []int{0, 0}
}

// Openfunds Fund definition
type RT000DWL9 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "Legal name of the collective investment scheme as mentioned in official documents (i.e. prospectus). If the fund belongs to an umbrella, the name of the umbrella must be included, too. Umbrella and sub-fund's name should be separated by "" - "", i.e. ""blank"" (ASCII 32) ""dash"" (ASCII 45) ""blank"" (ASCII 32).
	// In combination with the fund's domicile (OFST010010 Fund Domicile Alpha-2) the Legal Fund Name should be unique in order to avoid mix-ups in cases where no identifier like an ISIN is available.
	// This field's OF-ID can also include a language tag, i.e. OFST010020(zh-Hant) for Legal Fund Name Including Umbrella written in traditional Chinese. For more information please refer to https://www.openfunds.org/en/language-tags."
	//
	// Openfunds: OFST010020 (https://openfunds.org/OFST010020)
	LegalFundNameIncludingUmbrella string `protobuf:"bytes,1,opt,name=legal_fund_name_including_umbrella,json=legalFundNameIncludingUmbrella,proto3" json:"legal_fund_name_including_umbrella,omitempty"`
	// "Name of fund or sub-fund, as listed in prospectus. Neither an available umbrella, nor the specifications of the share class such as currency, distribution policy etc. must be included. In case the fund is not part of an umbrella structure, please maintain the indication of the fund name as listed in the prospectus.
	// In case the umbrella name is part of the sub-fund name in official legal documents such as prospectus, openfunds recommends listing the unique sub-fund name only, without repeating the umbrella name. The intention of the OFST010110 Legal Fund Name Only is to provide an option for generating the OFST010020 Legal Fund Name Including Umbrella by combining OFST010110 Legal Fund Name Only and OFST005010 Umbrella.
	// This field's OF-ID can also include a language tag, i.e. OFST010110(zh-Hant) for Legal Fund Name Only written in traditional Chinese. For more information please refer to https://www.openfunds.org/en/language-tags."
	//
	// Openfunds: OFST010110 (https://openfunds.org/OFST010110)
	LegalFundNameOnly string `protobuf:"bytes,2,opt,name=legal_fund_name_only,json=legalFundNameOnly,proto3" json:"legal_fund_name_only,omitempty"`
	// Domicile of the fund. Please use ISO 3166-1-alpha-2 code (i.e. SE for Sweden).
	// [List] of ISO 3166-1-alpha-2 country codes as it can be found on https://en.wikipedia.org/wiki/ISO_3166-1 or on https://www.iso.org.
	// Openfunds: OFST010010 (https://openfunds.org/OFST010010)
	FundDomicileAlpha_2 string `protobuf:"bytes,3,opt,name=fund_domicile_alpha_2,json=fundDomicileAlpha2,proto3" json:"fund_domicile_alpha_2,omitempty"`
	// "Domicile of the fund. Please use ISO 3166-1-alpha-3 code (i.e. SWE for Sweden).
	// Please note: openfunds recommends using ""OFST010010 Fund Domicile Alpha-2"" instead as this seems to be used more often compared to alpha-3 country codes."
	// [List] of ISO 3166-1-alpha-3 country codes as it can be found on https://en.wikipedia.org/wiki/ISO_3166-1 or on https://www.iso.org.
	// Openfunds: OFST010011 (https://openfunds.org/OFST010011)
	FundDomicileAlpha_3 string `protobuf:"bytes,4,opt,name=fund_domicile_alpha_3,json=fundDomicileAlpha3,proto3" json:"fund_domicile_alpha_3,omitempty"`
	// "Date of launch of the fund, i.e. its first share class. This field represents the age of the fund even if the eldest share class is dormant or liquidated. Therefore, it may happen, that there is no correspondent OFST020560 Share Class Launch Date.
	// Must be in the format YYYY-MM-DD
	// This field was not introduced by the European Working Group with their PRIIPS Data Dictionary Template (EPT), but with the CEPT and can be considered as an addition to the EPT.
	// CEPT-PRICES: 10080_Portfolio_Historical_Start_Date//"
	// Openfunds: OFST010240 (https://openfunds.org/OFST010240)
	FundLaunchDate string `protobuf:"bytes,5,opt,name=fund_launch_date,json=fundLaunchDate,proto3" json:"fund_launch_date,omitempty"`
	// "Description of the investment objective.
	// This field's OF-ID can also include a language tag, i.e. OFST010300(zh-Hant) for Investment Objective written in traditional Chinese. For more information please refer to https://www.openfunds.org/en/language-tags."
	// Openfunds: OFST010300 (https://openfunds.org/OFST010300)
	InvestmentObjective string `protobuf:"bytes,6,opt,name=investment_objective,json=investmentObjective,proto3" json:"investment_objective,omitempty"`
	// Base currency of the fund. Please use ISO 4217 (e.g. EUR). The fund currency reflects the accounting currency for the fund and should not be mixed up with the Share Class Currency (OFST020540).
	// [List] of currencies. Please use ISO code 4217 as it can be found on https://www.currency-iso.org/en/home/tables/table-a1.html.
	// Openfunds: OFST010410 (https://openfunds.org/OFST010410)
	FundCurrency string `protobuf:"bytes,7,opt,name=fund_currency,json=fundCurrency,proto3" json:"fund_currency,omitempty"`
	// Is it possible to subscribe or redeem shares of the fund on a regular basis, i.e. daily? If yes, it is an open-ended fund. If no, it is a closed-ended fund.
	// "open-ended fund" / "closed-ended fund"
	// Openfunds: OFST010420 (https://openfunds.org/OFST010420)
	OpenEndedOrClosedEndedFundStructure RT000DWL9_OpenEndedOrClosedEndedStructure `protobuf:"varint,8,opt,name=open_ended_or_closed_ended_fund_structure,json=openEndedOrClosedEndedFundStructure,proto3,enum=standards.open.v1.RT000DWL9_OpenEndedOrClosedEndedStructure" json:"open_ended_or_closed_ended_fund_structure,omitempty"`
}

func (x *RT000DWL9) Reset() {
	*x = RT000DWL9{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000DWL9_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000DWL9) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000DWL9) ProtoMessage() {}

func (x *RT000DWL9) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000DWL9_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000DWL9.ProtoReflect.Descriptor instead.
func (*RT000DWL9) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000DWL9_proto_rawDescGZIP(), []int{0}
}

func (x *RT000DWL9) GetLegalFundNameIncludingUmbrella() string {
	if x != nil {
		return x.LegalFundNameIncludingUmbrella
	}
	return ""
}

func (x *RT000DWL9) GetLegalFundNameOnly() string {
	if x != nil {
		return x.LegalFundNameOnly
	}
	return ""
}

func (x *RT000DWL9) GetFundDomicileAlpha_2() string {
	if x != nil {
		return x.FundDomicileAlpha_2
	}
	return ""
}

func (x *RT000DWL9) GetFundDomicileAlpha_3() string {
	if x != nil {
		return x.FundDomicileAlpha_3
	}
	return ""
}

func (x *RT000DWL9) GetFundLaunchDate() string {
	if x != nil {
		return x.FundLaunchDate
	}
	return ""
}

func (x *RT000DWL9) GetInvestmentObjective() string {
	if x != nil {
		return x.InvestmentObjective
	}
	return ""
}

func (x *RT000DWL9) GetFundCurrency() string {
	if x != nil {
		return x.FundCurrency
	}
	return ""
}

func (x *RT000DWL9) GetOpenEndedOrClosedEndedFundStructure() RT000DWL9_OpenEndedOrClosedEndedStructure {
	if x != nil {
		return x.OpenEndedOrClosedEndedFundStructure
	}
	return RT000DWL9_OPEN_ENDED_OR_CLOSED_ENDED_STRUCTURE_UNSPECIFIED
}

var File_standards_open_v1_RT000DWL9_proto protoreflect.FileDescriptor

var file_standards_open_v1_RT000DWL9_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x57, 0x4c, 0x39, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x79,
	0x65, 0x73, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x05, 0x0a, 0x09, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x57, 0x4c, 0x39, 0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6d, 0x62, 0x72,
	0x65, 0x6c, 0x6c, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x6f,
	0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69,
	0x6c, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f,
	0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x6f, 0x6d,
	0x69, 0x63, 0x69, 0x6c, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x94, 0x01,
	0x0a, 0x29, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x57, 0x4c, 0x39, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x23, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x79, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x42,
	0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_standards_open_v1_RT000DWL9_proto_rawDescOnce sync.Once
	file_standards_open_v1_RT000DWL9_proto_rawDescData = file_standards_open_v1_RT000DWL9_proto_rawDesc
)

func file_standards_open_v1_RT000DWL9_proto_rawDescGZIP() []byte {
	file_standards_open_v1_RT000DWL9_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_RT000DWL9_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_RT000DWL9_proto_rawDescData)
	})
	return file_standards_open_v1_RT000DWL9_proto_rawDescData
}

var file_standards_open_v1_RT000DWL9_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_standards_open_v1_RT000DWL9_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_standards_open_v1_RT000DWL9_proto_goTypes = []interface{}{
	(RT000DWL9_OpenEndedOrClosedEndedStructure)(0), // 0: standards.open.v1.RT000DWL9.OpenEndedOrClosedEndedStructure
	(*RT000DWL9)(nil), // 1: standards.open.v1.RT000DWL9
}
var file_standards_open_v1_RT000DWL9_proto_depIdxs = []int32{
	0, // 0: standards.open.v1.RT000DWL9.open_ended_or_closed_ended_fund_structure:type_name -> standards.open.v1.RT000DWL9.OpenEndedOrClosedEndedStructure
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_standards_open_v1_RT000DWL9_proto_init() }
func file_standards_open_v1_RT000DWL9_proto_init() {
	if File_standards_open_v1_RT000DWL9_proto != nil {
		return
	}
	file_standards_open_v1_yesno_proto_init()
	file_standards_open_v1_fieldOptionsExtentions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_RT000DWL9_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000DWL9); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_RT000DWL9_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_RT000DWL9_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_RT000DWL9_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_RT000DWL9_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_RT000DWL9_proto_msgTypes,
	}.Build()
	File_standards_open_v1_RT000DWL9_proto = out.File
	file_standards_open_v1_RT000DWL9_proto_rawDesc = nil
	file_standards_open_v1_RT000DWL9_proto_goTypes = nil
	file_standards_open_v1_RT000DWL9_proto_depIdxs = nil
}
