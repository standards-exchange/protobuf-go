// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/ICI_DDDQ.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Y / N requiring no further explanation
type ICIDDQ_YesNoNA int32

const (
	// No
	ICIDDQ_YES_NO_NA_UNSPECIFIED ICIDDQ_YesNoNA = 0
	// Yes
	ICIDDQ_Y ICIDDQ_YesNoNA = 1
	// No
	ICIDDQ_N ICIDDQ_YesNoNA = 2
	// Not Applicable
	ICIDDQ_NA ICIDDQ_YesNoNA = 3
)

// Enum value maps for ICIDDQ_YesNoNA.
var (
	ICIDDQ_YesNoNA_name = map[int32]string{
		0: "YES_NO_NA_UNSPECIFIED",
		1: "Y",
		2: "N",
		3: "NA",
	}
	ICIDDQ_YesNoNA_value = map[string]int32{
		"YES_NO_NA_UNSPECIFIED": 0,
		"Y":                     1,
		"N":                     2,
		"NA":                    3,
	}
)

func (x ICIDDQ_YesNoNA) Enum() *ICIDDQ_YesNoNA {
	p := new(ICIDDQ_YesNoNA)
	*p = x
	return p
}

func (x ICIDDQ_YesNoNA) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ICIDDQ_YesNoNA) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_ICI_DDDQ_proto_enumTypes[0].Descriptor()
}

func (ICIDDQ_YesNoNA) Type() protoreflect.EnumType {
	return &file_standards_open_v1_ICI_DDDQ_proto_enumTypes[0]
}

func (x ICIDDQ_YesNoNA) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ICIDDQ_YesNoNA.Descriptor instead.
func (ICIDDQ_YesNoNA) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 0}
}

type ICIDDQ_BusinessModelAndOperations_AumRange int32

const (
	ICIDDQ_BusinessModelAndOperations_AUM_RANGE_UNSPECIFIED                             ICIDDQ_BusinessModelAndOperations_AumRange = 0
	ICIDDQ_BusinessModelAndOperations_LESS_THAN_50_MILLION                              ICIDDQ_BusinessModelAndOperations_AumRange = 1
	ICIDDQ_BusinessModelAndOperations_GREATER_THAN_50_MILLION_AND_LESS_THAN_500_MILLION ICIDDQ_BusinessModelAndOperations_AumRange = 2
	ICIDDQ_BusinessModelAndOperations_GREATER_THAN_500_MILLION_AND_LESS_THAN_5_BILLION  ICIDDQ_BusinessModelAndOperations_AumRange = 3
	ICIDDQ_BusinessModelAndOperations_GREATER_THAN_5_BILLION_AND_LESS_THAN_10_BILLION   ICIDDQ_BusinessModelAndOperations_AumRange = 4
	ICIDDQ_BusinessModelAndOperations_GREATER_THAN_10_BILLION                           ICIDDQ_BusinessModelAndOperations_AumRange = 5
)

// Enum value maps for ICIDDQ_BusinessModelAndOperations_AumRange.
var (
	ICIDDQ_BusinessModelAndOperations_AumRange_name = map[int32]string{
		0: "AUM_RANGE_UNSPECIFIED",
		1: "LESS_THAN_50_MILLION",
		2: "GREATER_THAN_50_MILLION_AND_LESS_THAN_500_MILLION",
		3: "GREATER_THAN_500_MILLION_AND_LESS_THAN_5_BILLION",
		4: "GREATER_THAN_5_BILLION_AND_LESS_THAN_10_BILLION",
		5: "GREATER_THAN_10_BILLION",
	}
	ICIDDQ_BusinessModelAndOperations_AumRange_value = map[string]int32{
		"AUM_RANGE_UNSPECIFIED":                             0,
		"LESS_THAN_50_MILLION":                              1,
		"GREATER_THAN_50_MILLION_AND_LESS_THAN_500_MILLION": 2,
		"GREATER_THAN_500_MILLION_AND_LESS_THAN_5_BILLION":  3,
		"GREATER_THAN_5_BILLION_AND_LESS_THAN_10_BILLION":   4,
		"GREATER_THAN_10_BILLION":                           5,
	}
)

func (x ICIDDQ_BusinessModelAndOperations_AumRange) Enum() *ICIDDQ_BusinessModelAndOperations_AumRange {
	p := new(ICIDDQ_BusinessModelAndOperations_AumRange)
	*p = x
	return p
}

func (x ICIDDQ_BusinessModelAndOperations_AumRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ICIDDQ_BusinessModelAndOperations_AumRange) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_ICI_DDDQ_proto_enumTypes[1].Descriptor()
}

func (ICIDDQ_BusinessModelAndOperations_AumRange) Type() protoreflect.EnumType {
	return &file_standards_open_v1_ICI_DDDQ_proto_enumTypes[1]
}

func (x ICIDDQ_BusinessModelAndOperations_AumRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ICIDDQ_BusinessModelAndOperations_AumRange.Descriptor instead.
func (ICIDDQ_BusinessModelAndOperations_AumRange) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 1, 0}
}

type ICIDDQ_BusinessModelAndOperations_TradingMethod int32

const (
	ICIDDQ_BusinessModelAndOperations_TRADING_METHOD_UNSPECIFIED ICIDDQ_BusinessModelAndOperations_TradingMethod = 0
	// Direct (at the transfer agent of the fund)
	ICIDDQ_BusinessModelAndOperations_DIRECT ICIDDQ_BusinessModelAndOperations_TradingMethod = 1
	// NSCC / Fund SERV
	ICIDDQ_BusinessModelAndOperations_NSCC_OR_FUND_SERV ICIDDQ_BusinessModelAndOperations_TradingMethod = 2
	// Clearing agent
	ICIDDQ_BusinessModelAndOperations_CLEARING_AGENT ICIDDQ_BusinessModelAndOperations_TradingMethod = 3
	// Omnibus trading
	ICIDDQ_BusinessModelAndOperations_OMNIBUS_TRADING ICIDDQ_BusinessModelAndOperations_TradingMethod = 4
	// Platform
	ICIDDQ_BusinessModelAndOperations_PLATFORM ICIDDQ_BusinessModelAndOperations_TradingMethod = 5
	// Custodian
	ICIDDQ_BusinessModelAndOperations_CUSTODIAN ICIDDQ_BusinessModelAndOperations_TradingMethod = 6
	// Other
	ICIDDQ_BusinessModelAndOperations_OTHER ICIDDQ_BusinessModelAndOperations_TradingMethod = 7
)

// Enum value maps for ICIDDQ_BusinessModelAndOperations_TradingMethod.
var (
	ICIDDQ_BusinessModelAndOperations_TradingMethod_name = map[int32]string{
		0: "TRADING_METHOD_UNSPECIFIED",
		1: "DIRECT",
		2: "NSCC_OR_FUND_SERV",
		3: "CLEARING_AGENT",
		4: "OMNIBUS_TRADING",
		5: "PLATFORM",
		6: "CUSTODIAN",
		7: "OTHER",
	}
	ICIDDQ_BusinessModelAndOperations_TradingMethod_value = map[string]int32{
		"TRADING_METHOD_UNSPECIFIED": 0,
		"DIRECT":                     1,
		"NSCC_OR_FUND_SERV":          2,
		"CLEARING_AGENT":             3,
		"OMNIBUS_TRADING":            4,
		"PLATFORM":                   5,
		"CUSTODIAN":                  6,
		"OTHER":                      7,
	}
)

func (x ICIDDQ_BusinessModelAndOperations_TradingMethod) Enum() *ICIDDQ_BusinessModelAndOperations_TradingMethod {
	p := new(ICIDDQ_BusinessModelAndOperations_TradingMethod)
	*p = x
	return p
}

func (x ICIDDQ_BusinessModelAndOperations_TradingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ICIDDQ_BusinessModelAndOperations_TradingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_ICI_DDDQ_proto_enumTypes[2].Descriptor()
}

func (ICIDDQ_BusinessModelAndOperations_TradingMethod) Type() protoreflect.EnumType {
	return &file_standards_open_v1_ICI_DDDQ_proto_enumTypes[2]
}

func (x ICIDDQ_BusinessModelAndOperations_TradingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ICIDDQ_BusinessModelAndOperations_TradingMethod.Descriptor instead.
func (ICIDDQ_BusinessModelAndOperations_TradingMethod) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 1, 1}
}

type ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution int32

const (
	ICIDDQ_DistributionSuitabilityMarketing_FUND_DOCUMENT_DISTRIBUTION_UNSPECIFIED ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution = 0
	ICIDDQ_DistributionSuitabilityMarketing_YES                                    ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution = 1
	ICIDDQ_DistributionSuitabilityMarketing_YES_PROVIDED_BY_SUB_DISTRIBUTOR        ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution = 2
	ICIDDQ_DistributionSuitabilityMarketing_NO                                     ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution = 3
)

// Enum value maps for ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution.
var (
	ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution_name = map[int32]string{
		0: "FUND_DOCUMENT_DISTRIBUTION_UNSPECIFIED",
		1: "YES",
		2: "YES_PROVIDED_BY_SUB_DISTRIBUTOR",
		3: "NO",
	}
	ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution_value = map[string]int32{
		"FUND_DOCUMENT_DISTRIBUTION_UNSPECIFIED": 0,
		"YES":                                    1,
		"YES_PROVIDED_BY_SUB_DISTRIBUTOR":        2,
		"NO":                                     3,
	}
)

func (x ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution) Enum() *ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution {
	p := new(ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution)
	*p = x
	return p
}

func (x ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_ICI_DDDQ_proto_enumTypes[3].Descriptor()
}

func (ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution) Type() protoreflect.EnumType {
	return &file_standards_open_v1_ICI_DDDQ_proto_enumTypes[3]
}

func (x ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution.Descriptor instead.
func (ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 2, 0}
}

type ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses int32

const (
	ICIDDQ_LegalAndRegulatoryOversight_SANCTIONED_RESPONSES_UNSPECIFIED        ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses = 0
	ICIDDQ_LegalAndRegulatoryOversight_YES                                     ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses = 1
	ICIDDQ_LegalAndRegulatoryOversight_NO                                      ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses = 2
	ICIDDQ_LegalAndRegulatoryOversight_RELEVANT_INFORMATION_PUBLICLY_AVAILABLE ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses = 3
)

// Enum value maps for ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses.
var (
	ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses_name = map[int32]string{
		0: "SANCTIONED_RESPONSES_UNSPECIFIED",
		1: "YES",
		2: "NO",
		3: "RELEVANT_INFORMATION_PUBLICLY_AVAILABLE",
	}
	ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses_value = map[string]int32{
		"SANCTIONED_RESPONSES_UNSPECIFIED": 0,
		"YES":                              1,
		"NO":                               2,
		"RELEVANT_INFORMATION_PUBLICLY_AVAILABLE": 3,
	}
)

func (x ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses) Enum() *ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses {
	p := new(ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses)
	*p = x
	return p
}

func (x ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_ICI_DDDQ_proto_enumTypes[4].Descriptor()
}

func (ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses) Type() protoreflect.EnumType {
	return &file_standards_open_v1_ICI_DDDQ_proto_enumTypes[4]
}

func (x ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses.Descriptor instead.
func (ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 4, 0}
}

// Enumerations of the review status
type ICIDDQ_ReviewerInformation_Review_ReviewStatus int32

const (
	ICIDDQ_ReviewerInformation_Review_STATUS_UNSPECIFIED ICIDDQ_ReviewerInformation_Review_ReviewStatus = 0
	// The review is in progress
	ICIDDQ_ReviewerInformation_Review_UNDER_REVIEW ICIDDQ_ReviewerInformation_Review_ReviewStatus = 1
	// Currently blocked awaiting additional information / clarification
	ICIDDQ_ReviewerInformation_Review_AWAITING_CLARIFICATION_OR_ADDITIONAL_INFORMATION ICIDDQ_ReviewerInformation_Review_ReviewStatus = 2
	// Review is complete
	ICIDDQ_ReviewerInformation_Review_COMPLETE ICIDDQ_ReviewerInformation_Review_ReviewStatus = 3
)

// Enum value maps for ICIDDQ_ReviewerInformation_Review_ReviewStatus.
var (
	ICIDDQ_ReviewerInformation_Review_ReviewStatus_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "UNDER_REVIEW",
		2: "AWAITING_CLARIFICATION_OR_ADDITIONAL_INFORMATION",
		3: "COMPLETE",
	}
	ICIDDQ_ReviewerInformation_Review_ReviewStatus_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"UNDER_REVIEW":       1,
		"AWAITING_CLARIFICATION_OR_ADDITIONAL_INFORMATION": 2,
		"COMPLETE": 3,
	}
)

func (x ICIDDQ_ReviewerInformation_Review_ReviewStatus) Enum() *ICIDDQ_ReviewerInformation_Review_ReviewStatus {
	p := new(ICIDDQ_ReviewerInformation_Review_ReviewStatus)
	*p = x
	return p
}

func (x ICIDDQ_ReviewerInformation_Review_ReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ICIDDQ_ReviewerInformation_Review_ReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_ICI_DDDQ_proto_enumTypes[5].Descriptor()
}

func (ICIDDQ_ReviewerInformation_Review_ReviewStatus) Type() protoreflect.EnumType {
	return &file_standards_open_v1_ICI_DDDQ_proto_enumTypes[5]
}

func (x ICIDDQ_ReviewerInformation_Review_ReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ICIDDQ_ReviewerInformation_Review_ReviewStatus.Descriptor instead.
func (ICIDDQ_ReviewerInformation_Review_ReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 7, 0, 0}
}

// Enumerations of the reviewers risk assessment of the section
type ICIDDQ_ReviewerInformation_Review_RiskAssessment int32

const (
	ICIDDQ_ReviewerInformation_Review_RISK_ASSESSMENT_UNSPECIFIED ICIDDQ_ReviewerInformation_Review_RiskAssessment = 0
	// Assessed as low risk
	ICIDDQ_ReviewerInformation_Review_LOW_RISK ICIDDQ_ReviewerInformation_Review_RiskAssessment = 1
	// Assessed as medium risk
	ICIDDQ_ReviewerInformation_Review_MEDIUM_RISK ICIDDQ_ReviewerInformation_Review_RiskAssessment = 2
	// Assessed as high risk
	ICIDDQ_ReviewerInformation_Review_HIGH_RISK ICIDDQ_ReviewerInformation_Review_RiskAssessment = 3
)

// Enum value maps for ICIDDQ_ReviewerInformation_Review_RiskAssessment.
var (
	ICIDDQ_ReviewerInformation_Review_RiskAssessment_name = map[int32]string{
		0: "RISK_ASSESSMENT_UNSPECIFIED",
		1: "LOW_RISK",
		2: "MEDIUM_RISK",
		3: "HIGH_RISK",
	}
	ICIDDQ_ReviewerInformation_Review_RiskAssessment_value = map[string]int32{
		"RISK_ASSESSMENT_UNSPECIFIED": 0,
		"LOW_RISK":                    1,
		"MEDIUM_RISK":                 2,
		"HIGH_RISK":                   3,
	}
)

func (x ICIDDQ_ReviewerInformation_Review_RiskAssessment) Enum() *ICIDDQ_ReviewerInformation_Review_RiskAssessment {
	p := new(ICIDDQ_ReviewerInformation_Review_RiskAssessment)
	*p = x
	return p
}

func (x ICIDDQ_ReviewerInformation_Review_RiskAssessment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ICIDDQ_ReviewerInformation_Review_RiskAssessment) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_ICI_DDDQ_proto_enumTypes[6].Descriptor()
}

func (ICIDDQ_ReviewerInformation_Review_RiskAssessment) Type() protoreflect.EnumType {
	return &file_standards_open_v1_ICI_DDDQ_proto_enumTypes[6]
}

func (x ICIDDQ_ReviewerInformation_Review_RiskAssessment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ICIDDQ_ReviewerInformation_Review_RiskAssessment.Descriptor instead.
func (ICIDDQ_ReviewerInformation_Review_RiskAssessment) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 7, 0, 1}
}

// The Investment Funds Distributor Due Diligence Questionnaire (ICI Distributor DDQ) Version 1
type ICIDDQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Section 1. General Information
	GeneralInformation               *ICIDDQ_GeneralInformation               `protobuf:"bytes,1,opt,name=general_information,json=generalInformation,proto3" json:"general_information,omitempty"`
	BusinessModelAndOperations       *ICIDDQ_BusinessModelAndOperations       `protobuf:"bytes,2,opt,name=business_model_and_operations,json=businessModelAndOperations,proto3" json:"business_model_and_operations,omitempty"`
	DistributionSuitabilityMarketing *ICIDDQ_DistributionSuitabilityMarketing `protobuf:"bytes,3,opt,name=distribution_suitability_marketing,json=distributionSuitabilityMarketing,proto3" json:"distribution_suitability_marketing,omitempty"`
	// Section 4. Oversight of Sub-Distribution
	OversightOfSubDistribution *ICIDDQ_OversightOfSubDistribution `protobuf:"bytes,4,opt,name=oversight_of_sub_distribution,json=oversightOfSubDistribution,proto3" json:"oversight_of_sub_distribution,omitempty"`
	// Section 5: Legal and Regulatory Oversight
	LegalAndRegulatoryOversight *ICIDDQ_LegalAndRegulatoryOversight `protobuf:"bytes,5,opt,name=legal_and_regulatory_oversight,json=legalAndRegulatoryOversight,proto3" json:"legal_and_regulatory_oversight,omitempty"`
	// Section 6: Risk Management and Controls
	RiskManagementAndControls *ICIDDQ_RiskManagementAndControls `protobuf:"bytes,6,opt,name=risk_management_and_controls,json=riskManagementAndControls,proto3" json:"risk_management_and_controls,omitempty"`
	// Section 7: Declarations and Execution
	DeclarationsAndExecution *ICIDDQ_DeclarationsAndExecution `protobuf:"bytes,7,opt,name=declarations_and_execution,json=declarationsAndExecution,proto3" json:"declarations_and_execution,omitempty"`
	// Information populated by the reviewer of the questionnaire
	ReviewerInformation *ICIDDQ_ReviewerInformation `protobuf:"bytes,8,opt,name=reviewer_information,json=reviewerInformation,proto3" json:"reviewer_information,omitempty"`
}

func (x *ICIDDQ) Reset() {
	*x = ICIDDQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ) ProtoMessage() {}

func (x *ICIDDQ) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ.ProtoReflect.Descriptor instead.
func (*ICIDDQ) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0}
}

func (x *ICIDDQ) GetGeneralInformation() *ICIDDQ_GeneralInformation {
	if x != nil {
		return x.GeneralInformation
	}
	return nil
}

func (x *ICIDDQ) GetBusinessModelAndOperations() *ICIDDQ_BusinessModelAndOperations {
	if x != nil {
		return x.BusinessModelAndOperations
	}
	return nil
}

func (x *ICIDDQ) GetDistributionSuitabilityMarketing() *ICIDDQ_DistributionSuitabilityMarketing {
	if x != nil {
		return x.DistributionSuitabilityMarketing
	}
	return nil
}

func (x *ICIDDQ) GetOversightOfSubDistribution() *ICIDDQ_OversightOfSubDistribution {
	if x != nil {
		return x.OversightOfSubDistribution
	}
	return nil
}

func (x *ICIDDQ) GetLegalAndRegulatoryOversight() *ICIDDQ_LegalAndRegulatoryOversight {
	if x != nil {
		return x.LegalAndRegulatoryOversight
	}
	return nil
}

func (x *ICIDDQ) GetRiskManagementAndControls() *ICIDDQ_RiskManagementAndControls {
	if x != nil {
		return x.RiskManagementAndControls
	}
	return nil
}

func (x *ICIDDQ) GetDeclarationsAndExecution() *ICIDDQ_DeclarationsAndExecution {
	if x != nil {
		return x.DeclarationsAndExecution
	}
	return nil
}

func (x *ICIDDQ) GetReviewerInformation() *ICIDDQ_ReviewerInformation {
	if x != nil {
		return x.ReviewerInformation
	}
	return nil
}

// Section 1. General Information
type ICIDDQ_GeneralInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegalName                   string                                                          `protobuf:"bytes,1,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	RegisteredAddress           string                                                          `protobuf:"bytes,2,opt,name=registered_address,json=registeredAddress,proto3" json:"registered_address,omitempty"`
	CountryOfIncorporation      string                                                          `protobuf:"bytes,3,opt,name=country_of_incorporation,json=countryOfIncorporation,proto3" json:"country_of_incorporation,omitempty"`
	RegulatedEntity             ICIDDQ_YesNoNA                                                  `protobuf:"varint,4,opt,name=regulated_entity,json=regulatedEntity,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"regulated_entity,omitempty"`
	RegulatedEntityRegistration string                                                          `protobuf:"bytes,5,opt,name=regulated_entity_registration,json=regulatedEntityRegistration,proto3" json:"regulated_entity_registration,omitempty"`
	LicensesAndRegulator        string                                                          `protobuf:"bytes,6,opt,name=licenses_and_regulator,json=licensesAndRegulator,proto3" json:"licenses_and_regulator,omitempty"`
	RegulatoryStructureAmlCtf   string                                                          `protobuf:"bytes,7,opt,name=regulatory_structure_aml_ctf,json=regulatoryStructureAmlCtf,proto3" json:"regulatory_structure_aml_ctf,omitempty"`
	MifidEntity                 ICIDDQ_YesNoNA                                                  `protobuf:"varint,8,opt,name=mifid_entity,json=mifidEntity,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"mifid_entity,omitempty"`
	SubsidiaryRegulatedEntity   ICIDDQ_YesNoNA                                                  `protobuf:"varint,9,opt,name=subsidiary_regulated_entity,json=subsidiaryRegulatedEntity,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"subsidiary_regulated_entity,omitempty"`
	CorproateEvents             string                                                          `protobuf:"bytes,10,opt,name=corproate_events,json=corproateEvents,proto3" json:"corproate_events,omitempty"`
	UltimateBeneficialOwner     ICIDDQ_YesNoNA                                                  `protobuf:"varint,11,opt,name=ultimate_beneficial_owner,json=ultimateBeneficialOwner,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"ultimate_beneficial_owner,omitempty"`
	UltimateBeneficialOwners    []*ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder `protobuf:"bytes,12,rep,name=ultimate_beneficial_owners,json=ultimateBeneficialOwners,proto3" json:"ultimate_beneficial_owners,omitempty"`
	EuEeaProvidedUba            ICIDDQ_YesNoNA                                                  `protobuf:"varint,13,opt,name=eu_eea_provided_uba,json=euEeaProvidedUba,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"eu_eea_provided_uba,omitempty"`
	ControllingPersons          []*ICIDDQ_GeneralInformation_ControllingPerson                  `protobuf:"bytes,14,rep,name=controlling_persons,json=controllingPersons,proto3" json:"controlling_persons,omitempty"`
	ManagementStructure         string                                                          `protobuf:"bytes,15,opt,name=management_structure,json=managementStructure,proto3" json:"management_structure,omitempty"`
}

func (x *ICIDDQ_GeneralInformation) Reset() {
	*x = ICIDDQ_GeneralInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_GeneralInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_GeneralInformation) ProtoMessage() {}

func (x *ICIDDQ_GeneralInformation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_GeneralInformation.ProtoReflect.Descriptor instead.
func (*ICIDDQ_GeneralInformation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ICIDDQ_GeneralInformation) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *ICIDDQ_GeneralInformation) GetRegisteredAddress() string {
	if x != nil {
		return x.RegisteredAddress
	}
	return ""
}

func (x *ICIDDQ_GeneralInformation) GetCountryOfIncorporation() string {
	if x != nil {
		return x.CountryOfIncorporation
	}
	return ""
}

func (x *ICIDDQ_GeneralInformation) GetRegulatedEntity() ICIDDQ_YesNoNA {
	if x != nil {
		return x.RegulatedEntity
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_GeneralInformation) GetRegulatedEntityRegistration() string {
	if x != nil {
		return x.RegulatedEntityRegistration
	}
	return ""
}

func (x *ICIDDQ_GeneralInformation) GetLicensesAndRegulator() string {
	if x != nil {
		return x.LicensesAndRegulator
	}
	return ""
}

func (x *ICIDDQ_GeneralInformation) GetRegulatoryStructureAmlCtf() string {
	if x != nil {
		return x.RegulatoryStructureAmlCtf
	}
	return ""
}

func (x *ICIDDQ_GeneralInformation) GetMifidEntity() ICIDDQ_YesNoNA {
	if x != nil {
		return x.MifidEntity
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_GeneralInformation) GetSubsidiaryRegulatedEntity() ICIDDQ_YesNoNA {
	if x != nil {
		return x.SubsidiaryRegulatedEntity
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_GeneralInformation) GetCorproateEvents() string {
	if x != nil {
		return x.CorproateEvents
	}
	return ""
}

func (x *ICIDDQ_GeneralInformation) GetUltimateBeneficialOwner() ICIDDQ_YesNoNA {
	if x != nil {
		return x.UltimateBeneficialOwner
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_GeneralInformation) GetUltimateBeneficialOwners() []*ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder {
	if x != nil {
		return x.UltimateBeneficialOwners
	}
	return nil
}

func (x *ICIDDQ_GeneralInformation) GetEuEeaProvidedUba() ICIDDQ_YesNoNA {
	if x != nil {
		return x.EuEeaProvidedUba
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_GeneralInformation) GetControllingPersons() []*ICIDDQ_GeneralInformation_ControllingPerson {
	if x != nil {
		return x.ControllingPersons
	}
	return nil
}

func (x *ICIDDQ_GeneralInformation) GetManagementStructure() string {
	if x != nil {
		return x.ManagementStructure
	}
	return ""
}

// Section 2. Business Model and Operations
type ICIDDQ_BusinessModelAndOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AumRangeCurrencyCode                                          string                                            `protobuf:"bytes,1,opt,name=aum_range_currency_code,json=aumRangeCurrencyCode,proto3" json:"aum_range_currency_code,omitempty"`
	AumRange                                                      ICIDDQ_BusinessModelAndOperations_AumRange        `protobuf:"varint,2,opt,name=aum_range,json=aumRange,proto3,enum=standards.open.v1.ICIDDQ_BusinessModelAndOperations_AumRange" json:"aum_range,omitempty"`
	TradingMethods                                                []ICIDDQ_BusinessModelAndOperations_TradingMethod `protobuf:"varint,3,rep,packed,name=trading_methods,json=tradingMethods,proto3,enum=standards.open.v1.ICIDDQ_BusinessModelAndOperations_TradingMethod" json:"trading_methods,omitempty"`
	OtherTradingMethodsDescription                                string                                            `protobuf:"bytes,4,opt,name=other_trading_methods_description,json=otherTradingMethodsDescription,proto3" json:"other_trading_methods_description,omitempty"`
	BusinessContextRetailOrPrivateBank                            bool                                              `protobuf:"varint,5,opt,name=business_context_retail_or_private_bank,json=businessContextRetailOrPrivateBank,proto3" json:"business_context_retail_or_private_bank,omitempty"`
	BusinessContextFinancialAdvisor                               bool                                              `protobuf:"varint,6,opt,name=business_context_financial_advisor,json=businessContextFinancialAdvisor,proto3" json:"business_context_financial_advisor,omitempty"`
	BusinessContextWealthManager                                  bool                                              `protobuf:"varint,7,opt,name=business_context_wealth_manager,json=businessContextWealthManager,proto3" json:"business_context_wealth_manager,omitempty"`
	BusinessContextFundPlatform                                   bool                                              `protobuf:"varint,8,opt,name=business_context_fund_platform,json=businessContextFundPlatform,proto3" json:"business_context_fund_platform,omitempty"`
	BusinessContextFamilyOffice                                   bool                                              `protobuf:"varint,9,opt,name=business_context_family_office,json=businessContextFamilyOffice,proto3" json:"business_context_family_office,omitempty"`
	BusinessContextPensionScheme                                  bool                                              `protobuf:"varint,10,opt,name=business_context_pension_scheme,json=businessContextPensionScheme,proto3" json:"business_context_pension_scheme,omitempty"`
	BusinessContextMultiManager                                   bool                                              `protobuf:"varint,11,opt,name=business_context_multi_manager,json=businessContextMultiManager,proto3" json:"business_context_multi_manager,omitempty"`
	BusinessContextInsuranceWrap                                  bool                                              `protobuf:"varint,12,opt,name=business_context_insurance_wrap,json=businessContextInsuranceWrap,proto3" json:"business_context_insurance_wrap,omitempty"`
	BusinessContextCustodian                                      bool                                              `protobuf:"varint,13,opt,name=business_context_custodian,json=businessContextCustodian,proto3" json:"business_context_custodian,omitempty"`
	BusinessContextNominee                                        bool                                              `protobuf:"varint,14,opt,name=business_context_nominee,json=businessContextNominee,proto3" json:"business_context_nominee,omitempty"`
	BusinessContextFullServiceBrokerDealer                        bool                                              `protobuf:"varint,15,opt,name=business_context_full_service_broker_dealer,json=businessContextFullServiceBrokerDealer,proto3" json:"business_context_full_service_broker_dealer,omitempty"`
	BusinessContextOther                                          bool                                              `protobuf:"varint,16,opt,name=business_context_other,json=businessContextOther,proto3" json:"business_context_other,omitempty"`
	BusinessContextOtherDescribe                                  string                                            `protobuf:"bytes,17,opt,name=business_context_other_describe,json=businessContextOtherDescribe,proto3" json:"business_context_other_describe,omitempty"`
	ApplicableServicesDescretionaryPortfolioManagement            bool                                              `protobuf:"varint,18,opt,name=applicable_services_descretionary_portfolio_management,json=applicableServicesDescretionaryPortfolioManagement,proto3" json:"applicable_services_descretionary_portfolio_management,omitempty"`
	ApplicableServicesAdvisory                                    bool                                              `protobuf:"varint,19,opt,name=applicable_services_advisory,json=applicableServicesAdvisory,proto3" json:"applicable_services_advisory,omitempty"`
	ApplicableServicesAdvisoryAsPerMifid                          bool                                              `protobuf:"varint,20,opt,name=applicable_services_advisory_as_per_mifid,json=applicableServicesAdvisoryAsPerMifid,proto3" json:"applicable_services_advisory_as_per_mifid,omitempty"`
	ApplicableServicesAdvisoryAsPerMifidDependent                 bool                                              `protobuf:"varint,21,opt,name=applicable_services_advisory_as_per_mifid_dependent,json=applicableServicesAdvisoryAsPerMifidDependent,proto3" json:"applicable_services_advisory_as_per_mifid_dependent,omitempty"`
	ApplicableServicesAdvisoryAsPerMifidIndependent               bool                                              `protobuf:"varint,22,opt,name=applicable_services_advisory_as_per_mifid_independent,json=applicableServicesAdvisoryAsPerMifidIndependent,proto3" json:"applicable_services_advisory_as_per_mifid_independent,omitempty"`
	ApplicableServicesExecutionOnlyOrBrokerage                    bool                                              `protobuf:"varint,23,opt,name=applicable_services_execution_only_or_brokerage,json=applicableServicesExecutionOnlyOrBrokerage,proto3" json:"applicable_services_execution_only_or_brokerage,omitempty"`
	ApplicableServicesExecutionOnlyWithMifidAppropriateAssessment bool                                              `protobuf:"varint,24,opt,name=applicable_services_execution_only_with_mifid_appropriate_assessment,json=applicableServicesExecutionOnlyWithMifidAppropriateAssessment,proto3" json:"applicable_services_execution_only_with_mifid_appropriate_assessment,omitempty"`
	ApplicableServicesOther                                       bool                                              `protobuf:"varint,25,opt,name=applicable_services_other,json=applicableServicesOther,proto3" json:"applicable_services_other,omitempty"`
	ApplicableServicesOtherDescribe                               string                                            `protobuf:"bytes,26,opt,name=applicable_services_other_describe,json=applicableServicesOtherDescribe,proto3" json:"applicable_services_other_describe,omitempty"`
	UnderlyingInvestorsRetail                                     bool                                              `protobuf:"varint,27,opt,name=underlying_investors_retail,json=underlyingInvestorsRetail,proto3" json:"underlying_investors_retail,omitempty"`
	UnderlyingInvestorsProfessional                               bool                                              `protobuf:"varint,28,opt,name=underlying_investors_professional,json=underlyingInvestorsProfessional,proto3" json:"underlying_investors_professional,omitempty"`
	UnderlyingInvestorsOther                                      bool                                              `protobuf:"varint,29,opt,name=underlying_investors_other,json=underlyingInvestorsOther,proto3" json:"underlying_investors_other,omitempty"`
	UnderlyingInvestorsOtherDescribe                              string                                            `protobuf:"bytes,30,opt,name=underlying_investors_other_describe,json=underlyingInvestorsOtherDescribe,proto3" json:"underlying_investors_other_describe,omitempty"`
	RestrictBusinessByJurisdictionOrProduct                       ICIDDQ_YesNoNA                                    `protobuf:"varint,31,opt,name=restrict_business_by_jurisdiction_or_product,json=restrictBusinessByJurisdictionOrProduct,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"restrict_business_by_jurisdiction_or_product,omitempty"`
	RestrictBusinessByJurisdiction                                bool                                              `protobuf:"varint,32,opt,name=restrict_business_by_jurisdiction,json=restrictBusinessByJurisdiction,proto3" json:"restrict_business_by_jurisdiction,omitempty"`
	RestrictBusinessByProduct                                     bool                                              `protobuf:"varint,33,opt,name=restrict_business_by_product,json=restrictBusinessByProduct,proto3" json:"restrict_business_by_product,omitempty"`
	RestrictBusinessByOtherParameter                              bool                                              `protobuf:"varint,34,opt,name=restrict_business_by_other_parameter,json=restrictBusinessByOtherParameter,proto3" json:"restrict_business_by_other_parameter,omitempty"`
	RestrictBusinessByOtherParameterDescribe                      string                                            `protobuf:"bytes,35,opt,name=restrict_business_by_other_parameter_describe,json=restrictBusinessByOtherParameterDescribe,proto3" json:"restrict_business_by_other_parameter_describe,omitempty"`
}

func (x *ICIDDQ_BusinessModelAndOperations) Reset() {
	*x = ICIDDQ_BusinessModelAndOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_BusinessModelAndOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_BusinessModelAndOperations) ProtoMessage() {}

func (x *ICIDDQ_BusinessModelAndOperations) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_BusinessModelAndOperations.ProtoReflect.Descriptor instead.
func (*ICIDDQ_BusinessModelAndOperations) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ICIDDQ_BusinessModelAndOperations) GetAumRangeCurrencyCode() string {
	if x != nil {
		return x.AumRangeCurrencyCode
	}
	return ""
}

func (x *ICIDDQ_BusinessModelAndOperations) GetAumRange() ICIDDQ_BusinessModelAndOperations_AumRange {
	if x != nil {
		return x.AumRange
	}
	return ICIDDQ_BusinessModelAndOperations_AUM_RANGE_UNSPECIFIED
}

func (x *ICIDDQ_BusinessModelAndOperations) GetTradingMethods() []ICIDDQ_BusinessModelAndOperations_TradingMethod {
	if x != nil {
		return x.TradingMethods
	}
	return nil
}

func (x *ICIDDQ_BusinessModelAndOperations) GetOtherTradingMethodsDescription() string {
	if x != nil {
		return x.OtherTradingMethodsDescription
	}
	return ""
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextRetailOrPrivateBank() bool {
	if x != nil {
		return x.BusinessContextRetailOrPrivateBank
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextFinancialAdvisor() bool {
	if x != nil {
		return x.BusinessContextFinancialAdvisor
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextWealthManager() bool {
	if x != nil {
		return x.BusinessContextWealthManager
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextFundPlatform() bool {
	if x != nil {
		return x.BusinessContextFundPlatform
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextFamilyOffice() bool {
	if x != nil {
		return x.BusinessContextFamilyOffice
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextPensionScheme() bool {
	if x != nil {
		return x.BusinessContextPensionScheme
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextMultiManager() bool {
	if x != nil {
		return x.BusinessContextMultiManager
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextInsuranceWrap() bool {
	if x != nil {
		return x.BusinessContextInsuranceWrap
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextCustodian() bool {
	if x != nil {
		return x.BusinessContextCustodian
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextNominee() bool {
	if x != nil {
		return x.BusinessContextNominee
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextFullServiceBrokerDealer() bool {
	if x != nil {
		return x.BusinessContextFullServiceBrokerDealer
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextOther() bool {
	if x != nil {
		return x.BusinessContextOther
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetBusinessContextOtherDescribe() string {
	if x != nil {
		return x.BusinessContextOtherDescribe
	}
	return ""
}

func (x *ICIDDQ_BusinessModelAndOperations) GetApplicableServicesDescretionaryPortfolioManagement() bool {
	if x != nil {
		return x.ApplicableServicesDescretionaryPortfolioManagement
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetApplicableServicesAdvisory() bool {
	if x != nil {
		return x.ApplicableServicesAdvisory
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetApplicableServicesAdvisoryAsPerMifid() bool {
	if x != nil {
		return x.ApplicableServicesAdvisoryAsPerMifid
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetApplicableServicesAdvisoryAsPerMifidDependent() bool {
	if x != nil {
		return x.ApplicableServicesAdvisoryAsPerMifidDependent
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetApplicableServicesAdvisoryAsPerMifidIndependent() bool {
	if x != nil {
		return x.ApplicableServicesAdvisoryAsPerMifidIndependent
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetApplicableServicesExecutionOnlyOrBrokerage() bool {
	if x != nil {
		return x.ApplicableServicesExecutionOnlyOrBrokerage
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetApplicableServicesExecutionOnlyWithMifidAppropriateAssessment() bool {
	if x != nil {
		return x.ApplicableServicesExecutionOnlyWithMifidAppropriateAssessment
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetApplicableServicesOther() bool {
	if x != nil {
		return x.ApplicableServicesOther
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetApplicableServicesOtherDescribe() string {
	if x != nil {
		return x.ApplicableServicesOtherDescribe
	}
	return ""
}

func (x *ICIDDQ_BusinessModelAndOperations) GetUnderlyingInvestorsRetail() bool {
	if x != nil {
		return x.UnderlyingInvestorsRetail
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetUnderlyingInvestorsProfessional() bool {
	if x != nil {
		return x.UnderlyingInvestorsProfessional
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetUnderlyingInvestorsOther() bool {
	if x != nil {
		return x.UnderlyingInvestorsOther
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetUnderlyingInvestorsOtherDescribe() string {
	if x != nil {
		return x.UnderlyingInvestorsOtherDescribe
	}
	return ""
}

func (x *ICIDDQ_BusinessModelAndOperations) GetRestrictBusinessByJurisdictionOrProduct() ICIDDQ_YesNoNA {
	if x != nil {
		return x.RestrictBusinessByJurisdictionOrProduct
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_BusinessModelAndOperations) GetRestrictBusinessByJurisdiction() bool {
	if x != nil {
		return x.RestrictBusinessByJurisdiction
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetRestrictBusinessByProduct() bool {
	if x != nil {
		return x.RestrictBusinessByProduct
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetRestrictBusinessByOtherParameter() bool {
	if x != nil {
		return x.RestrictBusinessByOtherParameter
	}
	return false
}

func (x *ICIDDQ_BusinessModelAndOperations) GetRestrictBusinessByOtherParameterDescribe() string {
	if x != nil {
		return x.RestrictBusinessByOtherParameterDescribe
	}
	return ""
}

// Section 3. Distribution, Suitability, and Marketing
type ICIDDQ_DistributionSuitabilityMarketing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessForFundReviewAndApproval                                                   ICIDDQ_YesNoNA                                                   `protobuf:"varint,1,opt,name=process_for_fund_review_and_approval,json=processForFundReviewAndApproval,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"process_for_fund_review_and_approval,omitempty"`
	DistributeOutsideDomiciledCountry                                                 ICIDDQ_YesNoNA                                                   `protobuf:"varint,2,opt,name=distribute_outside_domiciled_country,json=distributeOutsideDomiciledCountry,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"distribute_outside_domiciled_country,omitempty"`
	DistributeOutsideDomiciledCountryAdhereToRegulations                              ICIDDQ_YesNoNA                                                   `protobuf:"varint,3,opt,name=distribute_outside_domiciled_country_adhere_to_regulations,json=distributeOutsideDomiciledCountryAdhereToRegulations,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"distribute_outside_domiciled_country_adhere_to_regulations,omitempty"`
	OfferInvestmentFundsInCountriesOtherThanWhereRegisteredForPublicDistribution      ICIDDQ_YesNoNA                                                   `protobuf:"varint,4,opt,name=offer_investment_funds_in_countries_other_than_where_registered_for_public_distribution,json=offerInvestmentFundsInCountriesOtherThanWhereRegisteredForPublicDistribution,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"offer_investment_funds_in_countries_other_than_where_registered_for_public_distribution,omitempty"`
	SellsFundsInJurisdictionsSubjectToLimitationOnInvestors                           ICIDDQ_YesNoNA                                                   `protobuf:"varint,5,opt,name=sells_funds_in_jurisdictions_subject_to_limitation_on_investors,json=sellsFundsInJurisdictionsSubjectToLimitationOnInvestors,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"sells_funds_in_jurisdictions_subject_to_limitation_on_investors,omitempty"`
	RemunerationPolicyToAlignIncentivesWithInvestors                                  ICIDDQ_YesNoNA                                                   `protobuf:"varint,6,opt,name=remuneration_policy_to_align_incentives_with_investors,json=remunerationPolicyToAlignIncentivesWithInvestors,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"remuneration_policy_to_align_incentives_with_investors,omitempty"`
	AllFeesComplyWithLawsAndRegulations                                               ICIDDQ_YesNoNA                                                   `protobuf:"varint,7,opt,name=all_fees_comply_with_laws_and_regulations,json=allFeesComplyWithLawsAndRegulations,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"all_fees_comply_with_laws_and_regulations,omitempty"`
	DiscloseToInvestorsInducementsAsRequiredByLaw                                     ICIDDQ_YesNoNA                                                   `protobuf:"varint,8,opt,name=disclose_to_investors_inducements_as_required_by_law,json=discloseToInvestorsInducementsAsRequiredByLaw,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"disclose_to_investors_inducements_as_required_by_law,omitempty"`
	ApplyASuitabilityTest                                                             ICIDDQ_YesNoNA                                                   `protobuf:"varint,9,opt,name=apply_a_suitability_test,json=applyASuitabilityTest,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"apply_a_suitability_test,omitempty"`
	ControlsToDistributeToAppropriateInvestors                                        ICIDDQ_YesNoNA                                                   `protobuf:"varint,10,opt,name=controls_to_distribute_to_appropriate_investors,json=controlsToDistributeToAppropriateInvestors,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"controls_to_distribute_to_appropriate_investors,omitempty"`
	ControlsToDistributeToAppropriateInvestorsPreventSalesToNegativeMifidTargetMarket ICIDDQ_YesNoNA                                                   `protobuf:"varint,11,opt,name=controls_to_distribute_to_appropriate_investors_prevent_sales_to_negative_mifid_target_market,json=controlsToDistributeToAppropriateInvestorsPreventSalesToNegativeMifidTargetMarket,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"controls_to_distribute_to_appropriate_investors_prevent_sales_to_negative_mifid_target_market,omitempty"`
	SystemsAndControlsPreventInvestmentFundsFromNoneligibleInvestors                  ICIDDQ_YesNoNA                                                   `protobuf:"varint,12,opt,name=systems_and_controls_prevent_investment_funds_from_noneligible_investors,json=systemsAndControlsPreventInvestmentFundsFromNoneligibleInvestors,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"systems_and_controls_prevent_investment_funds_from_noneligible_investors,omitempty"`
	ProvideRegularReportingToRegulator                                                ICIDDQ_YesNoNA                                                   `protobuf:"varint,13,opt,name=provide_regular_reporting_to_regulator,json=provideRegularReportingToRegulator,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"provide_regular_reporting_to_regulator,omitempty"`
	CreateOwnMarketingMaterial                                                        ICIDDQ_YesNoNA                                                   `protobuf:"varint,14,opt,name=create_own_marketing_material,json=createOwnMarketingMaterial,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"create_own_marketing_material,omitempty"`
	CreateOwnMarketingMaterialProceduresForCompliantMaterials                         ICIDDQ_YesNoNA                                                   `protobuf:"varint,15,opt,name=create_own_marketing_material_procedures_for_compliant_materials,json=createOwnMarketingMaterialProceduresForCompliantMaterials,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"create_own_marketing_material_procedures_for_compliant_materials,omitempty"`
	FundDocumentsMadeAvailable                                                        ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution `protobuf:"varint,16,opt,name=fund_documents_made_available,json=fundDocumentsMadeAvailable,proto3,enum=standards.open.v1.ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution" json:"fund_documents_made_available,omitempty"`
	ConfirmAdherenceToAifmdDirective                                                  ICIDDQ_YesNoNA                                                   `protobuf:"varint,17,opt,name=confirm_adherence_to_aifmd_directive,json=confirmAdherenceToAifmdDirective,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"confirm_adherence_to_aifmd_directive,omitempty"`
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) Reset() {
	*x = ICIDDQ_DistributionSuitabilityMarketing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_DistributionSuitabilityMarketing) ProtoMessage() {}

func (x *ICIDDQ_DistributionSuitabilityMarketing) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_DistributionSuitabilityMarketing.ProtoReflect.Descriptor instead.
func (*ICIDDQ_DistributionSuitabilityMarketing) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetProcessForFundReviewAndApproval() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ProcessForFundReviewAndApproval
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetDistributeOutsideDomiciledCountry() ICIDDQ_YesNoNA {
	if x != nil {
		return x.DistributeOutsideDomiciledCountry
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetDistributeOutsideDomiciledCountryAdhereToRegulations() ICIDDQ_YesNoNA {
	if x != nil {
		return x.DistributeOutsideDomiciledCountryAdhereToRegulations
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetOfferInvestmentFundsInCountriesOtherThanWhereRegisteredForPublicDistribution() ICIDDQ_YesNoNA {
	if x != nil {
		return x.OfferInvestmentFundsInCountriesOtherThanWhereRegisteredForPublicDistribution
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetSellsFundsInJurisdictionsSubjectToLimitationOnInvestors() ICIDDQ_YesNoNA {
	if x != nil {
		return x.SellsFundsInJurisdictionsSubjectToLimitationOnInvestors
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetRemunerationPolicyToAlignIncentivesWithInvestors() ICIDDQ_YesNoNA {
	if x != nil {
		return x.RemunerationPolicyToAlignIncentivesWithInvestors
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetAllFeesComplyWithLawsAndRegulations() ICIDDQ_YesNoNA {
	if x != nil {
		return x.AllFeesComplyWithLawsAndRegulations
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetDiscloseToInvestorsInducementsAsRequiredByLaw() ICIDDQ_YesNoNA {
	if x != nil {
		return x.DiscloseToInvestorsInducementsAsRequiredByLaw
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetApplyASuitabilityTest() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ApplyASuitabilityTest
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetControlsToDistributeToAppropriateInvestors() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ControlsToDistributeToAppropriateInvestors
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetControlsToDistributeToAppropriateInvestorsPreventSalesToNegativeMifidTargetMarket() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ControlsToDistributeToAppropriateInvestorsPreventSalesToNegativeMifidTargetMarket
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetSystemsAndControlsPreventInvestmentFundsFromNoneligibleInvestors() ICIDDQ_YesNoNA {
	if x != nil {
		return x.SystemsAndControlsPreventInvestmentFundsFromNoneligibleInvestors
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetProvideRegularReportingToRegulator() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ProvideRegularReportingToRegulator
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetCreateOwnMarketingMaterial() ICIDDQ_YesNoNA {
	if x != nil {
		return x.CreateOwnMarketingMaterial
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetCreateOwnMarketingMaterialProceduresForCompliantMaterials() ICIDDQ_YesNoNA {
	if x != nil {
		return x.CreateOwnMarketingMaterialProceduresForCompliantMaterials
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetFundDocumentsMadeAvailable() ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution {
	if x != nil {
		return x.FundDocumentsMadeAvailable
	}
	return ICIDDQ_DistributionSuitabilityMarketing_FUND_DOCUMENT_DISTRIBUTION_UNSPECIFIED
}

func (x *ICIDDQ_DistributionSuitabilityMarketing) GetConfirmAdherenceToAifmdDirective() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ConfirmAdherenceToAifmdDirective
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

// Section 4. Oversight of Sub-Distribution
type ICIDDQ_OversightOfSubDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseOrIntendToUseSubDistributors                           ICIDDQ_YesNoNA `protobuf:"varint,1,opt,name=use_or_intend_to_use_sub_distributors,json=useOrIntendToUseSubDistributors,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"use_or_intend_to_use_sub_distributors,omitempty"`
	SubDistributorsRetail                                     bool           `protobuf:"varint,2,opt,name=sub_distributors_retail,json=subDistributorsRetail,proto3" json:"sub_distributors_retail,omitempty"`
	SubDistributorsFinancialAdviser                           bool           `protobuf:"varint,3,opt,name=sub_distributors_financial_adviser,json=subDistributorsFinancialAdviser,proto3" json:"sub_distributors_financial_adviser,omitempty"`
	SubDistributorsWealthManager                              bool           `protobuf:"varint,4,opt,name=sub_distributors_wealth_manager,json=subDistributorsWealthManager,proto3" json:"sub_distributors_wealth_manager,omitempty"`
	SubDistributorsFundPlatform                               bool           `protobuf:"varint,5,opt,name=sub_distributors_fund_platform,json=subDistributorsFundPlatform,proto3" json:"sub_distributors_fund_platform,omitempty"`
	SubDistributorsFamilyOffice                               bool           `protobuf:"varint,6,opt,name=sub_distributors_family_office,json=subDistributorsFamilyOffice,proto3" json:"sub_distributors_family_office,omitempty"`
	SubDistributorsPension                                    bool           `protobuf:"varint,7,opt,name=sub_distributors_pension,json=subDistributorsPension,proto3" json:"sub_distributors_pension,omitempty"`
	SubDistributorsMultiManager                               bool           `protobuf:"varint,8,opt,name=sub_distributors_multi_manager,json=subDistributorsMultiManager,proto3" json:"sub_distributors_multi_manager,omitempty"`
	SubDistributorsInsuranceWrap                              bool           `protobuf:"varint,9,opt,name=sub_distributors_insurance_wrap,json=subDistributorsInsuranceWrap,proto3" json:"sub_distributors_insurance_wrap,omitempty"`
	SubDistributorsCustodian                                  bool           `protobuf:"varint,10,opt,name=sub_distributors_custodian,json=subDistributorsCustodian,proto3" json:"sub_distributors_custodian,omitempty"`
	SubDistributorsOther                                      bool           `protobuf:"varint,11,opt,name=sub_distributors_other,json=subDistributorsOther,proto3" json:"sub_distributors_other,omitempty"`
	SubDistributorsOtherDescribe                              string         `protobuf:"bytes,12,opt,name=sub_distributors_other_describe,json=subDistributorsOtherDescribe,proto3" json:"sub_distributors_other_describe,omitempty"`
	EnsureAllSubDistributorsRegulated                         ICIDDQ_YesNoNA `protobuf:"varint,13,opt,name=ensure_all_sub_distributors_regulated,json=ensureAllSubDistributorsRegulated,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"ensure_all_sub_distributors_regulated,omitempty"`
	FormalContractsWithSubDistributors                        ICIDDQ_YesNoNA `protobuf:"varint,14,opt,name=formal_contracts_with_sub_distributors,json=formalContractsWithSubDistributors,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"formal_contracts_with_sub_distributors,omitempty"`
	FormalContractsWithSubDistributorsIncludeLiabilityClauses ICIDDQ_YesNoNA `protobuf:"varint,15,opt,name=formal_contracts_with_sub_distributors_include_liability_clauses,json=formalContractsWithSubDistributorsIncludeLiabilityClauses,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"formal_contracts_with_sub_distributors_include_liability_clauses,omitempty"`
	InitialDueDiligenceOnSubDistributors                      ICIDDQ_YesNoNA `protobuf:"varint,16,opt,name=initial_due_diligence_on_sub_distributors,json=initialDueDiligenceOnSubDistributors,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"initial_due_diligence_on_sub_distributors,omitempty"`
	InitialDueDiligenceOnSubDistributorsExplain               string         `protobuf:"bytes,17,opt,name=initial_due_diligence_on_sub_distributors_explain,json=initialDueDiligenceOnSubDistributorsExplain,proto3" json:"initial_due_diligence_on_sub_distributors_explain,omitempty"`
	OngoingMonitoringOfSubDistributers                        ICIDDQ_YesNoNA `protobuf:"varint,18,opt,name=ongoing_monitoring_of_sub_distributers,json=ongoingMonitoringOfSubDistributers,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"ongoing_monitoring_of_sub_distributers,omitempty"`
	SubDistributorsRequiredToCertifyMeetRequirements          ICIDDQ_YesNoNA `protobuf:"varint,19,opt,name=sub_distributors_required_to_certify_meet_requirements,json=subDistributorsRequiredToCertifyMeetRequirements,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"sub_distributors_required_to_certify_meet_requirements,omitempty"`
}

func (x *ICIDDQ_OversightOfSubDistribution) Reset() {
	*x = ICIDDQ_OversightOfSubDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_OversightOfSubDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_OversightOfSubDistribution) ProtoMessage() {}

func (x *ICIDDQ_OversightOfSubDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_OversightOfSubDistribution.ProtoReflect.Descriptor instead.
func (*ICIDDQ_OversightOfSubDistribution) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ICIDDQ_OversightOfSubDistribution) GetUseOrIntendToUseSubDistributors() ICIDDQ_YesNoNA {
	if x != nil {
		return x.UseOrIntendToUseSubDistributors
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsRetail() bool {
	if x != nil {
		return x.SubDistributorsRetail
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsFinancialAdviser() bool {
	if x != nil {
		return x.SubDistributorsFinancialAdviser
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsWealthManager() bool {
	if x != nil {
		return x.SubDistributorsWealthManager
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsFundPlatform() bool {
	if x != nil {
		return x.SubDistributorsFundPlatform
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsFamilyOffice() bool {
	if x != nil {
		return x.SubDistributorsFamilyOffice
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsPension() bool {
	if x != nil {
		return x.SubDistributorsPension
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsMultiManager() bool {
	if x != nil {
		return x.SubDistributorsMultiManager
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsInsuranceWrap() bool {
	if x != nil {
		return x.SubDistributorsInsuranceWrap
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsCustodian() bool {
	if x != nil {
		return x.SubDistributorsCustodian
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsOther() bool {
	if x != nil {
		return x.SubDistributorsOther
	}
	return false
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsOtherDescribe() string {
	if x != nil {
		return x.SubDistributorsOtherDescribe
	}
	return ""
}

func (x *ICIDDQ_OversightOfSubDistribution) GetEnsureAllSubDistributorsRegulated() ICIDDQ_YesNoNA {
	if x != nil {
		return x.EnsureAllSubDistributorsRegulated
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_OversightOfSubDistribution) GetFormalContractsWithSubDistributors() ICIDDQ_YesNoNA {
	if x != nil {
		return x.FormalContractsWithSubDistributors
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_OversightOfSubDistribution) GetFormalContractsWithSubDistributorsIncludeLiabilityClauses() ICIDDQ_YesNoNA {
	if x != nil {
		return x.FormalContractsWithSubDistributorsIncludeLiabilityClauses
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_OversightOfSubDistribution) GetInitialDueDiligenceOnSubDistributors() ICIDDQ_YesNoNA {
	if x != nil {
		return x.InitialDueDiligenceOnSubDistributors
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_OversightOfSubDistribution) GetInitialDueDiligenceOnSubDistributorsExplain() string {
	if x != nil {
		return x.InitialDueDiligenceOnSubDistributorsExplain
	}
	return ""
}

func (x *ICIDDQ_OversightOfSubDistribution) GetOngoingMonitoringOfSubDistributers() ICIDDQ_YesNoNA {
	if x != nil {
		return x.OngoingMonitoringOfSubDistributers
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_OversightOfSubDistribution) GetSubDistributorsRequiredToCertifyMeetRequirements() ICIDDQ_YesNoNA {
	if x != nil {
		return x.SubDistributorsRequiredToCertifyMeetRequirements
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

// Section 5: Legal and Regulatory Oversight
type ICIDDQ_LegalAndRegulatoryOversight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SanctionedForFailureToComplyWithRegulations        ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses `protobuf:"varint,1,opt,name=sanctioned_for_failure_to_comply_with_regulations,json=sanctionedForFailureToComplyWithRegulations,proto3,enum=standards.open.v1.ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses" json:"sanctioned_for_failure_to_comply_with_regulations,omitempty"`
	SanctionedForFailureToComplyWithRegulationsDetails string                                                 `protobuf:"bytes,2,opt,name=sanctioned_for_failure_to_comply_with_regulations_details,json=sanctionedForFailureToComplyWithRegulationsDetails,proto3" json:"sanctioned_for_failure_to_comply_with_regulations_details,omitempty"`
	SubjectToFineOrCriminalProsecution                 ICIDDQ_YesNoNA                                         `protobuf:"varint,3,opt,name=subject_to_fine_or_criminal_prosecution,json=subjectToFineOrCriminalProsecution,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"subject_to_fine_or_criminal_prosecution,omitempty"`
	SubjectToFineOrCriminalProsecutionExplain          string                                                 `protobuf:"bytes,4,opt,name=subject_to_fine_or_criminal_prosecution_explain,json=subjectToFineOrCriminalProsecutionExplain,proto3" json:"subject_to_fine_or_criminal_prosecution_explain,omitempty"`
	ImplementedTrainingAndDevelopmentSalesTeams        ICIDDQ_YesNoNA                                         `protobuf:"varint,5,opt,name=implemented_training_and_development_sales_teams,json=implementedTrainingAndDevelopmentSalesTeams,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"implemented_training_and_development_sales_teams,omitempty"`
	IndependentAuditFunction                           ICIDDQ_YesNoNA                                         `protobuf:"varint,6,opt,name=independent_audit_function,json=independentAuditFunction,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"independent_audit_function,omitempty"`
	MaterialAuditFindings                              ICIDDQ_YesNoNA                                         `protobuf:"varint,7,opt,name=material_audit_findings,json=materialAuditFindings,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"material_audit_findings,omitempty"`
	MaterialAuditFindingsResolved                      ICIDDQ_YesNoNA                                         `protobuf:"varint,8,opt,name=material_audit_findings_resolved,json=materialAuditFindingsResolved,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"material_audit_findings_resolved,omitempty"`
	DataProtectionPoliciesAndProcedures                ICIDDQ_YesNoNA                                         `protobuf:"varint,9,opt,name=data_protection_policies_and_procedures,json=dataProtectionPoliciesAndProcedures,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"data_protection_policies_and_procedures,omitempty"`
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) Reset() {
	*x = ICIDDQ_LegalAndRegulatoryOversight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_LegalAndRegulatoryOversight) ProtoMessage() {}

func (x *ICIDDQ_LegalAndRegulatoryOversight) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_LegalAndRegulatoryOversight.ProtoReflect.Descriptor instead.
func (*ICIDDQ_LegalAndRegulatoryOversight) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) GetSanctionedForFailureToComplyWithRegulations() ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses {
	if x != nil {
		return x.SanctionedForFailureToComplyWithRegulations
	}
	return ICIDDQ_LegalAndRegulatoryOversight_SANCTIONED_RESPONSES_UNSPECIFIED
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) GetSanctionedForFailureToComplyWithRegulationsDetails() string {
	if x != nil {
		return x.SanctionedForFailureToComplyWithRegulationsDetails
	}
	return ""
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) GetSubjectToFineOrCriminalProsecution() ICIDDQ_YesNoNA {
	if x != nil {
		return x.SubjectToFineOrCriminalProsecution
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) GetSubjectToFineOrCriminalProsecutionExplain() string {
	if x != nil {
		return x.SubjectToFineOrCriminalProsecutionExplain
	}
	return ""
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) GetImplementedTrainingAndDevelopmentSalesTeams() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ImplementedTrainingAndDevelopmentSalesTeams
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) GetIndependentAuditFunction() ICIDDQ_YesNoNA {
	if x != nil {
		return x.IndependentAuditFunction
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) GetMaterialAuditFindings() ICIDDQ_YesNoNA {
	if x != nil {
		return x.MaterialAuditFindings
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) GetMaterialAuditFindingsResolved() ICIDDQ_YesNoNA {
	if x != nil {
		return x.MaterialAuditFindingsResolved
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_LegalAndRegulatoryOversight) GetDataProtectionPoliciesAndProcedures() ICIDDQ_YesNoNA {
	if x != nil {
		return x.DataProtectionPoliciesAndProcedures
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

// Section 6: Risk Management and Controls
type ICIDDQ_RiskManagementAndControls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalRiskManagementFunction                         ICIDDQ_YesNoNA `protobuf:"varint,1,opt,name=internal_risk_management_function,json=internalRiskManagementFunction,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"internal_risk_management_function,omitempty"`
	InternalComplianceFunction                             ICIDDQ_YesNoNA `protobuf:"varint,2,opt,name=internal_compliance_function,json=internalComplianceFunction,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"internal_compliance_function,omitempty"`
	TestedControlsForSecuringClientData                    ICIDDQ_YesNoNA `protobuf:"varint,3,opt,name=tested_controls_for_securing_client_data,json=testedControlsForSecuringClientData,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"tested_controls_for_securing_client_data,omitempty"`
	BusinessContinuityPlan                                 ICIDDQ_YesNoNA `protobuf:"varint,4,opt,name=business_continuity_plan,json=businessContinuityPlan,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"business_continuity_plan,omitempty"`
	SystemsAndItInfrastructureAdequate                     ICIDDQ_YesNoNA `protobuf:"varint,5,opt,name=systems_and_it_infrastructure_adequate,json=systemsAndItInfrastructureAdequate,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"systems_and_it_infrastructure_adequate,omitempty"`
	OversightOnOutsourcedFunctions                         ICIDDQ_YesNoNA `protobuf:"varint,6,opt,name=oversight_on_outsourced_functions,json=oversightOnOutsourcedFunctions,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"oversight_on_outsourced_functions,omitempty"`
	AntiCorruptionComplianceProgram                        ICIDDQ_YesNoNA `protobuf:"varint,7,opt,name=anti_corruption_compliance_program,json=antiCorruptionComplianceProgram,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"anti_corruption_compliance_program,omitempty"`
	TaxEvasionControlsInPlace                              ICIDDQ_YesNoNA `protobuf:"varint,8,opt,name=tax_evasion_controls_in_place,json=taxEvasionControlsInPlace,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"tax_evasion_controls_in_place,omitempty"`
	ControlsForHandlingCustomerComplaints                  ICIDDQ_YesNoNA `protobuf:"varint,9,opt,name=controls_for_handling_customer_complaints,json=controlsForHandlingCustomerComplaints,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"controls_for_handling_customer_complaints,omitempty"`
	ControlsForHandlingCustomerComplaintsEscalation        ICIDDQ_YesNoNA `protobuf:"varint,10,opt,name=controls_for_handling_customer_complaints_escalation,json=controlsForHandlingCustomerComplaintsEscalation,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"controls_for_handling_customer_complaints_escalation,omitempty"`
	ApplicablePoliciesInPlaceCodeOfEthics                  bool           `protobuf:"varint,11,opt,name=applicable_policies_in_place_code_of_ethics,json=applicablePoliciesInPlaceCodeOfEthics,proto3" json:"applicable_policies_in_place_code_of_ethics,omitempty"`
	ApplicablePoliciesInPlaceAntiBribery                   bool           `protobuf:"varint,12,opt,name=applicable_policies_in_place_anti_bribery,json=applicablePoliciesInPlaceAntiBribery,proto3" json:"applicable_policies_in_place_anti_bribery,omitempty"`
	ApplicablePoliciesInPlaceGiftAndHospitality            bool           `protobuf:"varint,13,opt,name=applicable_policies_in_place_gift_and_hospitality,json=applicablePoliciesInPlaceGiftAndHospitality,proto3" json:"applicable_policies_in_place_gift_and_hospitality,omitempty"`
	ApplicablePoliciesInPlaceFraudPreventionAndResponse    bool           `protobuf:"varint,14,opt,name=applicable_policies_in_place_fraud_prevention_and_response,json=applicablePoliciesInPlaceFraudPreventionAndResponse,proto3" json:"applicable_policies_in_place_fraud_prevention_and_response,omitempty"`
	ApplicablePoliciesInPlaceConflictsOfInterest           bool           `protobuf:"varint,15,opt,name=applicable_policies_in_place_conflicts_of_interest,json=applicablePoliciesInPlaceConflictsOfInterest,proto3" json:"applicable_policies_in_place_conflicts_of_interest,omitempty"`
	ApplicablePoliciesInPlaceWhistleblowing                bool           `protobuf:"varint,16,opt,name=applicable_policies_in_place_whistleblowing,json=applicablePoliciesInPlaceWhistleblowing,proto3" json:"applicable_policies_in_place_whistleblowing,omitempty"`
	ApplicablePoliciesInPlaceDataProtection                bool           `protobuf:"varint,17,opt,name=applicable_policies_in_place_data_protection,json=applicablePoliciesInPlaceDataProtection,proto3" json:"applicable_policies_in_place_data_protection,omitempty"`
	ApplicablePoliciesInPlaceTaxEvasion                    bool           `protobuf:"varint,18,opt,name=applicable_policies_in_place_tax_evasion,json=applicablePoliciesInPlaceTaxEvasion,proto3" json:"applicable_policies_in_place_tax_evasion,omitempty"`
	ApplicablePoliciesInPlaceFatcaAndCrs                   bool           `protobuf:"varint,19,opt,name=applicable_policies_in_place_fatca_and_crs,json=applicablePoliciesInPlaceFatcaAndCrs,proto3" json:"applicable_policies_in_place_fatca_and_crs,omitempty"`
	ApplicablePoliciesInPlaceAml                           bool           `protobuf:"varint,20,opt,name=applicable_policies_in_place_aml,json=applicablePoliciesInPlaceAml,proto3" json:"applicable_policies_in_place_aml,omitempty"`
	ApplicablePoliciesInPlaceCybercrime                    bool           `protobuf:"varint,21,opt,name=applicable_policies_in_place_cybercrime,json=applicablePoliciesInPlaceCybercrime,proto3" json:"applicable_policies_in_place_cybercrime,omitempty"`
	ProcessToObtainSeniorManagementApprovalForHighRiskPeps ICIDDQ_YesNoNA `protobuf:"varint,22,opt,name=process_to_obtain_senior_management_approval_for_high_risk_peps,json=processToObtainSeniorManagementApprovalForHighRiskPeps,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"process_to_obtain_senior_management_approval_for_high_risk_peps,omitempty"`
	DealingsWithCustomersOnSanctionsLists                  ICIDDQ_YesNoNA `protobuf:"varint,23,opt,name=dealings_with_customers_on_sanctions_lists,json=dealingsWithCustomersOnSanctionsLists,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"dealings_with_customers_on_sanctions_lists,omitempty"`
	DealingsWithCustomersOnSanctionsListsNotifyFunds       ICIDDQ_YesNoNA `protobuf:"varint,24,opt,name=dealings_with_customers_on_sanctions_lists_notify_funds,json=dealingsWithCustomersOnSanctionsListsNotifyFunds,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"dealings_with_customers_on_sanctions_lists_notify_funds,omitempty"`
	ApplyParentCompanyStandardsOfAmlAndCtf                 ICIDDQ_YesNoNA `protobuf:"varint,25,opt,name=apply_parent_company_standards_of_aml_and_ctf,json=applyParentCompanyStandardsOfAmlAndCtf,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"apply_parent_company_standards_of_aml_and_ctf,omitempty"`
	ReportSuspiciousTransactions                           ICIDDQ_YesNoNA `protobuf:"varint,26,opt,name=report_suspicious_transactions,json=reportSuspiciousTransactions,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"report_suspicious_transactions,omitempty"`
	AmlKycRecordsMaintained                                ICIDDQ_YesNoNA `protobuf:"varint,27,opt,name=aml_kyc_records_maintained,json=amlKycRecordsMaintained,proto3,enum=standards.open.v1.ICIDDQ_YesNoNA" json:"aml_kyc_records_maintained,omitempty"`
}

func (x *ICIDDQ_RiskManagementAndControls) Reset() {
	*x = ICIDDQ_RiskManagementAndControls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_RiskManagementAndControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_RiskManagementAndControls) ProtoMessage() {}

func (x *ICIDDQ_RiskManagementAndControls) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_RiskManagementAndControls.ProtoReflect.Descriptor instead.
func (*ICIDDQ_RiskManagementAndControls) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ICIDDQ_RiskManagementAndControls) GetInternalRiskManagementFunction() ICIDDQ_YesNoNA {
	if x != nil {
		return x.InternalRiskManagementFunction
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetInternalComplianceFunction() ICIDDQ_YesNoNA {
	if x != nil {
		return x.InternalComplianceFunction
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetTestedControlsForSecuringClientData() ICIDDQ_YesNoNA {
	if x != nil {
		return x.TestedControlsForSecuringClientData
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetBusinessContinuityPlan() ICIDDQ_YesNoNA {
	if x != nil {
		return x.BusinessContinuityPlan
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetSystemsAndItInfrastructureAdequate() ICIDDQ_YesNoNA {
	if x != nil {
		return x.SystemsAndItInfrastructureAdequate
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetOversightOnOutsourcedFunctions() ICIDDQ_YesNoNA {
	if x != nil {
		return x.OversightOnOutsourcedFunctions
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetAntiCorruptionComplianceProgram() ICIDDQ_YesNoNA {
	if x != nil {
		return x.AntiCorruptionComplianceProgram
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetTaxEvasionControlsInPlace() ICIDDQ_YesNoNA {
	if x != nil {
		return x.TaxEvasionControlsInPlace
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetControlsForHandlingCustomerComplaints() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ControlsForHandlingCustomerComplaints
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetControlsForHandlingCustomerComplaintsEscalation() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ControlsForHandlingCustomerComplaintsEscalation
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceCodeOfEthics() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceCodeOfEthics
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceAntiBribery() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceAntiBribery
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceGiftAndHospitality() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceGiftAndHospitality
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceFraudPreventionAndResponse() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceFraudPreventionAndResponse
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceConflictsOfInterest() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceConflictsOfInterest
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceWhistleblowing() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceWhistleblowing
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceDataProtection() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceDataProtection
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceTaxEvasion() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceTaxEvasion
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceFatcaAndCrs() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceFatcaAndCrs
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceAml() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceAml
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplicablePoliciesInPlaceCybercrime() bool {
	if x != nil {
		return x.ApplicablePoliciesInPlaceCybercrime
	}
	return false
}

func (x *ICIDDQ_RiskManagementAndControls) GetProcessToObtainSeniorManagementApprovalForHighRiskPeps() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ProcessToObtainSeniorManagementApprovalForHighRiskPeps
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetDealingsWithCustomersOnSanctionsLists() ICIDDQ_YesNoNA {
	if x != nil {
		return x.DealingsWithCustomersOnSanctionsLists
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetDealingsWithCustomersOnSanctionsListsNotifyFunds() ICIDDQ_YesNoNA {
	if x != nil {
		return x.DealingsWithCustomersOnSanctionsListsNotifyFunds
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetApplyParentCompanyStandardsOfAmlAndCtf() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ApplyParentCompanyStandardsOfAmlAndCtf
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetReportSuspiciousTransactions() ICIDDQ_YesNoNA {
	if x != nil {
		return x.ReportSuspiciousTransactions
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

func (x *ICIDDQ_RiskManagementAndControls) GetAmlKycRecordsMaintained() ICIDDQ_YesNoNA {
	if x != nil {
		return x.AmlKycRecordsMaintained
	}
	return ICIDDQ_YES_NO_NA_UNSPECIFIED
}

// Section 7: Declarations and Execution
type ICIDDQ_DeclarationsAndExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title     string                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Signature *ICIDDQ_ElectronicSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Date      string                      `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Email     string                      `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Telephone string                      `protobuf:"bytes,6,opt,name=telephone,proto3" json:"telephone,omitempty"`
}

func (x *ICIDDQ_DeclarationsAndExecution) Reset() {
	*x = ICIDDQ_DeclarationsAndExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_DeclarationsAndExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_DeclarationsAndExecution) ProtoMessage() {}

func (x *ICIDDQ_DeclarationsAndExecution) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_DeclarationsAndExecution.ProtoReflect.Descriptor instead.
func (*ICIDDQ_DeclarationsAndExecution) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 6}
}

func (x *ICIDDQ_DeclarationsAndExecution) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ICIDDQ_DeclarationsAndExecution) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ICIDDQ_DeclarationsAndExecution) GetSignature() *ICIDDQ_ElectronicSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ICIDDQ_DeclarationsAndExecution) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ICIDDQ_DeclarationsAndExecution) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ICIDDQ_DeclarationsAndExecution) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

// Definition of DDQ Review information
type ICIDDQ_ReviewerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Review of Section 1: General Information
	GeneralInformation *ICIDDQ_ReviewerInformation_Review `protobuf:"bytes,1,opt,name=general_information,json=generalInformation,proto3" json:"general_information,omitempty"`
	// Review of Section 2: Business Model and Operations
	LegalAndRegulatoryReview *ICIDDQ_ReviewerInformation_Review `protobuf:"bytes,2,opt,name=legal_and_regulatory_review,json=legalAndRegulatoryReview,proto3" json:"legal_and_regulatory_review,omitempty"`
	// Review of Section 3: Distribution, Suitability, and Marketing
	DistributionSuitabilityMarketing *ICIDDQ_ReviewerInformation_Review `protobuf:"bytes,3,opt,name=distribution_suitability_marketing,json=distributionSuitabilityMarketing,proto3" json:"distribution_suitability_marketing,omitempty"`
	// Review of Section 4. Oversight of Sub-Distribution
	OversightOfSubDistribution *ICIDDQ_ReviewerInformation_Review `protobuf:"bytes,4,opt,name=oversight_of_sub_distribution,json=oversightOfSubDistribution,proto3" json:"oversight_of_sub_distribution,omitempty"`
	// Review of Section 5: Legal and Regulatory Oversight
	LegalAndRegulatoryOversight *ICIDDQ_ReviewerInformation_Review `protobuf:"bytes,5,opt,name=legal_and_regulatory_oversight,json=legalAndRegulatoryOversight,proto3" json:"legal_and_regulatory_oversight,omitempty"`
	// Review of Section 6: Risk Management and Controls
	RiskManagementAndControls *ICIDDQ_ReviewerInformation_Review `protobuf:"bytes,6,opt,name=risk_management_and_controls,json=riskManagementAndControls,proto3" json:"risk_management_and_controls,omitempty"`
	// Summary review and conclusion
	AggregateConclusion *ICIDDQ_ReviewerInformation_Review `protobuf:"bytes,7,opt,name=aggregate_conclusion,json=aggregateConclusion,proto3" json:"aggregate_conclusion,omitempty"`
	// Reviewer signature
	ReviewerSignature *ICIDDQ_ElectronicSignature `protobuf:"bytes,8,opt,name=reviewer_signature,json=reviewerSignature,proto3" json:"reviewer_signature,omitempty"`
}

func (x *ICIDDQ_ReviewerInformation) Reset() {
	*x = ICIDDQ_ReviewerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_ReviewerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_ReviewerInformation) ProtoMessage() {}

func (x *ICIDDQ_ReviewerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_ReviewerInformation.ProtoReflect.Descriptor instead.
func (*ICIDDQ_ReviewerInformation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 7}
}

func (x *ICIDDQ_ReviewerInformation) GetGeneralInformation() *ICIDDQ_ReviewerInformation_Review {
	if x != nil {
		return x.GeneralInformation
	}
	return nil
}

func (x *ICIDDQ_ReviewerInformation) GetLegalAndRegulatoryReview() *ICIDDQ_ReviewerInformation_Review {
	if x != nil {
		return x.LegalAndRegulatoryReview
	}
	return nil
}

func (x *ICIDDQ_ReviewerInformation) GetDistributionSuitabilityMarketing() *ICIDDQ_ReviewerInformation_Review {
	if x != nil {
		return x.DistributionSuitabilityMarketing
	}
	return nil
}

func (x *ICIDDQ_ReviewerInformation) GetOversightOfSubDistribution() *ICIDDQ_ReviewerInformation_Review {
	if x != nil {
		return x.OversightOfSubDistribution
	}
	return nil
}

func (x *ICIDDQ_ReviewerInformation) GetLegalAndRegulatoryOversight() *ICIDDQ_ReviewerInformation_Review {
	if x != nil {
		return x.LegalAndRegulatoryOversight
	}
	return nil
}

func (x *ICIDDQ_ReviewerInformation) GetRiskManagementAndControls() *ICIDDQ_ReviewerInformation_Review {
	if x != nil {
		return x.RiskManagementAndControls
	}
	return nil
}

func (x *ICIDDQ_ReviewerInformation) GetAggregateConclusion() *ICIDDQ_ReviewerInformation_Review {
	if x != nil {
		return x.AggregateConclusion
	}
	return nil
}

func (x *ICIDDQ_ReviewerInformation) GetReviewerSignature() *ICIDDQ_ElectronicSignature {
	if x != nil {
		return x.ReviewerSignature
	}
	return nil
}

// Definition of an Electronic Signature type
// https://ec.europa.eu/digital-building-blocks/wikis/display/DIGITAL/What+is+eSignature
type ICIDDQ_ElectronicSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full name of the signatory
	Fullname string `protobuf:"bytes,1,opt,name=fullname,proto3" json:"fullname,omitempty"`
	// image of signature as bytes
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// The timestamp when the object was signed
	SignedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=signed_time,json=signedTime,proto3" json:"signed_time,omitempty"`
}

func (x *ICIDDQ_ElectronicSignature) Reset() {
	*x = ICIDDQ_ElectronicSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_ElectronicSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_ElectronicSignature) ProtoMessage() {}

func (x *ICIDDQ_ElectronicSignature) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_ElectronicSignature.ProtoReflect.Descriptor instead.
func (*ICIDDQ_ElectronicSignature) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 8}
}

func (x *ICIDDQ_ElectronicSignature) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *ICIDDQ_ElectronicSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ICIDDQ_ElectronicSignature) GetSignedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SignedTime
	}
	return nil
}

type ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Main shareholder (UBO)
	MainShareholder string `protobuf:"bytes,1,opt,name=main_shareholder,json=mainShareholder,proto3" json:"main_shareholder,omitempty"`
	// Percentage controlled
	PercentageControlled float64 `protobuf:"fixed64,2,opt,name=percentage_controlled,json=percentageControlled,proto3" json:"percentage_controlled,omitempty"`
}

func (x *ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder) Reset() {
	*x = ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder) ProtoMessage() {}

func (x *ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder.ProtoReflect.Descriptor instead.
func (*ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder) GetMainShareholder() string {
	if x != nil {
		return x.MainShareholder
	}
	return ""
}

func (x *ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder) GetPercentageControlled() float64 {
	if x != nil {
		return x.PercentageControlled
	}
	return 0
}

type ICIDDQ_GeneralInformation_ControllingPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controlling person / Senior managing official
	ControllingPerson string `protobuf:"bytes,1,opt,name=controlling_person,json=controllingPerson,proto3" json:"controlling_person,omitempty"`
	// Percentage controlled
	PercentageControlled float64 `protobuf:"fixed64,2,opt,name=percentage_controlled,json=percentageControlled,proto3" json:"percentage_controlled,omitempty"`
}

func (x *ICIDDQ_GeneralInformation_ControllingPerson) Reset() {
	*x = ICIDDQ_GeneralInformation_ControllingPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_GeneralInformation_ControllingPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_GeneralInformation_ControllingPerson) ProtoMessage() {}

func (x *ICIDDQ_GeneralInformation_ControllingPerson) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_GeneralInformation_ControllingPerson.ProtoReflect.Descriptor instead.
func (*ICIDDQ_GeneralInformation_ControllingPerson) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *ICIDDQ_GeneralInformation_ControllingPerson) GetControllingPerson() string {
	if x != nil {
		return x.ControllingPerson
	}
	return ""
}

func (x *ICIDDQ_GeneralInformation_ControllingPerson) GetPercentageControlled() float64 {
	if x != nil {
		return x.PercentageControlled
	}
	return 0
}

// Definition of review information
type ICIDDQ_ReviewerInformation_Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Review status of the section
	ReviewStatus ICIDDQ_ReviewerInformation_Review_ReviewStatus `protobuf:"varint,1,opt,name=review_status,json=reviewStatus,proto3,enum=standards.open.v1.ICIDDQ_ReviewerInformation_Review_ReviewStatus" json:"review_status,omitempty"`
	// The reviewer's risk assessment
	RiskAssessment ICIDDQ_ReviewerInformation_Review_RiskAssessment `protobuf:"varint,2,opt,name=risk_assessment,json=riskAssessment,proto3,enum=standards.open.v1.ICIDDQ_ReviewerInformation_Review_RiskAssessment" json:"risk_assessment,omitempty"`
	// The weight to assign to the risk assessment (in decimal format)
	RiskWeighting float32 `protobuf:"fixed32,3,opt,name=risk_weighting,json=riskWeighting,proto3" json:"risk_weighting,omitempty"`
	// Comments and questions from the reviewer
	CommentsAndQuestions string `protobuf:"bytes,4,opt,name=comments_and_questions,json=commentsAndQuestions,proto3" json:"comments_and_questions,omitempty"`
	// Feedback from the provider from the reviewer
	ProviderFeedback string `protobuf:"bytes,5,opt,name=provider_feedback,json=providerFeedback,proto3" json:"provider_feedback,omitempty"`
	// Final comments from the reviewer
	FinalComments string `protobuf:"bytes,6,opt,name=final_comments,json=finalComments,proto3" json:"final_comments,omitempty"`
}

func (x *ICIDDQ_ReviewerInformation_Review) Reset() {
	*x = ICIDDQ_ReviewerInformation_Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICIDDQ_ReviewerInformation_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICIDDQ_ReviewerInformation_Review) ProtoMessage() {}

func (x *ICIDDQ_ReviewerInformation_Review) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_ICI_DDDQ_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICIDDQ_ReviewerInformation_Review.ProtoReflect.Descriptor instead.
func (*ICIDDQ_ReviewerInformation_Review) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *ICIDDQ_ReviewerInformation_Review) GetReviewStatus() ICIDDQ_ReviewerInformation_Review_ReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return ICIDDQ_ReviewerInformation_Review_STATUS_UNSPECIFIED
}

func (x *ICIDDQ_ReviewerInformation_Review) GetRiskAssessment() ICIDDQ_ReviewerInformation_Review_RiskAssessment {
	if x != nil {
		return x.RiskAssessment
	}
	return ICIDDQ_ReviewerInformation_Review_RISK_ASSESSMENT_UNSPECIFIED
}

func (x *ICIDDQ_ReviewerInformation_Review) GetRiskWeighting() float32 {
	if x != nil {
		return x.RiskWeighting
	}
	return 0
}

func (x *ICIDDQ_ReviewerInformation_Review) GetCommentsAndQuestions() string {
	if x != nil {
		return x.CommentsAndQuestions
	}
	return ""
}

func (x *ICIDDQ_ReviewerInformation_Review) GetProviderFeedback() string {
	if x != nil {
		return x.ProviderFeedback
	}
	return ""
}

func (x *ICIDDQ_ReviewerInformation_Review) GetFinalComments() string {
	if x != nil {
		return x.FinalComments
	}
	return ""
}

var File_standards_open_v1_ICI_DDDQ_proto protoreflect.FileDescriptor

var file_standards_open_v1_ICI_DDDQ_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x49, 0x43, 0x49, 0x5f, 0x44, 0x44, 0x44, 0x51, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x79, 0x65, 0x73, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf7, 0xa6, 0x02, 0x0a, 0x06, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x12, 0x82, 0x02, 0x0a,
	0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xa2, 0x01, 0x8a, 0x97, 0x22, 0x9d, 0x01,
	0x0a, 0x1e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x31, 0x3a, 0x20, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x01, 0x31, 0x52, 0x12, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x1d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43,
	0x49, 0x44, 0x44, 0x51, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x31, 0x8a, 0x97, 0x22, 0x2d, 0x0a, 0x28, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x32,
	0x3a, 0x20, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x01, 0x32, 0x52, 0x1a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x95,
	0x02, 0x0a, 0x22, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x8a, 0x01, 0x8a, 0x97, 0x22, 0x85, 0x01, 0x0a,
	0x33, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x2e, 0x20, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x4e, 0x2f, 0x41,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x69,
	0x72, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6c, 0x79, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x2e, 0x1a, 0x01, 0x33, 0x52, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0xf7, 0x01, 0x0a, 0x1d, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x7e, 0x8a, 0x97, 0x22, 0x7a, 0x0a, 0x28, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x34, 0x2e, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x53, 0x75, 0x62, 0x2d, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x1a, 0x01, 0x34, 0x52, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xae, 0x01, 0x0a, 0x1e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43,
	0x49, 0x44, 0x44, 0x51, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x32, 0x8a, 0x97, 0x22, 0x2e, 0x0a, 0x29, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x35, 0x3a, 0x20, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x1a, 0x01, 0x35, 0x52, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x12, 0xa6, 0x01, 0x0a, 0x1c, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49,
	0x44, 0x44, 0x51, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x42, 0x30, 0x8a,
	0x97, 0x22, 0x2c, 0x0a, 0x27, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x36, 0x3a, 0x20,
	0x52, 0x69, 0x73, 0x6b, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x1a, 0x01, 0x36, 0x52,
	0x19, 0x72, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x1a, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x30, 0x8a, 0x97, 0x22, 0x2c, 0x0a, 0x27, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x36, 0x3a, 0x20, 0x52, 0x69, 0x73, 0x6b, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x1a, 0x01, 0x36, 0x52, 0x18, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xd8, 0x01, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x76, 0x8a,
	0x97, 0x22, 0x72, 0x0a, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x20, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20,
	0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x72,
	0x69, 0x73, 0x6b, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61,
	0x63, 0x68, 0x1a, 0x01, 0x37, 0x52, 0x13, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb8, 0x1c, 0x0a, 0x12, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x59, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x8a, 0x97, 0x22, 0x36, 0x0a, 0x2f, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x2f, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72,
	0x79, 0x20, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x03, 0x31, 0x2e,
	0x31, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x8a, 0x97, 0x22, 0x19, 0x0a, 0x12,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x03, 0x31, 0x2e, 0x32, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x18, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x8a, 0x97,
	0x22, 0x1f, 0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x69,
	0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x03, 0x31, 0x2e,
	0x33, 0x52, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x49, 0x6e, 0x63, 0x6f,
	0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x10, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x26, 0x8a, 0x97, 0x22, 0x22, 0x0a, 0x18, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x03, 0x31, 0x2e, 0x34, 0x4a, 0x01, 0x31, 0x52, 0x0f,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0xb7, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x8a, 0x97, 0x22, 0x6f, 0x0a, 0x3e, 0x49,
	0x66, 0x20, 0x79, 0x65, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x2f, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x3f, 0x1a, 0x05, 0x31,
	0x2e, 0x34, 0x2e, 0x61, 0x22, 0x26, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1b, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc1, 0x01, 0x0a, 0x16, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8a, 0x01, 0x8a, 0x97, 0x22,
	0x85, 0x01, 0x0a, 0x54, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x61, 0x74,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x3f, 0x20, 0x50,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x1a, 0x05, 0x31, 0x2e, 0x34, 0x2e, 0x62, 0x22,
	0x26, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xe8, 0x01,
	0x0a, 0x1c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x74, 0x66, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xa6, 0x01, 0x8a, 0x97, 0x22, 0xa1, 0x01, 0x0a, 0x70, 0x44, 0x6f,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x6d, 0xe2, 0x80, 0x99, 0x73, 0x20,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x74, 0x69, 0xe2,
	0x80, 0x93, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x20, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x28, 0x41, 0x4d, 0x4c, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x6d, 0x20, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x43, 0x54, 0x46, 0x29, 0x3f, 0x1a, 0x05,
	0x31, 0x2e, 0x34, 0x2e, 0x63, 0x22, 0x26, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x19, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x6d, 0x6c, 0x43, 0x74, 0x66, 0x12, 0xf0, 0x01, 0x0a, 0x0c, 0x6d, 0x69, 0x66,
	0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x4e, 0x41, 0x42, 0xa9, 0x01, 0x8a, 0x97, 0x22, 0xa4, 0x01, 0x0a, 0x70, 0x44, 0x6f, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x6d, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x74, 0x69, 0xe2, 0x80, 0x93,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x20, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x20, 0x28, 0x41, 0x4d, 0x4c, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x6d, 0x20, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x43, 0x54, 0x46, 0x29, 0x3f, 0x1a, 0x05, 0x31, 0x2e,
	0x34, 0x2e, 0x64, 0x22, 0x26, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x32, 0x4a, 0x01, 0x32, 0x52, 0x0b,
	0x6d, 0x69, 0x66, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0xa9, 0x01, 0x0a, 0x1b,
	0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x46, 0x8a, 0x97, 0x22, 0x42, 0x0a, 0x38, 0x41, 0x72, 0x65, 0x20,
	0x79, 0x6f, 0x75, 0x20, 0x61, 0x20, 0x77, 0x68, 0x6f, 0x6c, 0x6c, 0x79, 0x20, 0x6f, 0x77, 0x6e,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x3f, 0x1a, 0x03, 0x31, 0x2e, 0x35, 0x4a, 0x01, 0x31, 0x52, 0x19, 0x73, 0x75,
	0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0xc1, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x72, 0x70,
	0x72, 0x6f, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x95, 0x01, 0x8a, 0x97, 0x22, 0x90, 0x01, 0x0a, 0x88, 0x01, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x28, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x20, 0x6f, 0x76, 0x65,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x65,
	0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x20,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x03, 0x31, 0x2e, 0x36, 0x52, 0x0f, 0x63, 0x6f, 0x72, 0x70,
	0x72, 0x6f, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x80, 0x03, 0x0a, 0x19,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x4e, 0x41, 0x42, 0xa0, 0x02, 0x8a, 0x97, 0x22, 0x9b, 0x02, 0x0a, 0x90, 0x02, 0x55, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x20, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x28, 0x55, 0x42, 0x4f, 0x29, 0x2e, 0x20, 0x44, 0x6f,
	0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6c, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79,
	0x20, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x32, 0x35, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x3f, 0x20, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x4e,
	0x2f, 0x41, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x66, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x1a, 0x03, 0x31,
	0x2e, 0x37, 0x4a, 0x01, 0x32, 0x52, 0x17, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0xe1,
	0x02, 0x0a, 0x1a, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x42, 0xd1, 0x01, 0x8a, 0x97, 0x22, 0xcc, 0x01, 0x0a, 0x92, 0x01, 0x49,
	0x66, 0x20, 0x79, 0x65, 0x73, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x20, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6c, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6c, 0x79, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x32, 0x35, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x20, 0x2f, 0x20, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x66, 0x69, 0x72, 0x6d, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x2e, 0x1a, 0x05, 0x31, 0x2e, 0x37, 0x2e, 0x61, 0x22, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x18, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x65, 0x75, 0x5f, 0x65, 0x65, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x62, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x4e, 0x41, 0x42, 0x54, 0x8a, 0x97, 0x22, 0x50, 0x0a, 0x44, 0x49, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x61, 0x6e, 0x20, 0x45, 0x55, 0x20, 0x2f, 0x20, 0x45,
	0x45, 0x41, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x42, 0x4f, 0x20, 0x69, 0x6e, 0x20, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x37, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x1a,
	0x05, 0x31, 0x2e, 0x38, 0x2e, 0x61, 0x4a, 0x01, 0x32, 0x52, 0x10, 0x65, 0x75, 0x45, 0x65, 0x61,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x55, 0x62, 0x61, 0x12, 0xe3, 0x02, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43,
	0x49, 0x44, 0x44, 0x51, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0xf1, 0x01, 0x8a, 0x97, 0x22, 0xec,
	0x01, 0x0a, 0xb9, 0x01, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x20, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x20, 0x28, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x74, 0x20,
	0x61, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x29, 0x2e, 0x1a, 0x05, 0x31,
	0x2e, 0x38, 0x2e, 0x62, 0x22, 0x27, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x75, 0x45, 0x65, 0x61, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x55, 0x62, 0x61, 0x3f, 0x32, 0x3a, 0x31, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x73, 0x12, 0x90, 0x02, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xdc, 0x01, 0x8a, 0x97, 0x22, 0xd7, 0x01, 0x0a, 0xcf, 0x01, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x20,
	0x59, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79,
	0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x1a, 0x03, 0x31, 0x2e, 0x39, 0x52,
	0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x1a, 0xe1, 0x01, 0x0a, 0x22, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x10, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x8a, 0x97, 0x22, 0x22, 0x0a, 0x20, 0x47, 0x69, 0x76,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x68,
	0x0a, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x33, 0x8a,
	0x97, 0x22, 0x2f, 0x0a, 0x2d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x14, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0xea, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x77,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x8a, 0x97, 0x22, 0x44,
	0x0a, 0x42, 0x47, 0x69, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x20, 0x2f, 0x20, 0x53, 0x65, 0x6e, 0x69,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x27, 0x8a, 0x97, 0x22, 0x23, 0x0a, 0x21, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0xb7, 0x42, 0x0a, 0x1a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xde, 0x02, 0x0a, 0x17, 0x61, 0x75, 0x6d, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa6, 0x02, 0x8a, 0x97, 0x22, 0xa1, 0x02, 0x0a, 0xcb,
	0x01, 0x57, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2c, 0x20, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x64, 0x65, 0x20, 0x6f,
	0x72, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20,
	0x61, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x20, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x3f, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x12, 0x4a, 0x54, 0x68,
	0x65, 0x20, 0x33, 0x2d, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x34, 0x32, 0x31, 0x37, 0x2e, 0x20, 0x46, 0x6f,
	0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x45, 0x55, 0x52, 0x2c, 0x20,
	0x55, 0x53, 0x44, 0x2c, 0x20, 0x47, 0x42, 0x50, 0x1a, 0x05, 0x32, 0x2e, 0x31, 0x2e, 0x61, 0x52,
	0x14, 0x61, 0x75, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xf4, 0x02, 0x0a, 0x09, 0x61, 0x75, 0x6d, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43,
	0x49, 0x44, 0x44, 0x51, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x75, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x97, 0x02, 0x8a, 0x97, 0x22, 0x92, 0x02,
	0x0a, 0xc4, 0x01, 0x57, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2c, 0x20, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x20, 0x69, 0x6e,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x20, 0x61, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3f, 0x20, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x61,
	0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x12, 0x42, 0x54, 0x68, 0x65, 0x20, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x32, 0x2e, 0x31, 0x2e, 0x61, 0x1a, 0x05, 0x32, 0x2e, 0x31,
	0x2e, 0x62, 0x52, 0x08, 0x61, 0x75, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xc1, 0x01, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44,
	0x51, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41,
	0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x54, 0x8a, 0x97, 0x22, 0x50,
	0x0a, 0x30, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x20, 0x68, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x6e,
	0x64, 0x2e, 0x12, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x05, 0x32, 0x2e, 0x32, 0x2e, 0x61,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x12, 0xd3, 0x01, 0x0a, 0x21, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x87, 0x01, 0x8a,
	0x97, 0x22, 0x82, 0x01, 0x0a, 0x25, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x79, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x12, 0x52, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x20, 0x69, 0x73, 0x20,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x1a,
	0x05, 0x32, 0x2e, 0x32, 0x2e, 0x62, 0x52, 0x1e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf0, 0x01, 0x0a, 0x27, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x9a, 0x01, 0x8a, 0x97, 0x22, 0x95, 0x01,
	0x0a, 0x8b, 0x01, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x29, 0x20, 0x6f,
	0x66, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20,
	0x2f, 0x20, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x1a, 0x05,
	0x32, 0x2e, 0x33, 0x2e, 0x61, 0x52, 0x22, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0xe4, 0x01, 0x0a, 0x22, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x96, 0x01, 0x8a, 0x97, 0x22, 0x91, 0x01, 0x0a, 0x87,
	0x01, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x29, 0x20, 0x6f, 0x66, 0x20,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x20, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x72, 0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x62, 0x52,
	0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x12, 0xdb, 0x01, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x93, 0x01, 0x8a, 0x97, 0x22,
	0x8e, 0x01, 0x0a, 0x84, 0x01, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x29,
	0x20, 0x6f, 0x66, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x57, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x63,
	0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x57, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xd8,
	0x01, 0x0a, 0x1e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x92, 0x01, 0x8a, 0x97, 0x22, 0x8d, 0x01, 0x0a,
	0x83, 0x01, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x29, 0x20, 0x6f, 0x66,
	0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x64, 0x52, 0x1b, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x75, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0xd8, 0x01, 0x0a, 0x1e, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x92, 0x01, 0x8a, 0x97, 0x22, 0x8d, 0x01, 0x0a, 0x83, 0x01, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x20, 0x50,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x28, 0x73, 0x29, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x3a, 0x20, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x65, 0x52, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x12, 0xe7, 0x01, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x9f,
	0x01, 0x8a, 0x97, 0x22, 0x9a, 0x01, 0x0a, 0x90, 0x01, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x28, 0x73, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62,
	0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x20,
	0x50, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x20, 0x2f,
	0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x66,
	0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x50, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0xe9,
	0x01, 0x0a, 0x1e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0xa3, 0x01, 0x8a, 0x97, 0x22, 0x9e, 0x01, 0x0a,
	0x94, 0x01, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x29, 0x20, 0x6f, 0x66,
	0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x2f, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x6f, 0x66,
	0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x67, 0x52, 0x1b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xdc, 0x01, 0x0a, 0x1f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x94, 0x01, 0x8a, 0x97, 0x22, 0x8f, 0x01, 0x0a, 0x85, 0x01, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x28, 0x73, 0x29, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x3a, 0x20, 0x20, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x77, 0x72, 0x61, 0x70, 0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x68, 0x52, 0x1c, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x12, 0xce, 0x01, 0x0a, 0x1a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8f,
	0x01, 0x8a, 0x97, 0x22, 0x8a, 0x01, 0x0a, 0x80, 0x01, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x28, 0x73, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62,
	0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x20,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x69,
	0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x12, 0xc7, 0x01, 0x0a, 0x18, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8c, 0x01,
	0x8a, 0x97, 0x22, 0x87, 0x01, 0x0a, 0x7e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x28,
	0x73, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f,
	0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73,
	0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20, 0x79, 0x6f,
	0x75, 0x72, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x20, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x65, 0x65, 0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x6a, 0x52, 0x16, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x65, 0x65, 0x12, 0xfe, 0x01, 0x0a, 0x2b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0xa0, 0x01, 0x8a, 0x97, 0x22,
	0x9b, 0x01, 0x0a, 0x91, 0x01, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x29,
	0x20, 0x6f, 0x66, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x20, 0x46, 0x75, 0x6c, 0x6c,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2d,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x1a, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x6b, 0x52, 0x26, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x44,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0xc1, 0x01, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8a, 0x01, 0x8a, 0x97, 0x22, 0x85, 0x01, 0x0a, 0x7c,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x28, 0x73, 0x29, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x1a, 0x05, 0x32, 0x2e,
	0x33, 0x2e, 0x6c, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0xc2, 0x01, 0x0a, 0x1f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x7b, 0x8a, 0x97, 0x22, 0x77, 0x0a, 0x29, 0x49, 0x66, 0x20, 0x54, 0x52,
	0x55, 0x45, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x2e, 0x33, 0x2e, 0x6c, 0x20, 0x27, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x27, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x1a, 0x0e, 0x32, 0x2e, 0x33, 0x2e, 0x6c, 0x2e, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x22, 0x3a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x3f, 0x74, 0x72, 0x75, 0x65, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0xf1,
	0x01, 0x0a, 0x36, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x7d, 0x8a, 0x97, 0x22, 0x79, 0x0a, 0x70, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x3a, 0x20, 0x20, 0x20, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x20, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x05, 0x32, 0x2e, 0x34, 0x2e, 0x61, 0x52, 0x32,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0xa3, 0x01, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x61, 0x8a, 0x97, 0x22, 0x5d, 0x0a,
	0x54, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x79, 0x6f, 0x75, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x1a, 0x05, 0x32, 0x2e, 0x34, 0x2e, 0x62, 0x52, 0x1a, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x12, 0xc8, 0x01, 0x0a, 0x29, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6f, 0x8a, 0x97,
	0x22, 0x6b, 0x0a, 0x62, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20,
	0x20, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x73, 0x20, 0x70, 0x65, 0x72,
	0x20, 0x4d, 0x69, 0x46, 0x49, 0x44, 0x1a, 0x05, 0x32, 0x2e, 0x34, 0x2e, 0x63, 0x52, 0x24, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69,
	0x66, 0x69, 0x64, 0x12, 0xb7, 0x02, 0x0a, 0x33, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x66, 0x69,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x42, 0xca, 0x01, 0x8a, 0x97, 0x22, 0xc5, 0x01, 0x0a, 0x6e, 0x50, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x20, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x20, 0x61, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x4d, 0x69, 0x46, 0x49, 0x44, 0x20, 0x2d, 0x20,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x07, 0x32, 0x2e, 0x34, 0x2e, 0x63,
	0x2e, 0x61, 0x22, 0x4a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x4f, 0x65, 0x72, 0x4d, 0x69,
	0x66, 0x69, 0x64, 0x3f, 0x74, 0x72, 0x75, 0x65, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x2d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x66, 0x69, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0xbe, 0x02,
	0x0a, 0x35, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x61,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0xcd, 0x01,
	0x8a, 0x97, 0x22, 0xc8, 0x01, 0x0a, 0x70, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x3a, 0x20, 0x20, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x73, 0x20,
	0x70, 0x65, 0x72, 0x20, 0x4d, 0x69, 0x46, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x49, 0x6e, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x08, 0x32, 0x2e, 0x34, 0x2e, 0x63, 0x2e, 0x61,
	0x62, 0x22, 0x4a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x4f, 0x65, 0x72, 0x4d, 0x69, 0x66,
	0x69, 0x64, 0x3f, 0x74, 0x72, 0x75, 0x65, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69,
	0x66, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x89,
	0x02, 0x0a, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0xa3, 0x01, 0x8a, 0x97, 0x22, 0x9e, 0x01,
	0x0a, 0x94, 0x01, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x20,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x2f,
	0x20, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e,
	0x2c, 0x20, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x29, 0x1a, 0x05, 0x32, 0x2e, 0x34, 0x2e, 0x64, 0x52, 0x2a,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x4f,
	0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x9e, 0x02, 0x0a, 0x44, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x42, 0x90, 0x01, 0x8a, 0x97, 0x22, 0x8b,
	0x01, 0x0a, 0x81, 0x01, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20,
	0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x4d, 0x69, 0x46, 0x49, 0x44, 0x20, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x05, 0x32, 0x2e, 0x34, 0x2e, 0x65, 0x52, 0x3d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x19,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x5f, 0x8a, 0x97, 0x22, 0x5b, 0x0a, 0x52, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x3a, 0x20, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x1a, 0x05, 0x32, 0x2e, 0x34, 0x2e, 0x66,
	0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0xcb, 0x01, 0x0a, 0x22, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7e, 0x8a, 0x97, 0x22, 0x7a, 0x0a, 0x29, 0x49, 0x66,
	0x20, 0x54, 0x52, 0x55, 0x45, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x2e, 0x34, 0x2e, 0x66, 0x20, 0x27,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x27, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x1a, 0x0e, 0x32, 0x2e, 0x34, 0x2e, 0x66, 0x2e, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x3d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x3f, 0x74, 0x72, 0x75, 0x65,
	0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0xc2, 0x01, 0x0a, 0x1b, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73,
	0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x81, 0x01,
	0x8a, 0x97, 0x22, 0x7d, 0x0a, 0x74, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x74,
	0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x3f, 0x3a, 0x20, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x20, 0x2f, 0x20, 0x4e, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x05, 0x32, 0x2e, 0x35, 0x2e,
	0x61, 0x52, 0x19, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0xe1, 0x01, 0x0a,
	0x21, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x94, 0x01, 0x8a, 0x97, 0x22, 0x8f, 0x01,
	0x0a, 0x85, 0x01, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x74, 0x79, 0x70, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x20, 0x74, 0x6f, 0x3f, 0x3a, 0x20, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x2f, 0x20, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x20, 0x2f, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x05, 0x32, 0x2e, 0x35, 0x2e, 0x62, 0x52,
	0x1f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0xa4, 0x01, 0x0a, 0x1a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x66, 0x8a, 0x97, 0x22, 0x62, 0x0a, 0x59, 0x57, 0x68, 0x61,
	0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x64,
	0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x3f, 0x3a,
	0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x1a, 0x05, 0x32, 0x2e, 0x35, 0x2e, 0x63, 0x52, 0x18, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0xce, 0x01, 0x0a, 0x23, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7f, 0x8a, 0x97, 0x22, 0x7b, 0x0a, 0x29, 0x49, 0x66, 0x20,
	0x54, 0x52, 0x55, 0x45, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x2e, 0x35, 0x2e, 0x63, 0x20, 0x27, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x27, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x1a, 0x0e, 0x32, 0x2e, 0x35, 0x2e, 0x63, 0x2e, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x3e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x3f, 0x74, 0x72, 0x75, 0x65,
	0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x2c, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x4e, 0x41, 0x42, 0x46, 0x8a, 0x97, 0x22, 0x42, 0x0a, 0x3b, 0x43, 0x61, 0x6e, 0x20, 0x79, 0x6f,
	0x75, 0x72, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x62, 0x79, 0x20, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x3f, 0x1a, 0x03, 0x32, 0x2e, 0x36, 0x52, 0x27, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0xcf, 0x01, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x83, 0x01, 0x8a, 0x97, 0x22, 0x7f, 0x0a, 0x21, 0x43, 0x61, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x20, 0x62, 0x79, 0x20, 0x6a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3f, 0x1a, 0x12, 0x32, 0x2e, 0x36, 0x2e, 0x61,
	0x2e, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xba, 0x01, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x42, 0x79, 0x8a, 0x97,
	0x22, 0x75, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x3f,
	0x1a, 0x0d, 0x32, 0x2e, 0x36, 0x2e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22,
	0x46, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x6e,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x19, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x24, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x81, 0x01, 0x8a, 0x97, 0x22, 0x7d, 0x0a, 0x26, 0x43, 0x61, 0x6e, 0x20, 0x79, 0x6f,
	0x75, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x20, 0x62, 0x79, 0x20, 0x6f, 0x61,
	0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x74, 0x65, 0x72, 0x3f,
	0x1a, 0x0b, 0x32, 0x2e, 0x36, 0x2e, 0x61, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x46, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0xee, 0x01, 0x0a, 0x2d, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x8c, 0x01, 0x8a, 0x97, 0x22, 0x87, 0x01, 0x0a, 0x27, 0x49, 0x66, 0x20, 0x54, 0x52, 0x55, 0x45,
	0x20, 0x74, 0x6f, 0x20, 0x32, 0x2e, 0x36, 0x2e, 0x61, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2c,
	0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x1a, 0x14, 0x32, 0x2e, 0x36, 0x2e, 0x63, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x46, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x3f, 0x74, 0x72, 0x75, 0x65, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x28,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x08, 0x41, 0x75, 0x6d,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x4d, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x35, 0x30,
	0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x47, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x35, 0x30, 0x5f, 0x4d, 0x49,
	0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x35, 0x30, 0x30, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x34, 0x0a, 0x30, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x5f, 0x35, 0x30, 0x30, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x35, 0x5f, 0x42, 0x49,
	0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x33, 0x0a, 0x2f, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x35, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f,
	0x31, 0x30, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x31, 0x30, 0x5f,
	0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x22, 0xa3, 0x01, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x53, 0x43, 0x43, 0x5f,
	0x4f, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4d, 0x4e, 0x49, 0x42, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x44, 0x49,
	0x41, 0x4e, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x1a,
	0xdc, 0x34, 0x0a, 0x20, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0xf9, 0x01, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x86, 0x01, 0x8a, 0x97, 0x22, 0x81, 0x01, 0x0a, 0x6b,
	0x44, 0x6f, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x20,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x3f, 0x1a, 0x04, 0x33, 0x2e, 0x31,
	0x2e, 0x2a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x1f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x12, 0xfa, 0x01, 0x0a, 0x24, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x4e, 0x41, 0x42, 0x85, 0x01, 0x8a, 0x97, 0x22, 0x80, 0x01, 0x0a, 0x6a, 0x44, 0x6f, 0x20, 0x79,
	0x6f, 0x75, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x3f, 0x1a, 0x04, 0x33, 0x2e, 0x32, 0x2e, 0x2a, 0x0c, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x44, 0x6f, 0x6d,
	0x69, 0x63, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xa6, 0x03,
	0x0a, 0x3a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x88, 0x02, 0x8a, 0x97, 0x22, 0x83, 0x02, 0x0a, 0xa3, 0x01,
	0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x2c, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x2f, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x3f, 0x1a, 0x05, 0x33, 0x2e, 0x32, 0x2e, 0x61, 0x22, 0x46, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x44, 0x6f,
	0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3f, 0x31,
	0x3a, 0x32, 0x2a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x34, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xac, 0x03, 0x0a, 0x57, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49,
	0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xd9, 0x01, 0x8a, 0x97,
	0x22, 0xd4, 0x01, 0x0a, 0xbd, 0x01, 0x44, 0x6f, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
	0x66, 0x69, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x73,
	0x6f, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x2c, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x20, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x29, 0x3f, 0x1a, 0x04, 0x33, 0x2e, 0x33, 0x2e, 0x2a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x4c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xe9, 0x02, 0x0a, 0x3f, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x4e, 0x41, 0x42, 0xc3, 0x01, 0x8a, 0x97, 0x22, 0xbe, 0x01, 0x0a, 0xa7, 0x01, 0x44, 0x6f, 0x65,
	0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x73, 0x65, 0x6c, 0x6c,
	0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20,
	0x6d, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x3f, 0x1a, 0x04, 0x33, 0x2e, 0x34, 0x2e, 0x2a, 0x0c, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x37, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x89, 0x03, 0x0a, 0x36, 0x72, 0x65, 0x6d, 0x75, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xf3, 0x01, 0x8a, 0x97, 0x22, 0xee, 0x01, 0x0a, 0xd7, 0x01,
	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x72, 0x65,
	0x6d, 0x75, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x20,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x63, 0x74, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73,
	0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3f, 0x1a, 0x04, 0x33, 0x2e, 0x35, 0x2e, 0x2a, 0x0c, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x30, 0x72, 0x65, 0x6d,
	0x75, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x6f, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xc4, 0x02,
	0x0a, 0x29, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xc8, 0x01, 0x8a, 0x97, 0x22, 0xc3, 0x01, 0x0a, 0xac, 0x01, 0x43,
	0x61, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x66, 0x65, 0x65, 0x73, 0x20, 0x6f, 0x72, 0x20,
	0x6e, 0x6f, 0x6e, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x20, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x73, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2f, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61, 0x77, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3f, 0x1a, 0x04, 0x33, 0x2e, 0x36,
	0x2e, 0x2a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x23, 0x61, 0x6c, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x4c, 0x61, 0x77, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xf4, 0x02, 0x0a, 0x34, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x75, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x61, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xe3, 0x01, 0x8a, 0x97, 0x22, 0xde, 0x01, 0x0a, 0xc7,
	0x01, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x6c, 0x61, 0x77, 0x2c, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x64,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x66, 0x75, 0x6e,
	0x64, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x66, 0x65, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x6e, 0x6f, 0x6e, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x20, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x73, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x2f, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3f, 0x1a, 0x04, 0x33, 0x2e, 0x37, 0x2e, 0x2a, 0x0c,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x2d, 0x64, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x61, 0x77, 0x12, 0xff, 0x02, 0x0a, 0x18,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e,
	0x41, 0x42, 0xa2, 0x02, 0x8a, 0x97, 0x22, 0x9d, 0x02, 0x0a, 0xb7, 0x01, 0x44, 0x6f, 0x20, 0x79,
	0x6f, 0x75, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x20, 0x6d, 0x65, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x2c, 0x20, 0x72, 0x69, 0x73, 0x6b, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x3f, 0x12, 0x4e, 0x59, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x6c, 0x61, 0x77, 0x2c, 0x20, 0x4e, 0x6f, 0x2c, 0x20, 0x4e, 0x2f, 0x41, 0x20, 0x28,
	0x66, 0x6f, 0x72, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x73, 0x29, 0x1a, 0x04, 0x33, 0x2e, 0x38, 0x2e, 0x2a, 0x0b, 0x53, 0x75, 0x69, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x53, 0x75,
	0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x12, 0xfd, 0x03,
	0x0a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44,
	0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xf4, 0x02, 0x8a, 0x97, 0x22,
	0xef, 0x02, 0x0a, 0xf3, 0x01, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x73, 0x20, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x69, 0x46,
	0x49, 0x44, 0x20, 0x49, 0x49, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65,
	0x61, 0x6e, 0x20, 0x4d, 0x69, 0x46, 0x49, 0x44, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x20, 0x28, 0x45, 0x4d, 0x54, 0x29, 0x3f, 0x12, 0x64, 0x46, 0x6f, 0x72, 0x20, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x4d, 0x69, 0x46, 0x49,
	0x44, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x28, 0x45, 0x4d, 0x54, 0x29,
	0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x65, 0x65, 0x20, 0x46, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x45, 0x78, 0x20, 0x61, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x66, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x65, 0x78, 0x2e, 0x65, 0x75, 0x2e, 0x1a, 0x04,
	0x33, 0x2e, 0x39, 0x2e, 0x2a, 0x0b, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x2a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x54, 0x6f, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xf5, 0x03,
	0x0a, 0x5d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x97, 0x02, 0x8a, 0x97, 0x22, 0x92, 0x02,
	0x0a, 0xaa, 0x01, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x33, 0x2e, 0x39,
	0x2c, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x2f, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3f, 0x1a, 0x04, 0x33,
	0x2e, 0x31, 0x30, 0x22, 0x4f, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x54, 0x6f,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73,
	0x3f, 0x31, 0x3a, 0x32, 0x2a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x51, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x54, 0x6f, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70,
	0x72, 0x69, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x4e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0xde, 0x02, 0x0a, 0x48, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x6e,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49,
	0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xa6, 0x01, 0x8a, 0x97,
	0x22, 0xa1, 0x01, 0x0a, 0x8a, 0x01, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76,
	0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x3f,
	0x1a, 0x04, 0x33, 0x2e, 0x31, 0x31, 0x2a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x40, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x4e, 0x6f, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x87, 0x02, 0x0a, 0x26, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44,
	0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x8f, 0x01, 0x8a, 0x97, 0x22,
	0x8a, 0x01, 0x0a, 0x74, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x4d, 0x69, 0x46, 0x49, 0x44, 0x20, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64,
	0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x20, 0x2f, 0x20,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x3f, 0x1a, 0x04, 0x33, 0x2e, 0x31, 0x32, 0x2a, 0x0c,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x85, 0x02, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49,
	0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x9e, 0x01, 0x8a, 0x97,
	0x22, 0x99, 0x01, 0x0a, 0x47, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x77, 0x6e, 0x20, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x79, 0x6f, 0x75,
	0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x3f, 0x12, 0x3d, 0x20, 0x59,
	0x65, 0x73, 0x2c, 0x20, 0x20, 0x4e, 0x6f, 0x20, 0x28, 0x75, 0x73, 0x65, 0x20, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x75, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x4e, 0x2f, 0x41, 0x1a, 0x04, 0x33, 0x2e, 0x31,
	0x33, 0x2a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0xcd, 0x03, 0x0a, 0x40, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xa4, 0x02, 0x8a, 0x97, 0x22, 0x9f, 0x02, 0x0a, 0xc5,
	0x01, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x33, 0x2e, 0x31, 0x33, 0x2c,
	0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x20, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61, 0x77, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x3f, 0x1a, 0x06, 0x33, 0x2e, 0x31, 0x33, 0x2e, 0x61, 0x22, 0x3f,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x3f, 0x31, 0x3a, 0x32, 0x2a,
	0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x39, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x87, 0x03, 0x0a, 0x1d, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x64, 0x65,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x75, 0x6e,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xee, 0x01, 0x8a, 0x97, 0x22, 0xe9, 0x01, 0x0a, 0x96, 0x01,
	0x41, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66,
	0x75, 0x6e, 0x64, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x64,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x2f, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73, 0x20, 0x61, 0x73, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61, 0x77, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x2c,
	0x20, 0x4b, 0x49, 0x49, 0x44, 0x73, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x29, 0x3f, 0x12, 0x3d, 0x20, 0x59, 0x65, 0x73, 0x2c, 0x20, 0x20, 0x4e,
	0x6f, 0x20, 0x28, 0x75, 0x73, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x29,
	0x2c, 0x20, 0x4e, 0x2f, 0x41, 0x1a, 0x04, 0x33, 0x2e, 0x31, 0x34, 0x2a, 0x09, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0xeb, 0x04, 0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x61,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x69, 0x66, 0x6d,
	0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xf7, 0x03, 0x8a, 0x97, 0x22, 0xf2, 0x03, 0x0a, 0xdc, 0x03, 0x49,
	0x66, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x69, 0x6e,
	0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75,
	0x72, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x75,
	0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x28, 0x41,
	0x49, 0x46, 0x73, 0x29, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x65, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x49, 0x46, 0x4d, 0x44, 0x20, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0xe2, 0x80, 0x9c, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x73, 0xe2, 0x80, 0x9d, 0x20, 0x2f, 0x20, 0xe2, 0x80, 0x9c, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0xe2, 0x80, 0x9d, 0x20,
	0x61, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x61, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x41, 0x49, 0x46, 0x4d, 0x44, 0x20, 0x28, 0x74, 0x68, 0x65, 0x20, 0x32,
	0x30, 0x31, 0x31, 0x2f, 0x2f, 0x36, 0x31, 0x2f, 0x45, 0x55, 0x20, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x20,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x29, 0x2e, 0x1a, 0x05, 0x33, 0x2e, 0x31,
	0x35, 0x2e, 0x2a, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x6f, 0x41, 0x69, 0x66, 0x6d, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x7c, 0x0a, 0x18, 0x46, 0x75, 0x6e, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x26,
	0x46, 0x55, 0x4e, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x59, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x03, 0x1a, 0x82,
	0x27, 0x0a, 0x1a, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75,
	0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd4, 0x01,
	0x0a, 0x25, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41,
	0x42, 0x61, 0x8a, 0x97, 0x22, 0x5d, 0x0a, 0x55, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x72, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x73, 0x75,
	0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x3f, 0x1a, 0x04, 0x34,
	0x2e, 0x31, 0x2e, 0x52, 0x1f, 0x75, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x91, 0x01, 0x8a, 0x97, 0x22, 0x8c, 0x01, 0x0a, 0x43,
	0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x62,
	0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x6f,
	0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x3f, 0x20, 0x52, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x20, 0x2f, 0x20, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x62,
	0x61, 0x6e, 0x6b, 0x1a, 0x05, 0x34, 0x2e, 0x32, 0x2e, 0x61, 0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x15, 0x73, 0x75, 0x62, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0xdb, 0x01, 0x0a, 0x22, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8d,
	0x01, 0x8a, 0x97, 0x22, 0x88, 0x01, 0x0a, 0x3f, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x6c,
	0x79, 0x20, 0x6f, 0x6e, 0x3f, 0x20, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20,
	0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x72, 0x1a, 0x05, 0x34, 0x2e, 0x32, 0x2e, 0x62, 0x22, 0x3e,
	0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1f,
	0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x76, 0x69, 0x73, 0x65, 0x72, 0x12,
	0xd2, 0x01, 0x0a, 0x1f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x77, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8a, 0x01, 0x8a, 0x97, 0x22, 0x85,
	0x01, 0x0a, 0x3c, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x3f,
	0x20, 0x57, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a,
	0x05, 0x34, 0x2e, 0x32, 0x2e, 0x63, 0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1c, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x57, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0xcf, 0x01, 0x0a, 0x1e, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x89, 0x01,
	0x8a, 0x97, 0x22, 0x84, 0x01, 0x0a, 0x3b, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x6c, 0x79,
	0x20, 0x6f, 0x6e, 0x3f, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x1a, 0x05, 0x34, 0x2e, 0x32, 0x2e, 0x64, 0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1b, 0x73, 0x75, 0x62, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0xcf, 0x01, 0x0a, 0x1e, 0x73, 0x75, 0x62, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x89, 0x01, 0x8a, 0x97, 0x22, 0x84, 0x01, 0x0a, 0x3b, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65,
	0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x3f, 0x20, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x1a, 0x05, 0x34, 0x2e, 0x32, 0x2e, 0x65, 0x22, 0x3e, 0x4f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1b, 0x73, 0x75, 0x62,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x18, 0x73, 0x75, 0x62,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x95, 0x01, 0x8a, 0x97,
	0x22, 0x90, 0x01, 0x0a, 0x47, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f,
	0x6e, 0x3f, 0x20, 0x50, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x20, 0x2f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x05, 0x34, 0x2e,
	0x32, 0x2e, 0x66, 0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66,
	0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f,
	0x31, 0x3a, 0x32, 0x52, 0x16, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xdf, 0x01, 0x0a, 0x1e,
	0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x99, 0x01, 0x8a, 0x97, 0x22, 0x94, 0x01, 0x0a, 0x4b, 0x57, 0x68,
	0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x79,
	0x6f, 0x75, 0x20, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x3f, 0x20, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x2f, 0x20, 0x46, 0x75, 0x6e, 0x64,
	0x20, 0x6f, 0x66, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x05, 0x34, 0x2e, 0x32, 0x2e, 0x67,
	0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32,
	0x52, 0x1b, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xd2, 0x01,
	0x0a, 0x1f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x72, 0x61,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8a, 0x01, 0x8a, 0x97, 0x22, 0x85, 0x01, 0x0a,
	0x3c, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75,
	0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x64,
	0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x3f, 0x20, 0x49,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x72, 0x61, 0x70, 0x1a, 0x05, 0x34,
	0x2e, 0x32, 0x2e, 0x68, 0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1c, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x12, 0xce, 0x01, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8f, 0x01, 0x8a, 0x97, 0x22, 0x8a, 0x01, 0x0a,
	0x41, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75,
	0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x64,
	0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x3f, 0x20, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x2f, 0x20, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x65, 0x65, 0x1a, 0x05, 0x34, 0x2e, 0x32, 0x2e, 0x69, 0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x18, 0x73, 0x75, 0x62, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64,
	0x69, 0x61, 0x6e, 0x12, 0xb7, 0x01, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x80, 0x01, 0x8a, 0x97, 0x22, 0x7c, 0x0a, 0x33, 0x57, 0x68, 0x61,
	0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f,
	0x75, 0x20, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x3f, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x1a, 0x05, 0x34, 0x2e, 0x32, 0x2e, 0x6a, 0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x14, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0xab, 0x01,
	0x0a, 0x1f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x64, 0x8a, 0x97, 0x22, 0x60, 0x0a, 0x12, 0x49,
	0x66, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x1a, 0x0e, 0x34, 0x2e, 0x32, 0x2e, 0x6a, 0x2e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x22, 0x3a, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75,
	0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x3f, 0x74, 0x72, 0x75, 0x65, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1c, 0x73,
	0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0xe2, 0x02, 0x0a, 0x25,
	0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xec,
	0x01, 0x8a, 0x97, 0x22, 0xe7, 0x01, 0x0a, 0x9e, 0x01, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x6e, 0x74, 0x69, 0xe2, 0x80, 0x93, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x20, 0x6c, 0x61, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x3f, 0x1a, 0x04, 0x34, 0x2e, 0x33, 0x2e, 0x22, 0x3e, 0x4f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x21, 0x65,
	0x6e, 0x73, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x12, 0xa1, 0x03, 0x0a, 0x26, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xa9, 0x02, 0x8a, 0x97, 0x22, 0xa4, 0x02, 0x0a, 0xdb, 0x01, 0x44,
	0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x6f,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6f,
	0x62, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3f, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x6f, 0x62, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x61,
	0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x1a, 0x04, 0x34, 0x2e, 0x34, 0x2e,
	0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32,
	0x52, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0xe5, 0x02, 0x0a, 0x40, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x4e, 0x41, 0x42, 0xbc, 0x01, 0x8a, 0x97, 0x22, 0xb7, 0x01, 0x0a, 0x6b, 0x49, 0x66, 0x20, 0x79,
	0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x34, 0x2e, 0x34, 0x2c, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x62, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x3f, 0x1a, 0x05, 0x34, 0x2e, 0x34, 0x2e, 0x61, 0x22, 0x41,
	0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75,
	0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a,
	0x32, 0x52, 0x39, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x69, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0xc2, 0x02, 0x0a,
	0x29, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x4e, 0x41, 0x42, 0xc5, 0x01, 0x8a, 0x97, 0x22, 0xc0, 0x01, 0x0a, 0x78, 0x44, 0x6f, 0x20,
	0x79, 0x6f, 0x75, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x6e, 0x20, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x64, 0x75, 0x65, 0x20, 0x64, 0x69, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61,
	0x20, 0x72, 0x69, 0x73, 0x6b, 0x20, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x3f, 0x1a, 0x04, 0x34, 0x2e, 0x35, 0x2e, 0x22, 0x3e, 0x4f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x24, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x65, 0x44, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x4f, 0x6e, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0xd8, 0x01, 0x0a, 0x31, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x75,
	0x65, 0x5f, 0x64, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x70, 0x8a,
	0x97, 0x22, 0x6c, 0x0a, 0x1d, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x20, 0x74, 0x6f, 0x20, 0x34, 0x2e,
	0x35, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x3a, 0x1a, 0x06, 0x34, 0x2e, 0x35, 0x2e, 0x61, 0x2e, 0x22, 0x43, 0x4f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x75,
	0x65, 0x44, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x6e, 0x53, 0x75, 0x62, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x32, 0x3a, 0x31, 0x52,
	0x2b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x65, 0x44, 0x69, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x4f, 0x6e, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0xa1, 0x03, 0x0a,
	0x26, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41,
	0x42, 0xa9, 0x02, 0x8a, 0x97, 0x22, 0xa4, 0x02, 0x0a, 0xdb, 0x01, 0x44, 0x6f, 0x20, 0x79, 0x6f,
	0x75, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6f, 0x62, 0x6c, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x3f, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x62,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f,
	0x72, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x1a, 0x04, 0x34, 0x2e, 0x36, 0x2e, 0x22, 0x3e, 0x4f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x22, 0x6f, 0x6e,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x72, 0x73,
	0x12, 0xf0, 0x02, 0x0a, 0x36, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xda, 0x01, 0x8a, 0x97, 0x22, 0xd5, 0x01, 0x0a, 0x8c, 0x01, 0x44,
	0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x73, 0x75,
	0x62, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x79, 0x20, 0x6d, 0x65, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66,
	0x69, 0x72, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x41, 0x4d, 0x4c, 0x20, 0x2f, 0x20, 0x4b, 0x59, 0x43, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x3f, 0x1a, 0x04, 0x34, 0x2e, 0x37,
	0x2e, 0x22, 0x3e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75,
	0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x3f, 0x31, 0x3a,
	0x32, 0x52, 0x30, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x4d, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0xa2, 0x19, 0x0a, 0x1b, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x12, 0xbd, 0x03, 0x0a, 0x31, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x49, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x89, 0x02, 0x8a, 0x97, 0x22,
	0x84, 0x02, 0x0a, 0xf9, 0x01, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x61, 0x73, 0x74, 0x20, 0x66, 0x69, 0x76, 0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0xe2, 0x80, 0x99, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x20,
	0x48, 0x61, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x62, 0x65,
	0x65, 0x6e, 0x20, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x74, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x6f, 0x72, 0x20, 0x6c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	0x6e, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x3f, 0x1a, 0x06,
	0x35, 0x2e, 0x31, 0x2e, 0x61, 0x2e, 0x52, 0x2b, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x90, 0x03, 0x0a, 0x39, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x98, 0x02, 0x8a, 0x97, 0x22, 0x93, 0x02, 0x0a,
	0xba, 0x01, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x35, 0x2e, 0x31, 0x2e,
	0x61, 0x2e, 0x31, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x69, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x20, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x61,
	0x6b, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x1a, 0x07, 0x35, 0x2e,
	0x31, 0x2e, 0x61, 0x2e, 0x31, 0x22, 0x4b, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3f, 0x31,
	0x3a, 0x32, 0x52, 0x32, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xa8, 0x03, 0x0a, 0x27, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49,
	0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xaf, 0x02, 0x8a, 0x97,
	0x22, 0xaa, 0x02, 0x0a, 0x9f, 0x02, 0x48, 0x61, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66,
	0x69, 0x72, 0x6d, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x66, 0x69, 0x6e, 0x65, 0x2c, 0x20,
	0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20,
	0x6f, 0x72, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x75, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x72, 0x69, 0x6d, 0x65,
	0x20, 0x6c, 0x61, 0x77, 0x73, 0x20, 0x2f, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x72, 0x20, 0x61, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x20,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x6d, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x3f, 0x1a, 0x06, 0x35, 0x2e, 0x31, 0x2e, 0x62, 0x2e, 0x52, 0x22, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x65, 0x4f, 0x72, 0x43, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xaf, 0x03, 0x0a, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xca, 0x02, 0x8a, 0x97,
	0x22, 0xc5, 0x02, 0x0a, 0xf5, 0x01, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x35, 0x2e, 0x31, 0x2e, 0x62, 0x2e, 0x31, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c,
	0x79, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x70, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2c, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x1a, 0x07, 0x35, 0x2e, 0x31,
	0x2e, 0x62, 0x2e, 0x31, 0x22, 0x42, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x65, 0x4f,
	0x72, 0x43, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x29, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x65, 0x4f, 0x72, 0x43, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x12, 0xbf, 0x02, 0x0a, 0x30, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e,
	0x41, 0x42, 0xb4, 0x01, 0x8a, 0x97, 0x22, 0xaf, 0x01, 0x0a, 0xa6, 0x01, 0x48, 0x61, 0x76, 0x65,
	0x20, 0x79, 0x6f, 0x75, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x20, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x73, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x6c, 0x61, 0x77,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3f, 0x1a, 0x04, 0x35, 0x2e, 0x32, 0x2e, 0x52, 0x2b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x8b, 0x02, 0x0a, 0x1a, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xa9, 0x01,
	0x8a, 0x97, 0x22, 0xa4, 0x01, 0x0a, 0x9b, 0x01, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f,
	0x72, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x6d, 0xe2, 0x80, 0x99, 0x73,
	0x20, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x6f, 0x6e, 0x20, 0x61, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x62, 0x61, 0x73,
	0x69, 0x73, 0x3f, 0x1a, 0x04, 0x35, 0x2e, 0x33, 0x2e, 0x52, 0x18, 0x69, 0x6e, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xed, 0x01, 0x0a, 0x17, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x91, 0x01, 0x8a, 0x97, 0x22, 0x8c, 0x01,
	0x0a, 0x83, 0x01, 0x57, 0x65, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x20, 0x61, 0x75, 0x64, 0x69, 0x74, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x65, 0x20, 0x79,
	0x65, 0x61, 0x72, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x3f, 0x1a, 0x04, 0x35, 0x2e, 0x34, 0x2e, 0x52, 0x15, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e,
	0x41, 0x42, 0x82, 0x01, 0x8a, 0x97, 0x22, 0x7e, 0x0a, 0x36, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x35, 0x2e, 0x34, 0x2e, 0x61, 0x2c, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x74, 0x20, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x3f,
	0x1a, 0x05, 0x35, 0x2e, 0x34, 0x2e, 0x61, 0x22, 0x3d, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x1d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0xa5, 0x02, 0x0a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44,
	0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xab, 0x01, 0x8a, 0x97, 0x22,
	0xa6, 0x01, 0x0a, 0x9d, 0x01, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0xe2,
	0x80, 0x99, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x61,
	0x63, 0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61,
	0x77, 0x3f, 0x1a, 0x04, 0x35, 0x2e, 0x35, 0x2e, 0x52, 0x23, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x22, 0x79, 0x0a,
	0x13, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x41, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x52,
	0x45, 0x4c, 0x45, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x4c, 0x59, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0xa3, 0x31, 0x0a, 0x19, 0x52, 0x69, 0x73,
	0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x3d, 0x8a, 0x97, 0x22, 0x39, 0x0a, 0x31, 0x44, 0x6f, 0x20,
	0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x72, 0x69, 0x73, 0x6b, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3f, 0x1a, 0x04,
	0x36, 0x2e, 0x31, 0x2e, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x69,
	0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9d, 0x01, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x38,
	0x8a, 0x97, 0x22, 0x34, 0x0a, 0x2c, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76,
	0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3f, 0x1a, 0x04, 0x36, 0x2e, 0x32, 0x2e, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbb, 0x01, 0x0a, 0x28, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44,
	0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x41, 0x8a, 0x97, 0x22, 0x3d,
	0x0a, 0x35, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x3f, 0x1a, 0x04, 0x36, 0x2e, 0x33, 0x2e, 0x52, 0x23, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0xd4, 0x01, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x77, 0x8a, 0x97, 0x22, 0x73, 0x0a, 0x6b,
	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x73, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0x70, 0x6c, 0x61,
	0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3f, 0x1a, 0x04, 0x36, 0x2e, 0x34,
	0x2e, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x8d, 0x02, 0x0a, 0x26, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x65, 0x71,
	0x75, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x95, 0x01,
	0x8a, 0x97, 0x22, 0x90, 0x01, 0x0a, 0x87, 0x01, 0x41, 0x72, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x49, 0x54, 0x20,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x61,
	0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x61, 0x66, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x2c, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3f, 0x1a,
	0x04, 0x36, 0x2e, 0x35, 0x2e, 0x52, 0x22, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x41, 0x6e,
	0x64, 0x49, 0x74, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x12, 0xb7, 0x02, 0x0a, 0x21, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xc8, 0x01, 0x8a, 0x97, 0x22, 0xc3, 0x01,
	0x0a, 0xba, 0x01, 0x49, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0xe2, 0x80, 0x94, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2c, 0x20, 0x72, 0x69, 0x73, 0x6b,
	0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0x6f, 0x72,
	0x20, 0x41, 0x4d, 0x4c, 0x20, 0x2f, 0x20, 0x43, 0x54, 0x46, 0xe2, 0x80, 0x94, 0x74, 0x6f, 0x20,
	0x61, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2c, 0x20, 0x64,
	0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x75, 0x65, 0x20,
	0x64, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x6f,
	0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x3f, 0x1a, 0x04, 0x36,
	0x2e, 0x36, 0x2e, 0x52, 0x1e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e,
	0x4f, 0x75, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xa8, 0x02, 0x0a, 0x22, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x4e, 0x41, 0x42, 0xb7, 0x01, 0x8a, 0x97, 0x22, 0xb2, 0x01, 0x0a, 0xa9, 0x01, 0x44, 0x6f,
	0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x68, 0x61, 0x76,
	0x65, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6e, 0x74, 0x69, 0x2d, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x6e, 0x74, 0x69, 0x2d, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x69, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x20, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x3f, 0x1a, 0x04, 0x36, 0x2e, 0x37, 0x2e, 0x52, 0x1f, 0x61,
	0x6e, 0x74, 0x69, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0xaa,
	0x01, 0x0a, 0x1d, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44,
	0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x45, 0x8a, 0x97, 0x22, 0x41, 0x0a,
	0x39, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x61,
	0x78, 0x20, 0x65, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x3f, 0x1a, 0x04, 0x36, 0x2e, 0x38, 0x2e,
	0x52, 0x19, 0x74, 0x61, 0x78, 0x45, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x29,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x4e, 0x41, 0x42, 0x4d, 0x8a, 0x97, 0x22, 0x49, 0x0a, 0x41, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75,
	0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x3f, 0x1a, 0x04, 0x36, 0x2e, 0x39,
	0x2e, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xca, 0x02, 0x0a, 0x34, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44,
	0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xb7, 0x01, 0x8a, 0x97, 0x22,
	0xb2, 0x01, 0x0a, 0x65, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x36, 0x2e,
	0x39, 0x2c, 0x20, 0x64, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x20, 0x2f,
	0x20, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x3f, 0x1a, 0x04, 0x36, 0x2e, 0x39, 0x2e, 0x22,
	0x43, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x3f, 0x31, 0x3a, 0x32, 0x52, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x46, 0x6f,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf6, 0x01, 0x0a, 0x2b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65,
	0x74, 0x68, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x99, 0x01, 0x8a, 0x97,
	0x22, 0x94, 0x01, 0x0a, 0x89, 0x01, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x79, 0x6f,
	0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a,
	0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x74, 0x68, 0x69, 0x63, 0x73, 0x20,
	0x2f, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x20, 0x28, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x20, 0x64, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x1a,
	0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x61, 0x52, 0x25, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x45, 0x74, 0x68, 0x69, 0x63, 0x73, 0x12, 0xce,
	0x01, 0x0a, 0x29, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x61, 0x6e, 0x74, 0x69, 0x5f, 0x62, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x75, 0x8a, 0x97, 0x22, 0x71, 0x0a, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x3a, 0x20, 0x41, 0x6e, 0x74, 0x69, 0x2d, 0x62, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x74, 0x69, 0x2d, 0x63, 0x6f, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x62, 0x52, 0x24, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x12,
	0xc5, 0x01, 0x0a, 0x31, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5d, 0x8a, 0x97, 0x22,
	0x59, 0x0a, 0x4f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x47, 0x69,
	0x66, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x1a, 0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x63, 0x52, 0x2b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x47, 0x69, 0x66, 0x74, 0x41, 0x6e, 0x64, 0x48, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xeb, 0x01, 0x0a, 0x3a, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x75, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x72, 0x8a, 0x97,
	0x22, 0x6e, 0x0a, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x20,
	0x46, 0x72, 0x61, 0x75, 0x64, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x72, 0x61, 0x75, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x64,
	0x52, 0x33, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x72, 0x61, 0x75, 0x64,
	0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x32, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x78, 0x8a, 0x97, 0x22, 0x74, 0x0a, 0x6a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x3a, 0x20, 0x20, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x28, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x29, 0x1a, 0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x65, 0x52, 0x2c, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73,
	0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x2b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x73,
	0x74, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x57, 0x8a, 0x97, 0x22, 0x53, 0x0a, 0x49, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x3a, 0x20, 0x57, 0x68, 0x69, 0x73, 0x74, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x1a, 0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x66, 0x52, 0x27, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x57, 0x68, 0x69, 0x73, 0x74, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x12, 0xcb, 0x01, 0x0a, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6c, 0x8a, 0x97, 0x22, 0x68, 0x0a,
	0x5e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76,
	0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x61,
	0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a,
	0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x67, 0x52, 0x27, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xab, 0x01, 0x0a, 0x28, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x54, 0x8a, 0x97, 0x22, 0x50, 0x0a, 0x46, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x54, 0x61, 0x78, 0x20, 0x65, 0x76, 0x61, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x68, 0x52, 0x23, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x78, 0x45, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xd1,
	0x01, 0x0a, 0x2a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x66, 0x61, 0x74, 0x63, 0x61, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x77, 0x8a, 0x97, 0x22, 0x73, 0x0a, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x46, 0x41, 0x54, 0x43, 0x41, 0x20, 0x6c, 0x61, 0x77, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x20, 0x28,
	0x43, 0x52, 0x53, 0x29, 0x1a, 0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x69, 0x52, 0x24, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x61, 0x74, 0x63, 0x61, 0x41, 0x6e, 0x64, 0x43,
	0x72, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x74, 0x8a,
	0x97, 0x22, 0x70, 0x0a, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x79, 0x6f, 0x75,
	0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20,
	0x41, 0x6e, 0x74, 0x69, 0xe2, 0x80, 0x93, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x20, 0x6c, 0x61, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x72, 0x69, 0x6d, 0x65, 0x1a, 0x06, 0x36, 0x2e, 0x31,
	0x30, 0x2e, 0x6a, 0x52, 0x1c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6d,
	0x6c, 0x12, 0xa9, 0x01, 0x0a, 0x27, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x63, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x53, 0x8a, 0x97, 0x22, 0x4f, 0x0a, 0x45, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x43, 0x79, 0x62, 0x65, 0x72, 0x63, 0x72, 0x69, 0x6d, 0x65,
	0x1a, 0x06, 0x36, 0x2e, 0x31, 0x30, 0x2e, 0x6b, 0x52, 0x23, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x43, 0x79, 0x62, 0x65, 0x72, 0x63, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x92, 0x02,
	0x0a, 0x3f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x65, 0x70,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44,
	0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x6e, 0x8a, 0x97, 0x22, 0x6a,
	0x0a, 0x61, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x20, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x68, 0x69, 0x67, 0x68, 0x20, 0x72, 0x69, 0x73, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x50,
	0x45, 0x50, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x3f, 0x1a, 0x05, 0x36, 0x2e, 0x31, 0x31, 0x2e, 0x52, 0x36, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x69, 0x6f,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x65,
	0x70, 0x73, 0x12, 0xda, 0x01, 0x0a, 0x2a, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x6f,
	0x6e, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44,
	0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0x5c, 0x8a, 0x97, 0x22, 0x58,
	0x0a, 0x4f, 0x44, 0x6f, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x69, 0x72, 0x6d,
	0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20, 0x6f, 0x6e, 0x20,
	0x61, 0x20, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x3f, 0x1a, 0x05, 0x36, 0x2e, 0x31, 0x32, 0x2e, 0x52, 0x25, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x4f,
	0x6e, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0xcb, 0x02, 0x0a, 0x37, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x73,
	0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xb4, 0x01, 0x8a, 0x97, 0x22, 0xaf, 0x01, 0x0a, 0x60, 0x49, 0x66,
	0x20, 0x79, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x36, 0x2e, 0x31, 0x32, 0x2c, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x6c, 0x61, 0x77, 0x3f, 0x1a, 0x06,
	0x36, 0x2e, 0x31, 0x32, 0x2e, 0x61, 0x22, 0x43, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x3f, 0x31, 0x3a, 0x32, 0x52, 0x30, 0x64, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x4f, 0x6e, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0xc6, 0x02,
	0x0a, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xc3, 0x01, 0x8a, 0x97, 0x22, 0xbe, 0x01,
	0x0a, 0xb4, 0x01, 0x46, 0x6f, 0x72, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x2c, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x41,
	0x4d, 0x4c, 0x20, 0x2f, 0x20, 0x43, 0x54, 0x46, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f,
	0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x3f, 0x1a, 0x05, 0x36, 0x2e, 0x31, 0x33, 0x2e, 0x52, 0x26,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x66, 0x41, 0x6d, 0x6c,
	0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x12, 0xed, 0x01, 0x0a, 0x1e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x4e, 0x41, 0x42, 0x83, 0x01, 0x8a, 0x97, 0x22, 0x7f, 0x0a, 0x76, 0x57, 0x69, 0x6c, 0x6c, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x76,
	0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x20, 0x2f, 0x20,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x6c, 0x61, 0x77,
	0x3f, 0x1a, 0x05, 0x36, 0x2e, 0x31, 0x34, 0x2e, 0x52, 0x1c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x95, 0x02, 0x0a, 0x1a, 0x61, 0x6d, 0x6c, 0x5f, 0x6b,
	0x79, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x42, 0xb4,
	0x01, 0x8a, 0x97, 0x22, 0xaf, 0x01, 0x0a, 0xa5, 0x01, 0x41, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x6f, 0x20, 0x41, 0x4d, 0x4c, 0x20, 0x2f, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63,
	0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x20, 0x6c, 0x61, 0x77, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x62, 0x65, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x6c, 0x61, 0x77, 0x3f, 0x1a, 0x05,
	0x36, 0x2e, 0x31, 0x35, 0x2e, 0x52, 0x17, 0x61, 0x6d, 0x6c, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x1a, 0xc2,
	0x02, 0x0a, 0x18, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x8a, 0x97, 0x22, 0x07, 0x0a,
	0x05, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x8a, 0x97, 0x22,
	0x08, 0x0a, 0x06, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x3a, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x5d, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x10, 0x8a, 0x97, 0x22, 0x0c, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x3a, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x8a,
	0x97, 0x22, 0x07, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x8a, 0x97, 0x22, 0x10, 0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x09,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x8a, 0x97, 0x22, 0x13, 0x0a, 0x11, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x1a, 0x9a, 0x10, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x13,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43,
	0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42,
	0x37, 0x8a, 0x97, 0x22, 0x33, 0x0a, 0x2c, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x31, 0x3a, 0x20,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x03, 0x37, 0x2e, 0x31, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb6, 0x01, 0x0a,
	0x1b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x41, 0x8a, 0x97, 0x22, 0x3d, 0x0a, 0x36,
	0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x3a, 0x20, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x03, 0x37, 0x2e, 0x32, 0x52, 0x18, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0xd0, 0x01, 0x0a, 0x22, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x4c, 0x8a, 0x97, 0x22, 0x48, 0x0a, 0x41,
	0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x3a, 0x20, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x1a, 0x03, 0x37, 0x2e, 0x33, 0x52, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0xba, 0x01, 0x0a, 0x1d, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x41, 0x8a, 0x97, 0x22, 0x3d, 0x0a, 0x36, 0x50, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x34, 0x2e, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x53, 0x75, 0x62, 0x2d, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x03, 0x37, 0x2e, 0x34, 0x52, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbd, 0x01, 0x0a, 0x1e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x42, 0x42, 0x8a, 0x97, 0x22, 0x3e, 0x0a, 0x37, 0x50, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x35, 0x3a, 0x20, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x1a, 0x03, 0x37, 0x2e, 0x35, 0x52, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41,
	0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x1c, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x42, 0x40, 0x8a, 0x97, 0x22, 0x3c, 0x0a, 0x35, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x36, 0x3a, 0x20, 0x52, 0x69, 0x73, 0x6b, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x1a,
	0x03, 0x37, 0x2e, 0x36, 0x52, 0x19, 0x72, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12,
	0x9b, 0x01, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x42, 0x32, 0x8a, 0x97, 0x22, 0x2e, 0x0a, 0x27, 0x50, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x03, 0x37, 0x2e, 0x37, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01,
	0x0a, 0x12, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x31, 0x8a, 0x97, 0x22, 0x2d, 0x0a,
	0x26, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x6f, 0x66, 0x66,
	0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x1a, 0x03, 0x37, 0x2e, 0x38, 0x52, 0x11, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0xee, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x66, 0x0a, 0x0d, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x41, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x6c, 0x0a, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x43, 0x49, 0x44, 0x44, 0x51, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x7c, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x34, 0x0a, 0x30, 0x41,
	0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x52, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22,
	0x5f, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x03,
	0x1a, 0x8c, 0x01, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x3a, 0x0a, 0x07, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x4e, 0x41, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x45,
	0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x59, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01,
	0x4e, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x41, 0x10, 0x03, 0x42, 0x3d, 0x5a, 0x3b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_standards_open_v1_ICI_DDDQ_proto_rawDescOnce sync.Once
	file_standards_open_v1_ICI_DDDQ_proto_rawDescData = file_standards_open_v1_ICI_DDDQ_proto_rawDesc
)

func file_standards_open_v1_ICI_DDDQ_proto_rawDescGZIP() []byte {
	file_standards_open_v1_ICI_DDDQ_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_ICI_DDDQ_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_ICI_DDDQ_proto_rawDescData)
	})
	return file_standards_open_v1_ICI_DDDQ_proto_rawDescData
}

var file_standards_open_v1_ICI_DDDQ_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_standards_open_v1_ICI_DDDQ_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_standards_open_v1_ICI_DDDQ_proto_goTypes = []interface{}{
	(ICIDDQ_YesNoNA)(0),                                                   // 0: standards.open.v1.ICIDDQ.YesNoNA
	(ICIDDQ_BusinessModelAndOperations_AumRange)(0),                       // 1: standards.open.v1.ICIDDQ.BusinessModelAndOperations.AumRange
	(ICIDDQ_BusinessModelAndOperations_TradingMethod)(0),                  // 2: standards.open.v1.ICIDDQ.BusinessModelAndOperations.TradingMethod
	(ICIDDQ_DistributionSuitabilityMarketing_FundDocumentDistribution)(0), // 3: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.FundDocumentDistribution
	(ICIDDQ_LegalAndRegulatoryOversight_SanctionedResponses)(0),           // 4: standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight.SanctionedResponses
	(ICIDDQ_ReviewerInformation_Review_ReviewStatus)(0),                   // 5: standards.open.v1.ICIDDQ.ReviewerInformation.Review.ReviewStatus
	(ICIDDQ_ReviewerInformation_Review_RiskAssessment)(0),                 // 6: standards.open.v1.ICIDDQ.ReviewerInformation.Review.RiskAssessment
	(*ICIDDQ)(nil),                                                       // 7: standards.open.v1.ICIDDQ
	(*ICIDDQ_GeneralInformation)(nil),                                    // 8: standards.open.v1.ICIDDQ.GeneralInformation
	(*ICIDDQ_BusinessModelAndOperations)(nil),                            // 9: standards.open.v1.ICIDDQ.BusinessModelAndOperations
	(*ICIDDQ_DistributionSuitabilityMarketing)(nil),                      // 10: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing
	(*ICIDDQ_OversightOfSubDistribution)(nil),                            // 11: standards.open.v1.ICIDDQ.OversightOfSubDistribution
	(*ICIDDQ_LegalAndRegulatoryOversight)(nil),                           // 12: standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight
	(*ICIDDQ_RiskManagementAndControls)(nil),                             // 13: standards.open.v1.ICIDDQ.RiskManagementAndControls
	(*ICIDDQ_DeclarationsAndExecution)(nil),                              // 14: standards.open.v1.ICIDDQ.DeclarationsAndExecution
	(*ICIDDQ_ReviewerInformation)(nil),                                   // 15: standards.open.v1.ICIDDQ.ReviewerInformation
	(*ICIDDQ_ElectronicSignature)(nil),                                   // 16: standards.open.v1.ICIDDQ.ElectronicSignature
	(*ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder)(nil), // 17: standards.open.v1.ICIDDQ.GeneralInformation.UltimateBeneficialOwnerShareholder
	(*ICIDDQ_GeneralInformation_ControllingPerson)(nil),                  // 18: standards.open.v1.ICIDDQ.GeneralInformation.ControllingPerson
	(*ICIDDQ_ReviewerInformation_Review)(nil),                            // 19: standards.open.v1.ICIDDQ.ReviewerInformation.Review
	(*timestamppb.Timestamp)(nil),                                        // 20: google.protobuf.Timestamp
}
var file_standards_open_v1_ICI_DDDQ_proto_depIdxs = []int32{
	8,  // 0: standards.open.v1.ICIDDQ.general_information:type_name -> standards.open.v1.ICIDDQ.GeneralInformation
	9,  // 1: standards.open.v1.ICIDDQ.business_model_and_operations:type_name -> standards.open.v1.ICIDDQ.BusinessModelAndOperations
	10, // 2: standards.open.v1.ICIDDQ.distribution_suitability_marketing:type_name -> standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing
	11, // 3: standards.open.v1.ICIDDQ.oversight_of_sub_distribution:type_name -> standards.open.v1.ICIDDQ.OversightOfSubDistribution
	12, // 4: standards.open.v1.ICIDDQ.legal_and_regulatory_oversight:type_name -> standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight
	13, // 5: standards.open.v1.ICIDDQ.risk_management_and_controls:type_name -> standards.open.v1.ICIDDQ.RiskManagementAndControls
	14, // 6: standards.open.v1.ICIDDQ.declarations_and_execution:type_name -> standards.open.v1.ICIDDQ.DeclarationsAndExecution
	15, // 7: standards.open.v1.ICIDDQ.reviewer_information:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation
	0,  // 8: standards.open.v1.ICIDDQ.GeneralInformation.regulated_entity:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 9: standards.open.v1.ICIDDQ.GeneralInformation.mifid_entity:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 10: standards.open.v1.ICIDDQ.GeneralInformation.subsidiary_regulated_entity:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 11: standards.open.v1.ICIDDQ.GeneralInformation.ultimate_beneficial_owner:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	17, // 12: standards.open.v1.ICIDDQ.GeneralInformation.ultimate_beneficial_owners:type_name -> standards.open.v1.ICIDDQ.GeneralInformation.UltimateBeneficialOwnerShareholder
	0,  // 13: standards.open.v1.ICIDDQ.GeneralInformation.eu_eea_provided_uba:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	18, // 14: standards.open.v1.ICIDDQ.GeneralInformation.controlling_persons:type_name -> standards.open.v1.ICIDDQ.GeneralInformation.ControllingPerson
	1,  // 15: standards.open.v1.ICIDDQ.BusinessModelAndOperations.aum_range:type_name -> standards.open.v1.ICIDDQ.BusinessModelAndOperations.AumRange
	2,  // 16: standards.open.v1.ICIDDQ.BusinessModelAndOperations.trading_methods:type_name -> standards.open.v1.ICIDDQ.BusinessModelAndOperations.TradingMethod
	0,  // 17: standards.open.v1.ICIDDQ.BusinessModelAndOperations.restrict_business_by_jurisdiction_or_product:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 18: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.process_for_fund_review_and_approval:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 19: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.distribute_outside_domiciled_country:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 20: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.distribute_outside_domiciled_country_adhere_to_regulations:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 21: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.offer_investment_funds_in_countries_other_than_where_registered_for_public_distribution:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 22: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.sells_funds_in_jurisdictions_subject_to_limitation_on_investors:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 23: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.remuneration_policy_to_align_incentives_with_investors:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 24: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.all_fees_comply_with_laws_and_regulations:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 25: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.disclose_to_investors_inducements_as_required_by_law:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 26: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.apply_a_suitability_test:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 27: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.controls_to_distribute_to_appropriate_investors:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 28: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.controls_to_distribute_to_appropriate_investors_prevent_sales_to_negative_mifid_target_market:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 29: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.systems_and_controls_prevent_investment_funds_from_noneligible_investors:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 30: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.provide_regular_reporting_to_regulator:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 31: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.create_own_marketing_material:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 32: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.create_own_marketing_material_procedures_for_compliant_materials:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	3,  // 33: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.fund_documents_made_available:type_name -> standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.FundDocumentDistribution
	0,  // 34: standards.open.v1.ICIDDQ.DistributionSuitabilityMarketing.confirm_adherence_to_aifmd_directive:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 35: standards.open.v1.ICIDDQ.OversightOfSubDistribution.use_or_intend_to_use_sub_distributors:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 36: standards.open.v1.ICIDDQ.OversightOfSubDistribution.ensure_all_sub_distributors_regulated:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 37: standards.open.v1.ICIDDQ.OversightOfSubDistribution.formal_contracts_with_sub_distributors:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 38: standards.open.v1.ICIDDQ.OversightOfSubDistribution.formal_contracts_with_sub_distributors_include_liability_clauses:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 39: standards.open.v1.ICIDDQ.OversightOfSubDistribution.initial_due_diligence_on_sub_distributors:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 40: standards.open.v1.ICIDDQ.OversightOfSubDistribution.ongoing_monitoring_of_sub_distributers:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 41: standards.open.v1.ICIDDQ.OversightOfSubDistribution.sub_distributors_required_to_certify_meet_requirements:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	4,  // 42: standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight.sanctioned_for_failure_to_comply_with_regulations:type_name -> standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight.SanctionedResponses
	0,  // 43: standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight.subject_to_fine_or_criminal_prosecution:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 44: standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight.implemented_training_and_development_sales_teams:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 45: standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight.independent_audit_function:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 46: standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight.material_audit_findings:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 47: standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight.material_audit_findings_resolved:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 48: standards.open.v1.ICIDDQ.LegalAndRegulatoryOversight.data_protection_policies_and_procedures:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 49: standards.open.v1.ICIDDQ.RiskManagementAndControls.internal_risk_management_function:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 50: standards.open.v1.ICIDDQ.RiskManagementAndControls.internal_compliance_function:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 51: standards.open.v1.ICIDDQ.RiskManagementAndControls.tested_controls_for_securing_client_data:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 52: standards.open.v1.ICIDDQ.RiskManagementAndControls.business_continuity_plan:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 53: standards.open.v1.ICIDDQ.RiskManagementAndControls.systems_and_it_infrastructure_adequate:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 54: standards.open.v1.ICIDDQ.RiskManagementAndControls.oversight_on_outsourced_functions:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 55: standards.open.v1.ICIDDQ.RiskManagementAndControls.anti_corruption_compliance_program:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 56: standards.open.v1.ICIDDQ.RiskManagementAndControls.tax_evasion_controls_in_place:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 57: standards.open.v1.ICIDDQ.RiskManagementAndControls.controls_for_handling_customer_complaints:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 58: standards.open.v1.ICIDDQ.RiskManagementAndControls.controls_for_handling_customer_complaints_escalation:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 59: standards.open.v1.ICIDDQ.RiskManagementAndControls.process_to_obtain_senior_management_approval_for_high_risk_peps:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 60: standards.open.v1.ICIDDQ.RiskManagementAndControls.dealings_with_customers_on_sanctions_lists:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 61: standards.open.v1.ICIDDQ.RiskManagementAndControls.dealings_with_customers_on_sanctions_lists_notify_funds:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 62: standards.open.v1.ICIDDQ.RiskManagementAndControls.apply_parent_company_standards_of_aml_and_ctf:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 63: standards.open.v1.ICIDDQ.RiskManagementAndControls.report_suspicious_transactions:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	0,  // 64: standards.open.v1.ICIDDQ.RiskManagementAndControls.aml_kyc_records_maintained:type_name -> standards.open.v1.ICIDDQ.YesNoNA
	16, // 65: standards.open.v1.ICIDDQ.DeclarationsAndExecution.signature:type_name -> standards.open.v1.ICIDDQ.ElectronicSignature
	19, // 66: standards.open.v1.ICIDDQ.ReviewerInformation.general_information:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation.Review
	19, // 67: standards.open.v1.ICIDDQ.ReviewerInformation.legal_and_regulatory_review:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation.Review
	19, // 68: standards.open.v1.ICIDDQ.ReviewerInformation.distribution_suitability_marketing:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation.Review
	19, // 69: standards.open.v1.ICIDDQ.ReviewerInformation.oversight_of_sub_distribution:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation.Review
	19, // 70: standards.open.v1.ICIDDQ.ReviewerInformation.legal_and_regulatory_oversight:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation.Review
	19, // 71: standards.open.v1.ICIDDQ.ReviewerInformation.risk_management_and_controls:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation.Review
	19, // 72: standards.open.v1.ICIDDQ.ReviewerInformation.aggregate_conclusion:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation.Review
	16, // 73: standards.open.v1.ICIDDQ.ReviewerInformation.reviewer_signature:type_name -> standards.open.v1.ICIDDQ.ElectronicSignature
	20, // 74: standards.open.v1.ICIDDQ.ElectronicSignature.signed_time:type_name -> google.protobuf.Timestamp
	5,  // 75: standards.open.v1.ICIDDQ.ReviewerInformation.Review.review_status:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation.Review.ReviewStatus
	6,  // 76: standards.open.v1.ICIDDQ.ReviewerInformation.Review.risk_assessment:type_name -> standards.open.v1.ICIDDQ.ReviewerInformation.Review.RiskAssessment
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_standards_open_v1_ICI_DDDQ_proto_init() }
func file_standards_open_v1_ICI_DDDQ_proto_init() {
	if File_standards_open_v1_ICI_DDDQ_proto != nil {
		return
	}
	file_standards_open_v1_yesno_proto_init()
	file_standards_open_v1_fieldOptionsExtentions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_GeneralInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_BusinessModelAndOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_DistributionSuitabilityMarketing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_OversightOfSubDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_LegalAndRegulatoryOversight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_RiskManagementAndControls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_DeclarationsAndExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_ReviewerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_ElectronicSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_GeneralInformation_UltimateBeneficialOwnerShareholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_GeneralInformation_ControllingPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_ICI_DDDQ_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICIDDQ_ReviewerInformation_Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_ICI_DDDQ_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_ICI_DDDQ_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_ICI_DDDQ_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_ICI_DDDQ_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_ICI_DDDQ_proto_msgTypes,
	}.Build()
	File_standards_open_v1_ICI_DDDQ_proto = out.File
	file_standards_open_v1_ICI_DDDQ_proto_rawDesc = nil
	file_standards_open_v1_ICI_DDDQ_proto_goTypes = nil
	file_standards_open_v1_ICI_DDDQ_proto_depIdxs = nil
}
