// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: RT00085Z9.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	_ "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RT00085Z9_YesNoExplain_Response int32

const (
	RT00085Z9_YesNoExplain_RESPONSE_UNSPECIFIED RT00085Z9_YesNoExplain_Response = 0
	RT00085Z9_YesNoExplain_YES                  RT00085Z9_YesNoExplain_Response = 1
	RT00085Z9_YesNoExplain_NO                   RT00085Z9_YesNoExplain_Response = 2
)

// Enum value maps for RT00085Z9_YesNoExplain_Response.
var (
	RT00085Z9_YesNoExplain_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT00085Z9_YesNoExplain_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT00085Z9_YesNoExplain_Response) Enum() *RT00085Z9_YesNoExplain_Response {
	p := new(RT00085Z9_YesNoExplain_Response)
	*p = x
	return p
}

func (x RT00085Z9_YesNoExplain_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT00085Z9_YesNoExplain_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT00085Z9_proto_enumTypes[0].Descriptor()
}

func (RT00085Z9_YesNoExplain_Response) Type() protoreflect.EnumType {
	return &file_RT00085Z9_proto_enumTypes[0]
}

func (x RT00085Z9_YesNoExplain_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT00085Z9_YesNoExplain_Response.Descriptor instead.
func (RT00085Z9_YesNoExplain_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 0, 0}
}

type RT00085Z9_YesExplainNo_Response int32

const (
	RT00085Z9_YesExplainNo_RESPONSE_UNSPECIFIED RT00085Z9_YesExplainNo_Response = 0
	RT00085Z9_YesExplainNo_YES                  RT00085Z9_YesExplainNo_Response = 1
	RT00085Z9_YesExplainNo_NO                   RT00085Z9_YesExplainNo_Response = 2
)

// Enum value maps for RT00085Z9_YesExplainNo_Response.
var (
	RT00085Z9_YesExplainNo_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT00085Z9_YesExplainNo_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT00085Z9_YesExplainNo_Response) Enum() *RT00085Z9_YesExplainNo_Response {
	p := new(RT00085Z9_YesExplainNo_Response)
	*p = x
	return p
}

func (x RT00085Z9_YesExplainNo_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT00085Z9_YesExplainNo_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT00085Z9_proto_enumTypes[1].Descriptor()
}

func (RT00085Z9_YesExplainNo_Response) Type() protoreflect.EnumType {
	return &file_RT00085Z9_proto_enumTypes[1]
}

func (x RT00085Z9_YesExplainNo_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT00085Z9_YesExplainNo_Response.Descriptor instead.
func (RT00085Z9_YesExplainNo_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 1, 0}
}

type RT00085Z9_YesNoAndExplain_Response int32

const (
	RT00085Z9_YesNoAndExplain_RESPONSE_UNSPECIFIED RT00085Z9_YesNoAndExplain_Response = 0
	RT00085Z9_YesNoAndExplain_YES                  RT00085Z9_YesNoAndExplain_Response = 1
	RT00085Z9_YesNoAndExplain_NO                   RT00085Z9_YesNoAndExplain_Response = 2
)

// Enum value maps for RT00085Z9_YesNoAndExplain_Response.
var (
	RT00085Z9_YesNoAndExplain_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT00085Z9_YesNoAndExplain_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT00085Z9_YesNoAndExplain_Response) Enum() *RT00085Z9_YesNoAndExplain_Response {
	p := new(RT00085Z9_YesNoAndExplain_Response)
	*p = x
	return p
}

func (x RT00085Z9_YesNoAndExplain_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT00085Z9_YesNoAndExplain_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT00085Z9_proto_enumTypes[2].Descriptor()
}

func (RT00085Z9_YesNoAndExplain_Response) Type() protoreflect.EnumType {
	return &file_RT00085Z9_proto_enumTypes[2]
}

func (x RT00085Z9_YesNoAndExplain_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT00085Z9_YesNoAndExplain_Response.Descriptor instead.
func (RT00085Z9_YesNoAndExplain_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Enumerations of ownership type
type RT00085Z9_EntityAndOwnership_OwnershipType int32

const (
	// The ownership type is unspecified
	RT00085Z9_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED RT00085Z9_EntityAndOwnership_OwnershipType = 0
	// Publicly Traded (25% of shares publicly traded)
	RT00085Z9_EntityAndOwnership_PUBLICLY_TRADED RT00085Z9_EntityAndOwnership_OwnershipType = 1
	// Member owned / mutual
	RT00085Z9_EntityAndOwnership_MEMBER_OR_MUTUAL RT00085Z9_EntityAndOwnership_OwnershipType = 2
	// Government or state owned by more than 25%
	RT00085Z9_EntityAndOwnership_GOVERNMENT_OR_STATE RT00085Z9_EntityAndOwnership_OwnershipType = 3
	// Privately owned
	RT00085Z9_EntityAndOwnership_PRIVATE RT00085Z9_EntityAndOwnership_OwnershipType = 4
)

// Enum value maps for RT00085Z9_EntityAndOwnership_OwnershipType.
var (
	RT00085Z9_EntityAndOwnership_OwnershipType_name = map[int32]string{
		0: "OWNERSHIP_TYPE_UNSPECIFIED",
		1: "PUBLICLY_TRADED",
		2: "MEMBER_OR_MUTUAL",
		3: "GOVERNMENT_OR_STATE",
		4: "PRIVATE",
	}
	RT00085Z9_EntityAndOwnership_OwnershipType_value = map[string]int32{
		"OWNERSHIP_TYPE_UNSPECIFIED": 0,
		"PUBLICLY_TRADED":            1,
		"MEMBER_OR_MUTUAL":           2,
		"GOVERNMENT_OR_STATE":        3,
		"PRIVATE":                    4,
	}
)

func (x RT00085Z9_EntityAndOwnership_OwnershipType) Enum() *RT00085Z9_EntityAndOwnership_OwnershipType {
	p := new(RT00085Z9_EntityAndOwnership_OwnershipType)
	*p = x
	return p
}

func (x RT00085Z9_EntityAndOwnership_OwnershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT00085Z9_EntityAndOwnership_OwnershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_RT00085Z9_proto_enumTypes[3].Descriptor()
}

func (RT00085Z9_EntityAndOwnership_OwnershipType) Type() protoreflect.EnumType {
	return &file_RT00085Z9_proto_enumTypes[3]
}

func (x RT00085Z9_EntityAndOwnership_OwnershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT00085Z9_EntityAndOwnership_OwnershipType.Descriptor instead.
func (RT00085Z9_EntityAndOwnership_OwnershipType) EnumDescriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 4, 0}
}

// Enumerations of financial identifiers
type RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_IDENTIFIER_UNSPECIFIED RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 0
	// FIGI (Financial Instrument Global Identifier). To look up the FIGI navigate to https://www.openfigi.com/.
	RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FIGI RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 1
	// PermID (Refinitiv Permanent Identifier). To look up the PermID navigate to https://permid.org/
	RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_PERM_ID RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 2
)

// Enum value maps for RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier.
var (
	RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier_name = map[int32]string{
		0: "IDENTIFIER_UNSPECIFIED",
		1: "FIGI",
		2: "PERM_ID",
	}
	RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"FIGI":                   1,
		"PERM_ID":                2,
	}
)

func (x RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Enum() *RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier {
	p := new(RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_RT00085Z9_proto_enumTypes[4].Descriptor()
}

func (RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_RT00085Z9_proto_enumTypes[4]
}

func (x RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier.Descriptor instead.
func (RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 4, 1, 0}
}

// Types of account holders
type RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType int32

const (
	// Beneficial owner unspecified
	RT00085Z9_EntityAndOwnership_SignificantShareholder_TYPE_UNSPECIFIED RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 0
	// The beneficial owner is a natural person
	RT00085Z9_EntityAndOwnership_SignificantShareholder_NATURAL_PERSON RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 1
	// The beneficial owner is a legal entity
	RT00085Z9_EntityAndOwnership_SignificantShareholder_LEGAL_ENTITY RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 2
)

// Enum value maps for RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType.
var (
	RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NATURAL_PERSON",
		2: "LEGAL_ENTITY",
	}
	RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"NATURAL_PERSON":   1,
		"LEGAL_ENTITY":     2,
	}
)

func (x RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Enum() *RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType {
	p := new(RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType)
	*p = x
	return p
}

func (x RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_RT00085Z9_proto_enumTypes[5].Descriptor()
}

func (RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Type() protoreflect.EnumType {
	return &file_RT00085Z9_proto_enumTypes[5]
}

func (x RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType.Descriptor instead.
func (RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) EnumDescriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 4, 2, 0}
}

// Wolfsberg Group Financial Crime Compliance Questionnaire (FCCQ) v1.1.
type RT00085Z9 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the financial institution
	FinancialInstitutionName string `protobuf:"bytes,1,opt,name=financial_institution_name,json=financialInstitutionName,proto3" json:"financial_institution_name,omitempty"`
	// The three letter ISO code of the country in which the LE is located
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	// Section 1. Information related to legal entity and its ownership
	EntityAndOwnership *RT00085Z9_EntityAndOwnership `protobuf:"bytes,3,opt,name=entity_and_ownership,json=entityAndOwnership,proto3" json:"entity_and_ownership,omitempty"`
	// Section 2. Information related to the AML, CTF and Sanctions program
	AmlAndCtfAndSanctionsProgram *RT00085Z9_AMLAndCTFAndSanctionsProgram `protobuf:"bytes,4,opt,name=aml_and_ctf_and_sanctions_program,json=amlAndCtfAndSanctionsProgram,proto3" json:"aml_and_ctf_and_sanctions_program,omitempty"`
	// Section 3. Information related to the Anti Bribery and Corruption section program
	AntiBriberyAndCorruption *RT00085Z9_AntiBriberyAndCorruption `protobuf:"bytes,5,opt,name=anti_bribery_and_corruption,json=antiBriberyAndCorruption,proto3" json:"anti_bribery_and_corruption,omitempty"`
	// Section 4. Information related to the AML, CTF and Sanctions Policies and Procedures
	AmlCtfAndSanctionsPoliciesAndProcedures *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures `protobuf:"bytes,7,opt,name=aml_ctf_and_sanctions_policies_and_procedures,json=amlCtfAndSanctionsPoliciesAndProcedures,proto3" json:"aml_ctf_and_sanctions_policies_and_procedures,omitempty"`
	// Section 5. Information related to KYC, CDD and EDD
	KycAndCddAndEdd *RT00085Z9_KYCAndCDDAndEDD `protobuf:"bytes,8,opt,name=kyc_and_cdd_and_edd,json=kycAndCddAndEdd,proto3" json:"kyc_and_cdd_and_edd,omitempty"`
	// Section 6. Information related to Monitoring and Reporting
	MonitoringAndReporting *RT00085Z9_MonitoringAndReporting `protobuf:"bytes,9,opt,name=monitoring_and_reporting,json=monitoringAndReporting,proto3" json:"monitoring_and_reporting,omitempty"`
	// Section 7. Information related to Payment Transparency
	PaymentTransparency *RT00085Z9_PaymentTransparency `protobuf:"bytes,10,opt,name=payment_transparency,json=paymentTransparency,proto3" json:"payment_transparency,omitempty"`
	// Section 8. Information related to Sanctions processes and procedures
	Sanctions *RT00085Z9_Sanctions `protobuf:"bytes,11,opt,name=sanctions,proto3" json:"sanctions,omitempty"`
	// Section 9. Information related to Training and Education
	TrainingAndEducation *RT00085Z9_TrainingAndEducation `protobuf:"bytes,12,opt,name=training_and_education,json=trainingAndEducation,proto3" json:"training_and_education,omitempty"`
	// Section 10. Audit information
	Audit *RT00085Z9_Audit `protobuf:"bytes,13,opt,name=audit,proto3" json:"audit,omitempty"`
}

func (x *RT00085Z9) Reset() {
	*x = RT00085Z9{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9) ProtoMessage() {}

func (x *RT00085Z9) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9.ProtoReflect.Descriptor instead.
func (*RT00085Z9) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0}
}

func (x *RT00085Z9) GetFinancialInstitutionName() string {
	if x != nil {
		return x.FinancialInstitutionName
	}
	return ""
}

func (x *RT00085Z9) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *RT00085Z9) GetEntityAndOwnership() *RT00085Z9_EntityAndOwnership {
	if x != nil {
		return x.EntityAndOwnership
	}
	return nil
}

func (x *RT00085Z9) GetAmlAndCtfAndSanctionsProgram() *RT00085Z9_AMLAndCTFAndSanctionsProgram {
	if x != nil {
		return x.AmlAndCtfAndSanctionsProgram
	}
	return nil
}

func (x *RT00085Z9) GetAntiBriberyAndCorruption() *RT00085Z9_AntiBriberyAndCorruption {
	if x != nil {
		return x.AntiBriberyAndCorruption
	}
	return nil
}

func (x *RT00085Z9) GetAmlCtfAndSanctionsPoliciesAndProcedures() *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures {
	if x != nil {
		return x.AmlCtfAndSanctionsPoliciesAndProcedures
	}
	return nil
}

func (x *RT00085Z9) GetKycAndCddAndEdd() *RT00085Z9_KYCAndCDDAndEDD {
	if x != nil {
		return x.KycAndCddAndEdd
	}
	return nil
}

func (x *RT00085Z9) GetMonitoringAndReporting() *RT00085Z9_MonitoringAndReporting {
	if x != nil {
		return x.MonitoringAndReporting
	}
	return nil
}

func (x *RT00085Z9) GetPaymentTransparency() *RT00085Z9_PaymentTransparency {
	if x != nil {
		return x.PaymentTransparency
	}
	return nil
}

func (x *RT00085Z9) GetSanctions() *RT00085Z9_Sanctions {
	if x != nil {
		return x.Sanctions
	}
	return nil
}

func (x *RT00085Z9) GetTrainingAndEducation() *RT00085Z9_TrainingAndEducation {
	if x != nil {
		return x.TrainingAndEducation
	}
	return nil
}

func (x *RT00085Z9) GetAudit() *RT00085Z9_Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

// Batch set of RT00085Z9 responses
type RT00085Z9Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*RT00085Z9 `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *RT00085Z9Batch) Reset() {
	*x = RT00085Z9Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9Batch) ProtoMessage() {}

func (x *RT00085Z9Batch) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9Batch.ProtoReflect.Descriptor instead.
func (*RT00085Z9Batch) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{1}
}

func (x *RT00085Z9Batch) GetResponse() []*RT00085Z9 {
	if x != nil {
		return x.Response
	}
	return nil
}

// Response where a NO requires further information
type RT00085Z9_YesNoExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT00085Z9_YesNoExplain_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT00085Z9_YesNoExplain_Response" json:"response,omitempty"`
	// Explanation if the answer is `NO`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT00085Z9_YesNoExplain) Reset() {
	*x = RT00085Z9_YesNoExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_YesNoExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_YesNoExplain) ProtoMessage() {}

func (x *RT00085Z9_YesNoExplain) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_YesNoExplain.ProtoReflect.Descriptor instead.
func (*RT00085Z9_YesNoExplain) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT00085Z9_YesNoExplain) GetResponse() RT00085Z9_YesNoExplain_Response {
	if x != nil {
		return x.Response
	}
	return RT00085Z9_YesNoExplain_RESPONSE_UNSPECIFIED
}

func (x *RT00085Z9_YesNoExplain) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Response where a YES requires further information
type RT00085Z9_YesExplainNo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT00085Z9_YesExplainNo_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT00085Z9_YesExplainNo_Response" json:"response,omitempty"`
	// Explanation if the answer is `YES`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT00085Z9_YesExplainNo) Reset() {
	*x = RT00085Z9_YesExplainNo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_YesExplainNo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_YesExplainNo) ProtoMessage() {}

func (x *RT00085Z9_YesExplainNo) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_YesExplainNo.ProtoReflect.Descriptor instead.
func (*RT00085Z9_YesExplainNo) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT00085Z9_YesExplainNo) GetResponse() RT00085Z9_YesExplainNo_Response {
	if x != nil {
		return x.Response
	}
	return RT00085Z9_YesExplainNo_RESPONSE_UNSPECIFIED
}

func (x *RT00085Z9_YesExplainNo) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Response where further information is required regardless of whether a Yes or No is provided
type RT00085Z9_YesNoAndExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT00085Z9_YesNoAndExplain_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT00085Z9_YesNoAndExplain_Response" json:"response,omitempty"`
	// Provide further information for the response
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT00085Z9_YesNoAndExplain) Reset() {
	*x = RT00085Z9_YesNoAndExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_YesNoAndExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_YesNoAndExplain) ProtoMessage() {}

func (x *RT00085Z9_YesNoAndExplain) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_YesNoAndExplain.ProtoReflect.Descriptor instead.
func (*RT00085Z9_YesNoAndExplain) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT00085Z9_YesNoAndExplain) GetResponse() RT00085Z9_YesNoAndExplain_Response {
	if x != nil {
		return x.Response
	}
	return RT00085Z9_YesNoAndExplain_RESPONSE_UNSPECIFIED
}

func (x *RT00085Z9_YesNoAndExplain) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Definition of a name and digital signature
type RT00085Z9_NameAndDigitalSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName  string     `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Date      *date.Date `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Signature string     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RT00085Z9_NameAndDigitalSignature) Reset() {
	*x = RT00085Z9_NameAndDigitalSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_NameAndDigitalSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_NameAndDigitalSignature) ProtoMessage() {}

func (x *RT00085Z9_NameAndDigitalSignature) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_NameAndDigitalSignature.ProtoReflect.Descriptor instead.
func (*RT00085Z9_NameAndDigitalSignature) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RT00085Z9_NameAndDigitalSignature) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *RT00085Z9_NameAndDigitalSignature) GetDate() *date.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *RT00085Z9_NameAndDigitalSignature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// Definition of Entity and Ownership section
type RT00085Z9_EntityAndOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q1. The full legal name of the entity
	LegalName string `protobuf:"bytes,1,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// Q2 List all foreign branches covered by this questionnaire.
	CoveredBranches []*RT00085Z9_EntityAndOwnership_Branch `protobuf:"bytes,2,rep,name=covered_branches,json=coveredBranches,proto3" json:"covered_branches,omitempty"`
	// Q3 The full legal (registered) address of the entity
	LegalAddress string `protobuf:"bytes,3,opt,name=legal_address,json=legalAddress,proto3" json:"legal_address,omitempty"`
	// Q4 The full primary business address of the entity
	BusinessAddress string `protobuf:"bytes,4,opt,name=business_address,json=businessAddress,proto3" json:"business_address,omitempty"`
	// Q5 The date in which the entity was incorporated
	DateOfIncorporation *date.Date `protobuf:"bytes,5,opt,name=date_of_incorporation,json=dateOfIncorporation,proto3" json:"date_of_incorporation,omitempty"`
	// Q6 Select the applicable ownership types and attach an ownership chart if available
	OwnershipTypes RT00085Z9_EntityAndOwnership_OwnershipType `protobuf:"varint,6,opt,name=ownership_types,json=ownershipTypes,proto3,enum=standards.open.v1.RT00085Z9_EntityAndOwnership_OwnershipType" json:"ownership_types,omitempty"`
	// Q6a1 If publicly traded, provide the primary security identifier the traded instrument
	SecurityIdentifier *RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier `protobuf:"bytes,7,opt,name=security_identifier,json=securityIdentifier,proto3" json:"security_identifier,omitempty"`
	// Q6d1 If privately owned, provide details of shareholders with a holding of 10%
	// or more up the ownership chain
	SignificantShareholders []*RT00085Z9_EntityAndOwnership_SignificantShareholder `protobuf:"bytes,8,rep,name=significant_shareholders,json=significantShareholders,proto3" json:"significant_shareholders,omitempty"`
	// If privately owned, has a beneficial ownership structure chart been attached?
	StructureChart *RT00085Z9_YesNoExplain `protobuf:"bytes,9,opt,name=structure_chart,json=structureChart,proto3" json:"structure_chart,omitempty"`
	// Q7 Provide the % of the entity's total shares composed of bearer shares (for example 10% enter as 0.1)
	PercentBearerShares float32 `protobuf:"fixed32,10,opt,name=percent_bearer_shares,json=percentBearerShares,proto3" json:"percent_bearer_shares,omitempty"`
	// Q8 Does the entity operate any of its branches, operate under an Offshore Banking License (OBL)?
	AnyBranchesUnderOffshoreBankingLicense bool `protobuf:"varint,11,opt,name=any_branches_under_offshore_banking_license,json=anyBranchesUnderOffshoreBankingLicense,proto3" json:"any_branches_under_offshore_banking_license,omitempty"`
	// Q8a, List any branches operate under offshore banking license (if TRUE to Q1.8)
	BranchesUnderOffshoreBankingLicense []*RT00085Z9_EntityAndOwnership_Branch `protobuf:"bytes,12,rep,name=branches_under_offshore_banking_license,json=branchesUnderOffshoreBankingLicense,proto3" json:"branches_under_offshore_banking_license,omitempty"`
}

func (x *RT00085Z9_EntityAndOwnership) Reset() {
	*x = RT00085Z9_EntityAndOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_EntityAndOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_EntityAndOwnership) ProtoMessage() {}

func (x *RT00085Z9_EntityAndOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_EntityAndOwnership.ProtoReflect.Descriptor instead.
func (*RT00085Z9_EntityAndOwnership) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RT00085Z9_EntityAndOwnership) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership) GetCoveredBranches() []*RT00085Z9_EntityAndOwnership_Branch {
	if x != nil {
		return x.CoveredBranches
	}
	return nil
}

func (x *RT00085Z9_EntityAndOwnership) GetLegalAddress() string {
	if x != nil {
		return x.LegalAddress
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership) GetBusinessAddress() string {
	if x != nil {
		return x.BusinessAddress
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership) GetDateOfIncorporation() *date.Date {
	if x != nil {
		return x.DateOfIncorporation
	}
	return nil
}

func (x *RT00085Z9_EntityAndOwnership) GetOwnershipTypes() RT00085Z9_EntityAndOwnership_OwnershipType {
	if x != nil {
		return x.OwnershipTypes
	}
	return RT00085Z9_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED
}

func (x *RT00085Z9_EntityAndOwnership) GetSecurityIdentifier() *RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier {
	if x != nil {
		return x.SecurityIdentifier
	}
	return nil
}

func (x *RT00085Z9_EntityAndOwnership) GetSignificantShareholders() []*RT00085Z9_EntityAndOwnership_SignificantShareholder {
	if x != nil {
		return x.SignificantShareholders
	}
	return nil
}

func (x *RT00085Z9_EntityAndOwnership) GetStructureChart() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.StructureChart
	}
	return nil
}

func (x *RT00085Z9_EntityAndOwnership) GetPercentBearerShares() float32 {
	if x != nil {
		return x.PercentBearerShares
	}
	return 0
}

func (x *RT00085Z9_EntityAndOwnership) GetAnyBranchesUnderOffshoreBankingLicense() bool {
	if x != nil {
		return x.AnyBranchesUnderOffshoreBankingLicense
	}
	return false
}

func (x *RT00085Z9_EntityAndOwnership) GetBranchesUnderOffshoreBankingLicense() []*RT00085Z9_EntityAndOwnership_Branch {
	if x != nil {
		return x.BranchesUnderOffshoreBankingLicense
	}
	return nil
}

// Definition of AML, CTF and Sanctions Program Section
type RT00085Z9_AMLAndCTFAndSanctionsProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q9a Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Appointed Officer with sufficient experience/expertise
	AppointedOfficerWithSufficientExperience *RT00085Z9_YesNoExplain `protobuf:"bytes,2,opt,name=appointed_officer_with_sufficient_experience,json=appointedOfficerWithSufficientExperience,proto3" json:"appointed_officer_with_sufficient_experience,omitempty"`
	// Q9b Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Cash reporting
	CashReporting *RT00085Z9_YesNoExplain `protobuf:"bytes,3,opt,name=cash_reporting,json=cashReporting,proto3" json:"cash_reporting,omitempty"`
	// Q9c Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): CDD
	CDD *RT00085Z9_YesNoExplain `protobuf:"bytes,4,opt,name=CDD,proto3" json:"CDD,omitempty"`
	// Q9d Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): EDD
	EDD *RT00085Z9_YesNoExplain `protobuf:"bytes,5,opt,name=EDD,proto3" json:"EDD,omitempty"`
	// Q9e Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Beneficial Ownership
	BeneficialOwnership *RT00085Z9_YesNoExplain `protobuf:"bytes,6,opt,name=beneficial_ownership,json=beneficialOwnership,proto3" json:"beneficial_ownership,omitempty"`
	// Q9f Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Independent Testing
	IndependentTesting *RT00085Z9_YesNoExplain `protobuf:"bytes,7,opt,name=independent_testing,json=independentTesting,proto3" json:"independent_testing,omitempty"`
	// Q9g Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Periodic Review
	PeriodicReview *RT00085Z9_YesNoExplain `protobuf:"bytes,8,opt,name=periodic_review,json=periodicReview,proto3" json:"periodic_review,omitempty"`
	// Q9h Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Policies and Procedures
	PoliciesAndProcedures *RT00085Z9_YesNoExplain `protobuf:"bytes,9,opt,name=policies_and_procedures,json=policiesAndProcedures,proto3" json:"policies_and_procedures,omitempty"`
	// Q9i Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Risk Assessment
	RiskAssessment *RT00085Z9_YesNoExplain `protobuf:"bytes,10,opt,name=risk_assessment,json=riskAssessment,proto3" json:"risk_assessment,omitempty"`
	// Q9j Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Sanctions
	Sanctions *RT00085Z9_YesNoExplain `protobuf:"bytes,11,opt,name=sanctions,proto3" json:"sanctions,omitempty"`
	// Q9k Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): PEP Screening
	PepScreening *RT00085Z9_YesNoExplain `protobuf:"bytes,12,opt,name=pep_screening,json=pepScreening,proto3" json:"pep_screening,omitempty"`
	// Q9l Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Adverse Information Screening
	AdverseInformationScreening *RT00085Z9_YesNoExplain `protobuf:"bytes,13,opt,name=adverse_information_screening,json=adverseInformationScreening,proto3" json:"adverse_information_screening,omitempty"`
	// Q9m Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Suspicious Activity Reporting
	SuspiciousActivityReporting *RT00085Z9_YesNoExplain `protobuf:"bytes,14,opt,name=suspicious_activity_reporting,json=suspiciousActivityReporting,proto3" json:"suspicious_activity_reporting,omitempty"`
	// Q9n Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Training and Education
	TrainingAndEducation *RT00085Z9_YesNoExplain `protobuf:"bytes,15,opt,name=training_and_education,json=trainingAndEducation,proto3" json:"training_and_education,omitempty"`
	// Q9o Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Transaction Monitoring
	TransactionMonitoring *RT00085Z9_YesNoExplain `protobuf:"bytes,16,opt,name=transaction_monitoring,json=transactionMonitoring,proto3" json:"transaction_monitoring,omitempty"`
	// Q10 Is the Entity's AML, CTF & Sanctions policy approved at least annually by the Board or equivalent Senior Management Committee? If NO, explain.
	PolicyApprovedAtLeastAnnuallyBySeniorCommittee *RT00085Z9_YesNoExplain `protobuf:"bytes,17,opt,name=policy_approved_at_least_annually_by_senior_committee,json=policyApprovedAtLeastAnnuallyBySeniorCommittee,proto3" json:"policy_approved_at_least_annually_by_senior_committee,omitempty"`
	// Q11 & Q11a. Does the Entity use third parties to carry out any components of its AML, CTF & Sanctions programme? If YES, explain.
	UseThirdParties *RT00085Z9_YesExplainNo `protobuf:"bytes,18,opt,name=use_third_parties,json=useThirdParties,proto3" json:"use_third_parties,omitempty"`
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) Reset() {
	*x = RT00085Z9_AMLAndCTFAndSanctionsProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_AMLAndCTFAndSanctionsProgram) ProtoMessage() {}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_AMLAndCTFAndSanctionsProgram.ProtoReflect.Descriptor instead.
func (*RT00085Z9_AMLAndCTFAndSanctionsProgram) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetAppointedOfficerWithSufficientExperience() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.AppointedOfficerWithSufficientExperience
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetCashReporting() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.CashReporting
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetCDD() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.CDD
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetEDD() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EDD
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetBeneficialOwnership() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.BeneficialOwnership
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetIndependentTesting() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.IndependentTesting
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetPeriodicReview() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PeriodicReview
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetPoliciesAndProcedures() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesAndProcedures
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetRiskAssessment() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.RiskAssessment
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetSanctions() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.Sanctions
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetPepScreening() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PepScreening
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetAdverseInformationScreening() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.AdverseInformationScreening
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetSuspiciousActivityReporting() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.SuspiciousActivityReporting
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetTrainingAndEducation() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.TrainingAndEducation
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetTransactionMonitoring() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.TransactionMonitoring
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetPolicyApprovedAtLeastAnnuallyBySeniorCommittee() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PolicyApprovedAtLeastAnnuallyBySeniorCommittee
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsProgram) GetUseThirdParties() *RT00085Z9_YesExplainNo {
	if x != nil {
		return x.UseThirdParties
	}
	return nil
}

// Definition of the Anti Bribery and Corruption section
type RT00085Z9_AntiBriberyAndCorruption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q12 Has the Entity documented policies and procedures consistent with applicable ABC regulations and
	// requirements to [reasonably] prevent, detect and report bribery and corruption? If NO, explain
	DocumentedAntiBriberyAndCorruptionPoliciesAndProcedures *RT00085Z9_YesNoExplain `protobuf:"bytes,1,opt,name=documented_anti_bribery_and_corruption_policies_and_procedures,json=documentedAntiBriberyAndCorruptionPoliciesAndProcedures,proto3" json:"documented_anti_bribery_and_corruption_policies_and_procedures,omitempty"`
	// Q13 Does the Entity's internal audit function or other independent third party cover ABC Policies and Procedures?
	// If NO, explain
	EntityInternalAuditFunctionCoversAbcPoliciesAndProcedures *RT00085Z9_YesNoExplain `protobuf:"bytes,17,opt,name=entity_internal_audit_function_covers_abc_policies_and_procedures,json=entityInternalAuditFunctionCoversAbcPoliciesAndProcedures,proto3" json:"entity_internal_audit_function_covers_abc_policies_and_procedures,omitempty"`
	// Q14a Does the Entity provide mandatory ABC training to::
	// Board and senior Committee Management.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee *RT00085Z9_YesNoExplain `protobuf:"bytes,18,opt,name=entity_provides_mandatory_abc_training_to_board_and_senior_management_committee,json=entityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee,proto3" json:"entity_provides_mandatory_abc_training_to_board_and_senior_management_committee,omitempty"`
	// Q14b Does the Entity provide mandatory ABC training to::
	// 1st Line of Defence.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToFirstLineOfDefence *RT00085Z9_YesNoExplain `protobuf:"bytes,19,opt,name=entity_provides_mandatory_abc_training_to_first_line_of_defence,json=entityProvidesMandatoryAbcTrainingToFirstLineOfDefence,proto3" json:"entity_provides_mandatory_abc_training_to_first_line_of_defence,omitempty"`
	// Q14c Does the Entity provide mandatory ABC training to::
	// 2nd Line of Defence.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToSecondLineOfDefence *RT00085Z9_YesNoExplain `protobuf:"bytes,20,opt,name=entity_provides_mandatory_abc_training_to_second_line_of_defence,json=entityProvidesMandatoryAbcTrainingToSecondLineOfDefence,proto3" json:"entity_provides_mandatory_abc_training_to_second_line_of_defence,omitempty"`
	// Q14d Does the Entity provide mandatory ABC training to::
	// 3rd Line of Defence.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToThirdLineOfDefence *RT00085Z9_YesNoExplain `protobuf:"bytes,21,opt,name=entity_provides_mandatory_abc_training_to_third_line_of_defence,json=entityProvidesMandatoryAbcTrainingToThirdLineOfDefence,proto3" json:"entity_provides_mandatory_abc_training_to_third_line_of_defence,omitempty"`
	// Q14e Does the Entity provide mandatory ABC training to::
	// 3rd parties to which specific compliance activities subject to ABC risk have been outsourced
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk *RT00085Z9_YesNoExplain `protobuf:"bytes,22,opt,name=entity_provides_mandatory_abc_training_to_third_parties_subject_to_abc_risk,json=entityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk,proto3" json:"entity_provides_mandatory_abc_training_to_third_parties_subject_to_abc_risk,omitempty"`
	// Q14f Does the Entity provide mandatory ABC training to::
	// Non-employed workers as appropriate (contractors/consultants)
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate *RT00085Z9_YesNoExplain `protobuf:"bytes,23,opt,name=entity_provides_mandatory_abc_training_to_non_employed_workers_as_appropriate,json=entityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate,proto3" json:"entity_provides_mandatory_abc_training_to_non_employed_workers_as_appropriate,omitempty"`
}

func (x *RT00085Z9_AntiBriberyAndCorruption) Reset() {
	*x = RT00085Z9_AntiBriberyAndCorruption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_AntiBriberyAndCorruption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_AntiBriberyAndCorruption) ProtoMessage() {}

func (x *RT00085Z9_AntiBriberyAndCorruption) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_AntiBriberyAndCorruption.ProtoReflect.Descriptor instead.
func (*RT00085Z9_AntiBriberyAndCorruption) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RT00085Z9_AntiBriberyAndCorruption) GetDocumentedAntiBriberyAndCorruptionPoliciesAndProcedures() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.DocumentedAntiBriberyAndCorruptionPoliciesAndProcedures
	}
	return nil
}

func (x *RT00085Z9_AntiBriberyAndCorruption) GetEntityInternalAuditFunctionCoversAbcPoliciesAndProcedures() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityInternalAuditFunctionCoversAbcPoliciesAndProcedures
	}
	return nil
}

func (x *RT00085Z9_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee
	}
	return nil
}

func (x *RT00085Z9_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToFirstLineOfDefence() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToFirstLineOfDefence
	}
	return nil
}

func (x *RT00085Z9_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToSecondLineOfDefence() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToSecondLineOfDefence
	}
	return nil
}

func (x *RT00085Z9_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToThirdLineOfDefence() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToThirdLineOfDefence
	}
	return nil
}

func (x *RT00085Z9_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk
	}
	return nil
}

func (x *RT00085Z9_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate
	}
	return nil
}

// Definition of the AML, CTF & Sanctions Policies & Procedures
type RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q15a Has the Entity documented policies and procedures consistent with applicable AML, CTF & Sanctions regulations and requirements to reasonably prevent, detect and report:
	// Money laundering
	// If NO, explain
	EntityHasDocumentedPoliciesAndProceduresForMoneyLaundering *RT00085Z9_YesNoExplain `protobuf:"bytes,1,opt,name=entity_has_documented_policies_and_procedures_for_money_laundering,json=entityHasDocumentedPoliciesAndProceduresForMoneyLaundering,proto3" json:"entity_has_documented_policies_and_procedures_for_money_laundering,omitempty"`
	// Q15b Has the Entity documented policies and procedures consistent with applicable AML, CTF & Sanctions regulations and requirements to reasonably prevent, detect and report:
	// Terrorist financing
	// If NO, explain
	EntityHasDocumentedPoliciesAndProceduresForTerroristFinancing *RT00085Z9_YesNoExplain `protobuf:"bytes,2,opt,name=entity_has_documented_policies_and_procedures_for_terrorist_financing,json=entityHasDocumentedPoliciesAndProceduresForTerroristFinancing,proto3" json:"entity_has_documented_policies_and_procedures_for_terrorist_financing,omitempty"`
	// Q15c Has the Entity documented policies and procedures consistent with applicable AML, CTF & Sanctions regulations and requirements to reasonably prevent, detect and report:
	// Sanctions violations
	// If NO, explain
	EntityHasDocumentedPoliciesAndProceduresForSanctionsViolations *RT00085Z9_YesNoExplain `protobuf:"bytes,3,opt,name=entity_has_documented_policies_and_procedures_for_sanctions_violations,json=entityHasDocumentedPoliciesAndProceduresForSanctionsViolations,proto3" json:"entity_has_documented_policies_and_procedures_for_sanctions_violations,omitempty"`
	// Q16a Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit the opening and keeping of anonymous and fictitious named accounts
	PoliciesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts *RT00085Z9_YesNoExplain `protobuf:"bytes,7,opt,name=policies_that_prohibit_opening_and_keeping_anonymous_and_fictitious_named_accounts,json=policiesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts,proto3" json:"policies_that_prohibit_opening_and_keeping_anonymous_and_fictitious_named_accounts,omitempty"`
	// Q16b Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit the opening and keeping of accounts for unlicensed banks and/or NBFIs
	PoliciesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis *RT00085Z9_YesNoExplain `protobuf:"bytes,8,opt,name=policies_that_prohibit_opening_accounts_for_unlicensed_banks_and_or_nbfis,json=policiesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis,proto3" json:"policies_that_prohibit_opening_accounts_for_unlicensed_banks_and_or_nbfis,omitempty"`
	// Q16c Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit dealing with other entities that provide banking services to unlicensed banks
	PoliciesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks *RT00085Z9_YesNoExplain `protobuf:"bytes,9,opt,name=policies_that_prohibit_dealing_with_entities_providing_banking_to_unlicensed_banks,json=policiesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks,proto3" json:"policies_that_prohibit_dealing_with_entities_providing_banking_to_unlicensed_banks,omitempty"`
	// Q16d Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit accounts/relationships with shell banks
	PoliciesThatProhibitAccountsOrRelationshipsWithShellBanks *RT00085Z9_YesNoExplain `protobuf:"bytes,10,opt,name=policies_that_prohibit_accounts_or_relationships_with_shell_banks,json=policiesThatProhibitAccountsOrRelationshipsWithShellBanks,proto3" json:"policies_that_prohibit_accounts_or_relationships_with_shell_banks,omitempty"`
	// Q16e Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit dealing with another entity that provides services to shell banks
	PoliciesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks *RT00085Z9_YesNoExplain `protobuf:"bytes,11,opt,name=policies_that_prohibit_dealing_with_another_entity_that_provides_services_to_shell_banks,json=policiesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks,proto3" json:"policies_that_prohibit_dealing_with_another_entity_that_provides_services_to_shell_banks,omitempty"`
	// Q16f Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit opening and keeping of accounts for Section 311 designated entities
	PoliciesThatProhibitAccountsForSection_311Entities *RT00085Z9_YesNoExplain `protobuf:"bytes,12,opt,name=policies_that_prohibit_accounts_for_section_311_entities,json=policiesThatProhibitAccountsForSection311Entities,proto3" json:"policies_that_prohibit_accounts_for_section_311_entities,omitempty"`
	// Q16g Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit opening and keeping of accounts for any of unlicensed/unregulated remittance agents, exchanges houses,
	// casa de cambio, bureaux de change or money transfer agents
	PoliciesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents *RT00085Z9_YesNoExplain `protobuf:"bytes,13,opt,name=policies_that_prohibit_accounts_for_unlicensed_or_regulated_remittance_agents_or_exchange_houses_or_money_transfer_agents,json=policiesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents,proto3" json:"policies_that_prohibit_accounts_for_unlicensed_or_regulated_remittance_agents_or_exchange_houses_or_money_transfer_agents,omitempty"`
	// Q16h Does the Entity have policies and procedures that (If NO, explain):
	// Assess the risks of relationships with domestic and foreign PEPs, including their family and close associates
	PoliciesThatAssessRisksOfRelationshipsWithPeps *RT00085Z9_YesNoExplain `protobuf:"bytes,14,opt,name=policies_that_assess_risks_of_relationships_with_peps,json=policiesThatAssessRisksOfRelationshipsWithPeps,proto3" json:"policies_that_assess_risks_of_relationships_with_peps,omitempty"`
	// Q16i Does the Entity have policies and procedures that (If NO, explain):
	// Define escalation processes for financial crime risk issues
	PoliciesThatDefineEscalationProcessForFinancialCrime *RT00085Z9_YesNoExplain `protobuf:"bytes,15,opt,name=policies_that_define_escalation_process_for_financial_crime,json=policiesThatDefineEscalationProcessForFinancialCrime,proto3" json:"policies_that_define_escalation_process_for_financial_crime,omitempty"`
	// Q16j Does the Entity have policies and procedures that (If NO, explain):
	// Specify how potentially suspicious activity identified by employees is to be escalated and investigated
	PoliciesThatSpecifyHowSuspiciousActivitiesAreEscalated *RT00085Z9_YesNoExplain `protobuf:"bytes,17,opt,name=policies_that_specify_how_suspicious_activities_are_escalated,json=policiesThatSpecifyHowSuspiciousActivitiesAreEscalated,proto3" json:"policies_that_specify_how_suspicious_activities_are_escalated,omitempty"`
	// Q16k Does the Entity have policies and procedures that (If NO, explain):
	// Outline the processes regarding screening for sanctions, PEPs and negative media
	PoliciesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia *RT00085Z9_YesNoExplain `protobuf:"bytes,18,opt,name=policies_that_outline_process_for_screening_for_sanctions_peps_and_negative_media,json=policiesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia,proto3" json:"policies_that_outline_process_for_screening_for_sanctions_peps_and_negative_media,omitempty"`
	// Q17 Has the Entity defined a risk tolerance statement or similar document which defines a risk boundary around their business? If NO, explain.
	EntityHadDefinedARiskToleranceStatement *RT00085Z9_YesNoExplain `protobuf:"bytes,20,opt,name=entity_had_defined_a_risk_tolerance_statement,json=entityHadDefinedARiskToleranceStatement,proto3" json:"entity_had_defined_a_risk_tolerance_statement,omitempty"`
	// Q18 & Q18a Does the Entity have a record retention procedures that comply with applicable laws? If NO, explain. If YES, what is the retention period.
	EntityHasRecordRetentionProcedure *RT00085Z9_YesNoAndExplain `protobuf:"bytes,21,opt,name=entity_has_record_retention_procedure,json=entityHasRecordRetentionProcedure,proto3" json:"entity_has_record_retention_procedure,omitempty"`
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) Reset() {
	*x = RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) ProtoMessage() {}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures.ProtoReflect.Descriptor instead.
func (*RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 7}
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasDocumentedPoliciesAndProceduresForMoneyLaundering() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityHasDocumentedPoliciesAndProceduresForMoneyLaundering
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasDocumentedPoliciesAndProceduresForTerroristFinancing() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityHasDocumentedPoliciesAndProceduresForTerroristFinancing
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasDocumentedPoliciesAndProceduresForSanctionsViolations() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityHasDocumentedPoliciesAndProceduresForSanctionsViolations
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitAccountsOrRelationshipsWithShellBanks() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitAccountsOrRelationshipsWithShellBanks
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitAccountsForSection_311Entities() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitAccountsForSection_311Entities
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatAssessRisksOfRelationshipsWithPeps() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatAssessRisksOfRelationshipsWithPeps
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatDefineEscalationProcessForFinancialCrime() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatDefineEscalationProcessForFinancialCrime
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatSpecifyHowSuspiciousActivitiesAreEscalated() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatSpecifyHowSuspiciousActivitiesAreEscalated
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHadDefinedARiskToleranceStatement() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityHadDefinedARiskToleranceStatement
	}
	return nil
}

func (x *RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasRecordRetentionProcedure() *RT00085Z9_YesNoAndExplain {
	if x != nil {
		return x.EntityHasRecordRetentionProcedure
	}
	return nil
}

// Definition of KYC, CDD and EDD information
type RT00085Z9_KYCAndCDDAndEDD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q19 Does the Entity verify the identity of the customer? If NO, explain
	EntityVerifiesIdentityOfCustomer *RT00085Z9_YesNoExplain `protobuf:"bytes,1,opt,name=entity_verifies_identity_of_customer,json=entityVerifiesIdentityOfCustomer,proto3" json:"entity_verifies_identity_of_customer,omitempty"`
	// Q20 Do the Entity's policies and procedures set out when CDD must be completed, e.g. at the time of onboarding or within 30 days? If NO, explain
	PoliciesAndProceduresSetOutWhenCddMustBeCompleted *RT00085Z9_YesNoExplain `protobuf:"bytes,2,opt,name=policies_and_procedures_set_out_when_cdd_must_be_completed,json=policiesAndProceduresSetOutWhenCddMustBeCompleted,proto3" json:"policies_and_procedures_set_out_when_cdd_must_be_completed,omitempty"`
	// Q21a Does the Entity gather and retain Ownership structure information when conducting CDD? If NO, explain.
	EntityGathersOwnershipStructureInformation *RT00085Z9_YesNoExplain `protobuf:"bytes,3,opt,name=entity_gathers_ownership_structure_information,json=entityGathersOwnershipStructureInformation,proto3" json:"entity_gathers_ownership_structure_information,omitempty"`
	// Q21b Does the Entity gather and retain Customer identification information when conducting CDD? If NO, explain.
	EntityGathersCustomerIdentificationInformation *RT00085Z9_YesNoExplain `protobuf:"bytes,4,opt,name=entity_gathers_customer_identification_information,json=entityGathersCustomerIdentificationInformation,proto3" json:"entity_gathers_customer_identification_information,omitempty"`
	// Q21c Does the Entity gather and retain Expected activity information when conducting CDD? If NO, explain.
	EntityGathersExpectedActivityInformation *RT00085Z9_YesNoExplain `protobuf:"bytes,5,opt,name=entity_gathers_expected_activity_information,json=entityGathersExpectedActivityInformation,proto3" json:"entity_gathers_expected_activity_information,omitempty"`
	// Q21d Does the Entity gather and retain Nature of business/employment information when conducting CDD? If NO, explain.
	EntityGathersNatureOfBusinessInformation *RT00085Z9_YesNoExplain `protobuf:"bytes,6,opt,name=entity_gathers_nature_of_business_information,json=entityGathersNatureOfBusinessInformation,proto3" json:"entity_gathers_nature_of_business_information,omitempty"`
	// Q21e Does the Entity gather and retain Product usage information when conducting CDD? If NO, explain.
	EntityGathersProductUsageInformation *RT00085Z9_YesNoExplain `protobuf:"bytes,7,opt,name=entity_gathers_product_usage_information,json=entityGathersProductUsageInformation,proto3" json:"entity_gathers_product_usage_information,omitempty"`
	// Q21f Does the Entity gather and retain Purpose and nature of relationship information when conducting CDD? If NO, explain.
	EntityGathersPurposeAndNatureOfRelationshipInformation *RT00085Z9_YesNoExplain `protobuf:"bytes,8,opt,name=entity_gathers_purpose_and_nature_of_relationship_information,json=entityGathersPurposeAndNatureOfRelationshipInformation,proto3" json:"entity_gathers_purpose_and_nature_of_relationship_information,omitempty"`
	// Q21g Does the Entity gather and retain Source of funds information when conducting CDD? If NO, explain.
	EntityGathersSourceOfFundsInformation *RT00085Z9_YesNoExplain `protobuf:"bytes,9,opt,name=entity_gathers_source_of_funds_information,json=entityGathersSourceOfFundsInformation,proto3" json:"entity_gathers_source_of_funds_information,omitempty"`
	// Q22a Is the Ultimate beneficial ownership identified. If NO, explain.
	UltimateBeneficialOwnershipIdentified *RT00085Z9_YesNoExplain `protobuf:"bytes,10,opt,name=ultimate_beneficial_ownership_identified,json=ultimateBeneficialOwnershipIdentified,proto3" json:"ultimate_beneficial_ownership_identified,omitempty"`
	// Q22a1 Are ultimate beneficial owners verified?. If NO, explain.
	UltimateBeneficialOwnershipVerified *RT00085Z9_YesNoExplain `protobuf:"bytes,11,opt,name=ultimate_beneficial_ownership_verified,json=ultimateBeneficialOwnershipVerified,proto3" json:"ultimate_beneficial_ownership_verified,omitempty"`
	// Q22b Are the Authorised signatories (where applicable) identified. If NO, explain.
	AuthorisedSignatoriesIdentified *RT00085Z9_YesNoExplain `protobuf:"bytes,12,opt,name=authorised_signatories_identified,json=authorisedSignatoriesIdentified,proto3" json:"authorised_signatories_identified,omitempty"`
	// Q22c Are the key controllers identified. If NO, explain.
	KeyControllersIdentified *RT00085Z9_YesNoExplain `protobuf:"bytes,13,opt,name=key_controllers_identified,json=keyControllersIdentified,proto3" json:"key_controllers_identified,omitempty"`
	// Q22d Are the other relevant parties identified. If NO, explain.
	OtherRelevantPartiesIdentified *RT00085Z9_YesNoExplain `protobuf:"bytes,14,opt,name=other_relevant_parties_identified,json=otherRelevantPartiesIdentified,proto3" json:"other_relevant_parties_identified,omitempty"`
	// Q23 Does the due diligence process result in customers receiving a risk classification? If NO, explain.
	DueDiligenceProcessResultsInRiskClassification *RT00085Z9_YesNoExplain `protobuf:"bytes,16,opt,name=due_diligence_process_results_in_risk_classification,json=dueDiligenceProcessResultsInRiskClassification,proto3" json:"due_diligence_process_results_in_risk_classification,omitempty"`
	// Q24 Does the Entity have a risk based approach to screening customers and connected parties to determine
	// whether they are PEPs, or controlled by PEPs?
	EntityHasRiskBasedApproachToScreeningForPepConnections *RT00085Z9_YesNoAndExplain `protobuf:"bytes,28,opt,name=entity_has_risk_based_approach_to_screening_for_pep_connections,json=entityHasRiskBasedApproachToScreeningForPepConnections,proto3" json:"entity_has_risk_based_approach_to_screening_for_pep_connections,omitempty"`
	// Q25 Does the Entity have policies, procedures and processes to review and escalate potential matches from screening customers and connected parties to determine whether they are PEPs, or controlled by PEPs?
	EntityHasEscalationProcessForMatchesWhenScreeningForPepConnections *RT00085Z9_YesNoAndExplain `protobuf:"bytes,29,opt,name=entity_has_escalation_process_for_matches_when_screening_for_pep_connections,json=entityHasEscalationProcessForMatchesWhenScreeningForPepConnections,proto3" json:"entity_has_escalation_process_for_matches_when_screening_for_pep_connections,omitempty"`
	// Q26a Does the Entity have a process to review and update customer information based on KYC renewal
	ProcessToReviewAndUpdateCustomerInformationOnKycRenewal *RT00085Z9_YesNoExplain `protobuf:"bytes,34,opt,name=process_to_review_and_update_customer_information_on_kyc_renewal,json=processToReviewAndUpdateCustomerInformationOnKycRenewal,proto3" json:"process_to_review_and_update_customer_information_on_kyc_renewal,omitempty"`
	// Q27a Are Non-account customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	NonAccountCustomersRestrictedByFccProgramme *RT00085Z9_YesExplainNo `protobuf:"bytes,37,opt,name=non_account_customers_restricted_by_fcc_programme,json=nonAccountCustomersRestrictedByFccProgramme,proto3" json:"non_account_customers_restricted_by_fcc_programme,omitempty"`
	// Q27b Are Non-resident customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	NonResidentCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,38,opt,name=non_resident_customers_restricted_by_fcc_programme,json=nonResidentCustomersRestrictedByFccProgramme,proto3" json:"non_resident_customers_restricted_by_fcc_programme,omitempty"`
	// Q27c Are Shell-banks customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	ShellBanksCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,39,opt,name=shell_banks_customers_restricted_by_fcc_programme,json=shellBanksCustomersRestrictedByFccProgramme,proto3" json:"shell_banks_customers_restricted_by_fcc_programme,omitempty"`
	// Q27d Are MVTS / MSB customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	MvtsMsbCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,40,opt,name=mvts_msb_customers_restricted_by_fcc_programme,json=mvtsMsbCustomersRestrictedByFccProgramme,proto3" json:"mvts_msb_customers_restricted_by_fcc_programme,omitempty"`
	// Q27e Are PEP customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PepCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,41,opt,name=pep_customers_restricted_by_fcc_programme,json=pepCustomersRestrictedByFccProgramme,proto3" json:"pep_customers_restricted_by_fcc_programme,omitempty"`
	// Q27f Are PEP related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PepRelatedCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,42,opt,name=pep_related_customers_restricted_by_fcc_programme,json=pepRelatedCustomersRestrictedByFccProgramme,proto3" json:"pep_related_customers_restricted_by_fcc_programme,omitempty"`
	// Q27g Are PEP Close Associate customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PepCloseAssociateCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,43,opt,name=pep_close_associate_customers_restricted_by_fcc_programme,json=pepCloseAssociateCustomersRestrictedByFccProgramme,proto3" json:"pep_close_associate_customers_restricted_by_fcc_programme,omitempty"`
	// Q27h Are Correspondent Banks related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	CorrespondentBankCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,44,opt,name=correspondent_bank_customers_restricted_by_fcc_programme,json=correspondentBankCustomersRestrictedByFccProgramme,proto3" json:"correspondent_bank_customers_restricted_by_fcc_programme,omitempty"`
	// Q27h1 If Correspondent Banks EDD or EDD & restricted, does the EDD assessment contain the elements as set out in the Wolfsberg Correspondent Banking Principles 2014? If NO, explain
	CorrespondentBankCustomersAssessmentContainsWorlsbergPrinciplesElements *RT00085Z9_YesNoExplain `protobuf:"bytes,45,opt,name=correspondent_bank_customers_assessment_contains_worlsberg_principles_elements,json=correspondentBankCustomersAssessmentContainsWorlsbergPrinciplesElements,proto3" json:"correspondent_bank_customers_assessment_contains_worlsberg_principles_elements,omitempty"`
	// Q27i Are Arms, defense and military related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	ArmsDefenseAndMilitaryCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,46,opt,name=arms_defense_and_military_customers_restricted_by_fcc_programme,json=armsDefenseAndMilitaryCustomersRestrictedByFccProgramme,proto3" json:"arms_defense_and_military_customers_restricted_by_fcc_programme,omitempty"`
	// Q27j Are Atomic Power related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	AtomicPowerCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,47,opt,name=atomic_power_customers_restricted_by_fcc_programme,json=atomicPowerCustomersRestrictedByFccProgramme,proto3" json:"atomic_power_customers_restricted_by_fcc_programme,omitempty"`
	// Q27k Are Extractive Industry related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	ExtractiveIndustryCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,48,opt,name=extractive_industry_customers_restricted_by_fcc_programme,json=extractiveIndustryCustomersRestrictedByFccProgramme,proto3" json:"extractive_industry_customers_restricted_by_fcc_programme,omitempty"`
	// Q27l Are Precious metals and stones related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PreciousMetalsAndStonesCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,49,opt,name=precious_metals_and_stones_customers_restricted_by_fcc_programme,json=preciousMetalsAndStonesCustomersRestrictedByFccProgramme,proto3" json:"precious_metals_and_stones_customers_restricted_by_fcc_programme,omitempty"`
	// Q27m Are Unregulated Charity customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	UnregulatedCharityCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,50,opt,name=unregulated_charity_customers_restricted_by_fcc_programme,json=unregulatedCharityCustomersRestrictedByFccProgramme,proto3" json:"unregulated_charity_customers_restricted_by_fcc_programme,omitempty"`
	// Q27n Are Regulated Charity customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	RegulatedCharityCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,51,opt,name=regulated_charity_customers_restricted_by_fcc_programme,json=regulatedCharityCustomersRestrictedByFccProgramme,proto3" json:"regulated_charity_customers_restricted_by_fcc_programme,omitempty"`
	// Q27o Are Red light business / Adult entertainment customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	RedLightOrAdultEntertainmentCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,52,opt,name=red_light_or_adult_entertainment_customers_restricted_by_fcc_programme,json=redLightOrAdultEntertainmentCustomersRestrictedByFccProgramme,proto3" json:"red_light_or_adult_entertainment_customers_restricted_by_fcc_programme,omitempty"`
	// Q27p Are Non-Government Organisations customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	NgoCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,53,opt,name=ngo_customers_restricted_by_fcc_programme,json=ngoCustomersRestrictedByFccProgramme,proto3" json:"ngo_customers_restricted_by_fcc_programme,omitempty"`
	// Q27q Are Virtual Currency customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	VirtualCurrencyCutsomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,54,opt,name=virtual_currency_cutsomers_restricted_by_fcc_programme,json=virtualCurrencyCutsomersRestrictedByFccProgramme,proto3" json:"virtual_currency_cutsomers_restricted_by_fcc_programme,omitempty"`
	// Q27r Are Marijuana related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	MarijuanaRelatedCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,55,opt,name=marijuana_related_customers_restricted_by_fcc_programme,json=marijuanaRelatedCustomersRestrictedByFccProgramme,proto3" json:"marijuana_related_customers_restricted_by_fcc_programme,omitempty"`
	// Q27s Are Embassy or Consulate customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	EmbassyOrConsulateCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,56,opt,name=embassy_or_consulate_customers_restricted_by_fcc_programme,json=embassyOrConsulateCustomersRestrictedByFccProgramme,proto3" json:"embassy_or_consulate_customers_restricted_by_fcc_programme,omitempty"`
	// Q27t Are Gambling  customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	GamblingCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,57,opt,name=gambling_customers_restricted_by_fcc_programme,json=gamblingCustomersRestrictedByFccProgramme,proto3" json:"gambling_customers_restricted_by_fcc_programme,omitempty"`
	// Q27u Are Payment Service Provider customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PaymentServiceProviderCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,58,opt,name=payment_service_provider_customers_restricted_by_fcc_programme,json=paymentServiceProviderCustomersRestrictedByFccProgramme,proto3" json:"payment_service_provider_customers_restricted_by_fcc_programme,omitempty"`
	// Q27v Are other types of customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	OtherCustomersRestrictedByFccProgramme *RT00085Z9_YesNoExplain `protobuf:"bytes,59,opt,name=other_customers_restricted_by_fcc_programme,json=otherCustomersRestrictedByFccProgramme,proto3" json:"other_customers_restricted_by_fcc_programme,omitempty"`
}

func (x *RT00085Z9_KYCAndCDDAndEDD) Reset() {
	*x = RT00085Z9_KYCAndCDDAndEDD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_KYCAndCDDAndEDD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_KYCAndCDDAndEDD) ProtoMessage() {}

func (x *RT00085Z9_KYCAndCDDAndEDD) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_KYCAndCDDAndEDD.ProtoReflect.Descriptor instead.
func (*RT00085Z9_KYCAndCDDAndEDD) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 8}
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityVerifiesIdentityOfCustomer() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityVerifiesIdentityOfCustomer
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetPoliciesAndProceduresSetOutWhenCddMustBeCompleted() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesAndProceduresSetOutWhenCddMustBeCompleted
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityGathersOwnershipStructureInformation() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityGathersOwnershipStructureInformation
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityGathersCustomerIdentificationInformation() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityGathersCustomerIdentificationInformation
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityGathersExpectedActivityInformation() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityGathersExpectedActivityInformation
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityGathersNatureOfBusinessInformation() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityGathersNatureOfBusinessInformation
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityGathersProductUsageInformation() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityGathersProductUsageInformation
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityGathersPurposeAndNatureOfRelationshipInformation() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityGathersPurposeAndNatureOfRelationshipInformation
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityGathersSourceOfFundsInformation() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityGathersSourceOfFundsInformation
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetUltimateBeneficialOwnershipIdentified() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.UltimateBeneficialOwnershipIdentified
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetUltimateBeneficialOwnershipVerified() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.UltimateBeneficialOwnershipVerified
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetAuthorisedSignatoriesIdentified() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.AuthorisedSignatoriesIdentified
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetKeyControllersIdentified() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.KeyControllersIdentified
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetOtherRelevantPartiesIdentified() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.OtherRelevantPartiesIdentified
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetDueDiligenceProcessResultsInRiskClassification() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.DueDiligenceProcessResultsInRiskClassification
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityHasRiskBasedApproachToScreeningForPepConnections() *RT00085Z9_YesNoAndExplain {
	if x != nil {
		return x.EntityHasRiskBasedApproachToScreeningForPepConnections
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEntityHasEscalationProcessForMatchesWhenScreeningForPepConnections() *RT00085Z9_YesNoAndExplain {
	if x != nil {
		return x.EntityHasEscalationProcessForMatchesWhenScreeningForPepConnections
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetProcessToReviewAndUpdateCustomerInformationOnKycRenewal() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.ProcessToReviewAndUpdateCustomerInformationOnKycRenewal
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetNonAccountCustomersRestrictedByFccProgramme() *RT00085Z9_YesExplainNo {
	if x != nil {
		return x.NonAccountCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetNonResidentCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.NonResidentCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetShellBanksCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.ShellBanksCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetMvtsMsbCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.MvtsMsbCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetPepCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PepCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetPepRelatedCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PepRelatedCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetPepCloseAssociateCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PepCloseAssociateCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetCorrespondentBankCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.CorrespondentBankCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetCorrespondentBankCustomersAssessmentContainsWorlsbergPrinciplesElements() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.CorrespondentBankCustomersAssessmentContainsWorlsbergPrinciplesElements
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetArmsDefenseAndMilitaryCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.ArmsDefenseAndMilitaryCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetAtomicPowerCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.AtomicPowerCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetExtractiveIndustryCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.ExtractiveIndustryCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetPreciousMetalsAndStonesCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PreciousMetalsAndStonesCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetUnregulatedCharityCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.UnregulatedCharityCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetRegulatedCharityCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.RegulatedCharityCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetRedLightOrAdultEntertainmentCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.RedLightOrAdultEntertainmentCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetNgoCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.NgoCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetVirtualCurrencyCutsomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.VirtualCurrencyCutsomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetMarijuanaRelatedCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.MarijuanaRelatedCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetEmbassyOrConsulateCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EmbassyOrConsulateCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetGamblingCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.GamblingCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetPaymentServiceProviderCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PaymentServiceProviderCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT00085Z9_KYCAndCDDAndEDD) GetOtherCustomersRestrictedByFccProgramme() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.OtherCustomersRestrictedByFccProgramme
	}
	return nil
}

// Definition for Monitoring & Reporting information
type RT00085Z9_MonitoringAndReporting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q29 Does the Entity have risk based policies, procedures and monitoring processes for the identification and reporting of suspicious activity?
	EntityHasRiskBasedPolicies *RT00085Z9_YesNoExplain `protobuf:"bytes,1,opt,name=entity_has_risk_based_policies,json=entityHasRiskBasedPolicies,proto3" json:"entity_has_risk_based_policies,omitempty"`
	// Q30 What is the method used by the Entity to monitor transactions for suspicious activities?
	MethodUsedByEntityToMonitorTransactionForSuspiciousActivities string `protobuf:"bytes,2,opt,name=method_used_by_entity_to_monitor_transaction_for_suspicious_activities,json=methodUsedByEntityToMonitorTransactionForSuspiciousActivities,proto3" json:"method_used_by_entity_to_monitor_transaction_for_suspicious_activities,omitempty"`
	// Q31 Does the Entity have regulatory requirements to report suspicious transactions?
	EntityHasRegulatoryRequirementsToReportSuspiciousTransactions bool `protobuf:"varint,4,opt,name=entity_has_regulatory_requirements_to_report_suspicious_transactions,json=entityHasRegulatoryRequirementsToReportSuspiciousTransactions,proto3" json:"entity_has_regulatory_requirements_to_report_suspicious_transactions,omitempty"`
	// Q31a If TRUE to Q31, does the Entity have policies, procedures and processes to comply with suspicious transaction reporting requirements? If NO, explain
	EntityHasPoliciesProceduresProcessesToComplyWithSuspiciousTransactionMonitoringRequirements *RT00085Z9_YesNoExplain `protobuf:"bytes,5,opt,name=entity_has_policies_procedures_processes_to_comply_with_suspicious_transaction_monitoring_requirements,json=entityHasPoliciesProceduresProcessesToComplyWithSuspiciousTransactionMonitoringRequirements,proto3" json:"entity_has_policies_procedures_processes_to_comply_with_suspicious_transaction_monitoring_requirements,omitempty"`
	// Q32 Does the Entity have policies, procedures and processes to review and escalate matters arising from the monitoring of customer transactions and activity? If NO, explain
	EntityHasPoliciesProceduresAndProcessesToReviewAndEscalate *RT00085Z9_YesNoExplain `protobuf:"bytes,6,opt,name=entity_has_policies_procedures_and_processes_to_review_and_escalate,json=entityHasPoliciesProceduresAndProcessesToReviewAndEscalate,proto3" json:"entity_has_policies_procedures_and_processes_to_review_and_escalate,omitempty"`
}

func (x *RT00085Z9_MonitoringAndReporting) Reset() {
	*x = RT00085Z9_MonitoringAndReporting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_MonitoringAndReporting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_MonitoringAndReporting) ProtoMessage() {}

func (x *RT00085Z9_MonitoringAndReporting) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_MonitoringAndReporting.ProtoReflect.Descriptor instead.
func (*RT00085Z9_MonitoringAndReporting) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 9}
}

func (x *RT00085Z9_MonitoringAndReporting) GetEntityHasRiskBasedPolicies() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityHasRiskBasedPolicies
	}
	return nil
}

func (x *RT00085Z9_MonitoringAndReporting) GetMethodUsedByEntityToMonitorTransactionForSuspiciousActivities() string {
	if x != nil {
		return x.MethodUsedByEntityToMonitorTransactionForSuspiciousActivities
	}
	return ""
}

func (x *RT00085Z9_MonitoringAndReporting) GetEntityHasRegulatoryRequirementsToReportSuspiciousTransactions() bool {
	if x != nil {
		return x.EntityHasRegulatoryRequirementsToReportSuspiciousTransactions
	}
	return false
}

func (x *RT00085Z9_MonitoringAndReporting) GetEntityHasPoliciesProceduresProcessesToComplyWithSuspiciousTransactionMonitoringRequirements() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityHasPoliciesProceduresProcessesToComplyWithSuspiciousTransactionMonitoringRequirements
	}
	return nil
}

func (x *RT00085Z9_MonitoringAndReporting) GetEntityHasPoliciesProceduresAndProcessesToReviewAndEscalate() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityHasPoliciesProceduresAndProcessesToReviewAndEscalate
	}
	return nil
}

// Definition for Payment Transparency Information
type RT00085Z9_PaymentTransparency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q33 Does the Entity adhere to the Wolfsberg Group Payment Transparency Standards? If NO, explain.
	EntityAdheresToWolfsbergPaymentTransparencyStandards *RT00085Z9_YesNoExplain `protobuf:"bytes,1,opt,name=entity_adheres_to_wolfsberg_payment_transparency_standards,json=entityAdheresToWolfsbergPaymentTransparencyStandards,proto3" json:"entity_adheres_to_wolfsberg_payment_transparency_standards,omitempty"`
	// Q34a Does the Entity have policies, procedures and processes to [reasonably] comply with and have controls in place to ensure compliance with (if NO explain):FATF Recommendation 16
	PoliciesAndProceduresToComplyWithFatfRecommendation_16 *RT00085Z9_YesNoExplain `protobuf:"bytes,2,opt,name=policies_and_procedures_to_comply_with_fatf_recommendation_16,json=policiesAndProceduresToComplyWithFatfRecommendation16,proto3" json:"policies_and_procedures_to_comply_with_fatf_recommendation_16,omitempty"`
	// Q34b Does the Entity have policies, procedures and processes to [reasonably] comply with and have controls in place to ensure compliance with (if NO explain): Local Regulations
	PoliciesAndProceduresToComplyWithLocalRegulations *RT00085Z9_YesNoExplain `protobuf:"bytes,3,opt,name=policies_and_procedures_to_comply_with_local_regulations,json=policiesAndProceduresToComplyWithLocalRegulations,proto3" json:"policies_and_procedures_to_comply_with_local_regulations,omitempty"`
	// Q34b1 Specify the relevant local Payment and Transparency regulations
	SpecifyRelevantLocalPaymentAndTransparencyRegulation string `protobuf:"bytes,4,opt,name=specify_relevant_local_payment_and_transparency_regulation,json=specifyRelevantLocalPaymentAndTransparencyRegulation,proto3" json:"specify_relevant_local_payment_and_transparency_regulation,omitempty"`
}

func (x *RT00085Z9_PaymentTransparency) Reset() {
	*x = RT00085Z9_PaymentTransparency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_PaymentTransparency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_PaymentTransparency) ProtoMessage() {}

func (x *RT00085Z9_PaymentTransparency) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_PaymentTransparency.ProtoReflect.Descriptor instead.
func (*RT00085Z9_PaymentTransparency) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 10}
}

func (x *RT00085Z9_PaymentTransparency) GetEntityAdheresToWolfsbergPaymentTransparencyStandards() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityAdheresToWolfsbergPaymentTransparencyStandards
	}
	return nil
}

func (x *RT00085Z9_PaymentTransparency) GetPoliciesAndProceduresToComplyWithFatfRecommendation_16() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesAndProceduresToComplyWithFatfRecommendation_16
	}
	return nil
}

func (x *RT00085Z9_PaymentTransparency) GetPoliciesAndProceduresToComplyWithLocalRegulations() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.PoliciesAndProceduresToComplyWithLocalRegulations
	}
	return nil
}

func (x *RT00085Z9_PaymentTransparency) GetSpecifyRelevantLocalPaymentAndTransparencyRegulation() string {
	if x != nil {
		return x.SpecifyRelevantLocalPaymentAndTransparencyRegulation
	}
	return ""
}

// Definition of Sanctions policies and processes
type RT00085Z9_Sanctions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q35 Does the Entity have a Sanctions Policy approved by management regarding compliance with sanctions law applicable to the Entity, including with respect its business conducted with, or through accounts held at foreign financial institutions? If NO, explain.
	EntityHasManagementApprovedSanctionsPolicy *RT00085Z9_YesNoExplain `protobuf:"bytes,1,opt,name=entity_has_management_approved_sanctions_policy,json=entityHasManagementApprovedSanctionsPolicy,proto3" json:"entity_has_management_approved_sanctions_policy,omitempty"`
	// Q36 Does the Entity screen its customers, including beneficial ownership information collected by the Entity, during onboarding and regularly thereafter against Sanctions Lists? If NO, explain
	EntityScreensCustomersAgainstSanctionsLists *RT00085Z9_YesNoExplain `protobuf:"bytes,4,opt,name=entity_screens_customers_against_sanctions_lists,json=entityScreensCustomersAgainstSanctionsLists,proto3" json:"entity_screens_customers_against_sanctions_lists,omitempty"`
	// Q37a Is the following sanctions list used in its screening process: Consolidated United Nations Security Council Sanctions List (UN)
	ConsolidatedUnitedNationsSanctionsListUsedInScreening bool `protobuf:"varint,8,opt,name=consolidated_united_nations_sanctions_list_used_in_screening,json=consolidatedUnitedNationsSanctionsListUsedInScreening,proto3" json:"consolidated_united_nations_sanctions_list_used_in_screening,omitempty"`
	// Q37b Is the following sanctions list used in its screening process: United States Department of the Treasury's Office of Foreign Assets Control (OFAC)
	UsaDeptOfTreasuryOfacSanctionsListUsedInScreening bool `protobuf:"varint,9,opt,name=usa_dept_of_treasury_ofac_sanctions_list_used_in_screening,json=usaDeptOfTreasuryOfacSanctionsListUsedInScreening,proto3" json:"usa_dept_of_treasury_ofac_sanctions_list_used_in_screening,omitempty"`
	// Q37c Is the following sanctions list used in its screening process: Office of Financial Sanctions Implementation HMT (OFSI)
	OfficeOfFinancialSanctionsImplementationHmtSanctionsListUsedInScreening bool `protobuf:"varint,10,opt,name=office_of_financial_sanctions_implementation_hmt_sanctions_list_used_in_screening,json=officeOfFinancialSanctionsImplementationHmtSanctionsListUsedInScreening,proto3" json:"office_of_financial_sanctions_implementation_hmt_sanctions_list_used_in_screening,omitempty"`
	// Q37d Is the following sanctions list used in its screening process: European Union Consolidated List (EU)
	EuropeanUnionConsolidatedListUsedInScreening bool `protobuf:"varint,11,opt,name=european_union_consolidated_list_used_in_screening,json=europeanUnionConsolidatedListUsedInScreening,proto3" json:"european_union_consolidated_list_used_in_screening,omitempty"`
	// Q37e Is the following sanctions list used in its screening process: Lists maintained by other G7 member countries
	ListMaintainedByOther_G7MemberCountryUsedInScreening bool `protobuf:"varint,12,opt,name=list_maintained_by_other_G7_member_country_used_in_screening,json=listMaintainedByOtherG7MemberCountryUsedInScreening,proto3" json:"list_maintained_by_other_G7_member_country_used_in_screening,omitempty"`
	// Q37f If TRUE for Q37e, specify
	Other_G7MemberCountrySanctionsListUsedInScreening string `protobuf:"bytes,13,opt,name=other_G7_member_country_sanctions_list_used_in_screening,json=otherG7MemberCountrySanctionsListUsedInScreening,proto3" json:"other_G7_member_country_sanctions_list_used_in_screening,omitempty"`
	// Q38 Does the Entity have a physical presence, e.g., branches, subsidiaries, or representative offices located in countries/regions against which UN, OFAC, OFSI, EU and G7 member countries have enacted comprehensive jurisdiction-based Sanctions? If YES, eplain
	EntityHasPhysicalPresenceInSanctionedCountries *RT00085Z9_YesExplainNo `protobuf:"bytes,16,opt,name=entity_has_physical_presence_in_sanctioned_countries,json=entityHasPhysicalPresenceInSanctionedCountries,proto3" json:"entity_has_physical_presence_in_sanctioned_countries,omitempty"`
}

func (x *RT00085Z9_Sanctions) Reset() {
	*x = RT00085Z9_Sanctions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_Sanctions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_Sanctions) ProtoMessage() {}

func (x *RT00085Z9_Sanctions) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_Sanctions.ProtoReflect.Descriptor instead.
func (*RT00085Z9_Sanctions) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 11}
}

func (x *RT00085Z9_Sanctions) GetEntityHasManagementApprovedSanctionsPolicy() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityHasManagementApprovedSanctionsPolicy
	}
	return nil
}

func (x *RT00085Z9_Sanctions) GetEntityScreensCustomersAgainstSanctionsLists() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityScreensCustomersAgainstSanctionsLists
	}
	return nil
}

func (x *RT00085Z9_Sanctions) GetConsolidatedUnitedNationsSanctionsListUsedInScreening() bool {
	if x != nil {
		return x.ConsolidatedUnitedNationsSanctionsListUsedInScreening
	}
	return false
}

func (x *RT00085Z9_Sanctions) GetUsaDeptOfTreasuryOfacSanctionsListUsedInScreening() bool {
	if x != nil {
		return x.UsaDeptOfTreasuryOfacSanctionsListUsedInScreening
	}
	return false
}

func (x *RT00085Z9_Sanctions) GetOfficeOfFinancialSanctionsImplementationHmtSanctionsListUsedInScreening() bool {
	if x != nil {
		return x.OfficeOfFinancialSanctionsImplementationHmtSanctionsListUsedInScreening
	}
	return false
}

func (x *RT00085Z9_Sanctions) GetEuropeanUnionConsolidatedListUsedInScreening() bool {
	if x != nil {
		return x.EuropeanUnionConsolidatedListUsedInScreening
	}
	return false
}

func (x *RT00085Z9_Sanctions) GetListMaintainedByOther_G7MemberCountryUsedInScreening() bool {
	if x != nil {
		return x.ListMaintainedByOther_G7MemberCountryUsedInScreening
	}
	return false
}

func (x *RT00085Z9_Sanctions) GetOther_G7MemberCountrySanctionsListUsedInScreening() string {
	if x != nil {
		return x.Other_G7MemberCountrySanctionsListUsedInScreening
	}
	return ""
}

func (x *RT00085Z9_Sanctions) GetEntityHasPhysicalPresenceInSanctionedCountries() *RT00085Z9_YesExplainNo {
	if x != nil {
		return x.EntityHasPhysicalPresenceInSanctionedCountries
	}
	return nil
}

// Definition of Training and Education Information
type RT00085Z9_TrainingAndEducation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q39a Does the Entity provide mandatory training on (if NO, explain): Identification and reporting of transactions to government authorities
	ProvidesMandatoryTrainingOnIdentificationAndReportingOfTransactionToGovernmentAuthorities *RT00085Z9_YesNoExplain `protobuf:"bytes,1,opt,name=provides_mandatory_training_on_identification_and_reporting_of_transaction_to_government_authorities,json=providesMandatoryTrainingOnIdentificationAndReportingOfTransactionToGovernmentAuthorities,proto3" json:"provides_mandatory_training_on_identification_and_reporting_of_transaction_to_government_authorities,omitempty"`
	// Q39b Does the Entity provide mandatory training on (if NO, explain): Examples of different forms of money laundering, terrorist financing and sanctions violations relevant for the types of products and services offered
	ProvidesMandatoryTrainingOnExamplesOfDifferentTypesOfMoneyLaundering *RT00085Z9_YesNoExplain `protobuf:"bytes,2,opt,name=provides_mandatory_training_on_examples_of_different_types_of_money_laundering,json=providesMandatoryTrainingOnExamplesOfDifferentTypesOfMoneyLaundering,proto3" json:"provides_mandatory_training_on_examples_of_different_types_of_money_laundering,omitempty"`
	// Q39c Does the Entity provide mandatory training on (if NO, explain): Internal policies for controlling money laundering, terrorist financing and sanctions violations
	ProvidesMandatoryTrainingOnInternalPoliciesForControllingMoneyLaundering *RT00085Z9_YesNoExplain `protobuf:"bytes,3,opt,name=provides_mandatory_training_on_internal_policies_for_controlling_money_laundering,json=providesMandatoryTrainingOnInternalPoliciesForControllingMoneyLaundering,proto3" json:"provides_mandatory_training_on_internal_policies_for_controlling_money_laundering,omitempty"`
	// Q39d Does the Entity provide mandatory training on (if NO, explain): New issues that occur in the market, e.g., significant regulatory actions or new regulations
	ProvidesMandatoryTrainingOnConductAndCulture *RT00085Z9_YesNoExplain `protobuf:"bytes,5,opt,name=provides_mandatory_training_on_conduct_and_culture,json=providesMandatoryTrainingOnConductAndCulture,proto3" json:"provides_mandatory_training_on_conduct_and_culture,omitempty"`
	// Q40a Is the above mandatory training provided to (if NO, explain): Board and Senior Committee Management
	MandatoryTrainingProvidedToBoardAndSeniorCommiteeManagement *RT00085Z9_YesNoExplain `protobuf:"bytes,6,opt,name=mandatory_training_provided_to_board_and_senior_commitee_management,json=mandatoryTrainingProvidedToBoardAndSeniorCommiteeManagement,proto3" json:"mandatory_training_provided_to_board_and_senior_commitee_management,omitempty"`
	// Q40b Is the above mandatory training provided to (if NO, explain): 1st Line of Defence
	MandatoryTrainingProvidedToFirstLineOfDefence *RT00085Z9_YesNoExplain `protobuf:"bytes,7,opt,name=mandatory_training_provided_to_first_line_of_defence,json=mandatoryTrainingProvidedToFirstLineOfDefence,proto3" json:"mandatory_training_provided_to_first_line_of_defence,omitempty"`
	// Q40c Is the above mandatory training provided to (if NO, explain): 2nd Line of Defence
	MandatoryTrainingProvidedToSecondLineOfDefence *RT00085Z9_YesNoExplain `protobuf:"bytes,8,opt,name=mandatory_training_provided_to_second_line_of_defence,json=mandatoryTrainingProvidedToSecondLineOfDefence,proto3" json:"mandatory_training_provided_to_second_line_of_defence,omitempty"`
	// Q40d Is the above mandatory training provided to (if NO, explain): 3nd Line of Defence
	MandatoryTrainingProvidedToThirdLineOfDefence *RT00085Z9_YesNoExplain `protobuf:"bytes,9,opt,name=mandatory_training_provided_to_third_line_of_defence,json=mandatoryTrainingProvidedToThirdLineOfDefence,proto3" json:"mandatory_training_provided_to_third_line_of_defence,omitempty"`
	// Q40e Is the above mandatory training provided to (if NO, explain): 3rd parties to which specific FCC activities have been outsourced
	MandatoryTrainingProvidedToThirdParitiesToWhichActivitiesOutsourced *RT00085Z9_YesNoExplain `protobuf:"bytes,10,opt,name=mandatory_training_provided_to_third_parities_to_which_activities_outsourced,json=mandatoryTrainingProvidedToThirdParitiesToWhichActivitiesOutsourced,proto3" json:"mandatory_training_provided_to_third_parities_to_which_activities_outsourced,omitempty"`
	// Q40f Is the above mandatory training provided to (if NO, explain): Non-employed workers (contractors/consultants)
	MandatoryTrainingProvidedToNonEmployedWorkers *RT00085Z9_YesNoExplain `protobuf:"bytes,11,opt,name=mandatory_training_provided_to_non_employed_workers,json=mandatoryTrainingProvidedToNonEmployedWorkers,proto3" json:"mandatory_training_provided_to_non_employed_workers,omitempty"`
}

func (x *RT00085Z9_TrainingAndEducation) Reset() {
	*x = RT00085Z9_TrainingAndEducation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_TrainingAndEducation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_TrainingAndEducation) ProtoMessage() {}

func (x *RT00085Z9_TrainingAndEducation) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_TrainingAndEducation.ProtoReflect.Descriptor instead.
func (*RT00085Z9_TrainingAndEducation) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 12}
}

func (x *RT00085Z9_TrainingAndEducation) GetProvidesMandatoryTrainingOnIdentificationAndReportingOfTransactionToGovernmentAuthorities() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.ProvidesMandatoryTrainingOnIdentificationAndReportingOfTransactionToGovernmentAuthorities
	}
	return nil
}

func (x *RT00085Z9_TrainingAndEducation) GetProvidesMandatoryTrainingOnExamplesOfDifferentTypesOfMoneyLaundering() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.ProvidesMandatoryTrainingOnExamplesOfDifferentTypesOfMoneyLaundering
	}
	return nil
}

func (x *RT00085Z9_TrainingAndEducation) GetProvidesMandatoryTrainingOnInternalPoliciesForControllingMoneyLaundering() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.ProvidesMandatoryTrainingOnInternalPoliciesForControllingMoneyLaundering
	}
	return nil
}

func (x *RT00085Z9_TrainingAndEducation) GetProvidesMandatoryTrainingOnConductAndCulture() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.ProvidesMandatoryTrainingOnConductAndCulture
	}
	return nil
}

func (x *RT00085Z9_TrainingAndEducation) GetMandatoryTrainingProvidedToBoardAndSeniorCommiteeManagement() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToBoardAndSeniorCommiteeManagement
	}
	return nil
}

func (x *RT00085Z9_TrainingAndEducation) GetMandatoryTrainingProvidedToFirstLineOfDefence() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToFirstLineOfDefence
	}
	return nil
}

func (x *RT00085Z9_TrainingAndEducation) GetMandatoryTrainingProvidedToSecondLineOfDefence() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToSecondLineOfDefence
	}
	return nil
}

func (x *RT00085Z9_TrainingAndEducation) GetMandatoryTrainingProvidedToThirdLineOfDefence() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToThirdLineOfDefence
	}
	return nil
}

func (x *RT00085Z9_TrainingAndEducation) GetMandatoryTrainingProvidedToThirdParitiesToWhichActivitiesOutsourced() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToThirdParitiesToWhichActivitiesOutsourced
	}
	return nil
}

func (x *RT00085Z9_TrainingAndEducation) GetMandatoryTrainingProvidedToNonEmployedWorkers() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToNonEmployedWorkers
	}
	return nil
}

// Definition of Audit information
type RT00085Z9_Audit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q41 In addition to inspections by the government supervisors/regulators, does the Entity have an internal audit function, a testing function or other independent third party, or both, that assesses FCC AML, CTF and Sanctions policies and practices on a regular basis? If NO, explain
	EntityHasInternalAuditOrSimilarTestingFunction *RT00085Z9_YesNoExplain `protobuf:"bytes,1,opt,name=entity_has_internal_audit_or_similar_testing_function,json=entityHasInternalAuditOrSimilarTestingFunction,proto3" json:"entity_has_internal_audit_or_similar_testing_function,omitempty"`
}

func (x *RT00085Z9_Audit) Reset() {
	*x = RT00085Z9_Audit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_Audit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_Audit) ProtoMessage() {}

func (x *RT00085Z9_Audit) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_Audit.ProtoReflect.Descriptor instead.
func (*RT00085Z9_Audit) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 13}
}

func (x *RT00085Z9_Audit) GetEntityHasInternalAuditOrSimilarTestingFunction() *RT00085Z9_YesNoExplain {
	if x != nil {
		return x.EntityHasInternalAuditOrSimilarTestingFunction
	}
	return nil
}

// Information about a foreign branch
type RT00085Z9_EntityAndOwnership_Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the branch
	BranchName string `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	// The country in which the branch is located (the three letter ISO code)
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RT00085Z9_EntityAndOwnership_Branch) Reset() {
	*x = RT00085Z9_EntityAndOwnership_Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_EntityAndOwnership_Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_EntityAndOwnership_Branch) ProtoMessage() {}

func (x *RT00085Z9_EntityAndOwnership_Branch) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_EntityAndOwnership_Branch.ProtoReflect.Descriptor instead.
func (*RT00085Z9_EntityAndOwnership_Branch) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *RT00085Z9_EntityAndOwnership_Branch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_Branch) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Information to be provided if publicly traded
type RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Codification chosen to identify the financial instrument
	FinancialIdentifier RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier `protobuf:"varint,4,opt,name=financial_identifier,json=financialIdentifier,proto3,enum=standards.open.v1.RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier" json:"financial_identifier,omitempty"`
	// Identifier of the affected instrument
	Instrument string `protobuf:"bytes,5,opt,name=instrument,proto3" json:"instrument,omitempty"`
}

func (x *RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier) Reset() {
	*x = RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier) ProtoMessage() {}

func (x *RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier.ProtoReflect.Descriptor instead.
func (*RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier) GetFinancialIdentifier() RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier {
	if x != nil {
		return x.FinancialIdentifier
	}
	return RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_IDENTIFIER_UNSPECIFIED
}

func (x *RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

// The definition of a beneficial owner resource
type RT00085Z9_EntityAndOwnership_SignificantShareholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the client
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The type of beneficial owner
	BeneficialOwnerType RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType `protobuf:"varint,2,opt,name=beneficial_owner_type,json=beneficialOwnerType,proto3,enum=standards.open.v1.RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType" json:"beneficial_owner_type,omitempty"`
	// The ultimate effective interest in the legal entity on a look through basis
	BeneficialOwnership float64 `protobuf:"fixed64,3,opt,name=beneficial_ownership,json=beneficialOwnership,proto3" json:"beneficial_ownership,omitempty"`
	// Complete if the beneficial person is a natural person
	NaturalPersonOwnershipDetails *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson `protobuf:"bytes,4,opt,name=natural_person_ownership_details,json=naturalPersonOwnershipDetails,proto3" json:"natural_person_ownership_details,omitempty"`
	// Complete if the `SignificantShareholder` is a legal entity
	LegalEntityOwnershipDetails *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity `protobuf:"bytes,5,opt,name=legal_entity_ownership_details,json=legalEntityOwnershipDetails,proto3" json:"legal_entity_ownership_details,omitempty"`
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder) Reset() {
	*x = RT00085Z9_EntityAndOwnership_SignificantShareholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_EntityAndOwnership_SignificantShareholder) ProtoMessage() {}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_EntityAndOwnership_SignificantShareholder.ProtoReflect.Descriptor instead.
func (*RT00085Z9_EntityAndOwnership_SignificantShareholder) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder) GetBeneficialOwnerType() RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType {
	if x != nil {
		return x.BeneficialOwnerType
	}
	return RT00085Z9_EntityAndOwnership_SignificantShareholder_TYPE_UNSPECIFIED
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder) GetBeneficialOwnership() float64 {
	if x != nil {
		return x.BeneficialOwnership
	}
	return 0
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder) GetNaturalPersonOwnershipDetails() *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson {
	if x != nil {
		return x.NaturalPersonOwnershipDetails
	}
	return nil
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder) GetLegalEntityOwnershipDetails() *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity {
	if x != nil {
		return x.LegalEntityOwnershipDetails
	}
	return nil
}

// Information relating to a natural person
type RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first name
	GivenName string `protobuf:"bytes,1,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// The last name
	FamilyName string `protobuf:"bytes,2,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// The phone number including country code
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The email address of the manager
	EmailAddress string `protobuf:"bytes,4,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// The three letter ISO code of the country of residence
	CountryOfResidence string `protobuf:"bytes,5,opt,name=country_of_residence,json=countryOfResidence,proto3" json:"country_of_residence,omitempty"`
	// Place of address
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) Reset() {
	*x = RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) ProtoMessage() {}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson.ProtoReflect.Descriptor instead.
func (*RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 4, 2, 0}
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetCountryOfResidence() string {
	if x != nil {
		return x.CountryOfResidence
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Information relating to a legal beneficial owner
type RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the company
	LegalName string `protobuf:"bytes,1,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// The registered office of the company
	RegisteredOffice string `protobuf:"bytes,2,opt,name=registered_office,json=registeredOffice,proto3" json:"registered_office,omitempty"`
	// The LEI identifier of the company (if available)
	LEI string `protobuf:"bytes,3,opt,name=LEI,proto3" json:"LEI,omitempty"`
	// The directors or managers of the legal entity
	DirectorsOrManagers []*RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson `protobuf:"bytes,4,rep,name=directors_or_managers,json=directorsOrManagers,proto3" json:"directors_or_managers,omitempty"`
	// The own
	OwnershipType RT00085Z9_EntityAndOwnership_OwnershipType `protobuf:"varint,6,opt,name=ownership_type,json=ownershipType,proto3,enum=standards.open.v1.RT00085Z9_EntityAndOwnership_OwnershipType" json:"ownership_type,omitempty"`
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) Reset() {
	*x = RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT00085Z9_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) ProtoMessage() {}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) ProtoReflect() protoreflect.Message {
	mi := &file_RT00085Z9_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity.ProtoReflect.Descriptor instead.
func (*RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) Descriptor() ([]byte, []int) {
	return file_RT00085Z9_proto_rawDescGZIP(), []int{0, 4, 2, 1}
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) GetRegisteredOffice() string {
	if x != nil {
		return x.RegisteredOffice
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) GetLEI() string {
	if x != nil {
		return x.LEI
	}
	return ""
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) GetDirectorsOrManagers() []*RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson {
	if x != nil {
		return x.DirectorsOrManagers
	}
	return nil
}

func (x *RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity) GetOwnershipType() RT00085Z9_EntityAndOwnership_OwnershipType {
	if x != nil {
		return x.OwnershipType
	}
	return RT00085Z9_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED
}

var File_RT00085Z9_proto protoreflect.FileDescriptor

var file_RT00085Z9_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0xa9, 0x01, 0x0a, 0x09, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x61,
	0x0a, 0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x12, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74,
	0x66, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x41, 0x4d, 0x4c, 0x41,
	0x6e, 0x64, 0x43, 0x54, 0x46, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x1c, 0x61, 0x6d, 0x6c, 0x41, 0x6e, 0x64,
	0x43, 0x74, 0x66, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x74, 0x0a, 0x1b, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x62,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x42, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x18, 0x61, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7, 0x01, 0x0a,
	0x2d, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64, 0x43, 0x54, 0x46, 0x41, 0x6e, 0x64, 0x53,
	0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x27, 0x61,
	0x6d, 0x6c, 0x43, 0x74, 0x66, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x6b, 0x79, 0x63, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x63, 0x64, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a,
	0x39, 0x2e, 0x4b, 0x59, 0x43, 0x41, 0x6e, 0x64, 0x43, 0x44, 0x44, 0x41, 0x6e, 0x64, 0x45, 0x44,
	0x44, 0x52, 0x0f, 0x6b, 0x79, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x64, 0x64, 0x41, 0x6e, 0x64, 0x45,
	0x64, 0x64, 0x12, 0x6d, 0x0a, 0x18, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x63, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x09, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x16,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x1a,
	0xb7, 0x01, 0x0a, 0x0c, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x1a, 0xb7, 0x01, 0x0a, 0x0c, 0x59, 0x65,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e,
	0x4f, 0x10, 0x02, 0x1a, 0xbd, 0x01, 0x0a, 0x0f, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e,
	0x4f, 0x10, 0x02, 0x1a, 0x7b, 0x0a, 0x17, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x1a, 0xd3, 0x15, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x15, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x13, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x66, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e,
	0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38,
	0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x17,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x5b, 0x0a, 0x2b, 0x61, 0x6e, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x61, 0x6e, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x42, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a,
	0x27, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x23, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x45, 0x0a, 0x06, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xaa, 0x02, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x99, 0x01, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x1d, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x1a,
	0xd1, 0x09, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8e, 0x01,
	0x0a, 0x15, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x9d, 0x01, 0x0a, 0x20, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x1d, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x97, 0x01, 0x0a, 0x1e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x1b,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xe3, 0x01, 0x0a, 0x0d,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xdc, 0x02, 0x0a, 0x0b, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4c, 0x45, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x45, 0x49, 0x12,
	0x88, 0x01, 0x0a, 0x15, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x4f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x51, 0x0a, 0x13, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0x02, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x48,
	0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x4c,
	0x59, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x10, 0x04, 0x1a, 0xe7, 0x0c, 0x0a, 0x1c, 0x41, 0x4d, 0x4c, 0x41, 0x6e,
	0x64, 0x43, 0x54, 0x46, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x89, 0x01, 0x0a, 0x2c, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x28, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x03, 0x43, 0x44, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x03, 0x43,
	0x44, 0x44, 0x12, 0x3b, 0x0a, 0x03, 0x45, 0x44, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x03, 0x45, 0x44, 0x44, 0x12,
	0x5c, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x5a, 0x0a,
	0x13, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x61, 0x0a,
	0x17, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x09, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a,
	0x0d, 0x70, 0x65, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x0c, 0x70, 0x65, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a,
	0x1d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x1b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x1d,
	0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a,
	0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1b,
	0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x16, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x14, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x16,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x98,
	0x01, 0x0a, 0x35, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74,
	0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x1a, 0xd9, 0x0b, 0x0a, 0x18, 0x41, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xaa, 0x01,
	0x0a, 0x3e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x74,
	0x69, 0x5f, 0x62, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x37, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x74,
	0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x41, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x39, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x41, 0x62, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0xc9, 0x01, 0x0a,
	0x4f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x45, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x53,
	0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x3f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x40, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x3f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0xc0, 0x01, 0x0a, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x40, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x41, 0x62, 0x63,
	0x52, 0x69, 0x73, 0x6b, 0x12, 0xc5, 0x01, 0x0a, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4e, 0x6f, 0x6e,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x41,
	0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x1a, 0xcb, 0x17, 0x0a,
	0x2a, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64, 0x43, 0x54, 0x46, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x42,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x3a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0xb7, 0x01, 0x0a, 0x45, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3d, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x61, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0xb9, 0x01, 0x0a, 0x46, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x52, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x65,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x66, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x48, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x65,
	0x70, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x41, 0x6e, 0x64,
	0x46, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x49, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x5f,
	0x6e, 0x62, 0x66, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x41, 0x6e, 0x64,
	0x4f, 0x72, 0x4e, 0x62, 0x66, 0x69, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x52, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x48, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x6e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x41, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38,
	0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x39, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72,
	0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4f, 0x72,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x58,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4c, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x44,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x38, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x33, 0x31, 0x31, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54,
	0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x31, 0x31,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x97, 0x02, 0x0a, 0x79, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x6f, 0x72,
	0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x69, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x72, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x4f, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x35, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f,
	0x74, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x4f, 0x66, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x70, 0x73, 0x12, 0xa4, 0x01,
	0x0a, 0x3b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a,
	0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x34,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x72, 0x69, 0x6d, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x3d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x5f, 0x68,
	0x6f, 0x77, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x54, 0x68, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x77, 0x53,
	0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x41, 0x72, 0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12,
	0xcc, 0x01, 0x0a, 0x51, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61,
	0x74, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x70, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x46, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x54, 0x68, 0x61, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x70, 0x73, 0x41, 0x6e,
	0x64, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x89,
	0x01, 0x0a, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x64, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x27, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x64, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x7e, 0x0a, 0x25, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x21, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x61, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x1a, 0xfe, 0x30, 0x0a, 0x0f, 0x4b,
	0x59, 0x43, 0x41, 0x6e, 0x64, 0x43, 0x44, 0x44, 0x41, 0x6e, 0x64, 0x45, 0x44, 0x44, 0x12, 0x79,
	0x0a, 0x24, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x66, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x3a, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x68,
	0x65, 0x6e, 0x5f, 0x63, 0x64, 0x64, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x64, 0x64, 0x4d, 0x75, 0x73,
	0x74, 0x42, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x8d, 0x01, 0x0a,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38,
	0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x2a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x95, 0x01, 0x0a,
	0x32, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x2c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x28, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x8a, 0x01, 0x0a, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x28, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x66, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01,
	0x0a, 0x28, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x3d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4f, 0x66, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a,
	0x2a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x25, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x28, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x25, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x26, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x23, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x75, 0x0a, 0x21, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a,
	0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x67, 0x0a, 0x1a, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a,
	0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x18,
	0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x21, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a,
	0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1e,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x97,
	0x01, 0x0a, 0x34, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x64, 0x75, 0x65, 0x44, 0x69, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x3f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x70, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x4c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x42, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x57, 0x68, 0x65, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x46, 0x6f, 0x72, 0x50, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0xac, 0x01, 0x0a, 0x40, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c,
	0x12, 0x91, 0x01, 0x0a, 0x31, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x52, 0x2b, 0x6e, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x32, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2c, 0x6e, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63,
	0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x31, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x2b, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x8b,
	0x01, 0x0a, 0x2e, 0x6d, 0x76, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x62, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x28, 0x6d, 0x76, 0x74, 0x73, 0x4d, 0x73, 0x62, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a,
	0x29, 0x70, 0x65, 0x70, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x70, 0x65, 0x70,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x12, 0x91, 0x01, 0x0a, 0x31, 0x70, 0x65, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2b, 0x70, 0x65, 0x70, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x39, 0x70, 0x65, 0x70, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x70, 0x65, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x38, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63,
	0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x4e, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e,
	0x6b, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f,
	0x77, 0x6f, 0x72, 0x6c, 0x73, 0x62, 0x65, 0x72, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a,
	0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x47,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x6f, 0x72, 0x6c,
	0x73, 0x62, 0x65, 0x72, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x3f, 0x61, 0x72, 0x6d, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6c,
	0x69, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x61, 0x72,
	0x6d, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x4d, 0x69, 0x6c, 0x69,
	0x74, 0x61, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x32, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66,
	0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2c, 0x61,
	0x74, 0x6f, 0x6d, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46,
	0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x39,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12,
	0xad, 0x01, 0x0a, 0x40, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x38, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12,
	0xa1, 0x01, 0x0a, 0x39, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a,
	0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33,
	0x75, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x37, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38,
	0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x31, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x46, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x3d, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x72, 0x41, 0x64, 0x75, 0x6c, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x82,
	0x01, 0x0a, 0x29, 0x6e, 0x67, 0x6f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66,
	0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x6e,
	0x67, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x36, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x30, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x75, 0x74, 0x73, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x12, 0x9d, 0x01, 0x0a, 0x37, 0x6d, 0x61, 0x72, 0x69, 0x6a, 0x75, 0x61, 0x6e, 0x61, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a,
	0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31,
	0x6d, 0x61, 0x72, 0x69, 0x6a, 0x75, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x12, 0xa2, 0x01, 0x0a, 0x3a, 0x65, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x79, 0x5f, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x33, 0x65, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x79, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x2e, 0x67, 0x61, 0x6d, 0x62, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x29, 0x67, 0x61, 0x6d, 0x62,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x3e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x2b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x26, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46,
	0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x1a, 0xd3, 0x06, 0x0a, 0x16,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x1e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x61, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x46, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x69,
	0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x3d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x44, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x3d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x73,
	0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xf6, 0x01, 0x0a, 0x66, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35,
	0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x5b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb2, 0x01, 0x0a,
	0x43, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x6f,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x64, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74,
	0x65, 0x1a, 0x80, 0x05, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xa3, 0x01, 0x0a, 0x3a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x77, 0x6f, 0x6c, 0x66, 0x73, 0x62, 0x65, 0x72, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x34, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x73, 0x54, 0x6f, 0x57, 0x6f, 0x6c, 0x66, 0x73, 0x62,
	0x65, 0x72, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x12,
	0xa7, 0x01, 0x0a, 0x3d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x74, 0x66, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31,
	0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x35, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x46, 0x61, 0x74, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x36, 0x12, 0x9e, 0x01, 0x0a, 0x38, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x54, 0x6f,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x78, 0x0a, 0x3a, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x34,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbb, 0x09, 0x0a, 0x09, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61,
	0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x61, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x30, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x3c, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x35, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64,
	0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x75, 0x0a, 0x3a, 0x75, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x61, 0x63,
	0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x31, 0x75, 0x73, 0x61, 0x44, 0x65, 0x70, 0x74,
	0x4f, 0x66, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x4f, 0x66, 0x61, 0x63, 0x53, 0x61,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x49,
	0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x51, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6d, 0x74, 0x5f,
	0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x47, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4f, 0x66,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6d, 0x74, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x68, 0x0a, 0x32, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2c, 0x65, 0x75, 0x72,
	0x6f, 0x70, 0x65, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x49, 0x6e,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x79, 0x0a, 0x3c, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x47, 0x37, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x33, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x42,
	0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x37, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x72, 0x0a, 0x38, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x47, 0x37,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x30, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x37, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x61, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x34, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x4e, 0x6f, 0x52, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x53,
	0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0x9e, 0x0e, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf2, 0x01, 0x0a, 0x64,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x59, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0xc7, 0x01, 0x0a, 0x4e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x44, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f,
	0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x4c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xce, 0x01, 0x0a, 0x51, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x48, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x4c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x32,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x6c, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x2c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72,
	0x65, 0x12, 0xb3, 0x01, 0x0a, 0x43, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3b, 0x6d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x53,
	0x65, 0x6e, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x34, 0x6d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x2d, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x98, 0x01, 0x0a, 0x35, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x34,
	0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x54, 0x6f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x4c, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x68, 0x69, 0x63, 0x68, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x54, 0x6f, 0x57, 0x68, 0x69, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x4f, 0x75, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x33,
	0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x54,
	0x6f, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x98, 0x01,
	0x0a, 0x35, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73,
	0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4f, 0x72, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x38, 0x35, 0x5a, 0x39, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x38, 0x35, 0x5a, 0x39, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d,
	0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RT00085Z9_proto_rawDescOnce sync.Once
	file_RT00085Z9_proto_rawDescData = file_RT00085Z9_proto_rawDesc
)

func file_RT00085Z9_proto_rawDescGZIP() []byte {
	file_RT00085Z9_proto_rawDescOnce.Do(func() {
		file_RT00085Z9_proto_rawDescData = protoimpl.X.CompressGZIP(file_RT00085Z9_proto_rawDescData)
	})
	return file_RT00085Z9_proto_rawDescData
}

var file_RT00085Z9_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_RT00085Z9_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_RT00085Z9_proto_goTypes = []interface{}{
	(RT00085Z9_YesNoExplain_Response)(0),                                                     // 0: standards.open.v1.RT00085Z9.YesNoExplain.Response
	(RT00085Z9_YesExplainNo_Response)(0),                                                     // 1: standards.open.v1.RT00085Z9.YesExplainNo.Response
	(RT00085Z9_YesNoAndExplain_Response)(0),                                                  // 2: standards.open.v1.RT00085Z9.YesNoAndExplain.Response
	(RT00085Z9_EntityAndOwnership_OwnershipType)(0),                                          // 3: standards.open.v1.RT00085Z9.EntityAndOwnership.OwnershipType
	(RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier)(0), // 4: standards.open.v1.RT00085Z9.EntityAndOwnership.TradedSecurityIdentifier.FinancialInstrumentIdentifier
	(RT00085Z9_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType)(0),             // 5: standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.BeneficialOwnerType
	(*RT00085Z9)(nil),                                                         // 6: standards.open.v1.RT00085Z9
	(*RT00085Z9Batch)(nil),                                                    // 7: standards.open.v1.RT00085Z9_batch
	(*RT00085Z9_YesNoExplain)(nil),                                            // 8: standards.open.v1.RT00085Z9.YesNoExplain
	(*RT00085Z9_YesExplainNo)(nil),                                            // 9: standards.open.v1.RT00085Z9.YesExplainNo
	(*RT00085Z9_YesNoAndExplain)(nil),                                         // 10: standards.open.v1.RT00085Z9.YesNoAndExplain
	(*RT00085Z9_NameAndDigitalSignature)(nil),                                 // 11: standards.open.v1.RT00085Z9.NameAndDigitalSignature
	(*RT00085Z9_EntityAndOwnership)(nil),                                      // 12: standards.open.v1.RT00085Z9.EntityAndOwnership
	(*RT00085Z9_AMLAndCTFAndSanctionsProgram)(nil),                            // 13: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram
	(*RT00085Z9_AntiBriberyAndCorruption)(nil),                                // 14: standards.open.v1.RT00085Z9.AntiBriberyAndCorruption
	(*RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures)(nil),              // 15: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures
	(*RT00085Z9_KYCAndCDDAndEDD)(nil),                                         // 16: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD
	(*RT00085Z9_MonitoringAndReporting)(nil),                                  // 17: standards.open.v1.RT00085Z9.MonitoringAndReporting
	(*RT00085Z9_PaymentTransparency)(nil),                                     // 18: standards.open.v1.RT00085Z9.PaymentTransparency
	(*RT00085Z9_Sanctions)(nil),                                               // 19: standards.open.v1.RT00085Z9.Sanctions
	(*RT00085Z9_TrainingAndEducation)(nil),                                    // 20: standards.open.v1.RT00085Z9.TrainingAndEducation
	(*RT00085Z9_Audit)(nil),                                                   // 21: standards.open.v1.RT00085Z9.Audit
	(*RT00085Z9_EntityAndOwnership_Branch)(nil),                               // 22: standards.open.v1.RT00085Z9.EntityAndOwnership.Branch
	(*RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier)(nil),             // 23: standards.open.v1.RT00085Z9.EntityAndOwnership.TradedSecurityIdentifier
	(*RT00085Z9_EntityAndOwnership_SignificantShareholder)(nil),               // 24: standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder
	(*RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson)(nil), // 25: standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.NaturalPerson
	(*RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity)(nil),   // 26: standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.LegalEntity
	(*date.Date)(nil),                                                         // 27: google.type.Date
}
var file_RT00085Z9_proto_depIdxs = []int32{
	12,  // 0: standards.open.v1.RT00085Z9.entity_and_ownership:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership
	13,  // 1: standards.open.v1.RT00085Z9.aml_and_ctf_and_sanctions_program:type_name -> standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram
	14,  // 2: standards.open.v1.RT00085Z9.anti_bribery_and_corruption:type_name -> standards.open.v1.RT00085Z9.AntiBriberyAndCorruption
	15,  // 3: standards.open.v1.RT00085Z9.aml_ctf_and_sanctions_policies_and_procedures:type_name -> standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures
	16,  // 4: standards.open.v1.RT00085Z9.kyc_and_cdd_and_edd:type_name -> standards.open.v1.RT00085Z9.KYCAndCDDAndEDD
	17,  // 5: standards.open.v1.RT00085Z9.monitoring_and_reporting:type_name -> standards.open.v1.RT00085Z9.MonitoringAndReporting
	18,  // 6: standards.open.v1.RT00085Z9.payment_transparency:type_name -> standards.open.v1.RT00085Z9.PaymentTransparency
	19,  // 7: standards.open.v1.RT00085Z9.sanctions:type_name -> standards.open.v1.RT00085Z9.Sanctions
	20,  // 8: standards.open.v1.RT00085Z9.training_and_education:type_name -> standards.open.v1.RT00085Z9.TrainingAndEducation
	21,  // 9: standards.open.v1.RT00085Z9.audit:type_name -> standards.open.v1.RT00085Z9.Audit
	6,   // 10: standards.open.v1.RT00085Z9_batch.response:type_name -> standards.open.v1.RT00085Z9
	0,   // 11: standards.open.v1.RT00085Z9.YesNoExplain.response:type_name -> standards.open.v1.RT00085Z9.YesNoExplain.Response
	1,   // 12: standards.open.v1.RT00085Z9.YesExplainNo.response:type_name -> standards.open.v1.RT00085Z9.YesExplainNo.Response
	2,   // 13: standards.open.v1.RT00085Z9.YesNoAndExplain.response:type_name -> standards.open.v1.RT00085Z9.YesNoAndExplain.Response
	27,  // 14: standards.open.v1.RT00085Z9.NameAndDigitalSignature.date:type_name -> google.type.Date
	22,  // 15: standards.open.v1.RT00085Z9.EntityAndOwnership.covered_branches:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.Branch
	27,  // 16: standards.open.v1.RT00085Z9.EntityAndOwnership.date_of_incorporation:type_name -> google.type.Date
	3,   // 17: standards.open.v1.RT00085Z9.EntityAndOwnership.ownership_types:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.OwnershipType
	23,  // 18: standards.open.v1.RT00085Z9.EntityAndOwnership.security_identifier:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.TradedSecurityIdentifier
	24,  // 19: standards.open.v1.RT00085Z9.EntityAndOwnership.significant_shareholders:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder
	8,   // 20: standards.open.v1.RT00085Z9.EntityAndOwnership.structure_chart:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	22,  // 21: standards.open.v1.RT00085Z9.EntityAndOwnership.branches_under_offshore_banking_license:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.Branch
	8,   // 22: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.appointed_officer_with_sufficient_experience:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 23: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.cash_reporting:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 24: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.CDD:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 25: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.EDD:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 26: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.beneficial_ownership:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 27: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.independent_testing:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 28: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.periodic_review:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 29: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.policies_and_procedures:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 30: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.risk_assessment:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 31: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.sanctions:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 32: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.pep_screening:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 33: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.adverse_information_screening:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 34: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.suspicious_activity_reporting:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 35: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.training_and_education:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 36: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.transaction_monitoring:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 37: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.policy_approved_at_least_annually_by_senior_committee:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	9,   // 38: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsProgram.use_third_parties:type_name -> standards.open.v1.RT00085Z9.YesExplainNo
	8,   // 39: standards.open.v1.RT00085Z9.AntiBriberyAndCorruption.documented_anti_bribery_and_corruption_policies_and_procedures:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 40: standards.open.v1.RT00085Z9.AntiBriberyAndCorruption.entity_internal_audit_function_covers_abc_policies_and_procedures:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 41: standards.open.v1.RT00085Z9.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_board_and_senior_management_committee:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 42: standards.open.v1.RT00085Z9.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_first_line_of_defence:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 43: standards.open.v1.RT00085Z9.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_second_line_of_defence:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 44: standards.open.v1.RT00085Z9.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_third_line_of_defence:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 45: standards.open.v1.RT00085Z9.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_third_parties_subject_to_abc_risk:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 46: standards.open.v1.RT00085Z9.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_non_employed_workers_as_appropriate:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 47: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_documented_policies_and_procedures_for_money_laundering:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 48: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_documented_policies_and_procedures_for_terrorist_financing:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 49: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_documented_policies_and_procedures_for_sanctions_violations:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 50: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_opening_and_keeping_anonymous_and_fictitious_named_accounts:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 51: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_opening_accounts_for_unlicensed_banks_and_or_nbfis:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 52: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_dealing_with_entities_providing_banking_to_unlicensed_banks:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 53: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_accounts_or_relationships_with_shell_banks:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 54: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_dealing_with_another_entity_that_provides_services_to_shell_banks:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 55: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_accounts_for_section_311_entities:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 56: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_accounts_for_unlicensed_or_regulated_remittance_agents_or_exchange_houses_or_money_transfer_agents:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 57: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_assess_risks_of_relationships_with_peps:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 58: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_define_escalation_process_for_financial_crime:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 59: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_specify_how_suspicious_activities_are_escalated:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 60: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_outline_process_for_screening_for_sanctions_peps_and_negative_media:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 61: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_had_defined_a_risk_tolerance_statement:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	10,  // 62: standards.open.v1.RT00085Z9.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_record_retention_procedure:type_name -> standards.open.v1.RT00085Z9.YesNoAndExplain
	8,   // 63: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_verifies_identity_of_customer:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 64: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.policies_and_procedures_set_out_when_cdd_must_be_completed:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 65: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_gathers_ownership_structure_information:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 66: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_gathers_customer_identification_information:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 67: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_gathers_expected_activity_information:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 68: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_gathers_nature_of_business_information:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 69: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_gathers_product_usage_information:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 70: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_gathers_purpose_and_nature_of_relationship_information:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 71: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_gathers_source_of_funds_information:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 72: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.ultimate_beneficial_ownership_identified:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 73: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.ultimate_beneficial_ownership_verified:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 74: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.authorised_signatories_identified:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 75: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.key_controllers_identified:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 76: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.other_relevant_parties_identified:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 77: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.due_diligence_process_results_in_risk_classification:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	10,  // 78: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_has_risk_based_approach_to_screening_for_pep_connections:type_name -> standards.open.v1.RT00085Z9.YesNoAndExplain
	10,  // 79: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.entity_has_escalation_process_for_matches_when_screening_for_pep_connections:type_name -> standards.open.v1.RT00085Z9.YesNoAndExplain
	8,   // 80: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.process_to_review_and_update_customer_information_on_kyc_renewal:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	9,   // 81: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.non_account_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesExplainNo
	8,   // 82: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.non_resident_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 83: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.shell_banks_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 84: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.mvts_msb_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 85: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.pep_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 86: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.pep_related_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 87: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.pep_close_associate_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 88: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.correspondent_bank_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 89: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.correspondent_bank_customers_assessment_contains_worlsberg_principles_elements:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 90: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.arms_defense_and_military_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 91: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.atomic_power_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 92: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.extractive_industry_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 93: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.precious_metals_and_stones_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 94: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.unregulated_charity_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 95: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.regulated_charity_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 96: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.red_light_or_adult_entertainment_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 97: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.ngo_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 98: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.virtual_currency_cutsomers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 99: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.marijuana_related_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 100: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.embassy_or_consulate_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 101: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.gambling_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 102: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.payment_service_provider_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 103: standards.open.v1.RT00085Z9.KYCAndCDDAndEDD.other_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 104: standards.open.v1.RT00085Z9.MonitoringAndReporting.entity_has_risk_based_policies:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 105: standards.open.v1.RT00085Z9.MonitoringAndReporting.entity_has_policies_procedures_processes_to_comply_with_suspicious_transaction_monitoring_requirements:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 106: standards.open.v1.RT00085Z9.MonitoringAndReporting.entity_has_policies_procedures_and_processes_to_review_and_escalate:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 107: standards.open.v1.RT00085Z9.PaymentTransparency.entity_adheres_to_wolfsberg_payment_transparency_standards:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 108: standards.open.v1.RT00085Z9.PaymentTransparency.policies_and_procedures_to_comply_with_fatf_recommendation_16:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 109: standards.open.v1.RT00085Z9.PaymentTransparency.policies_and_procedures_to_comply_with_local_regulations:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 110: standards.open.v1.RT00085Z9.Sanctions.entity_has_management_approved_sanctions_policy:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 111: standards.open.v1.RT00085Z9.Sanctions.entity_screens_customers_against_sanctions_lists:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	9,   // 112: standards.open.v1.RT00085Z9.Sanctions.entity_has_physical_presence_in_sanctioned_countries:type_name -> standards.open.v1.RT00085Z9.YesExplainNo
	8,   // 113: standards.open.v1.RT00085Z9.TrainingAndEducation.provides_mandatory_training_on_identification_and_reporting_of_transaction_to_government_authorities:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 114: standards.open.v1.RT00085Z9.TrainingAndEducation.provides_mandatory_training_on_examples_of_different_types_of_money_laundering:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 115: standards.open.v1.RT00085Z9.TrainingAndEducation.provides_mandatory_training_on_internal_policies_for_controlling_money_laundering:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 116: standards.open.v1.RT00085Z9.TrainingAndEducation.provides_mandatory_training_on_conduct_and_culture:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 117: standards.open.v1.RT00085Z9.TrainingAndEducation.mandatory_training_provided_to_board_and_senior_commitee_management:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 118: standards.open.v1.RT00085Z9.TrainingAndEducation.mandatory_training_provided_to_first_line_of_defence:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 119: standards.open.v1.RT00085Z9.TrainingAndEducation.mandatory_training_provided_to_second_line_of_defence:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 120: standards.open.v1.RT00085Z9.TrainingAndEducation.mandatory_training_provided_to_third_line_of_defence:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 121: standards.open.v1.RT00085Z9.TrainingAndEducation.mandatory_training_provided_to_third_parities_to_which_activities_outsourced:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 122: standards.open.v1.RT00085Z9.TrainingAndEducation.mandatory_training_provided_to_non_employed_workers:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	8,   // 123: standards.open.v1.RT00085Z9.Audit.entity_has_internal_audit_or_similar_testing_function:type_name -> standards.open.v1.RT00085Z9.YesNoExplain
	4,   // 124: standards.open.v1.RT00085Z9.EntityAndOwnership.TradedSecurityIdentifier.financial_identifier:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.TradedSecurityIdentifier.FinancialInstrumentIdentifier
	5,   // 125: standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.beneficial_owner_type:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.BeneficialOwnerType
	25,  // 126: standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.natural_person_ownership_details:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.NaturalPerson
	26,  // 127: standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.legal_entity_ownership_details:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.LegalEntity
	25,  // 128: standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.LegalEntity.directors_or_managers:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.NaturalPerson
	3,   // 129: standards.open.v1.RT00085Z9.EntityAndOwnership.SignificantShareholder.LegalEntity.ownership_type:type_name -> standards.open.v1.RT00085Z9.EntityAndOwnership.OwnershipType
	130, // [130:130] is the sub-list for method output_type
	130, // [130:130] is the sub-list for method input_type
	130, // [130:130] is the sub-list for extension type_name
	130, // [130:130] is the sub-list for extension extendee
	0,   // [0:130] is the sub-list for field type_name
}

func init() { file_RT00085Z9_proto_init() }
func file_RT00085Z9_proto_init() {
	if File_RT00085Z9_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RT00085Z9_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_YesNoExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_YesExplainNo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_YesNoAndExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_NameAndDigitalSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_EntityAndOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_AMLAndCTFAndSanctionsProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_AntiBriberyAndCorruption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_AMLAndCTFAndSanctionsPoliciesAndProcedures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_KYCAndCDDAndEDD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_MonitoringAndReporting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_PaymentTransparency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_Sanctions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_TrainingAndEducation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_Audit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_EntityAndOwnership_Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_EntityAndOwnership_TradedSecurityIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_EntityAndOwnership_SignificantShareholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_EntityAndOwnership_SignificantShareholder_NaturalPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT00085Z9_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT00085Z9_EntityAndOwnership_SignificantShareholder_LegalEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RT00085Z9_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RT00085Z9_proto_goTypes,
		DependencyIndexes: file_RT00085Z9_proto_depIdxs,
		EnumInfos:         file_RT00085Z9_proto_enumTypes,
		MessageInfos:      file_RT00085Z9_proto_msgTypes,
	}.Build()
	File_RT00085Z9_proto = out.File
	file_RT00085Z9_proto_rawDesc = nil
	file_RT00085Z9_proto_goTypes = nil
	file_RT00085Z9_proto_depIdxs = nil
}
