// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/RT000QY46.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	_ "google.golang.org/genproto/googleapis/type/money"
	_ "google.golang.org/genproto/googleapis/type/postaladdress"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RT000QY46_YesNoExplain_Response int32

const (
	RT000QY46_YesNoExplain_RESPONSE_UNSPECIFIED RT000QY46_YesNoExplain_Response = 0
	RT000QY46_YesNoExplain_YES                  RT000QY46_YesNoExplain_Response = 1
	RT000QY46_YesNoExplain_NO                   RT000QY46_YesNoExplain_Response = 2
)

// Enum value maps for RT000QY46_YesNoExplain_Response.
var (
	RT000QY46_YesNoExplain_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT000QY46_YesNoExplain_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT000QY46_YesNoExplain_Response) Enum() *RT000QY46_YesNoExplain_Response {
	p := new(RT000QY46_YesNoExplain_Response)
	*p = x
	return p
}

func (x RT000QY46_YesNoExplain_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_YesNoExplain_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[0].Descriptor()
}

func (RT000QY46_YesNoExplain_Response) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[0]
}

func (x RT000QY46_YesNoExplain_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_YesNoExplain_Response.Descriptor instead.
func (RT000QY46_YesNoExplain_Response) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 0, 0}
}

type RT000QY46_YesExplainNo_Response int32

const (
	RT000QY46_YesExplainNo_RESPONSE_UNSPECIFIED RT000QY46_YesExplainNo_Response = 0
	RT000QY46_YesExplainNo_YES                  RT000QY46_YesExplainNo_Response = 1
	RT000QY46_YesExplainNo_NO                   RT000QY46_YesExplainNo_Response = 2
)

// Enum value maps for RT000QY46_YesExplainNo_Response.
var (
	RT000QY46_YesExplainNo_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT000QY46_YesExplainNo_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT000QY46_YesExplainNo_Response) Enum() *RT000QY46_YesExplainNo_Response {
	p := new(RT000QY46_YesExplainNo_Response)
	*p = x
	return p
}

func (x RT000QY46_YesExplainNo_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_YesExplainNo_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[1].Descriptor()
}

func (RT000QY46_YesExplainNo_Response) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[1]
}

func (x RT000QY46_YesExplainNo_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_YesExplainNo_Response.Descriptor instead.
func (RT000QY46_YesExplainNo_Response) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 1, 0}
}

type RT000QY46_YesNoAndExplain_Response int32

const (
	RT000QY46_YesNoAndExplain_RESPONSE_UNSPECIFIED RT000QY46_YesNoAndExplain_Response = 0
	RT000QY46_YesNoAndExplain_YES                  RT000QY46_YesNoAndExplain_Response = 1
	RT000QY46_YesNoAndExplain_NO                   RT000QY46_YesNoAndExplain_Response = 2
)

// Enum value maps for RT000QY46_YesNoAndExplain_Response.
var (
	RT000QY46_YesNoAndExplain_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT000QY46_YesNoAndExplain_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT000QY46_YesNoAndExplain_Response) Enum() *RT000QY46_YesNoAndExplain_Response {
	p := new(RT000QY46_YesNoAndExplain_Response)
	*p = x
	return p
}

func (x RT000QY46_YesNoAndExplain_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_YesNoAndExplain_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[2].Descriptor()
}

func (RT000QY46_YesNoAndExplain_Response) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[2]
}

func (x RT000QY46_YesNoAndExplain_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_YesNoAndExplain_Response.Descriptor instead.
func (RT000QY46_YesNoAndExplain_Response) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Enumerations of ownership type
type RT000QY46_EntityAndOwnership_OwnershipType int32

const (
	// The ownership type is unspecified
	RT000QY46_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED RT000QY46_EntityAndOwnership_OwnershipType = 0
	// Publicly Traded (25% of shares publicly traded)
	RT000QY46_EntityAndOwnership_PUBLICLY_TRADED RT000QY46_EntityAndOwnership_OwnershipType = 1
	// Member owned / mutual
	RT000QY46_EntityAndOwnership_MEMBER_OR_MUTUAL RT000QY46_EntityAndOwnership_OwnershipType = 2
	// Government or state owned by more than 25%
	RT000QY46_EntityAndOwnership_GOVERNMENT_OR_STATE RT000QY46_EntityAndOwnership_OwnershipType = 3
	// Privately owned
	RT000QY46_EntityAndOwnership_PRIVATE RT000QY46_EntityAndOwnership_OwnershipType = 4
)

// Enum value maps for RT000QY46_EntityAndOwnership_OwnershipType.
var (
	RT000QY46_EntityAndOwnership_OwnershipType_name = map[int32]string{
		0: "OWNERSHIP_TYPE_UNSPECIFIED",
		1: "PUBLICLY_TRADED",
		2: "MEMBER_OR_MUTUAL",
		3: "GOVERNMENT_OR_STATE",
		4: "PRIVATE",
	}
	RT000QY46_EntityAndOwnership_OwnershipType_value = map[string]int32{
		"OWNERSHIP_TYPE_UNSPECIFIED": 0,
		"PUBLICLY_TRADED":            1,
		"MEMBER_OR_MUTUAL":           2,
		"GOVERNMENT_OR_STATE":        3,
		"PRIVATE":                    4,
	}
)

func (x RT000QY46_EntityAndOwnership_OwnershipType) Enum() *RT000QY46_EntityAndOwnership_OwnershipType {
	p := new(RT000QY46_EntityAndOwnership_OwnershipType)
	*p = x
	return p
}

func (x RT000QY46_EntityAndOwnership_OwnershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_EntityAndOwnership_OwnershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[3].Descriptor()
}

func (RT000QY46_EntityAndOwnership_OwnershipType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[3]
}

func (x RT000QY46_EntityAndOwnership_OwnershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_EntityAndOwnership_OwnershipType.Descriptor instead.
func (RT000QY46_EntityAndOwnership_OwnershipType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 4, 0}
}

// Enumerations of financial identifiers
type RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_IDENTIFIER_UNSPECIFIED RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 0
	// FIGI (Financial Instrument Global Identifier). To look up the FIGI navigate to https://www.openfigi.com/.
	RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FIGI RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 1
	// PermID (Refinitiv Permanent Identifier). To look up the PermID navigate to https://permid.org/
	RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_PERM_ID RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 2
)

// Enum value maps for RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier.
var (
	RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier_name = map[int32]string{
		0: "IDENTIFIER_UNSPECIFIED",
		1: "FIGI",
		2: "PERM_ID",
	}
	RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"FIGI":                   1,
		"PERM_ID":                2,
	}
)

func (x RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Enum() *RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier {
	p := new(RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[4].Descriptor()
}

func (RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[4]
}

func (x RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier.Descriptor instead.
func (RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 4, 1, 0}
}

// Types of account holders
type RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType int32

const (
	// Beneficial owner unspecified
	RT000QY46_EntityAndOwnership_SignificantShareholder_TYPE_UNSPECIFIED RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 0
	// The beneficial owner is a natural person
	RT000QY46_EntityAndOwnership_SignificantShareholder_NATURAL_PERSON RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 1
	// The beneficial owner is a legal entity
	RT000QY46_EntityAndOwnership_SignificantShareholder_LEGAL_ENTITY RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 2
)

// Enum value maps for RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType.
var (
	RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NATURAL_PERSON",
		2: "LEGAL_ENTITY",
	}
	RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"NATURAL_PERSON":   1,
		"LEGAL_ENTITY":     2,
	}
)

func (x RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Enum() *RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType {
	p := new(RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType)
	*p = x
	return p
}

func (x RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[5].Descriptor()
}

func (RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[5]
}

func (x RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType.Descriptor instead.
func (RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 4, 2, 0}
}

// Enumeration of regulatory bodies
type RT000QY46_LegalAndRegulatory_Regulator int32

const (
	RT000QY46_LegalAndRegulatory_REGULATOR_UNSPECIFIED RT000QY46_LegalAndRegulatory_Regulator = 0
	// The Commission de Surveillance du Secteur Financier in Luxembourg
	RT000QY46_LegalAndRegulatory_LUX_CSSF RT000QY46_LegalAndRegulatory_Regulator = 1
	// The Banque centrale du Luxembourg (BCL)  of Luxembourg
	RT000QY46_LegalAndRegulatory_LUX_BCL RT000QY46_LegalAndRegulatory_Regulator = 2
)

// Enum value maps for RT000QY46_LegalAndRegulatory_Regulator.
var (
	RT000QY46_LegalAndRegulatory_Regulator_name = map[int32]string{
		0: "REGULATOR_UNSPECIFIED",
		1: "LUX_CSSF",
		2: "LUX_BCL",
	}
	RT000QY46_LegalAndRegulatory_Regulator_value = map[string]int32{
		"REGULATOR_UNSPECIFIED": 0,
		"LUX_CSSF":              1,
		"LUX_BCL":               2,
	}
)

func (x RT000QY46_LegalAndRegulatory_Regulator) Enum() *RT000QY46_LegalAndRegulatory_Regulator {
	p := new(RT000QY46_LegalAndRegulatory_Regulator)
	*p = x
	return p
}

func (x RT000QY46_LegalAndRegulatory_Regulator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_LegalAndRegulatory_Regulator) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[6].Descriptor()
}

func (RT000QY46_LegalAndRegulatory_Regulator) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[6]
}

func (x RT000QY46_LegalAndRegulatory_Regulator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_LegalAndRegulatory_Regulator.Descriptor instead.
func (RT000QY46_LegalAndRegulatory_Regulator) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 5, 0}
}

// Definition of automation levels
type RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels int32

const (
	RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AUTOMATION_LEVEL_UNSPECIFIED RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels = 0
	// The process is performed manually
	RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_MANUAL RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels = 1
	// Parts of the process are automated
	RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_SEMI_AUTOMATED RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels = 2
	// Process is performed in an automated manner
	RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AUTOMATED RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels = 3
)

// Enum value maps for RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels.
var (
	RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels_name = map[int32]string{
		0: "AUTOMATION_LEVEL_UNSPECIFIED",
		1: "MANUAL",
		2: "SEMI_AUTOMATED",
		3: "AUTOMATED",
	}
	RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels_value = map[string]int32{
		"AUTOMATION_LEVEL_UNSPECIFIED": 0,
		"MANUAL":                       1,
		"SEMI_AUTOMATED":               2,
		"AUTOMATED":                    3,
	}
)

func (x RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels) Enum() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels {
	p := new(RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels)
	*p = x
	return p
}

func (x RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[7].Descriptor()
}

func (RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[7]
}

func (x RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels.Descriptor instead.
func (RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 17, 0, 0}
}

// Enumerations of the review status
type RT000QY46_ReviewerInformation_Review_ReviewStatus int32

const (
	RT000QY46_ReviewerInformation_Review_STATUS_UNSPECIFIED RT000QY46_ReviewerInformation_Review_ReviewStatus = 0
	// The review is in progress
	RT000QY46_ReviewerInformation_Review_UNDER_REVIEW RT000QY46_ReviewerInformation_Review_ReviewStatus = 1
	// Currently blocked awaiting additional information / clarification
	RT000QY46_ReviewerInformation_Review_AWAITING_CLARIFICATION_OR_ADDITIONAL_INFORMATION RT000QY46_ReviewerInformation_Review_ReviewStatus = 2
	// Review is complete
	RT000QY46_ReviewerInformation_Review_COMPLETE RT000QY46_ReviewerInformation_Review_ReviewStatus = 3
)

// Enum value maps for RT000QY46_ReviewerInformation_Review_ReviewStatus.
var (
	RT000QY46_ReviewerInformation_Review_ReviewStatus_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "UNDER_REVIEW",
		2: "AWAITING_CLARIFICATION_OR_ADDITIONAL_INFORMATION",
		3: "COMPLETE",
	}
	RT000QY46_ReviewerInformation_Review_ReviewStatus_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"UNDER_REVIEW":       1,
		"AWAITING_CLARIFICATION_OR_ADDITIONAL_INFORMATION": 2,
		"COMPLETE": 3,
	}
)

func (x RT000QY46_ReviewerInformation_Review_ReviewStatus) Enum() *RT000QY46_ReviewerInformation_Review_ReviewStatus {
	p := new(RT000QY46_ReviewerInformation_Review_ReviewStatus)
	*p = x
	return p
}

func (x RT000QY46_ReviewerInformation_Review_ReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_ReviewerInformation_Review_ReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[8].Descriptor()
}

func (RT000QY46_ReviewerInformation_Review_ReviewStatus) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[8]
}

func (x RT000QY46_ReviewerInformation_Review_ReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_ReviewerInformation_Review_ReviewStatus.Descriptor instead.
func (RT000QY46_ReviewerInformation_Review_ReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 18, 0, 0}
}

// Enumerations of the reviewers risk assessment of the section
type RT000QY46_ReviewerInformation_Review_RiskAssessment int32

const (
	RT000QY46_ReviewerInformation_Review_RISK_ASSESSMENT_UNSPECIFIED RT000QY46_ReviewerInformation_Review_RiskAssessment = 0
	// Assessed as low risk
	RT000QY46_ReviewerInformation_Review_LOW_RISK RT000QY46_ReviewerInformation_Review_RiskAssessment = 1
	// Assessed as medium risk
	RT000QY46_ReviewerInformation_Review_MEDIUM_RISK RT000QY46_ReviewerInformation_Review_RiskAssessment = 2
	// Assessed as high risk
	RT000QY46_ReviewerInformation_Review_HIGH_RISK RT000QY46_ReviewerInformation_Review_RiskAssessment = 3
)

// Enum value maps for RT000QY46_ReviewerInformation_Review_RiskAssessment.
var (
	RT000QY46_ReviewerInformation_Review_RiskAssessment_name = map[int32]string{
		0: "RISK_ASSESSMENT_UNSPECIFIED",
		1: "LOW_RISK",
		2: "MEDIUM_RISK",
		3: "HIGH_RISK",
	}
	RT000QY46_ReviewerInformation_Review_RiskAssessment_value = map[string]int32{
		"RISK_ASSESSMENT_UNSPECIFIED": 0,
		"LOW_RISK":                    1,
		"MEDIUM_RISK":                 2,
		"HIGH_RISK":                   3,
	}
)

func (x RT000QY46_ReviewerInformation_Review_RiskAssessment) Enum() *RT000QY46_ReviewerInformation_Review_RiskAssessment {
	p := new(RT000QY46_ReviewerInformation_Review_RiskAssessment)
	*p = x
	return p
}

func (x RT000QY46_ReviewerInformation_Review_RiskAssessment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000QY46_ReviewerInformation_Review_RiskAssessment) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000QY46_proto_enumTypes[9].Descriptor()
}

func (RT000QY46_ReviewerInformation_Review_RiskAssessment) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000QY46_proto_enumTypes[9]
}

func (x RT000QY46_ReviewerInformation_Review_RiskAssessment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000QY46_ReviewerInformation_Review_RiskAssessment.Descriptor instead.
func (RT000QY46_ReviewerInformation_Review_RiskAssessment) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 18, 0, 1}
}

// Due Diligence Questionnaire (DDQ) on a Fund Accounting provider to assess their ongoing suitability.
type RT000QY46 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The preparer's name
	PreparerName string `protobuf:"bytes,1,opt,name=preparer_name,json=preparerName,proto3" json:"preparer_name,omitempty"`
	// The preparer's position
	PreparerPosition string `protobuf:"bytes,2,opt,name=preparer_position,json=preparerPosition,proto3" json:"preparer_position,omitempty"`
	// The preparer's email
	PreparerEmail string `protobuf:"bytes,3,opt,name=preparer_email,json=preparerEmail,proto3" json:"preparer_email,omitempty"`
	// The date the questionnaire was prepared
	PreparationDate *date.Date `protobuf:"bytes,4,opt,name=preparation_date,json=preparationDate,proto3" json:"preparation_date,omitempty"`
	// The reviewer's name
	ReviewerName string `protobuf:"bytes,5,opt,name=reviewer_name,json=reviewerName,proto3" json:"reviewer_name,omitempty"`
	// The reviewer's position
	ReviewerPosition string `protobuf:"bytes,6,opt,name=reviewer_position,json=reviewerPosition,proto3" json:"reviewer_position,omitempty"`
	// The reviewer's email
	ReviewerEmail string `protobuf:"bytes,7,opt,name=reviewer_email,json=reviewerEmail,proto3" json:"reviewer_email,omitempty"`
	// The date the questionnaire was prepared
	ReviewDate *date.Date `protobuf:"bytes,8,opt,name=review_date,json=reviewDate,proto3" json:"review_date,omitempty"`
	// Section 0. Confirm that the following documents have been attached. If necessary, please highlight the relevant section in the document.
	DocumentationChecklist *RT000QY46_DocumentAttachmentChecklist `protobuf:"bytes,9,opt,name=documentation_checklist,json=documentationChecklist,proto3" json:"documentation_checklist,omitempty"`
	// Section 1. Information related to legal entity and its ownership
	EntityAndOwnership *RT000QY46_EntityAndOwnership `protobuf:"bytes,10,opt,name=entity_and_ownership,json=entityAndOwnership,proto3" json:"entity_and_ownership,omitempty"`
	// Section 2. Legal and Regulatory related information
	LegalAndRegulatory *RT000QY46_LegalAndRegulatory `protobuf:"bytes,11,opt,name=legal_and_regulatory,json=legalAndRegulatory,proto3" json:"legal_and_regulatory,omitempty"`
	// Section 3. Information related to the Anti Bribery and Corruption program section
	AntiBriberyAndCorruptionPoliciesAndProcedures *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures `protobuf:"bytes,13,opt,name=anti_bribery_and_corruption_policies_and_procedures,json=antiBriberyAndCorruptionPoliciesAndProcedures,proto3" json:"anti_bribery_and_corruption_policies_and_procedures,omitempty"`
	// Section 4. Information related to the AML, CTF and Sanctions Policies and Procedures
	AmlCtfAndSanctionsPoliciesAndProcedures *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures `protobuf:"bytes,14,opt,name=aml_ctf_and_sanctions_policies_and_procedures,json=amlCtfAndSanctionsPoliciesAndProcedures,proto3" json:"aml_ctf_and_sanctions_policies_and_procedures,omitempty"`
	// Section 5. Information related to KYC, CDD and EDD Policies and Procedures
	KycAndCddAndEddPoliciesAndProcedures *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures `protobuf:"bytes,15,opt,name=kyc_and_cdd_and_edd_policies_and_procedures,json=kycAndCddAndEddPoliciesAndProcedures,proto3" json:"kyc_and_cdd_and_edd_policies_and_procedures,omitempty"`
	// Section 6. Information related to Monitoring and Reporting
	MonitoringAndReporting *RT000QY46_MonitoringAndReporting `protobuf:"bytes,16,opt,name=monitoring_and_reporting,json=monitoringAndReporting,proto3" json:"monitoring_and_reporting,omitempty"`
	// Section 7. Information related to Training and Education
	TrainingAndEducation *RT000QY46_TrainingAndEducation `protobuf:"bytes,19,opt,name=training_and_education,json=trainingAndEducation,proto3" json:"training_and_education,omitempty"`
	// Section 8. Audit information
	AuditInformation *RT000QY46_AuditInformation `protobuf:"bytes,20,opt,name=audit_information,json=auditInformation,proto3" json:"audit_information,omitempty"`
	// Section 9. Operational Risk Management Information
	OperationalRiskManagement *RT000QY46_OperationalRiskManagement `protobuf:"bytes,21,opt,name=operational_risk_management,json=operationalRiskManagement,proto3" json:"operational_risk_management,omitempty"`
	// Section 10. Delegation And Third Party Providers information
	DelegationAndThirdPartyProviders *RT000QY46_DelegateAndThirdPartyProviders `protobuf:"bytes,22,opt,name=delegation_and_third_party_providers,json=delegationAndThirdPartyProviders,proto3" json:"delegation_and_third_party_providers,omitempty"`
	// Section 11. IT System information
	InformationTechnologySystems *RT000QY46_InformationTechnologySystems `protobuf:"bytes,23,opt,name=information_technology_systems,json=informationTechnologySystems,proto3" json:"information_technology_systems,omitempty"`
	// Section 12. Business Continuity and Disaster Recovery information
	BusinessContinuityAndDisasterRecovery *RT000QY46_BusinessContinuityAndDisasterRecovery `protobuf:"bytes,24,opt,name=business_continuity_and_disaster_recovery,json=businessContinuityAndDisasterRecovery,proto3" json:"business_continuity_and_disaster_recovery,omitempty"`
	// Section 13. Insurance information
	Insurance *RT000QY46_Insurance `protobuf:"bytes,25,opt,name=insurance,proto3" json:"insurance,omitempty"`
	// Section 14. Information about the relevant Fund Accounting Operations and Controls processes
	FundAccountingOperationsAndControls *RT000QY46_FundAccountingOperationsAndControls `protobuf:"bytes,26,opt,name=fund_accounting_operations_and_controls,json=fundAccountingOperationsAndControls,proto3" json:"fund_accounting_operations_and_controls,omitempty"`
	// Information populated by the reviewer of the questionnaire
	ReviewerInformation *RT000QY46_ReviewerInformation `protobuf:"bytes,27,opt,name=reviewer_information,json=reviewerInformation,proto3" json:"reviewer_information,omitempty"`
}

func (x *RT000QY46) Reset() {
	*x = RT000QY46{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46) ProtoMessage() {}

func (x *RT000QY46) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46.ProtoReflect.Descriptor instead.
func (*RT000QY46) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0}
}

func (x *RT000QY46) GetPreparerName() string {
	if x != nil {
		return x.PreparerName
	}
	return ""
}

func (x *RT000QY46) GetPreparerPosition() string {
	if x != nil {
		return x.PreparerPosition
	}
	return ""
}

func (x *RT000QY46) GetPreparerEmail() string {
	if x != nil {
		return x.PreparerEmail
	}
	return ""
}

func (x *RT000QY46) GetPreparationDate() *date.Date {
	if x != nil {
		return x.PreparationDate
	}
	return nil
}

func (x *RT000QY46) GetReviewerName() string {
	if x != nil {
		return x.ReviewerName
	}
	return ""
}

func (x *RT000QY46) GetReviewerPosition() string {
	if x != nil {
		return x.ReviewerPosition
	}
	return ""
}

func (x *RT000QY46) GetReviewerEmail() string {
	if x != nil {
		return x.ReviewerEmail
	}
	return ""
}

func (x *RT000QY46) GetReviewDate() *date.Date {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *RT000QY46) GetDocumentationChecklist() *RT000QY46_DocumentAttachmentChecklist {
	if x != nil {
		return x.DocumentationChecklist
	}
	return nil
}

func (x *RT000QY46) GetEntityAndOwnership() *RT000QY46_EntityAndOwnership {
	if x != nil {
		return x.EntityAndOwnership
	}
	return nil
}

func (x *RT000QY46) GetLegalAndRegulatory() *RT000QY46_LegalAndRegulatory {
	if x != nil {
		return x.LegalAndRegulatory
	}
	return nil
}

func (x *RT000QY46) GetAntiBriberyAndCorruptionPoliciesAndProcedures() *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures {
	if x != nil {
		return x.AntiBriberyAndCorruptionPoliciesAndProcedures
	}
	return nil
}

func (x *RT000QY46) GetAmlCtfAndSanctionsPoliciesAndProcedures() *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures {
	if x != nil {
		return x.AmlCtfAndSanctionsPoliciesAndProcedures
	}
	return nil
}

func (x *RT000QY46) GetKycAndCddAndEddPoliciesAndProcedures() *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures {
	if x != nil {
		return x.KycAndCddAndEddPoliciesAndProcedures
	}
	return nil
}

func (x *RT000QY46) GetMonitoringAndReporting() *RT000QY46_MonitoringAndReporting {
	if x != nil {
		return x.MonitoringAndReporting
	}
	return nil
}

func (x *RT000QY46) GetTrainingAndEducation() *RT000QY46_TrainingAndEducation {
	if x != nil {
		return x.TrainingAndEducation
	}
	return nil
}

func (x *RT000QY46) GetAuditInformation() *RT000QY46_AuditInformation {
	if x != nil {
		return x.AuditInformation
	}
	return nil
}

func (x *RT000QY46) GetOperationalRiskManagement() *RT000QY46_OperationalRiskManagement {
	if x != nil {
		return x.OperationalRiskManagement
	}
	return nil
}

func (x *RT000QY46) GetDelegationAndThirdPartyProviders() *RT000QY46_DelegateAndThirdPartyProviders {
	if x != nil {
		return x.DelegationAndThirdPartyProviders
	}
	return nil
}

func (x *RT000QY46) GetInformationTechnologySystems() *RT000QY46_InformationTechnologySystems {
	if x != nil {
		return x.InformationTechnologySystems
	}
	return nil
}

func (x *RT000QY46) GetBusinessContinuityAndDisasterRecovery() *RT000QY46_BusinessContinuityAndDisasterRecovery {
	if x != nil {
		return x.BusinessContinuityAndDisasterRecovery
	}
	return nil
}

func (x *RT000QY46) GetInsurance() *RT000QY46_Insurance {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *RT000QY46) GetFundAccountingOperationsAndControls() *RT000QY46_FundAccountingOperationsAndControls {
	if x != nil {
		return x.FundAccountingOperationsAndControls
	}
	return nil
}

func (x *RT000QY46) GetReviewerInformation() *RT000QY46_ReviewerInformation {
	if x != nil {
		return x.ReviewerInformation
	}
	return nil
}

// Batch set of RT000QY46 responses
type RT000QY46Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*RT000QY46 `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *RT000QY46Batch) Reset() {
	*x = RT000QY46Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46Batch) ProtoMessage() {}

func (x *RT000QY46Batch) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46Batch.ProtoReflect.Descriptor instead.
func (*RT000QY46Batch) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{1}
}

func (x *RT000QY46Batch) GetResponse() []*RT000QY46 {
	if x != nil {
		return x.Response
	}
	return nil
}

// Response where a NO requires further information
type RT000QY46_YesNoExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT000QY46_YesNoExplain_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT000QY46_YesNoExplain_Response" json:"response,omitempty"`
	// Explanation if the answer is `NO`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT000QY46_YesNoExplain) Reset() {
	*x = RT000QY46_YesNoExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_YesNoExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_YesNoExplain) ProtoMessage() {}

func (x *RT000QY46_YesNoExplain) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_YesNoExplain.ProtoReflect.Descriptor instead.
func (*RT000QY46_YesNoExplain) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000QY46_YesNoExplain) GetResponse() RT000QY46_YesNoExplain_Response {
	if x != nil {
		return x.Response
	}
	return RT000QY46_YesNoExplain_RESPONSE_UNSPECIFIED
}

func (x *RT000QY46_YesNoExplain) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Response where a YES requires further information
type RT000QY46_YesExplainNo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT000QY46_YesExplainNo_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT000QY46_YesExplainNo_Response" json:"response,omitempty"`
	// Explanation if the answer is `YES`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT000QY46_YesExplainNo) Reset() {
	*x = RT000QY46_YesExplainNo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_YesExplainNo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_YesExplainNo) ProtoMessage() {}

func (x *RT000QY46_YesExplainNo) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_YesExplainNo.ProtoReflect.Descriptor instead.
func (*RT000QY46_YesExplainNo) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT000QY46_YesExplainNo) GetResponse() RT000QY46_YesExplainNo_Response {
	if x != nil {
		return x.Response
	}
	return RT000QY46_YesExplainNo_RESPONSE_UNSPECIFIED
}

func (x *RT000QY46_YesExplainNo) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Response where further information is required regardless of whether a Yes or No is provided
type RT000QY46_YesNoAndExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT000QY46_YesNoAndExplain_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT000QY46_YesNoAndExplain_Response" json:"response,omitempty"`
	// Provide further information for the response
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT000QY46_YesNoAndExplain) Reset() {
	*x = RT000QY46_YesNoAndExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_YesNoAndExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_YesNoAndExplain) ProtoMessage() {}

func (x *RT000QY46_YesNoAndExplain) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_YesNoAndExplain.ProtoReflect.Descriptor instead.
func (*RT000QY46_YesNoAndExplain) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT000QY46_YesNoAndExplain) GetResponse() RT000QY46_YesNoAndExplain_Response {
	if x != nil {
		return x.Response
	}
	return RT000QY46_YesNoAndExplain_RESPONSE_UNSPECIFIED
}

func (x *RT000QY46_YesNoAndExplain) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Definition of Document Attachment Checklist
type RT000QY46_DocumentAttachmentChecklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Has evidence of the entity's registration and / or the company's register extract been provided? If NO, explain.
	EvidenceOfEntityRegistrationAttached *RT000QY46_YesNoExplain `protobuf:"bytes,1,opt,name=evidence_of_entity_registration_attached,json=evidenceOfEntityRegistrationAttached,proto3" json:"evidence_of_entity_registration_attached,omitempty"`
	// Have the constitutive documents of the company, for example statutes, memorandum or Articles of Association, been attached? If NO, explain
	ConstitutiveDocumentsAttached *RT000QY46_YesNoExplain `protobuf:"bytes,2,opt,name=constitutive_documents_attached,json=constitutiveDocumentsAttached,proto3" json:"constitutive_documents_attached,omitempty"`
	// Has a chart of the legal structure of the entity been attached? If NO, explain
	LegalStructureChartAttached *RT000QY46_YesNoExplain `protobuf:"bytes,3,opt,name=legal_structure_chart_attached,json=legalStructureChartAttached,proto3" json:"legal_structure_chart_attached,omitempty"`
	// If more than 15 employees, has an organizational chart of the company been attached? If NO, explain
	OrganizationalChartAttached *RT000QY46_YesNoExplain `protobuf:"bytes,4,opt,name=organizational_chart_attached,json=organizationalChartAttached,proto3" json:"organizational_chart_attached,omitempty"`
	// Have relevant financial statements, such as balance sheets or audited statements from the past 2 years, been attached? If NO, explain.
	RelevantFinancialStatementsAttached *RT000QY46_YesNoExplain `protobuf:"bytes,5,opt,name=relevant_financial_statements_attached,json=relevantFinancialStatementsAttached,proto3" json:"relevant_financial_statements_attached,omitempty"`
	// Has a document outlining the AML and CTF policies and procedures been attached? If NO, explain.
	AmlAndCtfPoliciesAndProceduresDocumentAttached *RT000QY46_YesNoExplain `protobuf:"bytes,6,opt,name=aml_and_ctf_policies_and_procedures_document_attached,json=amlAndCtfPoliciesAndProceduresDocumentAttached,proto3" json:"aml_and_ctf_policies_and_procedures_document_attached,omitempty"`
	// Has a document outlining the Sanctions policies and procedures been attached? If NO, explain.
	SanctionsPoliciesAndProceduresDocumentAttached *RT000QY46_YesNoExplain `protobuf:"bytes,7,opt,name=sanctions_policies_and_procedures_document_attached,json=sanctionsPoliciesAndProceduresDocumentAttached,proto3" json:"sanctions_policies_and_procedures_document_attached,omitempty"`
	// Has a document outlining the Anti-Bribery and Corruption policies and procedures been attached? If NO, explain.
	AntiBriberyAndCorruptionPoliciesAndProceduresDocumentAttached *RT000QY46_YesNoExplain `protobuf:"bytes,8,opt,name=anti_bribery_and_corruption_policies_and_procedures_document_attached,json=antiBriberyAndCorruptionPoliciesAndProceduresDocumentAttached,proto3" json:"anti_bribery_and_corruption_policies_and_procedures_document_attached,omitempty"`
	// Has a document outlining the KYC, CDD and EDD policies and procedures been attached? If NO, explain.
	KycCddAndEddPoliciesAndProceduresDocumentAttached *RT000QY46_YesNoExplain `protobuf:"bytes,9,opt,name=kyc_cdd_and_edd_policies_and_procedures_document_attached,json=kycCddAndEddPoliciesAndProceduresDocumentAttached,proto3" json:"kyc_cdd_and_edd_policies_and_procedures_document_attached,omitempty"`
	// Has a document outlining the Monitoring and Reporting policies and procedures been attached? If NO, explain.
	MonitoringAndReportingPoliciesAndProceduresDocumentAttached *RT000QY46_YesNoExplain `protobuf:"bytes,10,opt,name=monitoring_and_reporting_policies_and_procedures_document_attached,json=monitoringAndReportingPoliciesAndProceduresDocumentAttached,proto3" json:"monitoring_and_reporting_policies_and_procedures_document_attached,omitempty"`
	// Has a document outlining the the policies for managing conflicts of interest with delegate been attached? If NO, explain.
	DelegateConflictOfInterestPolicy *RT000QY46_YesNoExplain `protobuf:"bytes,11,opt,name=delegate_conflict_of_interest_policy,json=delegateConflictOfInterestPolicy,proto3" json:"delegate_conflict_of_interest_policy,omitempty"`
	// Has information on your security policies / procedures, governance and change management been attached?
	InformationOnInformationSecurityPoliciesProceduresGovernanceAndChangeManagement *RT000QY46_YesNoExplain `protobuf:"bytes,12,opt,name=information_on_information_security_policies_procedures_governance_and_change_management,json=informationOnInformationSecurityPoliciesProceduresGovernanceAndChangeManagement,proto3" json:"information_on_information_security_policies_procedures_governance_and_change_management,omitempty"`
	// Has your business continuity plan been attached?
	BusinessContinuityPlan *RT000QY46_YesNoExplain `protobuf:"bytes,13,opt,name=business_continuity_plan,json=businessContinuityPlan,proto3" json:"business_continuity_plan,omitempty"`
}

func (x *RT000QY46_DocumentAttachmentChecklist) Reset() {
	*x = RT000QY46_DocumentAttachmentChecklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_DocumentAttachmentChecklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_DocumentAttachmentChecklist) ProtoMessage() {}

func (x *RT000QY46_DocumentAttachmentChecklist) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_DocumentAttachmentChecklist.ProtoReflect.Descriptor instead.
func (*RT000QY46_DocumentAttachmentChecklist) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetEvidenceOfEntityRegistrationAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EvidenceOfEntityRegistrationAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetConstitutiveDocumentsAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ConstitutiveDocumentsAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetLegalStructureChartAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.LegalStructureChartAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetOrganizationalChartAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.OrganizationalChartAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetRelevantFinancialStatementsAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.RelevantFinancialStatementsAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetAmlAndCtfPoliciesAndProceduresDocumentAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.AmlAndCtfPoliciesAndProceduresDocumentAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetSanctionsPoliciesAndProceduresDocumentAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.SanctionsPoliciesAndProceduresDocumentAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetAntiBriberyAndCorruptionPoliciesAndProceduresDocumentAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.AntiBriberyAndCorruptionPoliciesAndProceduresDocumentAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetKycCddAndEddPoliciesAndProceduresDocumentAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.KycCddAndEddPoliciesAndProceduresDocumentAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetMonitoringAndReportingPoliciesAndProceduresDocumentAttached() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.MonitoringAndReportingPoliciesAndProceduresDocumentAttached
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetDelegateConflictOfInterestPolicy() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.DelegateConflictOfInterestPolicy
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetInformationOnInformationSecurityPoliciesProceduresGovernanceAndChangeManagement() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InformationOnInformationSecurityPoliciesProceduresGovernanceAndChangeManagement
	}
	return nil
}

func (x *RT000QY46_DocumentAttachmentChecklist) GetBusinessContinuityPlan() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.BusinessContinuityPlan
	}
	return nil
}

// Definition of Entity and Ownership section
type RT000QY46_EntityAndOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full legal name of the entity
	LegalName string `protobuf:"bytes,1,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// List all foreign branches covered by this questionnaire.
	CoveredBranches []*RT000QY46_EntityAndOwnership_Branch `protobuf:"bytes,2,rep,name=covered_branches,json=coveredBranches,proto3" json:"covered_branches,omitempty"`
	// The full legal (registered) address of the entity
	LegalAddress string `protobuf:"bytes,3,opt,name=legal_address,json=legalAddress,proto3" json:"legal_address,omitempty"`
	// The full primary business address of the entity
	BusinessAddress string `protobuf:"bytes,4,opt,name=business_address,json=businessAddress,proto3" json:"business_address,omitempty"`
	// The date in which the entity was incorporated
	DateOfIncorporation *date.Date `protobuf:"bytes,5,opt,name=date_of_incorporation,json=dateOfIncorporation,proto3" json:"date_of_incorporation,omitempty"`
	// Select the applicable ownership types and attach an ownership chart if available
	OwnershipTypes RT000QY46_EntityAndOwnership_OwnershipType `protobuf:"varint,6,opt,name=ownership_types,json=ownershipTypes,proto3,enum=standards.open.v1.RT000QY46_EntityAndOwnership_OwnershipType" json:"ownership_types,omitempty"`
	// If publicly traded, provide the primary security identifier the traded instrument
	SecurityIdentifier *RT000QY46_EntityAndOwnership_TradedSecurityIdentifier `protobuf:"bytes,7,opt,name=security_identifier,json=securityIdentifier,proto3" json:"security_identifier,omitempty"`
	// If privately owned, provide details of shareholders with a holding of 10%
	// or more up the ownership chain
	SignificantShareholders []*RT000QY46_EntityAndOwnership_SignificantShareholder `protobuf:"bytes,8,rep,name=significant_shareholders,json=significantShareholders,proto3" json:"significant_shareholders,omitempty"`
	// If privately owned, has a beneficial ownership structure chart been attached?
	StructureChart *RT000QY46_YesNoExplain `protobuf:"bytes,9,opt,name=structure_chart,json=structureChart,proto3" json:"structure_chart,omitempty"`
	// Provide the % of the entity's total shares composed of bearer shares (for example 10% enter as 0.1)
	PercentBearerShares float32 `protobuf:"fixed32,10,opt,name=percent_bearer_shares,json=percentBearerShares,proto3" json:"percent_bearer_shares,omitempty"`
	// Does the entity operate any of its branches, operate under an Offshore Banking License (OBL)?
	AnyBranchesUnderOffshoreBankingLicense bool `protobuf:"varint,11,opt,name=any_branches_under_offshore_banking_license,json=anyBranchesUnderOffshoreBankingLicense,proto3" json:"any_branches_under_offshore_banking_license,omitempty"`
	// List any branches operate under offshore banking license (if TRUE to Q1.8)
	BranchesUnderOffshoreBankingLicense []*RT000QY46_EntityAndOwnership_Branch `protobuf:"bytes,12,rep,name=branches_under_offshore_banking_license,json=branchesUnderOffshoreBankingLicense,proto3" json:"branches_under_offshore_banking_license,omitempty"`
	// Provide the name of the primary financial regulator / supervisory authority
	FinancialRegulatorOrSupervisoryAuthority string `protobuf:"bytes,13,opt,name=financial_regulator_or_supervisory_authority,json=financialRegulatorOrSupervisoryAuthority,proto3" json:"financial_regulator_or_supervisory_authority,omitempty"`
	// The LEI identifier of the company (if available)
	LEI string `protobuf:"bytes,14,opt,name=LEI,proto3" json:"LEI,omitempty"`
	// The local registration number / identifier of the company
	RegistrationNumber string `protobuf:"bytes,15,opt,name=registration_number,json=registrationNumber,proto3" json:"registration_number,omitempty"`
	// Provide the full legal name of the ultimate parent (if different from the entity completing the DDQ)
	UltimateParentLegalName string `protobuf:"bytes,16,opt,name=ultimate_parent_legal_name,json=ultimateParentLegalName,proto3" json:"ultimate_parent_legal_name,omitempty"`
	// The name of the entity's auditors
	Auditors string `protobuf:"bytes,17,opt,name=auditors,proto3" json:"auditors,omitempty"`
	// To the closest value, provide Q15a the number of employees
	NumberOfEmployees int32 `protobuf:"varint,18,opt,name=number_of_employees,json=numberOfEmployees,proto3" json:"number_of_employees,omitempty"`
	// If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,19,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT000QY46_EntityAndOwnership) Reset() {
	*x = RT000QY46_EntityAndOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_EntityAndOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_EntityAndOwnership) ProtoMessage() {}

func (x *RT000QY46_EntityAndOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_EntityAndOwnership.ProtoReflect.Descriptor instead.
func (*RT000QY46_EntityAndOwnership) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RT000QY46_EntityAndOwnership) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership) GetCoveredBranches() []*RT000QY46_EntityAndOwnership_Branch {
	if x != nil {
		return x.CoveredBranches
	}
	return nil
}

func (x *RT000QY46_EntityAndOwnership) GetLegalAddress() string {
	if x != nil {
		return x.LegalAddress
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership) GetBusinessAddress() string {
	if x != nil {
		return x.BusinessAddress
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership) GetDateOfIncorporation() *date.Date {
	if x != nil {
		return x.DateOfIncorporation
	}
	return nil
}

func (x *RT000QY46_EntityAndOwnership) GetOwnershipTypes() RT000QY46_EntityAndOwnership_OwnershipType {
	if x != nil {
		return x.OwnershipTypes
	}
	return RT000QY46_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED
}

func (x *RT000QY46_EntityAndOwnership) GetSecurityIdentifier() *RT000QY46_EntityAndOwnership_TradedSecurityIdentifier {
	if x != nil {
		return x.SecurityIdentifier
	}
	return nil
}

func (x *RT000QY46_EntityAndOwnership) GetSignificantShareholders() []*RT000QY46_EntityAndOwnership_SignificantShareholder {
	if x != nil {
		return x.SignificantShareholders
	}
	return nil
}

func (x *RT000QY46_EntityAndOwnership) GetStructureChart() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.StructureChart
	}
	return nil
}

func (x *RT000QY46_EntityAndOwnership) GetPercentBearerShares() float32 {
	if x != nil {
		return x.PercentBearerShares
	}
	return 0
}

func (x *RT000QY46_EntityAndOwnership) GetAnyBranchesUnderOffshoreBankingLicense() bool {
	if x != nil {
		return x.AnyBranchesUnderOffshoreBankingLicense
	}
	return false
}

func (x *RT000QY46_EntityAndOwnership) GetBranchesUnderOffshoreBankingLicense() []*RT000QY46_EntityAndOwnership_Branch {
	if x != nil {
		return x.BranchesUnderOffshoreBankingLicense
	}
	return nil
}

func (x *RT000QY46_EntityAndOwnership) GetFinancialRegulatorOrSupervisoryAuthority() string {
	if x != nil {
		return x.FinancialRegulatorOrSupervisoryAuthority
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership) GetLEI() string {
	if x != nil {
		return x.LEI
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership) GetUltimateParentLegalName() string {
	if x != nil {
		return x.UltimateParentLegalName
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership) GetAuditors() string {
	if x != nil {
		return x.Auditors
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership) GetNumberOfEmployees() int32 {
	if x != nil {
		return x.NumberOfEmployees
	}
	return 0
}

func (x *RT000QY46_EntityAndOwnership) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Definition of Legal and Regulatory Section
type RT000QY46_LegalAndRegulatory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Jurisdiction of licensing authority and regulator of ultimate parent (ISO three country code)
	JurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent string `protobuf:"bytes,1,opt,name=jurisdiction_of_licensing_authority_and_regulator_of_ultimate_parent,json=jurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent,proto3" json:"jurisdiction_of_licensing_authority_and_regulator_of_ultimate_parent,omitempty"`
	// If the company is required by law to be licensed by an independent public supervisory authority, then list the regulatory bodies that have responsibility for the entity
	RegulatoryBodies []RT000QY46_LegalAndRegulatory_Regulator `protobuf:"varint,2,rep,packed,name=regulatory_bodies,json=regulatoryBodies,proto3,enum=standards.open.v1.RT000QY46_LegalAndRegulatory_Regulator" json:"regulatory_bodies,omitempty"`
	// If the company is required by law to be licensed by an independent public supervisory authority, then list types of licenses held
	LicensesHeld []string `protobuf:"bytes,3,rep,name=licenses_held,json=licensesHeld,proto3" json:"licenses_held,omitempty"`
	// Describe all on-site audits by a regulatory authority in the last three years
	ListAndDescribeOnSiteAudits []*RT000QY46_LegalAndRegulatory_OnSiteAudit `protobuf:"bytes,4,rep,name=list_and_describe_on_site_audits,json=listAndDescribeOnSiteAudits,proto3" json:"list_and_describe_on_site_audits,omitempty"`
	// Briefly describe if the company is exposed to any ongoing lawsuits or legal proceedings
	OngoingLawsuitsOrLegalProceedings []string `protobuf:"bytes,5,rep,name=ongoing_lawsuits_or_legal_proceedings,json=ongoingLawsuitsOrLegalProceedings,proto3" json:"ongoing_lawsuits_or_legal_proceedings,omitempty"`
	// Has there been any regulatory sanction against the company
	AnyRegulatorySanctions *RT000QY46_YesNoExplain `protobuf:"bytes,6,opt,name=any_regulatory_sanctions,json=anyRegulatorySanctions,proto3" json:"any_regulatory_sanctions,omitempty"`
	// If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,7,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT000QY46_LegalAndRegulatory) Reset() {
	*x = RT000QY46_LegalAndRegulatory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_LegalAndRegulatory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_LegalAndRegulatory) ProtoMessage() {}

func (x *RT000QY46_LegalAndRegulatory) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_LegalAndRegulatory.ProtoReflect.Descriptor instead.
func (*RT000QY46_LegalAndRegulatory) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RT000QY46_LegalAndRegulatory) GetJurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent() string {
	if x != nil {
		return x.JurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent
	}
	return ""
}

func (x *RT000QY46_LegalAndRegulatory) GetRegulatoryBodies() []RT000QY46_LegalAndRegulatory_Regulator {
	if x != nil {
		return x.RegulatoryBodies
	}
	return nil
}

func (x *RT000QY46_LegalAndRegulatory) GetLicensesHeld() []string {
	if x != nil {
		return x.LicensesHeld
	}
	return nil
}

func (x *RT000QY46_LegalAndRegulatory) GetListAndDescribeOnSiteAudits() []*RT000QY46_LegalAndRegulatory_OnSiteAudit {
	if x != nil {
		return x.ListAndDescribeOnSiteAudits
	}
	return nil
}

func (x *RT000QY46_LegalAndRegulatory) GetOngoingLawsuitsOrLegalProceedings() []string {
	if x != nil {
		return x.OngoingLawsuitsOrLegalProceedings
	}
	return nil
}

func (x *RT000QY46_LegalAndRegulatory) GetAnyRegulatorySanctions() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.AnyRegulatorySanctions
	}
	return nil
}

func (x *RT000QY46_LegalAndRegulatory) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Definition of the Anti Bribery and Corruption section
type RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Has the Entity documented policies and procedures consistent with applicable ABC regulations and
	// requirements to [reasonably] prevent, detect and report bribery and corruption? If NO, explain
	DocumentedAntiBriberyAndCorruptionPoliciesAndProcedures *RT000QY46_YesNoExplain `protobuf:"bytes,1,opt,name=documented_anti_bribery_and_corruption_policies_and_procedures,json=documentedAntiBriberyAndCorruptionPoliciesAndProcedures,proto3" json:"documented_anti_bribery_and_corruption_policies_and_procedures,omitempty"`
	// Does the Entity's internal audit function or other independent third party cover ABC Policies and Procedures?
	// If NO, explain
	EntityInternalAuditFunctionCoversAbcPoliciesAndProcedures *RT000QY46_YesNoExplain `protobuf:"bytes,17,opt,name=entity_internal_audit_function_covers_abc_policies_and_procedures,json=entityInternalAuditFunctionCoversAbcPoliciesAndProcedures,proto3" json:"entity_internal_audit_function_covers_abc_policies_and_procedures,omitempty"`
	// Does the Entity provide mandatory ABC training to::
	// Board and senior Committee Management.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee *RT000QY46_YesNoExplain `protobuf:"bytes,18,opt,name=entity_provides_mandatory_abc_training_to_board_and_senior_management_committee,json=entityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee,proto3" json:"entity_provides_mandatory_abc_training_to_board_and_senior_management_committee,omitempty"`
	// Does the Entity provide mandatory ABC training to::
	// 1st Line of Defence.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToFirstLineOfDefence *RT000QY46_YesNoExplain `protobuf:"bytes,19,opt,name=entity_provides_mandatory_abc_training_to_first_line_of_defence,json=entityProvidesMandatoryAbcTrainingToFirstLineOfDefence,proto3" json:"entity_provides_mandatory_abc_training_to_first_line_of_defence,omitempty"`
	// Does the Entity provide mandatory ABC training to::
	// 2nd Line of Defence.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToSecondLineOfDefence *RT000QY46_YesNoExplain `protobuf:"bytes,20,opt,name=entity_provides_mandatory_abc_training_to_second_line_of_defence,json=entityProvidesMandatoryAbcTrainingToSecondLineOfDefence,proto3" json:"entity_provides_mandatory_abc_training_to_second_line_of_defence,omitempty"`
	// Does the Entity provide mandatory ABC training to::
	// 3rd Line of Defence.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToThirdLineOfDefence *RT000QY46_YesNoExplain `protobuf:"bytes,21,opt,name=entity_provides_mandatory_abc_training_to_third_line_of_defence,json=entityProvidesMandatoryAbcTrainingToThirdLineOfDefence,proto3" json:"entity_provides_mandatory_abc_training_to_third_line_of_defence,omitempty"`
	// Does the Entity provide mandatory ABC training to::
	// 3rd parties to which specific compliance activities subject to ABC risk have been outsourced
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk *RT000QY46_YesNoExplain `protobuf:"bytes,22,opt,name=entity_provides_mandatory_abc_training_to_third_parties_subject_to_abc_risk,json=entityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk,proto3" json:"entity_provides_mandatory_abc_training_to_third_parties_subject_to_abc_risk,omitempty"`
	// Does the Entity provide mandatory ABC training to::
	// Non-employed workers as appropriate (contractors/consultants)
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate *RT000QY46_YesNoExplain `protobuf:"bytes,23,opt,name=entity_provides_mandatory_abc_training_to_non_employed_workers_as_appropriate,json=entityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate,proto3" json:"entity_provides_mandatory_abc_training_to_non_employed_workers_as_appropriate,omitempty"`
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) Reset() {
	*x = RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) ProtoMessage() {}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures.ProtoReflect.Descriptor instead.
func (*RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) GetDocumentedAntiBriberyAndCorruptionPoliciesAndProcedures() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.DocumentedAntiBriberyAndCorruptionPoliciesAndProcedures
	}
	return nil
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) GetEntityInternalAuditFunctionCoversAbcPoliciesAndProcedures() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityInternalAuditFunctionCoversAbcPoliciesAndProcedures
	}
	return nil
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) GetEntityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee
	}
	return nil
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) GetEntityProvidesMandatoryAbcTrainingToFirstLineOfDefence() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToFirstLineOfDefence
	}
	return nil
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) GetEntityProvidesMandatoryAbcTrainingToSecondLineOfDefence() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToSecondLineOfDefence
	}
	return nil
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) GetEntityProvidesMandatoryAbcTrainingToThirdLineOfDefence() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToThirdLineOfDefence
	}
	return nil
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) GetEntityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk
	}
	return nil
}

func (x *RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures) GetEntityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate
	}
	return nil
}

// Definition of the AML, CTF & Sanctions Policies & Procedures
type RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Has the Entity documented policies and procedures consistent with applicable AML, CTF & Sanctions regulations and requirements to reasonably prevent, detect and report:
	// Money laundering
	// If NO, explain
	EntityHasDocumentedPoliciesAndProceduresForMoneyLaundering *RT000QY46_YesNoExplain `protobuf:"bytes,1,opt,name=entity_has_documented_policies_and_procedures_for_money_laundering,json=entityHasDocumentedPoliciesAndProceduresForMoneyLaundering,proto3" json:"entity_has_documented_policies_and_procedures_for_money_laundering,omitempty"`
	// Has the Entity documented policies and procedures consistent with applicable AML, CTF & Sanctions regulations and requirements to reasonably prevent, detect and report:
	// Terrorist financing
	// If NO, explain
	EntityHasDocumentedPoliciesAndProceduresForTerroristFinancing *RT000QY46_YesNoExplain `protobuf:"bytes,2,opt,name=entity_has_documented_policies_and_procedures_for_terrorist_financing,json=entityHasDocumentedPoliciesAndProceduresForTerroristFinancing,proto3" json:"entity_has_documented_policies_and_procedures_for_terrorist_financing,omitempty"`
	// Has the Entity documented policies and procedures consistent with applicable AML, CTF & Sanctions regulations and requirements to reasonably prevent, detect and report:
	// Sanctions violations
	// If NO, explain
	EntityHasDocumentedPoliciesAndProceduresForSanctionsViolations *RT000QY46_YesNoExplain `protobuf:"bytes,3,opt,name=entity_has_documented_policies_and_procedures_for_sanctions_violations,json=entityHasDocumentedPoliciesAndProceduresForSanctionsViolations,proto3" json:"entity_has_documented_policies_and_procedures_for_sanctions_violations,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit the opening and keeping of anonymous and fictitious named accounts
	PoliciesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts *RT000QY46_YesNoExplain `protobuf:"bytes,7,opt,name=policies_that_prohibit_opening_and_keeping_anonymous_and_fictitious_named_accounts,json=policiesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts,proto3" json:"policies_that_prohibit_opening_and_keeping_anonymous_and_fictitious_named_accounts,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit the opening and keeping of accounts for unlicensed banks and/or NBFIs
	PoliciesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis *RT000QY46_YesNoExplain `protobuf:"bytes,8,opt,name=policies_that_prohibit_opening_accounts_for_unlicensed_banks_and_or_nbfis,json=policiesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis,proto3" json:"policies_that_prohibit_opening_accounts_for_unlicensed_banks_and_or_nbfis,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit dealing with other entities that provide banking services to unlicensed banks
	PoliciesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks *RT000QY46_YesNoExplain `protobuf:"bytes,9,opt,name=policies_that_prohibit_dealing_with_entities_providing_banking_to_unlicensed_banks,json=policiesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks,proto3" json:"policies_that_prohibit_dealing_with_entities_providing_banking_to_unlicensed_banks,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit accounts/relationships with shell banks
	PoliciesThatProhibitAccountsOrRelationshipsWithShellBanks *RT000QY46_YesNoExplain `protobuf:"bytes,10,opt,name=policies_that_prohibit_accounts_or_relationships_with_shell_banks,json=policiesThatProhibitAccountsOrRelationshipsWithShellBanks,proto3" json:"policies_that_prohibit_accounts_or_relationships_with_shell_banks,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit dealing with another entity that provides services to shell banks
	PoliciesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks *RT000QY46_YesNoExplain `protobuf:"bytes,11,opt,name=policies_that_prohibit_dealing_with_another_entity_that_provides_services_to_shell_banks,json=policiesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks,proto3" json:"policies_that_prohibit_dealing_with_another_entity_that_provides_services_to_shell_banks,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit opening and keeping of accounts for Section 311 designated entities
	PoliciesThatProhibitAccountsForSection_311Entities *RT000QY46_YesNoExplain `protobuf:"bytes,12,opt,name=policies_that_prohibit_accounts_for_section_311_entities,json=policiesThatProhibitAccountsForSection311Entities,proto3" json:"policies_that_prohibit_accounts_for_section_311_entities,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit opening and keeping of accounts for any of unlicensed/unregulated remittance agents, exchanges houses,
	// casa de cambio, bureaux de change or money transfer agents
	PoliciesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents *RT000QY46_YesNoExplain `protobuf:"bytes,13,opt,name=policies_that_prohibit_accounts_for_unlicensed_or_regulated_remittance_agents_or_exchange_houses_or_money_transfer_agents,json=policiesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents,proto3" json:"policies_that_prohibit_accounts_for_unlicensed_or_regulated_remittance_agents_or_exchange_houses_or_money_transfer_agents,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Assess the risks of relationships with domestic and foreign PEPs, including their family and close associates
	PoliciesThatAssessRisksOfRelationshipsWithPeps *RT000QY46_YesNoExplain `protobuf:"bytes,14,opt,name=policies_that_assess_risks_of_relationships_with_peps,json=policiesThatAssessRisksOfRelationshipsWithPeps,proto3" json:"policies_that_assess_risks_of_relationships_with_peps,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Define escalation processes for financial crime risk issues
	PoliciesThatDefineEscalationProcessForFinancialCrime *RT000QY46_YesNoExplain `protobuf:"bytes,15,opt,name=policies_that_define_escalation_process_for_financial_crime,json=policiesThatDefineEscalationProcessForFinancialCrime,proto3" json:"policies_that_define_escalation_process_for_financial_crime,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Specify how potentially suspicious activity identified by employees is to be escalated and investigated
	PoliciesThatSpecifyHowSuspiciousActivitiesAreEscalated *RT000QY46_YesNoExplain `protobuf:"bytes,17,opt,name=policies_that_specify_how_suspicious_activities_are_escalated,json=policiesThatSpecifyHowSuspiciousActivitiesAreEscalated,proto3" json:"policies_that_specify_how_suspicious_activities_are_escalated,omitempty"`
	// Does the Entity have policies and procedures that (If NO, explain):
	// Outline the processes regarding screening for sanctions, PEPs and negative media
	PoliciesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia *RT000QY46_YesNoExplain `protobuf:"bytes,18,opt,name=policies_that_outline_process_for_screening_for_sanctions_peps_and_negative_media,json=policiesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia,proto3" json:"policies_that_outline_process_for_screening_for_sanctions_peps_and_negative_media,omitempty"`
	// Has the Entity defined a risk tolerance statement or similar document which defines a risk boundary around their business? If NO, explain.
	EntityHadDefinedARiskToleranceStatement *RT000QY46_YesNoExplain `protobuf:"bytes,20,opt,name=entity_had_defined_a_risk_tolerance_statement,json=entityHadDefinedARiskToleranceStatement,proto3" json:"entity_had_defined_a_risk_tolerance_statement,omitempty"`
	// Does the Entity have a record retention procedures that comply with applicable laws? If NO, explain. If YES, what is the retention period.
	EntityHasRecordRetentionProcedure *RT000QY46_YesNoAndExplain `protobuf:"bytes,21,opt,name=entity_has_record_retention_procedure,json=entityHasRecordRetentionProcedure,proto3" json:"entity_has_record_retention_procedure,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Appointed Officer with sufficient experience/expertise
	AppointedOfficerWithSufficientExperience *RT000QY46_YesNoExplain `protobuf:"bytes,22,opt,name=appointed_officer_with_sufficient_experience,json=appointedOfficerWithSufficientExperience,proto3" json:"appointed_officer_with_sufficient_experience,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Cash reporting
	CashReporting *RT000QY46_YesNoExplain `protobuf:"bytes,23,opt,name=cash_reporting,json=cashReporting,proto3" json:"cash_reporting,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): CDD
	CDD *RT000QY46_YesNoExplain `protobuf:"bytes,24,opt,name=CDD,proto3" json:"CDD,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): EDD
	EDD *RT000QY46_YesNoExplain `protobuf:"bytes,25,opt,name=EDD,proto3" json:"EDD,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Beneficial Ownership
	BeneficialOwnership *RT000QY46_YesNoExplain `protobuf:"bytes,26,opt,name=beneficial_ownership,json=beneficialOwnership,proto3" json:"beneficial_ownership,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Independent Testing
	IndependentTesting *RT000QY46_YesNoExplain `protobuf:"bytes,27,opt,name=independent_testing,json=independentTesting,proto3" json:"independent_testing,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Periodic Review
	PeriodicReview *RT000QY46_YesNoExplain `protobuf:"bytes,28,opt,name=periodic_review,json=periodicReview,proto3" json:"periodic_review,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Policies and Procedures
	PoliciesAndProcedures *RT000QY46_YesNoExplain `protobuf:"bytes,29,opt,name=policies_and_procedures,json=policiesAndProcedures,proto3" json:"policies_and_procedures,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Risk Assessment
	RiskAssessment *RT000QY46_YesNoExplain `protobuf:"bytes,30,opt,name=risk_assessment,json=riskAssessment,proto3" json:"risk_assessment,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Sanctions
	Sanctions *RT000QY46_YesNoExplain `protobuf:"bytes,31,opt,name=sanctions,proto3" json:"sanctions,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): PEP Screening
	PepScreening *RT000QY46_YesNoExplain `protobuf:"bytes,32,opt,name=pep_screening,json=pepScreening,proto3" json:"pep_screening,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Adverse Information Screening
	AdverseInformationScreening *RT000QY46_YesNoExplain `protobuf:"bytes,33,opt,name=adverse_information_screening,json=adverseInformationScreening,proto3" json:"adverse_information_screening,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Suspicious Activity Reporting
	SuspiciousActivityReporting *RT000QY46_YesNoExplain `protobuf:"bytes,34,opt,name=suspicious_activity_reporting,json=suspiciousActivityReporting,proto3" json:"suspicious_activity_reporting,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Training and Education
	TrainingAndEducation *RT000QY46_YesNoExplain `protobuf:"bytes,35,opt,name=training_and_education,json=trainingAndEducation,proto3" json:"training_and_education,omitempty"`
	// Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the following component (if NO, explain): Transaction Monitoring
	TransactionMonitoring *RT000QY46_YesNoExplain `protobuf:"bytes,36,opt,name=transaction_monitoring,json=transactionMonitoring,proto3" json:"transaction_monitoring,omitempty"`
	// Is the Entity's AML, CTF & Sanctions policy approved at least annually by the Board or equivalent Senior Management Committee? If NO, explain.
	PolicyApprovedAtLeastAnnuallyBySeniorCommittee *RT000QY46_YesNoExplain `protobuf:"bytes,37,opt,name=policy_approved_at_least_annually_by_senior_committee,json=policyApprovedAtLeastAnnuallyBySeniorCommittee,proto3" json:"policy_approved_at_least_annually_by_senior_committee,omitempty"`
	// Does the Entity use third parties to carry out any components of its AML, CTF & Sanctions programme? If YES, explain.
	UseThirdParties *RT000QY46_YesExplainNo `protobuf:"bytes,38,opt,name=use_third_parties,json=useThirdParties,proto3" json:"use_third_parties,omitempty"`
	// Does the Entity have a Sanctions Policy approved by management regarding compliance with sanctions law applicable to the Entity, including with respect its business conducted with, or through accounts held at foreign financial institutions? If NO, explain.
	EntityHasManagementApprovedSanctionsPolicy *RT000QY46_YesNoExplain `protobuf:"bytes,39,opt,name=entity_has_management_approved_sanctions_policy,json=entityHasManagementApprovedSanctionsPolicy,proto3" json:"entity_has_management_approved_sanctions_policy,omitempty"`
	// Does the Entity screen its customers, including beneficial ownership information collected by the Entity, during onboarding and regularly thereafter against Sanctions Lists? If NO, explain
	EntityScreensCustomersAgainstSanctionsLists *RT000QY46_YesNoExplain `protobuf:"bytes,40,opt,name=entity_screens_customers_against_sanctions_lists,json=entityScreensCustomersAgainstSanctionsLists,proto3" json:"entity_screens_customers_against_sanctions_lists,omitempty"`
	// Is the following sanctions list used in its screening process: Consolidated United Nations Security Council Sanctions List (UN)
	ConsolidatedUnitedNationsSanctionsListUsedInScreening bool `protobuf:"varint,41,opt,name=consolidated_united_nations_sanctions_list_used_in_screening,json=consolidatedUnitedNationsSanctionsListUsedInScreening,proto3" json:"consolidated_united_nations_sanctions_list_used_in_screening,omitempty"`
	// Is the following sanctions list used in its screening process: United States Department of the Treasury's Office of Foreign Assets Control (OFAC)
	UsaDeptOfTreasuryOfacSanctionsListUsedInScreening bool `protobuf:"varint,42,opt,name=usa_dept_of_treasury_ofac_sanctions_list_used_in_screening,json=usaDeptOfTreasuryOfacSanctionsListUsedInScreening,proto3" json:"usa_dept_of_treasury_ofac_sanctions_list_used_in_screening,omitempty"`
	// Is the following sanctions list used in its screening process: Office of Financial Sanctions Implementation HMT (OFSI)
	OfficeOfFinancialSanctionsImplementationHmtSanctionsListUsedInScreening bool `protobuf:"varint,43,opt,name=office_of_financial_sanctions_implementation_hmt_sanctions_list_used_in_screening,json=officeOfFinancialSanctionsImplementationHmtSanctionsListUsedInScreening,proto3" json:"office_of_financial_sanctions_implementation_hmt_sanctions_list_used_in_screening,omitempty"`
	// Is the following sanctions list used in its screening process: European Union Consolidated List (EU)
	EuropeanUnionConsolidatedListUsedInScreening bool `protobuf:"varint,44,opt,name=european_union_consolidated_list_used_in_screening,json=europeanUnionConsolidatedListUsedInScreening,proto3" json:"european_union_consolidated_list_used_in_screening,omitempty"`
	// Is the following sanctions list used in its screening process: Lists maintained by other G7 member countries
	ListMaintainedByOther_G7MemberCountryUsedInScreening bool `protobuf:"varint,45,opt,name=list_maintained_by_other_G7_member_country_used_in_screening,json=listMaintainedByOtherG7MemberCountryUsedInScreening,proto3" json:"list_maintained_by_other_G7_member_country_used_in_screening,omitempty"`
	// If TRUE for Q37e, specify
	Other_G7MemberCountrySanctionsListUsedInScreening string `protobuf:"bytes,46,opt,name=other_G7_member_country_sanctions_list_used_in_screening,json=otherG7MemberCountrySanctionsListUsedInScreening,proto3" json:"other_G7_member_country_sanctions_list_used_in_screening,omitempty"`
	// Does the Entity have a physical presence, e.g., branches, subsidiaries, or representative offices located in countries/regions against which UN, OFAC, OFSI, EU and G7 member countries have enacted comprehensive jurisdiction-based Sanctions? If YES, eplain
	EntityHasPhysicalPresenceInSanctionedCountries *RT000QY46_YesExplainNo `protobuf:"bytes,47,opt,name=entity_has_physical_presence_in_sanctioned_countries,json=entityHasPhysicalPresenceInSanctionedCountries,proto3" json:"entity_has_physical_presence_in_sanctioned_countries,omitempty"`
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) Reset() {
	*x = RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) ProtoMessage() {}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures.ProtoReflect.Descriptor instead.
func (*RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 7}
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasDocumentedPoliciesAndProceduresForMoneyLaundering() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityHasDocumentedPoliciesAndProceduresForMoneyLaundering
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasDocumentedPoliciesAndProceduresForTerroristFinancing() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityHasDocumentedPoliciesAndProceduresForTerroristFinancing
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasDocumentedPoliciesAndProceduresForSanctionsViolations() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityHasDocumentedPoliciesAndProceduresForSanctionsViolations
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitAccountsOrRelationshipsWithShellBanks() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitAccountsOrRelationshipsWithShellBanks
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitAccountsForSection_311Entities() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitAccountsForSection_311Entities
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatAssessRisksOfRelationshipsWithPeps() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatAssessRisksOfRelationshipsWithPeps
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatDefineEscalationProcessForFinancialCrime() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatDefineEscalationProcessForFinancialCrime
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatSpecifyHowSuspiciousActivitiesAreEscalated() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatSpecifyHowSuspiciousActivitiesAreEscalated
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHadDefinedARiskToleranceStatement() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityHadDefinedARiskToleranceStatement
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasRecordRetentionProcedure() *RT000QY46_YesNoAndExplain {
	if x != nil {
		return x.EntityHasRecordRetentionProcedure
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetAppointedOfficerWithSufficientExperience() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.AppointedOfficerWithSufficientExperience
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetCashReporting() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.CashReporting
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetCDD() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.CDD
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEDD() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EDD
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetBeneficialOwnership() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.BeneficialOwnership
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetIndependentTesting() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.IndependentTesting
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPeriodicReview() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PeriodicReview
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesAndProcedures() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesAndProcedures
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetRiskAssessment() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.RiskAssessment
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetSanctions() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.Sanctions
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPepScreening() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PepScreening
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetAdverseInformationScreening() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.AdverseInformationScreening
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetSuspiciousActivityReporting() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.SuspiciousActivityReporting
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetTrainingAndEducation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.TrainingAndEducation
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetTransactionMonitoring() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.TransactionMonitoring
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPolicyApprovedAtLeastAnnuallyBySeniorCommittee() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PolicyApprovedAtLeastAnnuallyBySeniorCommittee
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetUseThirdParties() *RT000QY46_YesExplainNo {
	if x != nil {
		return x.UseThirdParties
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasManagementApprovedSanctionsPolicy() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityHasManagementApprovedSanctionsPolicy
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityScreensCustomersAgainstSanctionsLists() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityScreensCustomersAgainstSanctionsLists
	}
	return nil
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetConsolidatedUnitedNationsSanctionsListUsedInScreening() bool {
	if x != nil {
		return x.ConsolidatedUnitedNationsSanctionsListUsedInScreening
	}
	return false
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetUsaDeptOfTreasuryOfacSanctionsListUsedInScreening() bool {
	if x != nil {
		return x.UsaDeptOfTreasuryOfacSanctionsListUsedInScreening
	}
	return false
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetOfficeOfFinancialSanctionsImplementationHmtSanctionsListUsedInScreening() bool {
	if x != nil {
		return x.OfficeOfFinancialSanctionsImplementationHmtSanctionsListUsedInScreening
	}
	return false
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEuropeanUnionConsolidatedListUsedInScreening() bool {
	if x != nil {
		return x.EuropeanUnionConsolidatedListUsedInScreening
	}
	return false
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetListMaintainedByOther_G7MemberCountryUsedInScreening() bool {
	if x != nil {
		return x.ListMaintainedByOther_G7MemberCountryUsedInScreening
	}
	return false
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetOther_G7MemberCountrySanctionsListUsedInScreening() string {
	if x != nil {
		return x.Other_G7MemberCountrySanctionsListUsedInScreening
	}
	return ""
}

func (x *RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasPhysicalPresenceInSanctionedCountries() *RT000QY46_YesExplainNo {
	if x != nil {
		return x.EntityHasPhysicalPresenceInSanctionedCountries
	}
	return nil
}

// Definition of KYC, CDD and EDD information
type RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q19 Does the Entity verify the identity of the customer? If NO, explain
	EntityVerifiesIdentityOfCustomer *RT000QY46_YesNoExplain `protobuf:"bytes,1,opt,name=entity_verifies_identity_of_customer,json=entityVerifiesIdentityOfCustomer,proto3" json:"entity_verifies_identity_of_customer,omitempty"`
	// Q20 Do the Entity's policies and procedures set out when CDD must be completed, e.g. at the time of onboarding or within 30 days? If NO, explain
	PoliciesAndProceduresSetOutWhenCddMustBeCompleted *RT000QY46_YesNoExplain `protobuf:"bytes,2,opt,name=policies_and_procedures_set_out_when_cdd_must_be_completed,json=policiesAndProceduresSetOutWhenCddMustBeCompleted,proto3" json:"policies_and_procedures_set_out_when_cdd_must_be_completed,omitempty"`
	// Q21a Does the Entity gather and retain Ownership structure information when conducting CDD? If NO, explain.
	EntityGathersOwnershipStructureInformation *RT000QY46_YesNoExplain `protobuf:"bytes,3,opt,name=entity_gathers_ownership_structure_information,json=entityGathersOwnershipStructureInformation,proto3" json:"entity_gathers_ownership_structure_information,omitempty"`
	// Q21b Does the Entity gather and retain Customer identification information when conducting CDD? If NO, explain.
	EntityGathersCustomerIdentificationInformation *RT000QY46_YesNoExplain `protobuf:"bytes,4,opt,name=entity_gathers_customer_identification_information,json=entityGathersCustomerIdentificationInformation,proto3" json:"entity_gathers_customer_identification_information,omitempty"`
	// Q21c Does the Entity gather and retain Expected activity information when conducting CDD? If NO, explain.
	EntityGathersExpectedActivityInformation *RT000QY46_YesNoExplain `protobuf:"bytes,5,opt,name=entity_gathers_expected_activity_information,json=entityGathersExpectedActivityInformation,proto3" json:"entity_gathers_expected_activity_information,omitempty"`
	// Q21d Does the Entity gather and retain Nature of business/employment information when conducting CDD? If NO, explain.
	EntityGathersNatureOfBusinessInformation *RT000QY46_YesNoExplain `protobuf:"bytes,6,opt,name=entity_gathers_nature_of_business_information,json=entityGathersNatureOfBusinessInformation,proto3" json:"entity_gathers_nature_of_business_information,omitempty"`
	// Q21e Does the Entity gather and retain Product usage information when conducting CDD? If NO, explain.
	EntityGathersProductUsageInformation *RT000QY46_YesNoExplain `protobuf:"bytes,7,opt,name=entity_gathers_product_usage_information,json=entityGathersProductUsageInformation,proto3" json:"entity_gathers_product_usage_information,omitempty"`
	// Q21f Does the Entity gather and retain Purpose and nature of relationship information when conducting CDD? If NO, explain.
	EntityGathersPurposeAndNatureOfRelationshipInformation *RT000QY46_YesNoExplain `protobuf:"bytes,8,opt,name=entity_gathers_purpose_and_nature_of_relationship_information,json=entityGathersPurposeAndNatureOfRelationshipInformation,proto3" json:"entity_gathers_purpose_and_nature_of_relationship_information,omitempty"`
	// Q21g Does the Entity gather and retain Source of funds information when conducting CDD? If NO, explain.
	EntityGathersSourceOfFundsInformation *RT000QY46_YesNoExplain `protobuf:"bytes,9,opt,name=entity_gathers_source_of_funds_information,json=entityGathersSourceOfFundsInformation,proto3" json:"entity_gathers_source_of_funds_information,omitempty"`
	// Q22a Is the Ultimate beneficial ownership identified. If NO, explain.
	UltimateBeneficialOwnershipIdentified *RT000QY46_YesNoExplain `protobuf:"bytes,10,opt,name=ultimate_beneficial_ownership_identified,json=ultimateBeneficialOwnershipIdentified,proto3" json:"ultimate_beneficial_ownership_identified,omitempty"`
	// Q22a1 Are ultimate beneficial owners verified?. If NO, explain.
	UltimateBeneficialOwnershipVerified *RT000QY46_YesNoExplain `protobuf:"bytes,11,opt,name=ultimate_beneficial_ownership_verified,json=ultimateBeneficialOwnershipVerified,proto3" json:"ultimate_beneficial_ownership_verified,omitempty"`
	// Q22b Are the Authorised signatories (where applicable) identified. If NO, explain.
	AuthorisedSignatoriesIdentified *RT000QY46_YesNoExplain `protobuf:"bytes,12,opt,name=authorised_signatories_identified,json=authorisedSignatoriesIdentified,proto3" json:"authorised_signatories_identified,omitempty"`
	// Q22c Are the key controllers identified. If NO, explain.
	KeyControllersIdentified *RT000QY46_YesNoExplain `protobuf:"bytes,13,opt,name=key_controllers_identified,json=keyControllersIdentified,proto3" json:"key_controllers_identified,omitempty"`
	// Q22d Are the other relevant parties identified. If NO, explain.
	OtherRelevantPartiesIdentified *RT000QY46_YesNoExplain `protobuf:"bytes,14,opt,name=other_relevant_parties_identified,json=otherRelevantPartiesIdentified,proto3" json:"other_relevant_parties_identified,omitempty"`
	// Q23 Does the due diligence process result in customers receiving a risk classification? If NO, explain.
	DueDiligenceProcessResultsInRiskClassification *RT000QY46_YesNoExplain `protobuf:"bytes,16,opt,name=due_diligence_process_results_in_risk_classification,json=dueDiligenceProcessResultsInRiskClassification,proto3" json:"due_diligence_process_results_in_risk_classification,omitempty"`
	// Q24 Does the Entity have a risk based approach to screening customers and connected parties to determine
	// whether they are PEPs, or controlled by PEPs?
	EntityHasRiskBasedApproachToScreeningForPepConnections *RT000QY46_YesNoAndExplain `protobuf:"bytes,28,opt,name=entity_has_risk_based_approach_to_screening_for_pep_connections,json=entityHasRiskBasedApproachToScreeningForPepConnections,proto3" json:"entity_has_risk_based_approach_to_screening_for_pep_connections,omitempty"`
	// Q25 Does the Entity have policies, procedures and processes to review and escalate potential matches from screening customers and connected parties to determine whether they are PEPs, or controlled by PEPs?
	EntityHasEscalationProcessForMatchesWhenScreeningForPepConnections *RT000QY46_YesNoAndExplain `protobuf:"bytes,29,opt,name=entity_has_escalation_process_for_matches_when_screening_for_pep_connections,json=entityHasEscalationProcessForMatchesWhenScreeningForPepConnections,proto3" json:"entity_has_escalation_process_for_matches_when_screening_for_pep_connections,omitempty"`
	// Q26a Does the Entity have a process to review and update customer information based on KYC renewal
	ProcessToReviewAndUpdateCustomerInformationOnKycRenewal *RT000QY46_YesNoExplain `protobuf:"bytes,34,opt,name=process_to_review_and_update_customer_information_on_kyc_renewal,json=processToReviewAndUpdateCustomerInformationOnKycRenewal,proto3" json:"process_to_review_and_update_customer_information_on_kyc_renewal,omitempty"`
	// Q27a Are Non-account customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	NonAccountCustomersRestrictedByFccProgramme *RT000QY46_YesExplainNo `protobuf:"bytes,37,opt,name=non_account_customers_restricted_by_fcc_programme,json=nonAccountCustomersRestrictedByFccProgramme,proto3" json:"non_account_customers_restricted_by_fcc_programme,omitempty"`
	// Q27b Are Non-resident customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	NonResidentCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,38,opt,name=non_resident_customers_restricted_by_fcc_programme,json=nonResidentCustomersRestrictedByFccProgramme,proto3" json:"non_resident_customers_restricted_by_fcc_programme,omitempty"`
	// Q27c Are Shell-banks customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	ShellBanksCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,39,opt,name=shell_banks_customers_restricted_by_fcc_programme,json=shellBanksCustomersRestrictedByFccProgramme,proto3" json:"shell_banks_customers_restricted_by_fcc_programme,omitempty"`
	// Q27d Are MVTS / MSB customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	MvtsMsbCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,40,opt,name=mvts_msb_customers_restricted_by_fcc_programme,json=mvtsMsbCustomersRestrictedByFccProgramme,proto3" json:"mvts_msb_customers_restricted_by_fcc_programme,omitempty"`
	// Q27e Are PEP customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PepCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,41,opt,name=pep_customers_restricted_by_fcc_programme,json=pepCustomersRestrictedByFccProgramme,proto3" json:"pep_customers_restricted_by_fcc_programme,omitempty"`
	// Q27f Are PEP related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PepRelatedCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,42,opt,name=pep_related_customers_restricted_by_fcc_programme,json=pepRelatedCustomersRestrictedByFccProgramme,proto3" json:"pep_related_customers_restricted_by_fcc_programme,omitempty"`
	// Q27g Are PEP Close Associate customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PepCloseAssociateCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,43,opt,name=pep_close_associate_customers_restricted_by_fcc_programme,json=pepCloseAssociateCustomersRestrictedByFccProgramme,proto3" json:"pep_close_associate_customers_restricted_by_fcc_programme,omitempty"`
	// Q27h Are Correspondent Banks related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	CorrespondentBankCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,44,opt,name=correspondent_bank_customers_restricted_by_fcc_programme,json=correspondentBankCustomersRestrictedByFccProgramme,proto3" json:"correspondent_bank_customers_restricted_by_fcc_programme,omitempty"`
	// Q27h1 If Correspondent Banks EDD or EDD & restricted, does the EDD assessment contain the elements as set out in the Wolfsberg Correspondent Banking Principles 2014? If NO, explain
	CorrespondentBankCustomersAssessmentContainsWorlsbergPrinciplesElements *RT000QY46_YesNoExplain `protobuf:"bytes,45,opt,name=correspondent_bank_customers_assessment_contains_worlsberg_principles_elements,json=correspondentBankCustomersAssessmentContainsWorlsbergPrinciplesElements,proto3" json:"correspondent_bank_customers_assessment_contains_worlsberg_principles_elements,omitempty"`
	// Q27i Are Arms, defense and military related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	ArmsDefenseAndMilitaryCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,46,opt,name=arms_defense_and_military_customers_restricted_by_fcc_programme,json=armsDefenseAndMilitaryCustomersRestrictedByFccProgramme,proto3" json:"arms_defense_and_military_customers_restricted_by_fcc_programme,omitempty"`
	// Q27j Are Atomic Power related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	AtomicPowerCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,47,opt,name=atomic_power_customers_restricted_by_fcc_programme,json=atomicPowerCustomersRestrictedByFccProgramme,proto3" json:"atomic_power_customers_restricted_by_fcc_programme,omitempty"`
	// Q27k Are Extractive Industry related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	ExtractiveIndustryCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,48,opt,name=extractive_industry_customers_restricted_by_fcc_programme,json=extractiveIndustryCustomersRestrictedByFccProgramme,proto3" json:"extractive_industry_customers_restricted_by_fcc_programme,omitempty"`
	// Q27l Are Precious metals and stones related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PreciousMetalsAndStonesCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,49,opt,name=precious_metals_and_stones_customers_restricted_by_fcc_programme,json=preciousMetalsAndStonesCustomersRestrictedByFccProgramme,proto3" json:"precious_metals_and_stones_customers_restricted_by_fcc_programme,omitempty"`
	// Q27m Are Unregulated Charity customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	UnregulatedCharityCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,50,opt,name=unregulated_charity_customers_restricted_by_fcc_programme,json=unregulatedCharityCustomersRestrictedByFccProgramme,proto3" json:"unregulated_charity_customers_restricted_by_fcc_programme,omitempty"`
	// Q27n Are Regulated Charity customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	RegulatedCharityCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,51,opt,name=regulated_charity_customers_restricted_by_fcc_programme,json=regulatedCharityCustomersRestrictedByFccProgramme,proto3" json:"regulated_charity_customers_restricted_by_fcc_programme,omitempty"`
	// Q27o Are Red light business / Adult entertainment customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	RedLightOrAdultEntertainmentCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,52,opt,name=red_light_or_adult_entertainment_customers_restricted_by_fcc_programme,json=redLightOrAdultEntertainmentCustomersRestrictedByFccProgramme,proto3" json:"red_light_or_adult_entertainment_customers_restricted_by_fcc_programme,omitempty"`
	// Q27p Are Non-Government Organisations customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	NgoCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,53,opt,name=ngo_customers_restricted_by_fcc_programme,json=ngoCustomersRestrictedByFccProgramme,proto3" json:"ngo_customers_restricted_by_fcc_programme,omitempty"`
	// Q27q Are Virtual Currency customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	VirtualCurrencyCutsomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,54,opt,name=virtual_currency_cutsomers_restricted_by_fcc_programme,json=virtualCurrencyCutsomersRestrictedByFccProgramme,proto3" json:"virtual_currency_cutsomers_restricted_by_fcc_programme,omitempty"`
	// Q27r Are Marijuana related customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	MarijuanaRelatedCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,55,opt,name=marijuana_related_customers_restricted_by_fcc_programme,json=marijuanaRelatedCustomersRestrictedByFccProgramme,proto3" json:"marijuana_related_customers_restricted_by_fcc_programme,omitempty"`
	// Q27s Are Embassy or Consulate customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	EmbassyOrConsulateCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,56,opt,name=embassy_or_consulate_customers_restricted_by_fcc_programme,json=embassyOrConsulateCustomersRestrictedByFccProgramme,proto3" json:"embassy_or_consulate_customers_restricted_by_fcc_programme,omitempty"`
	// Q27t Are Gambling  customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	GamblingCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,57,opt,name=gambling_customers_restricted_by_fcc_programme,json=gamblingCustomersRestrictedByFccProgramme,proto3" json:"gambling_customers_restricted_by_fcc_programme,omitempty"`
	// Q27u Are Payment Service Provider customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	PaymentServiceProviderCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,58,opt,name=payment_service_provider_customers_restricted_by_fcc_programme,json=paymentServiceProviderCustomersRestrictedByFccProgramme,proto3" json:"payment_service_provider_customers_restricted_by_fcc_programme,omitempty"`
	// Q27v Are other types of customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	OtherCustomersRestrictedByFccProgramme *RT000QY46_YesNoExplain `protobuf:"bytes,59,opt,name=other_customers_restricted_by_fcc_programme,json=otherCustomersRestrictedByFccProgramme,proto3" json:"other_customers_restricted_by_fcc_programme,omitempty"`
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) Reset() {
	*x = RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) ProtoMessage() {}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures.ProtoReflect.Descriptor instead.
func (*RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 8}
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityVerifiesIdentityOfCustomer() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityVerifiesIdentityOfCustomer
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetPoliciesAndProceduresSetOutWhenCddMustBeCompleted() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PoliciesAndProceduresSetOutWhenCddMustBeCompleted
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityGathersOwnershipStructureInformation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityGathersOwnershipStructureInformation
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityGathersCustomerIdentificationInformation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityGathersCustomerIdentificationInformation
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityGathersExpectedActivityInformation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityGathersExpectedActivityInformation
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityGathersNatureOfBusinessInformation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityGathersNatureOfBusinessInformation
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityGathersProductUsageInformation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityGathersProductUsageInformation
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityGathersPurposeAndNatureOfRelationshipInformation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityGathersPurposeAndNatureOfRelationshipInformation
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityGathersSourceOfFundsInformation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityGathersSourceOfFundsInformation
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetUltimateBeneficialOwnershipIdentified() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.UltimateBeneficialOwnershipIdentified
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetUltimateBeneficialOwnershipVerified() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.UltimateBeneficialOwnershipVerified
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetAuthorisedSignatoriesIdentified() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.AuthorisedSignatoriesIdentified
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetKeyControllersIdentified() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.KeyControllersIdentified
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetOtherRelevantPartiesIdentified() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.OtherRelevantPartiesIdentified
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetDueDiligenceProcessResultsInRiskClassification() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.DueDiligenceProcessResultsInRiskClassification
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityHasRiskBasedApproachToScreeningForPepConnections() *RT000QY46_YesNoAndExplain {
	if x != nil {
		return x.EntityHasRiskBasedApproachToScreeningForPepConnections
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEntityHasEscalationProcessForMatchesWhenScreeningForPepConnections() *RT000QY46_YesNoAndExplain {
	if x != nil {
		return x.EntityHasEscalationProcessForMatchesWhenScreeningForPepConnections
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetProcessToReviewAndUpdateCustomerInformationOnKycRenewal() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ProcessToReviewAndUpdateCustomerInformationOnKycRenewal
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetNonAccountCustomersRestrictedByFccProgramme() *RT000QY46_YesExplainNo {
	if x != nil {
		return x.NonAccountCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetNonResidentCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.NonResidentCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetShellBanksCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ShellBanksCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetMvtsMsbCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.MvtsMsbCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetPepCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PepCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetPepRelatedCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PepRelatedCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetPepCloseAssociateCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PepCloseAssociateCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetCorrespondentBankCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.CorrespondentBankCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetCorrespondentBankCustomersAssessmentContainsWorlsbergPrinciplesElements() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.CorrespondentBankCustomersAssessmentContainsWorlsbergPrinciplesElements
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetArmsDefenseAndMilitaryCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ArmsDefenseAndMilitaryCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetAtomicPowerCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.AtomicPowerCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetExtractiveIndustryCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ExtractiveIndustryCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetPreciousMetalsAndStonesCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PreciousMetalsAndStonesCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetUnregulatedCharityCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.UnregulatedCharityCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetRegulatedCharityCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.RegulatedCharityCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetRedLightOrAdultEntertainmentCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.RedLightOrAdultEntertainmentCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetNgoCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.NgoCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetVirtualCurrencyCutsomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.VirtualCurrencyCutsomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetMarijuanaRelatedCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.MarijuanaRelatedCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetEmbassyOrConsulateCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EmbassyOrConsulateCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetGamblingCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.GamblingCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetPaymentServiceProviderCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.PaymentServiceProviderCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures) GetOtherCustomersRestrictedByFccProgramme() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.OtherCustomersRestrictedByFccProgramme
	}
	return nil
}

// Definition for Monitoring & Reporting information
type RT000QY46_MonitoringAndReporting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Does the Entity have risk based policies, procedures and monitoring processes for the identification and reporting of suspicious activity?
	EntityHasRiskBasedPolicies *RT000QY46_YesNoExplain `protobuf:"bytes,1,opt,name=entity_has_risk_based_policies,json=entityHasRiskBasedPolicies,proto3" json:"entity_has_risk_based_policies,omitempty"`
	// What is the method used by the Entity to monitor transactions for suspicious activities?
	MethodUsedByEntityToMonitorTransactionForSuspiciousActivities string `protobuf:"bytes,2,opt,name=method_used_by_entity_to_monitor_transaction_for_suspicious_activities,json=methodUsedByEntityToMonitorTransactionForSuspiciousActivities,proto3" json:"method_used_by_entity_to_monitor_transaction_for_suspicious_activities,omitempty"`
	// Does the Entity have regulatory requirements to report suspicious transactions?
	EntityHasRegulatoryRequirementsToReportSuspiciousTransactions bool `protobuf:"varint,4,opt,name=entity_has_regulatory_requirements_to_report_suspicious_transactions,json=entityHasRegulatoryRequirementsToReportSuspiciousTransactions,proto3" json:"entity_has_regulatory_requirements_to_report_suspicious_transactions,omitempty"`
	// If TRUE to Q31, does the Entity have policies, procedures and processes to comply with suspicious transaction reporting requirements? If NO, explain
	EntityHasPoliciesProceduresProcessesToComplyWithSuspiciousTransactionMonitoringRequirements *RT000QY46_YesNoExplain `protobuf:"bytes,5,opt,name=entity_has_policies_procedures_processes_to_comply_with_suspicious_transaction_monitoring_requirements,json=entityHasPoliciesProceduresProcessesToComplyWithSuspiciousTransactionMonitoringRequirements,proto3" json:"entity_has_policies_procedures_processes_to_comply_with_suspicious_transaction_monitoring_requirements,omitempty"`
	// Does the Entity have policies, procedures and processes to review and escalate matters arising from the monitoring of customer transactions and activity? If NO, explain
	EntityHasPoliciesProceduresAndProcessesToReviewAndEscalate *RT000QY46_YesNoExplain `protobuf:"bytes,6,opt,name=entity_has_policies_procedures_and_processes_to_review_and_escalate,json=entityHasPoliciesProceduresAndProcessesToReviewAndEscalate,proto3" json:"entity_has_policies_procedures_and_processes_to_review_and_escalate,omitempty"`
	// Does the entity have policies, procedures and processes in place to escalate and report potential compliance breaches to the client compliance team? If YES, please describe or attach supporting documentation. If NO, explain.
	EntityHasPoliciesProceduresAndProcessesToReportPotentialBreachesToClientTeam *RT000QY46_YesNoAndExplain `protobuf:"bytes,7,opt,name=entity_has_policies_procedures_and_processes_to_report_potential_breaches_to_client_team,json=entityHasPoliciesProceduresAndProcessesToReportPotentialBreachesToClientTeam,proto3" json:"entity_has_policies_procedures_and_processes_to_report_potential_breaches_to_client_team,omitempty"`
}

func (x *RT000QY46_MonitoringAndReporting) Reset() {
	*x = RT000QY46_MonitoringAndReporting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_MonitoringAndReporting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_MonitoringAndReporting) ProtoMessage() {}

func (x *RT000QY46_MonitoringAndReporting) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_MonitoringAndReporting.ProtoReflect.Descriptor instead.
func (*RT000QY46_MonitoringAndReporting) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 9}
}

func (x *RT000QY46_MonitoringAndReporting) GetEntityHasRiskBasedPolicies() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityHasRiskBasedPolicies
	}
	return nil
}

func (x *RT000QY46_MonitoringAndReporting) GetMethodUsedByEntityToMonitorTransactionForSuspiciousActivities() string {
	if x != nil {
		return x.MethodUsedByEntityToMonitorTransactionForSuspiciousActivities
	}
	return ""
}

func (x *RT000QY46_MonitoringAndReporting) GetEntityHasRegulatoryRequirementsToReportSuspiciousTransactions() bool {
	if x != nil {
		return x.EntityHasRegulatoryRequirementsToReportSuspiciousTransactions
	}
	return false
}

func (x *RT000QY46_MonitoringAndReporting) GetEntityHasPoliciesProceduresProcessesToComplyWithSuspiciousTransactionMonitoringRequirements() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityHasPoliciesProceduresProcessesToComplyWithSuspiciousTransactionMonitoringRequirements
	}
	return nil
}

func (x *RT000QY46_MonitoringAndReporting) GetEntityHasPoliciesProceduresAndProcessesToReviewAndEscalate() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityHasPoliciesProceduresAndProcessesToReviewAndEscalate
	}
	return nil
}

func (x *RT000QY46_MonitoringAndReporting) GetEntityHasPoliciesProceduresAndProcessesToReportPotentialBreachesToClientTeam() *RT000QY46_YesNoAndExplain {
	if x != nil {
		return x.EntityHasPoliciesProceduresAndProcessesToReportPotentialBreachesToClientTeam
	}
	return nil
}

// Definition of Training and Education Information
type RT000QY46_TrainingAndEducation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q39a Does the Entity provide mandatory training on (if NO, explain): Identification and reporting of transactions to government authorities
	ProvidesMandatoryTrainingOnIdentificationAndReportingOfTransactionToGovernmentAuthorities *RT000QY46_YesNoExplain `protobuf:"bytes,1,opt,name=provides_mandatory_training_on_identification_and_reporting_of_transaction_to_government_authorities,json=providesMandatoryTrainingOnIdentificationAndReportingOfTransactionToGovernmentAuthorities,proto3" json:"provides_mandatory_training_on_identification_and_reporting_of_transaction_to_government_authorities,omitempty"`
	// Q39b Does the Entity provide mandatory training on (if NO, explain): Examples of different forms of money laundering, terrorist financing and sanctions violations relevant for the types of products and services offered
	ProvidesMandatoryTrainingOnExamplesOfDifferentTypesOfMoneyLaundering *RT000QY46_YesNoExplain `protobuf:"bytes,2,opt,name=provides_mandatory_training_on_examples_of_different_types_of_money_laundering,json=providesMandatoryTrainingOnExamplesOfDifferentTypesOfMoneyLaundering,proto3" json:"provides_mandatory_training_on_examples_of_different_types_of_money_laundering,omitempty"`
	// Q39c Does the Entity provide mandatory training on (if NO, explain): Internal policies for controlling money laundering, terrorist financing and sanctions violations
	ProvidesMandatoryTrainingOnInternalPoliciesForControllingMoneyLaundering *RT000QY46_YesNoExplain `protobuf:"bytes,3,opt,name=provides_mandatory_training_on_internal_policies_for_controlling_money_laundering,json=providesMandatoryTrainingOnInternalPoliciesForControllingMoneyLaundering,proto3" json:"provides_mandatory_training_on_internal_policies_for_controlling_money_laundering,omitempty"`
	// Q39d Does the Entity provide mandatory training on (if NO, explain): New issues that occur in the market, e.g., significant regulatory actions or new regulations
	ProvidesMandatoryTrainingOnConductAndCulture *RT000QY46_YesNoExplain `protobuf:"bytes,5,opt,name=provides_mandatory_training_on_conduct_and_culture,json=providesMandatoryTrainingOnConductAndCulture,proto3" json:"provides_mandatory_training_on_conduct_and_culture,omitempty"`
	// Q40a Is the above mandatory training provided to (if NO, explain): Board and Senior Committee Management
	MandatoryTrainingProvidedToBoardAndSeniorCommiteeManagement *RT000QY46_YesNoExplain `protobuf:"bytes,6,opt,name=mandatory_training_provided_to_board_and_senior_commitee_management,json=mandatoryTrainingProvidedToBoardAndSeniorCommiteeManagement,proto3" json:"mandatory_training_provided_to_board_and_senior_commitee_management,omitempty"`
	// Q40b Is the above mandatory training provided to (if NO, explain): 1st Line of Defence
	MandatoryTrainingProvidedToFirstLineOfDefence *RT000QY46_YesNoExplain `protobuf:"bytes,7,opt,name=mandatory_training_provided_to_first_line_of_defence,json=mandatoryTrainingProvidedToFirstLineOfDefence,proto3" json:"mandatory_training_provided_to_first_line_of_defence,omitempty"`
	// Q40c Is the above mandatory training provided to (if NO, explain): 2nd Line of Defence
	MandatoryTrainingProvidedToSecondLineOfDefence *RT000QY46_YesNoExplain `protobuf:"bytes,8,opt,name=mandatory_training_provided_to_second_line_of_defence,json=mandatoryTrainingProvidedToSecondLineOfDefence,proto3" json:"mandatory_training_provided_to_second_line_of_defence,omitempty"`
	// Q40d Is the above mandatory training provided to (if NO, explain): 3nd Line of Defence
	MandatoryTrainingProvidedToThirdLineOfDefence *RT000QY46_YesNoExplain `protobuf:"bytes,9,opt,name=mandatory_training_provided_to_third_line_of_defence,json=mandatoryTrainingProvidedToThirdLineOfDefence,proto3" json:"mandatory_training_provided_to_third_line_of_defence,omitempty"`
	// Q40e Is the above mandatory training provided to (if NO, explain): 3rd parties to which specific FCC activities have been outsourced
	MandatoryTrainingProvidedToThirdParitiesToWhichActivitiesOutsourced *RT000QY46_YesNoExplain `protobuf:"bytes,10,opt,name=mandatory_training_provided_to_third_parities_to_which_activities_outsourced,json=mandatoryTrainingProvidedToThirdParitiesToWhichActivitiesOutsourced,proto3" json:"mandatory_training_provided_to_third_parities_to_which_activities_outsourced,omitempty"`
	// Q40f Is the above mandatory training provided to (if NO, explain): Non-employed workers (contractors/consultants)
	MandatoryTrainingProvidedToNonEmployedWorkers *RT000QY46_YesNoExplain `protobuf:"bytes,11,opt,name=mandatory_training_provided_to_non_employed_workers,json=mandatoryTrainingProvidedToNonEmployedWorkers,proto3" json:"mandatory_training_provided_to_non_employed_workers,omitempty"`
}

func (x *RT000QY46_TrainingAndEducation) Reset() {
	*x = RT000QY46_TrainingAndEducation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_TrainingAndEducation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_TrainingAndEducation) ProtoMessage() {}

func (x *RT000QY46_TrainingAndEducation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_TrainingAndEducation.ProtoReflect.Descriptor instead.
func (*RT000QY46_TrainingAndEducation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 10}
}

func (x *RT000QY46_TrainingAndEducation) GetProvidesMandatoryTrainingOnIdentificationAndReportingOfTransactionToGovernmentAuthorities() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ProvidesMandatoryTrainingOnIdentificationAndReportingOfTransactionToGovernmentAuthorities
	}
	return nil
}

func (x *RT000QY46_TrainingAndEducation) GetProvidesMandatoryTrainingOnExamplesOfDifferentTypesOfMoneyLaundering() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ProvidesMandatoryTrainingOnExamplesOfDifferentTypesOfMoneyLaundering
	}
	return nil
}

func (x *RT000QY46_TrainingAndEducation) GetProvidesMandatoryTrainingOnInternalPoliciesForControllingMoneyLaundering() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ProvidesMandatoryTrainingOnInternalPoliciesForControllingMoneyLaundering
	}
	return nil
}

func (x *RT000QY46_TrainingAndEducation) GetProvidesMandatoryTrainingOnConductAndCulture() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ProvidesMandatoryTrainingOnConductAndCulture
	}
	return nil
}

func (x *RT000QY46_TrainingAndEducation) GetMandatoryTrainingProvidedToBoardAndSeniorCommiteeManagement() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToBoardAndSeniorCommiteeManagement
	}
	return nil
}

func (x *RT000QY46_TrainingAndEducation) GetMandatoryTrainingProvidedToFirstLineOfDefence() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToFirstLineOfDefence
	}
	return nil
}

func (x *RT000QY46_TrainingAndEducation) GetMandatoryTrainingProvidedToSecondLineOfDefence() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToSecondLineOfDefence
	}
	return nil
}

func (x *RT000QY46_TrainingAndEducation) GetMandatoryTrainingProvidedToThirdLineOfDefence() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToThirdLineOfDefence
	}
	return nil
}

func (x *RT000QY46_TrainingAndEducation) GetMandatoryTrainingProvidedToThirdParitiesToWhichActivitiesOutsourced() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToThirdParitiesToWhichActivitiesOutsourced
	}
	return nil
}

func (x *RT000QY46_TrainingAndEducation) GetMandatoryTrainingProvidedToNonEmployedWorkers() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.MandatoryTrainingProvidedToNonEmployedWorkers
	}
	return nil
}

// Definition of Audit information
type RT000QY46_AuditInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In addition to inspections by the government supervisors/regulators, does the Entity have an internal audit function, a testing function or other independent third party, or both? If NO, explain
	EntityHasInternalAuditOrSimilarTestingFunction *RT000QY46_YesNoExplain `protobuf:"bytes,1,opt,name=entity_has_internal_audit_or_similar_testing_function,json=entityHasInternalAuditOrSimilarTestingFunction,proto3" json:"entity_has_internal_audit_or_similar_testing_function,omitempty"`
	// How often is the Entity by an Internal Audit function or department
	FrequencyOfProgrammeAuditByInternalAuditDepartment string `protobuf:"bytes,2,opt,name=frequency_of_programme_audit_by_internal_audit_department,json=frequencyOfProgrammeAuditByInternalAuditDepartment,proto3" json:"frequency_of_programme_audit_by_internal_audit_department,omitempty"`
	// How often is the Entity audited by and External Third Party
	FrequencyOfProgrammeAuditByExternalThirdParty string `protobuf:"bytes,4,opt,name=frequency_of_programme_audit_by_external_third_party,json=frequencyOfProgrammeAuditByExternalThirdParty,proto3" json:"frequency_of_programme_audit_by_external_third_party,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): AML, CTF & Sanctions policy and procedures
	InternalAuditOrThirdPartyCoversAmlCtfAndSanctionsPolicy *RT000QY46_YesNoExplain `protobuf:"bytes,5,opt,name=internal_audit_or_third_party_covers_aml_ctf_and_sanctions_policy,json=internalAuditOrThirdPartyCoversAmlCtfAndSanctionsPolicy,proto3" json:"internal_audit_or_third_party_covers_aml_ctf_and_sanctions_policy,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): KYC / CDD / EDD and underlying methodologies
	InternalAuditOrThirdPartyCoversKycCddEddAndUnderlyingMethodologies *RT000QY46_YesNoExplain `protobuf:"bytes,6,opt,name=internal_audit_or_third_party_covers_kyc_cdd_edd_and_underlying_methodologies,json=internalAuditOrThirdPartyCoversKycCddEddAndUnderlyingMethodologies,proto3" json:"internal_audit_or_third_party_covers_kyc_cdd_edd_and_underlying_methodologies,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): Transaction Monitoring
	InternalAuditOrThirdPartyCoversTransactionMonitoring *RT000QY46_YesNoExplain `protobuf:"bytes,7,opt,name=internal_audit_or_third_party_covers_transaction_monitoring,json=internalAuditOrThirdPartyCoversTransactionMonitoring,proto3" json:"internal_audit_or_third_party_covers_transaction_monitoring,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): Transaction Screening including for sanctions
	InternalAuditOrThirdPartyCoversTransactionScreening *RT000QY46_YesNoExplain `protobuf:"bytes,8,opt,name=internal_audit_or_third_party_covers_transaction_screening,json=internalAuditOrThirdPartyCoversTransactionScreening,proto3" json:"internal_audit_or_third_party_covers_transaction_screening,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): Name Screening & List Management
	InternalAuditOrThirdPartyCoversNameScreeningAndListManagement *RT000QY46_YesNoExplain `protobuf:"bytes,9,opt,name=internal_audit_or_third_party_covers_name_screening_and_list_management,json=internalAuditOrThirdPartyCoversNameScreeningAndListManagement,proto3" json:"internal_audit_or_third_party_covers_name_screening_and_list_management,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): Training & Education
	InternalAuditOrThirdPartyCoversTrainingAndEducation *RT000QY46_YesNoExplain `protobuf:"bytes,10,opt,name=internal_audit_or_third_party_covers_training_and_education,json=internalAuditOrThirdPartyCoversTrainingAndEducation,proto3" json:"internal_audit_or_third_party_covers_training_and_education,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): Technology
	InternalAuditOrThirdPartyCoversTechnology *RT000QY46_YesNoExplain `protobuf:"bytes,11,opt,name=internal_audit_or_third_party_covers_technology,json=internalAuditOrThirdPartyCoversTechnology,proto3" json:"internal_audit_or_third_party_covers_technology,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): Governance
	InternalAuditOrThirdPartyCoversGovernance *RT000QY46_YesNoExplain `protobuf:"bytes,12,opt,name=internal_audit_or_third_party_covers_governance,json=internalAuditOrThirdPartyCoversGovernance,proto3" json:"internal_audit_or_third_party_covers_governance,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): Reporting/Metrics & Management Information
	InternalAuditOrThirdPartyCoversReportingMetricsAndManagementInformation *RT000QY46_YesNoExplain `protobuf:"bytes,13,opt,name=internal_audit_or_third_party_covers_reporting_metrics_and_management_information,json=internalAuditOrThirdPartyCoversReportingMetricsAndManagementInformation,proto3" json:"internal_audit_or_third_party_covers_reporting_metrics_and_management_information,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): Suspicious Activity Filing
	InternalAuditOrThirdPartyCoversSuspiciousActivityFiling *RT000QY46_YesNoExplain `protobuf:"bytes,14,opt,name=internal_audit_or_third_party_covers_suspicious_activity_filing,json=internalAuditOrThirdPartyCoversSuspiciousActivityFiling,proto3" json:"internal_audit_or_third_party_covers_suspicious_activity_filing,omitempty"`
	// Does the internal audit function or other independent third party cover the following area (if NO, explain): Enterprise Wide Risk Assessment
	InternalAuditOrThirdPartyCoversEnterpriseWideRiskAssessment *RT000QY46_YesNoExplain `protobuf:"bytes,15,opt,name=internal_audit_or_third_party_covers_enterprise_wide_risk_assessment,json=internalAuditOrThirdPartyCoversEnterpriseWideRiskAssessment,proto3" json:"internal_audit_or_third_party_covers_enterprise_wide_risk_assessment,omitempty"`
	// Does the internal audit function or other independent third party cover the following area: Other (please list)
	InternalAuditOrThirdPartyCoversOtherAreas []string `protobuf:"bytes,16,rep,name=internal_audit_or_third_party_covers_other_areas,json=internalAuditOrThirdPartyCoversOtherAreas,proto3" json:"internal_audit_or_third_party_covers_other_areas,omitempty"`
	// Are adverse findings from internal & external audit tracked to completion and assessed for adequacy and completeness? If NO, explain.
	AdverseFindingsFromInternalAndExternalAuditTrackedAndAssessed *RT000QY46_YesNoExplain `protobuf:"bytes,17,opt,name=adverse_findings_from_internal_and_external_audit_tracked_and_assessed,json=adverseFindingsFromInternalAndExternalAuditTrackedAndAssessed,proto3" json:"adverse_findings_from_internal_and_external_audit_tracked_and_assessed,omitempty"`
}

func (x *RT000QY46_AuditInformation) Reset() {
	*x = RT000QY46_AuditInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_AuditInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_AuditInformation) ProtoMessage() {}

func (x *RT000QY46_AuditInformation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_AuditInformation.ProtoReflect.Descriptor instead.
func (*RT000QY46_AuditInformation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 11}
}

func (x *RT000QY46_AuditInformation) GetEntityHasInternalAuditOrSimilarTestingFunction() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.EntityHasInternalAuditOrSimilarTestingFunction
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetFrequencyOfProgrammeAuditByInternalAuditDepartment() string {
	if x != nil {
		return x.FrequencyOfProgrammeAuditByInternalAuditDepartment
	}
	return ""
}

func (x *RT000QY46_AuditInformation) GetFrequencyOfProgrammeAuditByExternalThirdParty() string {
	if x != nil {
		return x.FrequencyOfProgrammeAuditByExternalThirdParty
	}
	return ""
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversAmlCtfAndSanctionsPolicy() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversAmlCtfAndSanctionsPolicy
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversKycCddEddAndUnderlyingMethodologies() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversKycCddEddAndUnderlyingMethodologies
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversTransactionMonitoring() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversTransactionMonitoring
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversTransactionScreening() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversTransactionScreening
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversNameScreeningAndListManagement() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversNameScreeningAndListManagement
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversTrainingAndEducation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversTrainingAndEducation
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversTechnology() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversTechnology
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversGovernance() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversGovernance
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversReportingMetricsAndManagementInformation() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversReportingMetricsAndManagementInformation
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversSuspiciousActivityFiling() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversSuspiciousActivityFiling
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversEnterpriseWideRiskAssessment() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversEnterpriseWideRiskAssessment
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetInternalAuditOrThirdPartyCoversOtherAreas() []string {
	if x != nil {
		return x.InternalAuditOrThirdPartyCoversOtherAreas
	}
	return nil
}

func (x *RT000QY46_AuditInformation) GetAdverseFindingsFromInternalAndExternalAuditTrackedAndAssessed() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.AdverseFindingsFromInternalAndExternalAuditTrackedAndAssessed
	}
	return nil
}

// Definition of Operational Risk Management Information
type RT000QY46_OperationalRiskManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Does the company have an operational risk management policy? If YES, please attach.
	// If NO, please please describe your general measures on how you identify, measure, manage and monitor relevant operational risks as applicable.
	OperationalRiskManagementPolicyInPlace *RT000QY46_YesNoAndExplain `protobuf:"bytes,1,opt,name=operational_risk_management_policy_in_place,json=operationalRiskManagementPolicyInPlace,proto3" json:"operational_risk_management_policy_in_place,omitempty"`
	// Please describe how you will, in addition to your own risk framework, integrate and monitor the risk appetites of the client fund manager and the fund board(s).
	DescribeProcessForIntegratingClientRiskFramework string `protobuf:"bytes,2,opt,name=describe_process_for_integrating_client_risk_framework,json=describeProcessForIntegratingClientRiskFramework,proto3" json:"describe_process_for_integrating_client_risk_framework,omitempty"`
}

func (x *RT000QY46_OperationalRiskManagement) Reset() {
	*x = RT000QY46_OperationalRiskManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_OperationalRiskManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_OperationalRiskManagement) ProtoMessage() {}

func (x *RT000QY46_OperationalRiskManagement) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_OperationalRiskManagement.ProtoReflect.Descriptor instead.
func (*RT000QY46_OperationalRiskManagement) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 12}
}

func (x *RT000QY46_OperationalRiskManagement) GetOperationalRiskManagementPolicyInPlace() *RT000QY46_YesNoAndExplain {
	if x != nil {
		return x.OperationalRiskManagementPolicyInPlace
	}
	return nil
}

func (x *RT000QY46_OperationalRiskManagement) GetDescribeProcessForIntegratingClientRiskFramework() string {
	if x != nil {
		return x.DescribeProcessForIntegratingClientRiskFramework
	}
	return ""
}

// Definition of Delegation management
type RT000QY46_DelegateAndThirdPartyProviders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Complete for all delegates or third parties (including delegates, intermediaries, consultants or advisors, whether affiliated or not) involved in material elements of the assigned functions
	RelevantDelegates []*RT000QY46_DelegateAndThirdPartyProviders_Delegate `protobuf:"bytes,1,rep,name=relevant_delegates,json=relevantDelegates,proto3" json:"relevant_delegates,omitempty"`
	// Do you have a conflict of interest policy in this context? If NO, explain. If YES, attach.
	ConflictOfInterestPolicyInPlace *RT000QY46_YesNoExplain `protobuf:"bytes,2,opt,name=conflict_of_interest_policy_in_place,json=conflictOfInterestPolicyInPlace,proto3" json:"conflict_of_interest_policy_in_place,omitempty"`
	// Describe the liability regime the company applies in the case of a delegation to a third party
	LiabilityRegimeApplied string `protobuf:"bytes,3,opt,name=liability_regime_applied,json=liabilityRegimeApplied,proto3" json:"liability_regime_applied,omitempty"`
}

func (x *RT000QY46_DelegateAndThirdPartyProviders) Reset() {
	*x = RT000QY46_DelegateAndThirdPartyProviders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_DelegateAndThirdPartyProviders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_DelegateAndThirdPartyProviders) ProtoMessage() {}

func (x *RT000QY46_DelegateAndThirdPartyProviders) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_DelegateAndThirdPartyProviders.ProtoReflect.Descriptor instead.
func (*RT000QY46_DelegateAndThirdPartyProviders) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 13}
}

func (x *RT000QY46_DelegateAndThirdPartyProviders) GetRelevantDelegates() []*RT000QY46_DelegateAndThirdPartyProviders_Delegate {
	if x != nil {
		return x.RelevantDelegates
	}
	return nil
}

func (x *RT000QY46_DelegateAndThirdPartyProviders) GetConflictOfInterestPolicyInPlace() *RT000QY46_YesNoExplain {
	if x != nil {
		return x.ConflictOfInterestPolicyInPlace
	}
	return nil
}

func (x *RT000QY46_DelegateAndThirdPartyProviders) GetLiabilityRegimeApplied() string {
	if x != nil {
		return x.LiabilityRegimeApplied
	}
	return ""
}

// Definition of IT System information
type RT000QY46_InformationTechnologySystems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which main IT systems are used for the assigned functions (including third party service provider and affiliated)?
	InformationTechnologySystemsUsedForAssignedFunctions []string `protobuf:"bytes,1,rep,name=information_technology_systems_used_for_assigned_functions,json=informationTechnologySystemsUsedForAssignedFunctions,proto3" json:"information_technology_systems_used_for_assigned_functions,omitempty"`
	// Describe your plans over the next 3 years with respect to changes to the IT architecture / environment / infrastructure?
	DescribePlannedChangesToInformationTechnologyArchitectureEnvironmentOrInfrastructure string `protobuf:"bytes,2,opt,name=describe_planned_changes_to_information_technology_architecture_environment_or_infrastructure,json=describePlannedChangesToInformationTechnologyArchitectureEnvironmentOrInfrastructure,proto3" json:"describe_planned_changes_to_information_technology_architecture_environment_or_infrastructure,omitempty"`
	// Have you suffered any delays or disruptions in your systems during the last three years? If YES, explain.
	SufferedDelaysOrDisruptionsInSystemsInLastThreeYears *RT000QY46_YesExplainNo `protobuf:"bytes,3,opt,name=suffered_delays_or_disruptions_in_systems_in_last_three_years,json=sufferedDelaysOrDisruptionsInSystemsInLastThreeYears,proto3" json:"suffered_delays_or_disruptions_in_systems_in_last_three_years,omitempty"`
	// Have you suffered any information on any confidentiality and system security breaches in the last three years?  If YES, explain.
	SufferedInformationOrConfidentialityAndSystemSecurityBreachesInLastThreeYears *RT000QY46_YesExplainNo `protobuf:"bytes,4,opt,name=suffered_information_or_confidentiality_and_system_security_breaches_in_last_three_years,json=sufferedInformationOrConfidentialityAndSystemSecurityBreachesInLastThreeYears,proto3" json:"suffered_information_or_confidentiality_and_system_security_breaches_in_last_three_years,omitempty"`
}

func (x *RT000QY46_InformationTechnologySystems) Reset() {
	*x = RT000QY46_InformationTechnologySystems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_InformationTechnologySystems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_InformationTechnologySystems) ProtoMessage() {}

func (x *RT000QY46_InformationTechnologySystems) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_InformationTechnologySystems.ProtoReflect.Descriptor instead.
func (*RT000QY46_InformationTechnologySystems) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 14}
}

func (x *RT000QY46_InformationTechnologySystems) GetInformationTechnologySystemsUsedForAssignedFunctions() []string {
	if x != nil {
		return x.InformationTechnologySystemsUsedForAssignedFunctions
	}
	return nil
}

func (x *RT000QY46_InformationTechnologySystems) GetDescribePlannedChangesToInformationTechnologyArchitectureEnvironmentOrInfrastructure() string {
	if x != nil {
		return x.DescribePlannedChangesToInformationTechnologyArchitectureEnvironmentOrInfrastructure
	}
	return ""
}

func (x *RT000QY46_InformationTechnologySystems) GetSufferedDelaysOrDisruptionsInSystemsInLastThreeYears() *RT000QY46_YesExplainNo {
	if x != nil {
		return x.SufferedDelaysOrDisruptionsInSystemsInLastThreeYears
	}
	return nil
}

func (x *RT000QY46_InformationTechnologySystems) GetSufferedInformationOrConfidentialityAndSystemSecurityBreachesInLastThreeYears() *RT000QY46_YesExplainNo {
	if x != nil {
		return x.SufferedInformationOrConfidentialityAndSystemSecurityBreachesInLastThreeYears
	}
	return nil
}

// Definition of Business Continuity and Disaster Recovery Information
type RT000QY46_BusinessContinuityAndDisasterRecovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is a BCP in place? If YES please describe. If NO, please explain.
	BusinessContinuityPlanInPlace *RT000QY46_YesNoAndExplain `protobuf:"bytes,1,opt,name=business_continuity_plan_in_place,json=businessContinuityPlanInPlace,proto3" json:"business_continuity_plan_in_place,omitempty"`
	// Do you have a dedicated person in charge of the BCP? If YES, please provide contact details in the explanation. If NO, please explain.
	DedicatedIndividualResponsibleForBcp *RT000QY46_YesNoAndExplain `protobuf:"bytes,2,opt,name=dedicated_individual_responsible_for_bcp,json=dedicatedIndividualResponsibleForBcp,proto3" json:"dedicated_individual_responsible_for_bcp,omitempty"`
	// How often is the BCP tested?
	FrequencyBcpTested string `protobuf:"bytes,4,opt,name=frequency_bcp_tested,json=frequencyBcpTested,proto3" json:"frequency_bcp_tested,omitempty"`
	// Describe and provide a copy of the latest bcp test report
	LatestBcpTestResults string `protobuf:"bytes,5,opt,name=latest_bcp_test_results,json=latestBcpTestResults,proto3" json:"latest_bcp_test_results,omitempty"`
	// Describe Disaster Recovery back-up procedures
	DisasterRecoveryBackupProcedures string `protobuf:"bytes,6,opt,name=disaster_recovery_backup_procedures,json=disasterRecoveryBackupProcedures,proto3" json:"disaster_recovery_backup_procedures,omitempty"`
	// How often is the DRP tested?
	FrequencyDrpTested string `protobuf:"bytes,7,opt,name=frequency_drp_tested,json=frequencyDrpTested,proto3" json:"frequency_drp_tested,omitempty"`
	// Describe and provide a copy of the latest bcp test report
	LatestDrpTestResults string `protobuf:"bytes,8,opt,name=latest_drp_test_results,json=latestDrpTestResults,proto3" json:"latest_drp_test_results,omitempty"`
}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) Reset() {
	*x = RT000QY46_BusinessContinuityAndDisasterRecovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_BusinessContinuityAndDisasterRecovery) ProtoMessage() {}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_BusinessContinuityAndDisasterRecovery.ProtoReflect.Descriptor instead.
func (*RT000QY46_BusinessContinuityAndDisasterRecovery) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 15}
}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) GetBusinessContinuityPlanInPlace() *RT000QY46_YesNoAndExplain {
	if x != nil {
		return x.BusinessContinuityPlanInPlace
	}
	return nil
}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) GetDedicatedIndividualResponsibleForBcp() *RT000QY46_YesNoAndExplain {
	if x != nil {
		return x.DedicatedIndividualResponsibleForBcp
	}
	return nil
}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) GetFrequencyBcpTested() string {
	if x != nil {
		return x.FrequencyBcpTested
	}
	return ""
}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) GetLatestBcpTestResults() string {
	if x != nil {
		return x.LatestBcpTestResults
	}
	return ""
}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) GetDisasterRecoveryBackupProcedures() string {
	if x != nil {
		return x.DisasterRecoveryBackupProcedures
	}
	return ""
}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) GetFrequencyDrpTested() string {
	if x != nil {
		return x.FrequencyDrpTested
	}
	return ""
}

func (x *RT000QY46_BusinessContinuityAndDisasterRecovery) GetLatestDrpTestResults() string {
	if x != nil {
		return x.LatestDrpTestResults
	}
	return ""
}

// Definition of Insurance information
type RT000QY46_Insurance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Does your company maintain a Third Party/Public Liability Insurance coverage that adequately protects the property against the risk of loss, damage or fraud of its employees?
	CompanyMaintainsThirdPartyLiabilityInsurance *RT000QY46_YesNoAndExplain `protobuf:"bytes,1,opt,name=company_maintains_third_party_liability_insurance,json=companyMaintainsThirdPartyLiabilityInsurance,proto3" json:"company_maintains_third_party_liability_insurance,omitempty"`
	// If yes, what types of coverage are concerned?
	TypesOfCoverage []string `protobuf:"bytes,2,rep,name=types_of_coverage,json=typesOfCoverage,proto3" json:"types_of_coverage,omitempty"`
	// What types of damages are excluded?
	DamagesExcluded []string `protobuf:"bytes,3,rep,name=damages_excluded,json=damagesExcluded,proto3" json:"damages_excluded,omitempty"`
	// Have you ever used the insurance? If YES, please explain.
	EverUsedTheInsurance *RT000QY46_YesExplainNo `protobuf:"bytes,4,opt,name=ever_used_the_insurance,json=everUsedTheInsurance,proto3" json:"ever_used_the_insurance,omitempty"`
	// Please specify the name of your insurance company and attach a certificate.
	NameOfInsurance string `protobuf:"bytes,5,opt,name=name_of_insurance,json=nameOfInsurance,proto3" json:"name_of_insurance,omitempty"`
}

func (x *RT000QY46_Insurance) Reset() {
	*x = RT000QY46_Insurance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_Insurance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_Insurance) ProtoMessage() {}

func (x *RT000QY46_Insurance) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_Insurance.ProtoReflect.Descriptor instead.
func (*RT000QY46_Insurance) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 16}
}

func (x *RT000QY46_Insurance) GetCompanyMaintainsThirdPartyLiabilityInsurance() *RT000QY46_YesNoAndExplain {
	if x != nil {
		return x.CompanyMaintainsThirdPartyLiabilityInsurance
	}
	return nil
}

func (x *RT000QY46_Insurance) GetTypesOfCoverage() []string {
	if x != nil {
		return x.TypesOfCoverage
	}
	return nil
}

func (x *RT000QY46_Insurance) GetDamagesExcluded() []string {
	if x != nil {
		return x.DamagesExcluded
	}
	return nil
}

func (x *RT000QY46_Insurance) GetEverUsedTheInsurance() *RT000QY46_YesExplainNo {
	if x != nil {
		return x.EverUsedTheInsurance
	}
	return nil
}

func (x *RT000QY46_Insurance) GetNameOfInsurance() string {
	if x != nil {
		return x.NameOfInsurance
	}
	return ""
}

// Definition of Fund Accounting Operations and Controls
type RT000QY46_FundAccountingOperationsAndControls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provide the required information for the Transaction input / bookkeeping process
	TransactionInputOrBookkeepingProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,1,opt,name=transaction_input_or_bookkeeping_process_information,json=transactionInputOrBookkeepingProcessInformation,proto3" json:"transaction_input_or_bookkeeping_process_information,omitempty"`
	// Provide the required information for the Income and expenses monitoring process
	IncomeAndExpenseProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,2,opt,name=income_and_expense_process_information,json=incomeAndExpenseProcessInformation,proto3" json:"income_and_expense_process_information,omitempty"`
	// Provide the required information for the Management and performance fees calculation process
	ManagementAndPerformanceFeeCalculationProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,3,opt,name=management_and_performance_fee_calculation_process_information,json=managementAndPerformanceFeeCalculationProcessInformation,proto3" json:"management_and_performance_fee_calculation_process_information,omitempty"`
	// Provide the required information for the Investments/Disinvestments recording process
	InvestmentsAndDisinvestmentsRecordingProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,4,opt,name=investments_and_disinvestments_recording_process_information,json=investmentsAndDisinvestmentsRecordingProcessInformation,proto3" json:"investments_and_disinvestments_recording_process_information,omitempty"`
	// Provide the required information for the Investments/Disinvestments recording, income and accruals process
	IncomeAndAccrualsProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,5,opt,name=income_and_accruals_process_information,json=incomeAndAccrualsProcessInformation,proto3" json:"income_and_accruals_process_information,omitempty"`
	// Provide the required information for the FX gains/losses recording, income and accruals process
	FxGainsAndLossesProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,6,opt,name=fx_gains_and_losses_process_information,json=fxGainsAndLossesProcessInformation,proto3" json:"fx_gains_and_losses_process_information,omitempty"`
	// Provide the required information for the Pricing / valuation of quoted assets process
	PricingAndValuationOfQuotedAssetsProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,7,opt,name=pricing_and_valuation_of_quoted_assets_process_information,json=pricingAndValuationOfQuotedAssetsProcessInformation,proto3" json:"pricing_and_valuation_of_quoted_assets_process_information,omitempty"`
	// Provide the required information for the Pricing / valuation of unquoted assets process
	PricingAndValuationOfUnquotedAssetsProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,8,opt,name=pricing_and_valuation_of_unquoted_assets_process_information,json=pricingAndValuationOfUnquotedAssetsProcessInformation,proto3" json:"pricing_and_valuation_of_unquoted_assets_process_information,omitempty"`
	// Provide the required information for the Cash reconciliation process
	CashReconcilliationProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,9,opt,name=cash_reconcilliation_process_information,json=cashReconcilliationProcessInformation,proto3" json:"cash_reconcilliation_process_information,omitempty"`
	// Provide the required information for the NAV calculation process
	NavCalculationProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,10,opt,name=nav_calculation_process_information,json=navCalculationProcessInformation,proto3" json:"nav_calculation_process_information,omitempty"`
	// Provide the required information for the NAV delivery  process
	NavDeliveryProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,11,opt,name=nav_delivery_process_information,json=navDeliveryProcessInformation,proto3" json:"nav_delivery_process_information,omitempty"`
	// Provide the required information for the NAV control and errors process
	NavControlAndErrorsProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,12,opt,name=nav_control_and_errors_process_information,json=navControlAndErrorsProcessInformation,proto3" json:"nav_control_and_errors_process_information,omitempty"`
	// Provide the required information for the Statutory and regulatory reporting to relevant authorities and investors process
	StatutoryAndRegulatoryReportingProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,13,opt,name=statutory_and_regulatory_reporting_process_information,json=statutoryAndRegulatoryReportingProcessInformation,proto3" json:"statutory_and_regulatory_reporting_process_information,omitempty"`
	// Provide the required information for the Tax calculation and reporting to local authorities process
	TaxCalculationAndReportingProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,14,opt,name=tax_calculation_and_reporting_process_information,json=taxCalculationAndReportingProcessInformation,proto3" json:"tax_calculation_and_reporting_process_information,omitempty"`
	// Provide the required information for the Clients complaints monitoring process
	ClientComplaintMonitoringProcessInformation *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation `protobuf:"bytes,15,opt,name=client_complaint_monitoring_process_information,json=clientComplaintMonitoringProcessInformation,proto3" json:"client_complaint_monitoring_process_information,omitempty"`
}

func (x *RT000QY46_FundAccountingOperationsAndControls) Reset() {
	*x = RT000QY46_FundAccountingOperationsAndControls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_FundAccountingOperationsAndControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_FundAccountingOperationsAndControls) ProtoMessage() {}

func (x *RT000QY46_FundAccountingOperationsAndControls) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_FundAccountingOperationsAndControls.ProtoReflect.Descriptor instead.
func (*RT000QY46_FundAccountingOperationsAndControls) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 17}
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetTransactionInputOrBookkeepingProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.TransactionInputOrBookkeepingProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetIncomeAndExpenseProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.IncomeAndExpenseProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetManagementAndPerformanceFeeCalculationProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.ManagementAndPerformanceFeeCalculationProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetInvestmentsAndDisinvestmentsRecordingProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.InvestmentsAndDisinvestmentsRecordingProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetIncomeAndAccrualsProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.IncomeAndAccrualsProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetFxGainsAndLossesProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.FxGainsAndLossesProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetPricingAndValuationOfQuotedAssetsProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.PricingAndValuationOfQuotedAssetsProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetPricingAndValuationOfUnquotedAssetsProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.PricingAndValuationOfUnquotedAssetsProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetCashReconcilliationProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.CashReconcilliationProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetNavCalculationProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.NavCalculationProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetNavDeliveryProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.NavDeliveryProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetNavControlAndErrorsProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.NavControlAndErrorsProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetStatutoryAndRegulatoryReportingProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.StatutoryAndRegulatoryReportingProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetTaxCalculationAndReportingProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.TaxCalculationAndReportingProcessInformation
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls) GetClientComplaintMonitoringProcessInformation() *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation {
	if x != nil {
		return x.ClientComplaintMonitoringProcessInformation
	}
	return nil
}

// Definition of DDQ Review information
type RT000QY46_ReviewerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Review of entity and ownership information
	EntityAndOwnershipReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,1,opt,name=entity_and_ownership_review,json=entityAndOwnershipReview,proto3" json:"entity_and_ownership_review,omitempty"`
	// Review of legal and regulatory information
	LegalAndRegulatoryReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,2,opt,name=legal_and_regulatory_review,json=legalAndRegulatoryReview,proto3" json:"legal_and_regulatory_review,omitempty"`
	// Review of Anti Bribery and Corruption program
	AntiBriberyAndCorruptionReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,3,opt,name=anti_bribery_and_corruption_review,json=antiBriberyAndCorruptionReview,proto3" json:"anti_bribery_and_corruption_review,omitempty"`
	// Review of the AML, CTF and Sanctions Policies and Procedures
	AmlCtfAndSanctionsPoliciesAndProceduresReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,4,opt,name=aml_ctf_and_sanctions_policies_and_procedures_review,json=amlCtfAndSanctionsPoliciesAndProceduresReview,proto3" json:"aml_ctf_and_sanctions_policies_and_procedures_review,omitempty"`
	// Review of KYC, CDD and EDD
	KycAndCddAndEddPoliciesAndProceduresReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,5,opt,name=kyc_and_cdd_and_edd_policies_and_procedures_review,json=kycAndCddAndEddPoliciesAndProceduresReview,proto3" json:"kyc_and_cdd_and_edd_policies_and_procedures_review,omitempty"`
	// Review of Monitoring & Reporting information
	MonitoringAndReportingReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,6,opt,name=monitoring_and_reporting_review,json=monitoringAndReportingReview,proto3" json:"monitoring_and_reporting_review,omitempty"`
	// Review of Training and Education program
	TrainingAndEducationReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,9,opt,name=training_and_education_review,json=trainingAndEducationReview,proto3" json:"training_and_education_review,omitempty"`
	// Review of Audit
	AuditInformationReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,10,opt,name=audit_information_review,json=auditInformationReview,proto3" json:"audit_information_review,omitempty"`
	// Review of Operational Risk Management information
	OperationalRiskManagementReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,11,opt,name=operational_risk_management_review,json=operationalRiskManagementReview,proto3" json:"operational_risk_management_review,omitempty"`
	// Review of Delegation And Third Party Providers information
	DelegationAndThirdPartyProvidersReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,12,opt,name=delegation_and_third_party_providers_review,json=delegationAndThirdPartyProvidersReview,proto3" json:"delegation_and_third_party_providers_review,omitempty"`
	// Review of IT System information
	InformationTechnologySystemsReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,13,opt,name=information_technology_systems_review,json=informationTechnologySystemsReview,proto3" json:"information_technology_systems_review,omitempty"`
	// Review of Business Continuity and Disaster Recovery information
	BusinessContinuityAndDisasterRecoveryReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,14,opt,name=business_continuity_and_disaster_recovery_review,json=businessContinuityAndDisasterRecoveryReview,proto3" json:"business_continuity_and_disaster_recovery_review,omitempty"`
	// Review of Insurance information
	InsuranceReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,15,opt,name=insurance_review,json=insuranceReview,proto3" json:"insurance_review,omitempty"`
	// Review of Information about the relevant Fund Accounting Operations and Controls processes
	FundAccountingOperationsAndControlsReview *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,16,opt,name=fund_accounting_operations_and_controls_review,json=fundAccountingOperationsAndControlsReview,proto3" json:"fund_accounting_operations_and_controls_review,omitempty"`
	// Summary review and conclusion
	AggregateConclusion *RT000QY46_ReviewerInformation_Review `protobuf:"bytes,17,opt,name=aggregate_conclusion,json=aggregateConclusion,proto3" json:"aggregate_conclusion,omitempty"`
}

func (x *RT000QY46_ReviewerInformation) Reset() {
	*x = RT000QY46_ReviewerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_ReviewerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_ReviewerInformation) ProtoMessage() {}

func (x *RT000QY46_ReviewerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_ReviewerInformation.ProtoReflect.Descriptor instead.
func (*RT000QY46_ReviewerInformation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 18}
}

func (x *RT000QY46_ReviewerInformation) GetEntityAndOwnershipReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.EntityAndOwnershipReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetLegalAndRegulatoryReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.LegalAndRegulatoryReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetAntiBriberyAndCorruptionReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.AntiBriberyAndCorruptionReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetAmlCtfAndSanctionsPoliciesAndProceduresReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.AmlCtfAndSanctionsPoliciesAndProceduresReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetKycAndCddAndEddPoliciesAndProceduresReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.KycAndCddAndEddPoliciesAndProceduresReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetMonitoringAndReportingReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.MonitoringAndReportingReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetTrainingAndEducationReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.TrainingAndEducationReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetAuditInformationReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.AuditInformationReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetOperationalRiskManagementReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.OperationalRiskManagementReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetDelegationAndThirdPartyProvidersReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.DelegationAndThirdPartyProvidersReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetInformationTechnologySystemsReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.InformationTechnologySystemsReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetBusinessContinuityAndDisasterRecoveryReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.BusinessContinuityAndDisasterRecoveryReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetInsuranceReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.InsuranceReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetFundAccountingOperationsAndControlsReview() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.FundAccountingOperationsAndControlsReview
	}
	return nil
}

func (x *RT000QY46_ReviewerInformation) GetAggregateConclusion() *RT000QY46_ReviewerInformation_Review {
	if x != nil {
		return x.AggregateConclusion
	}
	return nil
}

// Information about a foreign branch
type RT000QY46_EntityAndOwnership_Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the branch
	BranchName string `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	// The country in which the branch is located (the three letter ISO code)
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RT000QY46_EntityAndOwnership_Branch) Reset() {
	*x = RT000QY46_EntityAndOwnership_Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_EntityAndOwnership_Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_EntityAndOwnership_Branch) ProtoMessage() {}

func (x *RT000QY46_EntityAndOwnership_Branch) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_EntityAndOwnership_Branch.ProtoReflect.Descriptor instead.
func (*RT000QY46_EntityAndOwnership_Branch) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *RT000QY46_EntityAndOwnership_Branch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_Branch) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Information to be provided if publicly traded
type RT000QY46_EntityAndOwnership_TradedSecurityIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Codification chosen to identify the financial instrument
	FinancialIdentifier RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier `protobuf:"varint,4,opt,name=financial_identifier,json=financialIdentifier,proto3,enum=standards.open.v1.RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier" json:"financial_identifier,omitempty"`
	// Identifier of the affected instrument
	Instrument string `protobuf:"bytes,5,opt,name=instrument,proto3" json:"instrument,omitempty"`
}

func (x *RT000QY46_EntityAndOwnership_TradedSecurityIdentifier) Reset() {
	*x = RT000QY46_EntityAndOwnership_TradedSecurityIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_EntityAndOwnership_TradedSecurityIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_EntityAndOwnership_TradedSecurityIdentifier) ProtoMessage() {}

func (x *RT000QY46_EntityAndOwnership_TradedSecurityIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_EntityAndOwnership_TradedSecurityIdentifier.ProtoReflect.Descriptor instead.
func (*RT000QY46_EntityAndOwnership_TradedSecurityIdentifier) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *RT000QY46_EntityAndOwnership_TradedSecurityIdentifier) GetFinancialIdentifier() RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier {
	if x != nil {
		return x.FinancialIdentifier
	}
	return RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_IDENTIFIER_UNSPECIFIED
}

func (x *RT000QY46_EntityAndOwnership_TradedSecurityIdentifier) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

// The definition of a beneficial owner resource
type RT000QY46_EntityAndOwnership_SignificantShareholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the client
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The type of beneficial owner
	BeneficialOwnerType RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType `protobuf:"varint,2,opt,name=beneficial_owner_type,json=beneficialOwnerType,proto3,enum=standards.open.v1.RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType" json:"beneficial_owner_type,omitempty"`
	// The ultimate effective interest in the legal entity on a look through basis
	BeneficialOwnership float64 `protobuf:"fixed64,3,opt,name=beneficial_ownership,json=beneficialOwnership,proto3" json:"beneficial_ownership,omitempty"`
	// Complete if the beneficial person is a natural person
	NaturalPersonOwnershipDetails *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson `protobuf:"bytes,4,opt,name=natural_person_ownership_details,json=naturalPersonOwnershipDetails,proto3" json:"natural_person_ownership_details,omitempty"`
	// Complete if the `SignificantShareholder` is a legal entity
	LegalEntityOwnershipDetails *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity `protobuf:"bytes,5,opt,name=legal_entity_ownership_details,json=legalEntityOwnershipDetails,proto3" json:"legal_entity_ownership_details,omitempty"`
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder) Reset() {
	*x = RT000QY46_EntityAndOwnership_SignificantShareholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_EntityAndOwnership_SignificantShareholder) ProtoMessage() {}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_EntityAndOwnership_SignificantShareholder.ProtoReflect.Descriptor instead.
func (*RT000QY46_EntityAndOwnership_SignificantShareholder) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder) GetBeneficialOwnerType() RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType {
	if x != nil {
		return x.BeneficialOwnerType
	}
	return RT000QY46_EntityAndOwnership_SignificantShareholder_TYPE_UNSPECIFIED
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder) GetBeneficialOwnership() float64 {
	if x != nil {
		return x.BeneficialOwnership
	}
	return 0
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder) GetNaturalPersonOwnershipDetails() *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson {
	if x != nil {
		return x.NaturalPersonOwnershipDetails
	}
	return nil
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder) GetLegalEntityOwnershipDetails() *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity {
	if x != nil {
		return x.LegalEntityOwnershipDetails
	}
	return nil
}

// Information relating to a natural person
type RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first name
	GivenName string `protobuf:"bytes,1,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// The last name
	FamilyName string `protobuf:"bytes,2,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// The phone number including country code
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The email address of the manager
	EmailAddress string `protobuf:"bytes,4,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// The three letter ISO code of the country of residence
	CountryOfResidence string `protobuf:"bytes,5,opt,name=country_of_residence,json=countryOfResidence,proto3" json:"country_of_residence,omitempty"`
	// Place of address
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) Reset() {
	*x = RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) ProtoMessage() {}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson.ProtoReflect.Descriptor instead.
func (*RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 4, 2, 0}
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetCountryOfResidence() string {
	if x != nil {
		return x.CountryOfResidence
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Information relating to a legal beneficial owner
type RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the company
	LegalName string `protobuf:"bytes,1,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// The registered office of the company
	RegisteredOffice string `protobuf:"bytes,2,opt,name=registered_office,json=registeredOffice,proto3" json:"registered_office,omitempty"`
	// The LEI identifier of the company (if available)
	LEI string `protobuf:"bytes,3,opt,name=LEI,proto3" json:"LEI,omitempty"`
	// The directors or managers of the legal entity
	DirectorsOrManagers []*RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson `protobuf:"bytes,4,rep,name=directors_or_managers,json=directorsOrManagers,proto3" json:"directors_or_managers,omitempty"`
	// The own
	OwnershipType RT000QY46_EntityAndOwnership_OwnershipType `protobuf:"varint,6,opt,name=ownership_type,json=ownershipType,proto3,enum=standards.open.v1.RT000QY46_EntityAndOwnership_OwnershipType" json:"ownership_type,omitempty"`
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) Reset() {
	*x = RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) ProtoMessage() {}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity.ProtoReflect.Descriptor instead.
func (*RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 4, 2, 1}
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) GetRegisteredOffice() string {
	if x != nil {
		return x.RegisteredOffice
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) GetLEI() string {
	if x != nil {
		return x.LEI
	}
	return ""
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) GetDirectorsOrManagers() []*RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson {
	if x != nil {
		return x.DirectorsOrManagers
	}
	return nil
}

func (x *RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity) GetOwnershipType() RT000QY46_EntityAndOwnership_OwnershipType {
	if x != nil {
		return x.OwnershipType
	}
	return RT000QY46_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED
}

// Information regarding an on-site audit by a Regulatory Authority
type RT000QY46_LegalAndRegulatory_OnSiteAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date of the On Site Audit
	AuditDate *date.Date `protobuf:"bytes,1,opt,name=audit_date,json=auditDate,proto3" json:"audit_date,omitempty"`
	// Regulatory Authority that conducted the audit
	Regulator RT000QY46_LegalAndRegulatory_Regulator `protobuf:"varint,2,opt,name=regulator,proto3,enum=standards.open.v1.RT000QY46_LegalAndRegulatory_Regulator" json:"regulator,omitempty"`
	// Description of findings
	Findings string `protobuf:"bytes,3,opt,name=findings,proto3" json:"findings,omitempty"`
}

func (x *RT000QY46_LegalAndRegulatory_OnSiteAudit) Reset() {
	*x = RT000QY46_LegalAndRegulatory_OnSiteAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_LegalAndRegulatory_OnSiteAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_LegalAndRegulatory_OnSiteAudit) ProtoMessage() {}

func (x *RT000QY46_LegalAndRegulatory_OnSiteAudit) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_LegalAndRegulatory_OnSiteAudit.ProtoReflect.Descriptor instead.
func (*RT000QY46_LegalAndRegulatory_OnSiteAudit) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *RT000QY46_LegalAndRegulatory_OnSiteAudit) GetAuditDate() *date.Date {
	if x != nil {
		return x.AuditDate
	}
	return nil
}

func (x *RT000QY46_LegalAndRegulatory_OnSiteAudit) GetRegulator() RT000QY46_LegalAndRegulatory_Regulator {
	if x != nil {
		return x.Regulator
	}
	return RT000QY46_LegalAndRegulatory_REGULATOR_UNSPECIFIED
}

func (x *RT000QY46_LegalAndRegulatory_OnSiteAudit) GetFindings() string {
	if x != nil {
		return x.Findings
	}
	return ""
}

// Information related to the Delegation (including delegates, intermediaries, consultants or advisors, whether affiliated or not) of a material elements of the assigned functions
type RT000QY46_DelegateAndThirdPartyProviders_Delegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Please specify the scope of services covered
	ServicesCovered []string `protobuf:"bytes,1,rep,name=services_covered,json=servicesCovered,proto3" json:"services_covered,omitempty"`
	// Please specify the reason behind the delegation
	ReasonsForDelegation []string `protobuf:"bytes,2,rep,name=reasons_for_delegation,json=reasonsForDelegation,proto3" json:"reasons_for_delegation,omitempty"`
	// The full legal name of the delegate entity
	LegalName string `protobuf:"bytes,3,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// The full legal (registered) address of the delegate entity
	LegalAddress string `protobuf:"bytes,4,opt,name=legal_address,json=legalAddress,proto3" json:"legal_address,omitempty"`
	// The full primary business address of the delegateentity
	BusinessAddress string `protobuf:"bytes,5,opt,name=business_address,json=businessAddress,proto3" json:"business_address,omitempty"`
	// The name of the primary contact
	PrimaryContactName string `protobuf:"bytes,6,opt,name=primary_contact_name,json=primaryContactName,proto3" json:"primary_contact_name,omitempty"`
	// The primary contact position
	PrimaryContactPosition string `protobuf:"bytes,7,opt,name=primary_contact_position,json=primaryContactPosition,proto3" json:"primary_contact_position,omitempty"`
	// The primary contact's email
	PrimaryContactEmail string `protobuf:"bytes,8,opt,name=primary_contact_email,json=primaryContactEmail,proto3" json:"primary_contact_email,omitempty"`
	// Please describe and / or attach the initial and on-going due diligence and monitoring performed on third party service provider.
	DueDiligenceAndMonitoringOnServiceProvider string `protobuf:"bytes,9,opt,name=due_diligence_and_monitoring_on_service_provider,json=dueDiligenceAndMonitoringOnServiceProvider,proto3" json:"due_diligence_and_monitoring_on_service_provider,omitempty"`
	// Describe the controls / monitoring do you have over the services provided by the third party, including business continuity aspects (where relevant)?
	DescribeControlsAndMonitoringOverServicesProvided string `protobuf:"bytes,10,opt,name=describe_controls_and_monitoring_over_services_provided,json=describeControlsAndMonitoringOverServicesProvided,proto3" json:"describe_controls_and_monitoring_over_services_provided,omitempty"`
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) Reset() {
	*x = RT000QY46_DelegateAndThirdPartyProviders_Delegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_DelegateAndThirdPartyProviders_Delegate) ProtoMessage() {}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_DelegateAndThirdPartyProviders_Delegate.ProtoReflect.Descriptor instead.
func (*RT000QY46_DelegateAndThirdPartyProviders_Delegate) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 13, 0}
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetServicesCovered() []string {
	if x != nil {
		return x.ServicesCovered
	}
	return nil
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetReasonsForDelegation() []string {
	if x != nil {
		return x.ReasonsForDelegation
	}
	return nil
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetLegalAddress() string {
	if x != nil {
		return x.LegalAddress
	}
	return ""
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetBusinessAddress() string {
	if x != nil {
		return x.BusinessAddress
	}
	return ""
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetPrimaryContactName() string {
	if x != nil {
		return x.PrimaryContactName
	}
	return ""
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetPrimaryContactPosition() string {
	if x != nil {
		return x.PrimaryContactPosition
	}
	return ""
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetPrimaryContactEmail() string {
	if x != nil {
		return x.PrimaryContactEmail
	}
	return ""
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetDueDiligenceAndMonitoringOnServiceProvider() string {
	if x != nil {
		return x.DueDiligenceAndMonitoringOnServiceProvider
	}
	return ""
}

func (x *RT000QY46_DelegateAndThirdPartyProviders_Delegate) GetDescribeControlsAndMonitoringOverServicesProvided() string {
	if x != nil {
		return x.DescribeControlsAndMonitoringOverServicesProvided
	}
	return ""
}

// Definition of information to be provided per relevant process
type RT000QY46_FundAccountingOperationsAndControls_ProcessInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is a standard process applied? If YES, provide a description of the process and sub-procedures and attach
	// supporting documentation. If NO, explain why.
	StandardProcessApplied *RT000QY46_YesNoAndExplain `protobuf:"bytes,1,opt,name=standard_process_applied,json=standardProcessApplied,proto3" json:"standard_process_applied,omitempty"`
	// Describe the controls applied to the process. If the controls are detailed in a
	// Control Report, please attach.
	DescribeControlsApplied string `protobuf:"bytes,2,opt,name=describe_controls_applied,json=describeControlsApplied,proto3" json:"describe_controls_applied,omitempty"`
	// Describe the escalation procedure in the case that a problem is identified.
	DescribeEscalationProcedure string `protobuf:"bytes,3,opt,name=describe_escalation_procedure,json=describeEscalationProcedure,proto3" json:"describe_escalation_procedure,omitempty"`
	// To what extent is the process automated?
	ProcessAutomationLevel RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels `protobuf:"varint,4,opt,name=process_automation_level,json=processAutomationLevel,proto3,enum=standards.open.v1.RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels" json:"process_automation_level,omitempty"`
}

func (x *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation) Reset() {
	*x = RT000QY46_FundAccountingOperationsAndControls_ProcessInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_FundAccountingOperationsAndControls_ProcessInformation) ProtoMessage() {}

func (x *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_FundAccountingOperationsAndControls_ProcessInformation.ProtoReflect.Descriptor instead.
func (*RT000QY46_FundAccountingOperationsAndControls_ProcessInformation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 17, 0}
}

func (x *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation) GetStandardProcessApplied() *RT000QY46_YesNoAndExplain {
	if x != nil {
		return x.StandardProcessApplied
	}
	return nil
}

func (x *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation) GetDescribeControlsApplied() string {
	if x != nil {
		return x.DescribeControlsApplied
	}
	return ""
}

func (x *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation) GetDescribeEscalationProcedure() string {
	if x != nil {
		return x.DescribeEscalationProcedure
	}
	return ""
}

func (x *RT000QY46_FundAccountingOperationsAndControls_ProcessInformation) GetProcessAutomationLevel() RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels {
	if x != nil {
		return x.ProcessAutomationLevel
	}
	return RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AUTOMATION_LEVEL_UNSPECIFIED
}

// Definition of review information
type RT000QY46_ReviewerInformation_Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Review status of the section
	ReviewStatus RT000QY46_ReviewerInformation_Review_ReviewStatus `protobuf:"varint,1,opt,name=review_status,json=reviewStatus,proto3,enum=standards.open.v1.RT000QY46_ReviewerInformation_Review_ReviewStatus" json:"review_status,omitempty"`
	// The reviewer's risk assessment
	RiskAssessment RT000QY46_ReviewerInformation_Review_RiskAssessment `protobuf:"varint,2,opt,name=risk_assessment,json=riskAssessment,proto3,enum=standards.open.v1.RT000QY46_ReviewerInformation_Review_RiskAssessment" json:"risk_assessment,omitempty"`
	// The weight to assign to the risk assessment (in decimal format)
	RiskWeighting float32 `protobuf:"fixed32,3,opt,name=risk_weighting,json=riskWeighting,proto3" json:"risk_weighting,omitempty"`
	// Comments and questions from the reviewer
	CommentsAndQuestions string `protobuf:"bytes,4,opt,name=comments_and_questions,json=commentsAndQuestions,proto3" json:"comments_and_questions,omitempty"`
	// Feedback from the provider from the reviewer
	ProviderFeedback string `protobuf:"bytes,5,opt,name=provider_feedback,json=providerFeedback,proto3" json:"provider_feedback,omitempty"`
	// Final comments from the reviewer
	FinalComments string `protobuf:"bytes,6,opt,name=final_comments,json=finalComments,proto3" json:"final_comments,omitempty"`
}

func (x *RT000QY46_ReviewerInformation_Review) Reset() {
	*x = RT000QY46_ReviewerInformation_Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000QY46_ReviewerInformation_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000QY46_ReviewerInformation_Review) ProtoMessage() {}

func (x *RT000QY46_ReviewerInformation_Review) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000QY46_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000QY46_ReviewerInformation_Review.ProtoReflect.Descriptor instead.
func (*RT000QY46_ReviewerInformation_Review) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000QY46_proto_rawDescGZIP(), []int{0, 18, 0}
}

func (x *RT000QY46_ReviewerInformation_Review) GetReviewStatus() RT000QY46_ReviewerInformation_Review_ReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return RT000QY46_ReviewerInformation_Review_STATUS_UNSPECIFIED
}

func (x *RT000QY46_ReviewerInformation_Review) GetRiskAssessment() RT000QY46_ReviewerInformation_Review_RiskAssessment {
	if x != nil {
		return x.RiskAssessment
	}
	return RT000QY46_ReviewerInformation_Review_RISK_ASSESSMENT_UNSPECIFIED
}

func (x *RT000QY46_ReviewerInformation_Review) GetRiskWeighting() float32 {
	if x != nil {
		return x.RiskWeighting
	}
	return 0
}

func (x *RT000QY46_ReviewerInformation_Review) GetCommentsAndQuestions() string {
	if x != nil {
		return x.CommentsAndQuestions
	}
	return ""
}

func (x *RT000QY46_ReviewerInformation_Review) GetProviderFeedback() string {
	if x != nil {
		return x.ProviderFeedback
	}
	return ""
}

func (x *RT000QY46_ReviewerInformation_Review) GetFinalComments() string {
	if x != nil {
		return x.FinalComments
	}
	return ""
}

var File_standards_open_v1_RT000QY46_proto protoreflect.FileDescriptor

var file_standards_open_v1_RT000QY46_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0xa1, 0x02, 0x0a,
	0x09, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x71,
	0x0a, 0x17, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x61, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x61, 0x0a, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xb6, 0x01, 0x0a, 0x33, 0x61, 0x6e, 0x74, 0x69,
	0x5f, 0x62, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x2d, 0x61, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x12, 0xa7, 0x01, 0x0a, 0x2d, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64, 0x43, 0x54, 0x46,
	0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x27, 0x61, 0x6d, 0x6c, 0x43, 0x74, 0x66, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x2b, 0x6b,
	0x79, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x64, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65,
	0x64, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x4b,
	0x59, 0x43, 0x41, 0x6e, 0x64, 0x43, 0x44, 0x44, 0x41, 0x6e, 0x64, 0x45, 0x44, 0x44, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x24, 0x6b, 0x79, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x64, 0x64, 0x41, 0x6e,
	0x64, 0x45, 0x64, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x18, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x16, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a,
	0x1b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x19, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x24, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x7f, 0x0a, 0x1e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x1c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x29, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x25, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x27, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x23, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb7, 0x01, 0x0a, 0x0c, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10,
	0x02, 0x1a, 0xb7, 0x01, 0x0a, 0x0c, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x4e, 0x6f, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x1a, 0xbd, 0x01, 0x0a, 0x0f,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12,
	0x51, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x1a, 0xf7, 0x0e, 0x0a, 0x1b,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x28,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x71, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x6e, 0x0a, 0x1e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x6d, 0x0a, 0x1d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x12, 0x7e, 0x0a, 0x26, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x23, 0x72, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x12, 0x98, 0x01, 0x0a, 0x35, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74,
	0x66, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x61, 0x6d,
	0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x96, 0x01, 0x0a,
	0x33, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0xb7, 0x01, 0x0a, 0x45, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x62,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x3d, 0x61, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x9f, 0x01, 0x0a, 0x39, 0x6b, 0x79, 0x63, 0x5f, 0x63, 0x64, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x65, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31,
	0x6b, 0x79, 0x63, 0x43, 0x64, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x64, 0x64, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x12, 0xb2, 0x01, 0x0a, 0x42, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3b, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x79, 0x0a, 0x24, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x20, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0xdc, 0x01, 0x0a, 0x58, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x4f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x63, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x16, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x1a, 0xb0, 0x18, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45,
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x13, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x79, 0x0a,
	0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x0e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x2b, 0x61, 0x6e, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x68,
	0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x61, 0x6e, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x68,
	0x6f, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x8c, 0x01, 0x0a, 0x27, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x23, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x68, 0x6f,
	0x72, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x2c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x28, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c,
	0x45, 0x49, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a,
	0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xaa, 0x02, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a,
	0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49,
	0x47, 0x49, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10,
	0x02, 0x1a, 0xd1, 0x09, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x8e, 0x01, 0x0a, 0x15, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5a, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x9d, 0x01, 0x0a, 0x20, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x1d, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x1e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xe3, 0x01,
	0x0a, 0x0d, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66,
	0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0xdc, 0x02, 0x0a, 0x0b, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x45,
	0x49, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x54, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x4f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x0e,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x10, 0x02, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x57, 0x4e, 0x45, 0x52,
	0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x4c, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x04, 0x1a, 0x95, 0x07, 0x0a, 0x12, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x8a, 0x01, 0x0a, 0x44, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x3c,
	0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x66, 0x55, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x11,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x6f, 0x64, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x6f,
	0x64, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x5f, 0x68, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x48, 0x65, 0x6c, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x12, 0x50,
	0x0a, 0x25, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x77, 0x73, 0x75, 0x69,
	0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x6f,
	0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x77, 0x73, 0x75, 0x69, 0x74, 0x73, 0x4f, 0x72,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x63, 0x0a, 0x18, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x16, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x61, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb4, 0x01, 0x0a, 0x0b, 0x4f, 0x6e, 0x53, 0x69, 0x74,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41,
	0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x41, 0x0a,
	0x09, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x47, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x55, 0x58, 0x5f, 0x43, 0x53, 0x53,
	0x46, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x55, 0x58, 0x5f, 0x42, 0x43, 0x4c, 0x10, 0x02,
	0x1a, 0xee, 0x0b, 0x0a, 0x2d, 0x41, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x3e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x62, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x41, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12,
	0xaf, 0x01, 0x0a, 0x41, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x39, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x41, 0x62, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x12, 0xc9, 0x01, 0x0a, 0x4f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x45, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0xaa, 0x01,
	0x0a, 0x3f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x40, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x37, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x3f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62,
	0x63, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x40, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x6f, 0x41, 0x62, 0x63, 0x52, 0x69, 0x73, 0x6b, 0x12, 0xc5, 0x01, 0x0a, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x41, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74,
	0x65, 0x1a, 0xc4, 0x2d, 0x0a, 0x2a, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64, 0x43, 0x54, 0x46, 0x41,
	0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x12, 0xb1, 0x01, 0x0a, 0x42, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6c, 0x61, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x61, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0xb7, 0x01, 0x0a, 0x45, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x3d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0xb9,
	0x01, 0x0a, 0x46, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x61, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x52, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x48, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x6e, 0x64, 0x4b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xbd, 0x01, 0x0a,
	0x49, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x62, 0x66, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x73, 0x41, 0x6e, 0x64, 0x4f, 0x72, 0x4e, 0x62, 0x66, 0x69, 0x73, 0x12, 0xcf, 0x01, 0x0a,
	0x52, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x48, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68,
	0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55,
	0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0xaf,
	0x01, 0x0a, 0x41, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x39, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54,
	0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x4f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x73,
	0x12, 0xd9, 0x01, 0x0a, 0x58, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68,
	0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4c,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x41,
	0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x68, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x9e, 0x01, 0x0a,
	0x38, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x33, 0x31, 0x31,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x33, 0x31, 0x31, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x97, 0x02,
	0x0a, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6f, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x69, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x4f, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x73, 0x4f, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x35, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x70,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x4f, 0x66, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65,
	0x70, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x3b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f,
	0x74, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x34, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x6d, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x3d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x79, 0x5f, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x72,
	0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x79, 0x48, 0x6f, 0x77, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x65, 0x45, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x12, 0xcc, 0x01, 0x0a, 0x51, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x70, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x46, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x65, 0x70, 0x73, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x89, 0x01, 0x0a, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x61, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x27, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61,
	0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x7e, 0x0a, 0x25, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x21, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12,
	0x89, 0x01, 0x0a, 0x2c, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x28, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0d,
	0x63, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a,
	0x03, 0x43, 0x44, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x03, 0x43, 0x44, 0x44, 0x12, 0x3b, 0x0a, 0x03, 0x45, 0x44,
	0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x03, 0x45, 0x44, 0x44, 0x12, 0x5c, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x5a, 0x0a, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x12, 0x69,
	0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x61, 0x0a, 0x17, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x72, 0x69,
	0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x09,
	0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x61, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x70, 0x65, 0x70, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0c, 0x70, 0x65, 0x70, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x1d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x1d, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1b, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f,
	0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x14,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x98, 0x01, 0x0a, 0x35, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65,
	0x61, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x62, 0x79, 0x5f,
	0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x42, 0x79, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x12, 0x55, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x30, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x73,
	0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x2b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x53, 0x61,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x3c,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x61, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x35, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x49, 0x6e,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x75, 0x0a, 0x3a, 0x75, 0x73, 0x61,
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x61, 0x63, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x31, 0x75,
	0x73, 0x61, 0x44, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x4f, 0x66, 0x61, 0x63, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0xa2, 0x01, 0x0a, 0x51, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x6d, 0x74, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x47, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6d, 0x74, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x68, 0x0a, 0x32, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2c, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x79, 0x0a, 0x3c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x47, 0x37, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x33, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x37, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x49,
	0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x72, 0x0a, 0x38, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x47, 0x37, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x30, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x47, 0x37, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x97,
	0x01, 0x0a, 0x34, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x52, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x93, 0x31, 0x0a, 0x24, 0x4b, 0x59, 0x43,
	0x41, 0x6e, 0x64, 0x43, 0x44, 0x44, 0x41, 0x6e, 0x64, 0x45, 0x44, 0x44, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x79, 0x0a, 0x24, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x20, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0xa0, 0x01, 0x0a,
	0x3a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x63, 0x64, 0x64, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x64, 0x64,
	0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x8d, 0x01, 0x0a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x2a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x95, 0x01, 0x0a, 0x32, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x2c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x28, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01, 0x0a, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x28, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x66, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x81, 0x01, 0x0a, 0x28, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x3d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x6e, 0x64,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x66, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x84, 0x01, 0x0a, 0x2a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x25, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x28, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x25, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x26, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x23, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x75, 0x0a, 0x21, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x1f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x67, 0x0a, 0x1a, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x18, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x21, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x1e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x97, 0x01, 0x0a, 0x34, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x64, 0x75, 0x65,
	0x44, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x3f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x52, 0x69,
	0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x54,
	0x6f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x70,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x4c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x42, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x45, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x57, 0x68, 0x65, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x40, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6b, 0x79,
	0x63, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x61, 0x6c, 0x12, 0x91, 0x01, 0x0a, 0x31, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x52, 0x2b, 0x6e, 0x6f, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x32, 0x6e, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x2c, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x91, 0x01,
	0x0a, 0x31, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2b, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x73,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x12, 0x8b, 0x01, 0x0a, 0x2e, 0x6d, 0x76, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x62, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x28, 0x6d, 0x76, 0x74, 0x73, 0x4d, 0x73, 0x62, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12,
	0x82, 0x01, 0x0a, 0x29, 0x70, 0x65, 0x70, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24,
	0x70, 0x65, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x31, 0x70, 0x65, 0x70, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2b, 0x70, 0x65, 0x70,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x39, 0x70, 0x65, 0x70,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x70, 0x65, 0x70, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46,
	0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x38,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xca, 0x01,
	0x0a, 0x4e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x73, 0x62, 0x65, 0x72, 0x67, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x47, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57,
	0x6f, 0x72, 0x6c, 0x73, 0x62, 0x65, 0x72, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c,
	0x65, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x3f, 0x61,
	0x72, 0x6d, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x37, 0x61, 0x72, 0x6d, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x4d,
	0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x32, 0x61, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x2c, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xa1,
	0x01, 0x0a, 0x39, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66,
	0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x40, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x38, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f,
	0x75, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x6e, 0x65,
	0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x39, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x33, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x37, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x31, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x46, 0x72, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x3d, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x72, 0x41, 0x64,
	0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x29, 0x6e, 0x67, 0x6f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x24, 0x6e, 0x67, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x36, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x75, 0x74, 0x73,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x30, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x75, 0x74, 0x73, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x37, 0x6d, 0x61, 0x72, 0x69, 0x6a, 0x75, 0x61,
	0x6e, 0x61, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x31, 0x6d, 0x61, 0x72, 0x69, 0x6a, 0x75, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x3a, 0x65, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x79,
	0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x65, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x79, 0x4f, 0x72, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x2e, 0x67, 0x61,
	0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66,
	0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x29, 0x67,
	0x61, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x3e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x2b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x26, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x1a, 0xb2,
	0x08, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x1e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x46, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x75,
	0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x3d, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x44, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x3d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x61, 0x73, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xf6, 0x01, 0x0a, 0x66, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x5b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0xb2, 0x01, 0x0a, 0x43, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x64, 0x45, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0xdc, 0x01, 0x0a, 0x58, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x6f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x1a, 0x9e, 0x0e, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf2, 0x01, 0x0a,
	0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x59, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x4f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0xc7, 0x01, 0x0a, 0x4e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x44, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x44, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x4c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xce, 0x01, 0x0a, 0x51,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x48, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x4c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a,
	0x32, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x6c, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x75, 0x6c, 0x74, 0x75,
	0x72, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x43, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3b, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x34, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x2d, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x98, 0x01, 0x0a, 0x35, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a,
	0x34, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x4c, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x12, 0x95, 0x01, 0x0a,
	0x33, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x1a, 0xab, 0x14, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x98, 0x01, 0x0a, 0x35, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x53, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x39, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x32, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x34, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x42, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0xad, 0x01, 0x0a, 0x41, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x37, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x72,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x41, 0x6d, 0x6c, 0x43, 0x74, 0x66, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc4, 0x01, 0x0a, 0x4d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x63, 0x64, 0x64, 0x5f, 0x65, 0x64, 0x64, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x42, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x4b, 0x79, 0x63, 0x43,
	0x64, 0x64, 0x45, 0x64, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x12,
	0xa4, 0x01, 0x0a, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x34, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f,
	0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x3a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0xb9, 0x01, 0x0a, 0x47,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f,
	0x72, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa3, 0x01, 0x0a, 0x3b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01,
	0x0a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x29, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4f, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x8d, 0x01,
	0x0a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x29, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4f, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xcd, 0x01,
	0x0a, 0x51, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x47, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4f, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xab, 0x01,
	0x0a, 0x3f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x37, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4f, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0xb4, 0x01, 0x0a, 0x44,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f,
	0x72, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f,
	0x77, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x57, 0x69, 0x64, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x63, 0x0a, 0x30, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x29, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x46, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x3d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x1a, 0x99, 0x02, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x89, 0x01, 0x0a, 0x2b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x26, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x36,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x30, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xa0,
	0x07, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x73, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x1f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x1a, 0xd4, 0x04, 0x0a, 0x08, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x64, 0x0a, 0x30, 0x64, 0x75, 0x65, 0x5f, 0x64,
	0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x2a, 0x64, 0x75, 0x65, 0x44, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x72, 0x0a,
	0x37, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x31,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x1a, 0xdc, 0x05, 0x0a, 0x1c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x78, 0x0a, 0x3a, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x34, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbb, 0x01, 0x0a,
	0x5d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x54, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x3d, 0x73,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x5f, 0x6f,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x52, 0x34, 0x73,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x4f, 0x72, 0x44,
	0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x73, 0x12, 0xda, 0x01, 0x0a, 0x58, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x52, 0x4d, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73,
	0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73,
	0x1a, 0xc7, 0x04, 0x0a, 0x25, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x76, 0x0a, 0x21, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x1d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x28, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x63, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x24, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x63, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x63, 0x70, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x42, 0x63, 0x70, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x4d, 0x0a, 0x23, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x20, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64,
	0x72, 0x70, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x72, 0x70, 0x54, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x72,
	0x70, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x72, 0x70, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x88, 0x03, 0x0a, 0x09, 0x49,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x31, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x2c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x4f, 0x66, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x52, 0x14, 0x65, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x64, 0x54, 0x68, 0x65,
	0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xa7, 0x1a, 0x0a, 0x23, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0xc2, 0x01,
	0x0a, 0x34, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4f, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xa7, 0x01, 0x0a, 0x26, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd5, 0x01, 0x0a,
	0x3e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x38, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd2, 0x01, 0x0a, 0x3c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x37, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64,
	0x44, 0x69, 0x73, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x27, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x61, 0x6c,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x23, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x72, 0x75,
	0x61, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x27, 0x66, 0x78, 0x5f, 0x67, 0x61, 0x69,
	0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x66, 0x78,
	0x47, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xcc, 0x01, 0x0a, 0x3a, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x33, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x66, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xd0, 0x01, 0x0a, 0x3c, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x35, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x55, 0x6e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x28, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51,
	0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x25, 0x63, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x23, 0x6e, 0x61, 0x76, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75,
	0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x20, 0x6e, 0x61, 0x76, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9c, 0x01, 0x0a, 0x20, 0x6e, 0x61, 0x76, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x6e, 0x61, 0x76, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xae, 0x01, 0x0a, 0x2a, 0x6e, 0x61, 0x76, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x25, 0x6e, 0x61, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x6e, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc6, 0x01, 0x0a, 0x36, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x31, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xbc, 0x01, 0x0a, 0x31, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x2c, 0x74, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb9,
	0x01, 0x0a, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x2b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x82, 0x04, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x66, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x18, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x64, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x63, 0x0a, 0x10, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x45, 0x4d, 0x49, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a,
	0xf3, 0x14, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x18, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x76, 0x0a, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x18, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x83, 0x01, 0x0a, 0x22, 0x61, 0x6e, 0x74, 0x69,
	0x5f, 0x62, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x1e, 0x61,
	0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0xa4, 0x01,
	0x0a, 0x34, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x2d, 0x61, 0x6d, 0x6c, 0x43, 0x74, 0x66, 0x41, 0x6e, 0x64,
	0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x9f, 0x01, 0x0a, 0x32, 0x6b, 0x79, 0x63, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x64, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x2a, 0x6b, 0x79, 0x63, 0x41,
	0x6e, 0x64, 0x43, 0x64, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x64, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x7e, 0x0a, 0x1f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x1c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x7a, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x71, 0x0a, 0x18, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x16, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x84, 0x01, 0x0a, 0x22, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x1f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x94, 0x01, 0x0a,
	0x2b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x26, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x8a, 0x01, 0x0a, 0x25, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34,
	0x36, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x22, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x9e, 0x01, 0x0a, 0x30, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x2b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x62, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x9a, 0x01, 0x0a, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x29, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x6a, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xf4,
	0x04, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x69, 0x0a, 0x0d, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x44, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x6f, 0x0a, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x2e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72,
	0x69, 0x73, 0x6b, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01,
	0x12, 0x34, 0x0a, 0x30, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41,
	0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x44,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x22, 0x5f, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41,
	0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x57, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x10, 0x03, 0x22, 0x4b, 0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x51, 0x59,
	0x34, 0x36, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x51, 0x59, 0x34, 0x36, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_standards_open_v1_RT000QY46_proto_rawDescOnce sync.Once
	file_standards_open_v1_RT000QY46_proto_rawDescData = file_standards_open_v1_RT000QY46_proto_rawDesc
)

func file_standards_open_v1_RT000QY46_proto_rawDescGZIP() []byte {
	file_standards_open_v1_RT000QY46_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_RT000QY46_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_RT000QY46_proto_rawDescData)
	})
	return file_standards_open_v1_RT000QY46_proto_rawDescData
}

var file_standards_open_v1_RT000QY46_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_standards_open_v1_RT000QY46_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_standards_open_v1_RT000QY46_proto_goTypes = []interface{}{
	(RT000QY46_YesNoExplain_Response)(0),                                                     // 0: standards.open.v1.RT000QY46.YesNoExplain.Response
	(RT000QY46_YesExplainNo_Response)(0),                                                     // 1: standards.open.v1.RT000QY46.YesExplainNo.Response
	(RT000QY46_YesNoAndExplain_Response)(0),                                                  // 2: standards.open.v1.RT000QY46.YesNoAndExplain.Response
	(RT000QY46_EntityAndOwnership_OwnershipType)(0),                                          // 3: standards.open.v1.RT000QY46.EntityAndOwnership.OwnershipType
	(RT000QY46_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier)(0), // 4: standards.open.v1.RT000QY46.EntityAndOwnership.TradedSecurityIdentifier.FinancialInstrumentIdentifier
	(RT000QY46_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType)(0),             // 5: standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.BeneficialOwnerType
	(RT000QY46_LegalAndRegulatory_Regulator)(0),                                              // 6: standards.open.v1.RT000QY46.LegalAndRegulatory.Regulator
	(RT000QY46_FundAccountingOperationsAndControls_ProcessInformation_AutomationLevels)(0),   // 7: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation.AutomationLevels
	(RT000QY46_ReviewerInformation_Review_ReviewStatus)(0),                                   // 8: standards.open.v1.RT000QY46.ReviewerInformation.Review.ReviewStatus
	(RT000QY46_ReviewerInformation_Review_RiskAssessment)(0),                                 // 9: standards.open.v1.RT000QY46.ReviewerInformation.Review.RiskAssessment
	(*RT000QY46)(nil),                                                         // 10: standards.open.v1.RT000QY46
	(*RT000QY46Batch)(nil),                                                    // 11: standards.open.v1.RT000QY46_batch
	(*RT000QY46_YesNoExplain)(nil),                                            // 12: standards.open.v1.RT000QY46.YesNoExplain
	(*RT000QY46_YesExplainNo)(nil),                                            // 13: standards.open.v1.RT000QY46.YesExplainNo
	(*RT000QY46_YesNoAndExplain)(nil),                                         // 14: standards.open.v1.RT000QY46.YesNoAndExplain
	(*RT000QY46_DocumentAttachmentChecklist)(nil),                             // 15: standards.open.v1.RT000QY46.DocumentAttachmentChecklist
	(*RT000QY46_EntityAndOwnership)(nil),                                      // 16: standards.open.v1.RT000QY46.EntityAndOwnership
	(*RT000QY46_LegalAndRegulatory)(nil),                                      // 17: standards.open.v1.RT000QY46.LegalAndRegulatory
	(*RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures)(nil),           // 18: standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures
	(*RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures)(nil),              // 19: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures
	(*RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures)(nil),                    // 20: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures
	(*RT000QY46_MonitoringAndReporting)(nil),                                  // 21: standards.open.v1.RT000QY46.MonitoringAndReporting
	(*RT000QY46_TrainingAndEducation)(nil),                                    // 22: standards.open.v1.RT000QY46.TrainingAndEducation
	(*RT000QY46_AuditInformation)(nil),                                        // 23: standards.open.v1.RT000QY46.AuditInformation
	(*RT000QY46_OperationalRiskManagement)(nil),                               // 24: standards.open.v1.RT000QY46.OperationalRiskManagement
	(*RT000QY46_DelegateAndThirdPartyProviders)(nil),                          // 25: standards.open.v1.RT000QY46.DelegateAndThirdPartyProviders
	(*RT000QY46_InformationTechnologySystems)(nil),                            // 26: standards.open.v1.RT000QY46.InformationTechnologySystems
	(*RT000QY46_BusinessContinuityAndDisasterRecovery)(nil),                   // 27: standards.open.v1.RT000QY46.BusinessContinuityAndDisasterRecovery
	(*RT000QY46_Insurance)(nil),                                               // 28: standards.open.v1.RT000QY46.Insurance
	(*RT000QY46_FundAccountingOperationsAndControls)(nil),                     // 29: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls
	(*RT000QY46_ReviewerInformation)(nil),                                     // 30: standards.open.v1.RT000QY46.ReviewerInformation
	(*RT000QY46_EntityAndOwnership_Branch)(nil),                               // 31: standards.open.v1.RT000QY46.EntityAndOwnership.Branch
	(*RT000QY46_EntityAndOwnership_TradedSecurityIdentifier)(nil),             // 32: standards.open.v1.RT000QY46.EntityAndOwnership.TradedSecurityIdentifier
	(*RT000QY46_EntityAndOwnership_SignificantShareholder)(nil),               // 33: standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder
	(*RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson)(nil), // 34: standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.NaturalPerson
	(*RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity)(nil),   // 35: standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.LegalEntity
	(*RT000QY46_LegalAndRegulatory_OnSiteAudit)(nil),                          // 36: standards.open.v1.RT000QY46.LegalAndRegulatory.OnSiteAudit
	(*RT000QY46_DelegateAndThirdPartyProviders_Delegate)(nil),                 // 37: standards.open.v1.RT000QY46.DelegateAndThirdPartyProviders.Delegate
	(*RT000QY46_FundAccountingOperationsAndControls_ProcessInformation)(nil),  // 38: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	(*RT000QY46_ReviewerInformation_Review)(nil),                              // 39: standards.open.v1.RT000QY46.ReviewerInformation.Review
	(*date.Date)(nil), // 40: google.type.Date
}
var file_standards_open_v1_RT000QY46_proto_depIdxs = []int32{
	40,  // 0: standards.open.v1.RT000QY46.preparation_date:type_name -> google.type.Date
	40,  // 1: standards.open.v1.RT000QY46.review_date:type_name -> google.type.Date
	15,  // 2: standards.open.v1.RT000QY46.documentation_checklist:type_name -> standards.open.v1.RT000QY46.DocumentAttachmentChecklist
	16,  // 3: standards.open.v1.RT000QY46.entity_and_ownership:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership
	17,  // 4: standards.open.v1.RT000QY46.legal_and_regulatory:type_name -> standards.open.v1.RT000QY46.LegalAndRegulatory
	18,  // 5: standards.open.v1.RT000QY46.anti_bribery_and_corruption_policies_and_procedures:type_name -> standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures
	19,  // 6: standards.open.v1.RT000QY46.aml_ctf_and_sanctions_policies_and_procedures:type_name -> standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures
	20,  // 7: standards.open.v1.RT000QY46.kyc_and_cdd_and_edd_policies_and_procedures:type_name -> standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures
	21,  // 8: standards.open.v1.RT000QY46.monitoring_and_reporting:type_name -> standards.open.v1.RT000QY46.MonitoringAndReporting
	22,  // 9: standards.open.v1.RT000QY46.training_and_education:type_name -> standards.open.v1.RT000QY46.TrainingAndEducation
	23,  // 10: standards.open.v1.RT000QY46.audit_information:type_name -> standards.open.v1.RT000QY46.AuditInformation
	24,  // 11: standards.open.v1.RT000QY46.operational_risk_management:type_name -> standards.open.v1.RT000QY46.OperationalRiskManagement
	25,  // 12: standards.open.v1.RT000QY46.delegation_and_third_party_providers:type_name -> standards.open.v1.RT000QY46.DelegateAndThirdPartyProviders
	26,  // 13: standards.open.v1.RT000QY46.information_technology_systems:type_name -> standards.open.v1.RT000QY46.InformationTechnologySystems
	27,  // 14: standards.open.v1.RT000QY46.business_continuity_and_disaster_recovery:type_name -> standards.open.v1.RT000QY46.BusinessContinuityAndDisasterRecovery
	28,  // 15: standards.open.v1.RT000QY46.insurance:type_name -> standards.open.v1.RT000QY46.Insurance
	29,  // 16: standards.open.v1.RT000QY46.fund_accounting_operations_and_controls:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls
	30,  // 17: standards.open.v1.RT000QY46.reviewer_information:type_name -> standards.open.v1.RT000QY46.ReviewerInformation
	10,  // 18: standards.open.v1.RT000QY46_batch.response:type_name -> standards.open.v1.RT000QY46
	0,   // 19: standards.open.v1.RT000QY46.YesNoExplain.response:type_name -> standards.open.v1.RT000QY46.YesNoExplain.Response
	1,   // 20: standards.open.v1.RT000QY46.YesExplainNo.response:type_name -> standards.open.v1.RT000QY46.YesExplainNo.Response
	2,   // 21: standards.open.v1.RT000QY46.YesNoAndExplain.response:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain.Response
	12,  // 22: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.evidence_of_entity_registration_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 23: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.constitutive_documents_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 24: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.legal_structure_chart_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 25: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.organizational_chart_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 26: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.relevant_financial_statements_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 27: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.aml_and_ctf_policies_and_procedures_document_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 28: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.sanctions_policies_and_procedures_document_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 29: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.anti_bribery_and_corruption_policies_and_procedures_document_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 30: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.kyc_cdd_and_edd_policies_and_procedures_document_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 31: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.monitoring_and_reporting_policies_and_procedures_document_attached:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 32: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.delegate_conflict_of_interest_policy:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 33: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.information_on_information_security_policies_procedures_governance_and_change_management:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 34: standards.open.v1.RT000QY46.DocumentAttachmentChecklist.business_continuity_plan:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	31,  // 35: standards.open.v1.RT000QY46.EntityAndOwnership.covered_branches:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.Branch
	40,  // 36: standards.open.v1.RT000QY46.EntityAndOwnership.date_of_incorporation:type_name -> google.type.Date
	3,   // 37: standards.open.v1.RT000QY46.EntityAndOwnership.ownership_types:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.OwnershipType
	32,  // 38: standards.open.v1.RT000QY46.EntityAndOwnership.security_identifier:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.TradedSecurityIdentifier
	33,  // 39: standards.open.v1.RT000QY46.EntityAndOwnership.significant_shareholders:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder
	12,  // 40: standards.open.v1.RT000QY46.EntityAndOwnership.structure_chart:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	31,  // 41: standards.open.v1.RT000QY46.EntityAndOwnership.branches_under_offshore_banking_license:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.Branch
	6,   // 42: standards.open.v1.RT000QY46.LegalAndRegulatory.regulatory_bodies:type_name -> standards.open.v1.RT000QY46.LegalAndRegulatory.Regulator
	36,  // 43: standards.open.v1.RT000QY46.LegalAndRegulatory.list_and_describe_on_site_audits:type_name -> standards.open.v1.RT000QY46.LegalAndRegulatory.OnSiteAudit
	12,  // 44: standards.open.v1.RT000QY46.LegalAndRegulatory.any_regulatory_sanctions:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 45: standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures.documented_anti_bribery_and_corruption_policies_and_procedures:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 46: standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures.entity_internal_audit_function_covers_abc_policies_and_procedures:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 47: standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures.entity_provides_mandatory_abc_training_to_board_and_senior_management_committee:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 48: standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures.entity_provides_mandatory_abc_training_to_first_line_of_defence:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 49: standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures.entity_provides_mandatory_abc_training_to_second_line_of_defence:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 50: standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures.entity_provides_mandatory_abc_training_to_third_line_of_defence:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 51: standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures.entity_provides_mandatory_abc_training_to_third_parties_subject_to_abc_risk:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 52: standards.open.v1.RT000QY46.AntiBriberyAndCorruptionPoliciesAndProcedures.entity_provides_mandatory_abc_training_to_non_employed_workers_as_appropriate:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 53: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_documented_policies_and_procedures_for_money_laundering:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 54: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_documented_policies_and_procedures_for_terrorist_financing:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 55: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_documented_policies_and_procedures_for_sanctions_violations:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 56: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_opening_and_keeping_anonymous_and_fictitious_named_accounts:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 57: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_opening_accounts_for_unlicensed_banks_and_or_nbfis:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 58: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_dealing_with_entities_providing_banking_to_unlicensed_banks:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 59: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_accounts_or_relationships_with_shell_banks:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 60: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_dealing_with_another_entity_that_provides_services_to_shell_banks:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 61: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_accounts_for_section_311_entities:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 62: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_accounts_for_unlicensed_or_regulated_remittance_agents_or_exchange_houses_or_money_transfer_agents:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 63: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_assess_risks_of_relationships_with_peps:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 64: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_define_escalation_process_for_financial_crime:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 65: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_specify_how_suspicious_activities_are_escalated:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 66: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_outline_process_for_screening_for_sanctions_peps_and_negative_media:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 67: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_had_defined_a_risk_tolerance_statement:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	14,  // 68: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_record_retention_procedure:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain
	12,  // 69: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.appointed_officer_with_sufficient_experience:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 70: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.cash_reporting:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 71: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.CDD:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 72: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.EDD:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 73: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.beneficial_ownership:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 74: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.independent_testing:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 75: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.periodic_review:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 76: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_and_procedures:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 77: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.risk_assessment:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 78: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.sanctions:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 79: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.pep_screening:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 80: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.adverse_information_screening:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 81: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.suspicious_activity_reporting:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 82: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.training_and_education:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 83: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.transaction_monitoring:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 84: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.policy_approved_at_least_annually_by_senior_committee:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	13,  // 85: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.use_third_parties:type_name -> standards.open.v1.RT000QY46.YesExplainNo
	12,  // 86: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_management_approved_sanctions_policy:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 87: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_screens_customers_against_sanctions_lists:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	13,  // 88: standards.open.v1.RT000QY46.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_physical_presence_in_sanctioned_countries:type_name -> standards.open.v1.RT000QY46.YesExplainNo
	12,  // 89: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_verifies_identity_of_customer:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 90: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.policies_and_procedures_set_out_when_cdd_must_be_completed:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 91: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_gathers_ownership_structure_information:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 92: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_gathers_customer_identification_information:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 93: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_gathers_expected_activity_information:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 94: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_gathers_nature_of_business_information:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 95: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_gathers_product_usage_information:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 96: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_gathers_purpose_and_nature_of_relationship_information:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 97: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_gathers_source_of_funds_information:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 98: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.ultimate_beneficial_ownership_identified:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 99: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.ultimate_beneficial_ownership_verified:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 100: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.authorised_signatories_identified:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 101: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.key_controllers_identified:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 102: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.other_relevant_parties_identified:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 103: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.due_diligence_process_results_in_risk_classification:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	14,  // 104: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_has_risk_based_approach_to_screening_for_pep_connections:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain
	14,  // 105: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.entity_has_escalation_process_for_matches_when_screening_for_pep_connections:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain
	12,  // 106: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.process_to_review_and_update_customer_information_on_kyc_renewal:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	13,  // 107: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.non_account_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesExplainNo
	12,  // 108: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.non_resident_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 109: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.shell_banks_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 110: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.mvts_msb_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 111: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.pep_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 112: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.pep_related_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 113: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.pep_close_associate_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 114: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.correspondent_bank_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 115: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.correspondent_bank_customers_assessment_contains_worlsberg_principles_elements:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 116: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.arms_defense_and_military_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 117: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.atomic_power_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 118: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.extractive_industry_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 119: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.precious_metals_and_stones_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 120: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.unregulated_charity_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 121: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.regulated_charity_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 122: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.red_light_or_adult_entertainment_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 123: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.ngo_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 124: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.virtual_currency_cutsomers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 125: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.marijuana_related_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 126: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.embassy_or_consulate_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 127: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.gambling_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 128: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.payment_service_provider_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 129: standards.open.v1.RT000QY46.KYCAndCDDAndEDDPoliciesAndProcedures.other_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 130: standards.open.v1.RT000QY46.MonitoringAndReporting.entity_has_risk_based_policies:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 131: standards.open.v1.RT000QY46.MonitoringAndReporting.entity_has_policies_procedures_processes_to_comply_with_suspicious_transaction_monitoring_requirements:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 132: standards.open.v1.RT000QY46.MonitoringAndReporting.entity_has_policies_procedures_and_processes_to_review_and_escalate:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	14,  // 133: standards.open.v1.RT000QY46.MonitoringAndReporting.entity_has_policies_procedures_and_processes_to_report_potential_breaches_to_client_team:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain
	12,  // 134: standards.open.v1.RT000QY46.TrainingAndEducation.provides_mandatory_training_on_identification_and_reporting_of_transaction_to_government_authorities:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 135: standards.open.v1.RT000QY46.TrainingAndEducation.provides_mandatory_training_on_examples_of_different_types_of_money_laundering:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 136: standards.open.v1.RT000QY46.TrainingAndEducation.provides_mandatory_training_on_internal_policies_for_controlling_money_laundering:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 137: standards.open.v1.RT000QY46.TrainingAndEducation.provides_mandatory_training_on_conduct_and_culture:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 138: standards.open.v1.RT000QY46.TrainingAndEducation.mandatory_training_provided_to_board_and_senior_commitee_management:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 139: standards.open.v1.RT000QY46.TrainingAndEducation.mandatory_training_provided_to_first_line_of_defence:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 140: standards.open.v1.RT000QY46.TrainingAndEducation.mandatory_training_provided_to_second_line_of_defence:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 141: standards.open.v1.RT000QY46.TrainingAndEducation.mandatory_training_provided_to_third_line_of_defence:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 142: standards.open.v1.RT000QY46.TrainingAndEducation.mandatory_training_provided_to_third_parities_to_which_activities_outsourced:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 143: standards.open.v1.RT000QY46.TrainingAndEducation.mandatory_training_provided_to_non_employed_workers:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 144: standards.open.v1.RT000QY46.AuditInformation.entity_has_internal_audit_or_similar_testing_function:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 145: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_aml_ctf_and_sanctions_policy:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 146: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_kyc_cdd_edd_and_underlying_methodologies:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 147: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_transaction_monitoring:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 148: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_transaction_screening:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 149: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_name_screening_and_list_management:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 150: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_training_and_education:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 151: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_technology:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 152: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_governance:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 153: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_reporting_metrics_and_management_information:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 154: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_suspicious_activity_filing:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 155: standards.open.v1.RT000QY46.AuditInformation.internal_audit_or_third_party_covers_enterprise_wide_risk_assessment:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	12,  // 156: standards.open.v1.RT000QY46.AuditInformation.adverse_findings_from_internal_and_external_audit_tracked_and_assessed:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	14,  // 157: standards.open.v1.RT000QY46.OperationalRiskManagement.operational_risk_management_policy_in_place:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain
	37,  // 158: standards.open.v1.RT000QY46.DelegateAndThirdPartyProviders.relevant_delegates:type_name -> standards.open.v1.RT000QY46.DelegateAndThirdPartyProviders.Delegate
	12,  // 159: standards.open.v1.RT000QY46.DelegateAndThirdPartyProviders.conflict_of_interest_policy_in_place:type_name -> standards.open.v1.RT000QY46.YesNoExplain
	13,  // 160: standards.open.v1.RT000QY46.InformationTechnologySystems.suffered_delays_or_disruptions_in_systems_in_last_three_years:type_name -> standards.open.v1.RT000QY46.YesExplainNo
	13,  // 161: standards.open.v1.RT000QY46.InformationTechnologySystems.suffered_information_or_confidentiality_and_system_security_breaches_in_last_three_years:type_name -> standards.open.v1.RT000QY46.YesExplainNo
	14,  // 162: standards.open.v1.RT000QY46.BusinessContinuityAndDisasterRecovery.business_continuity_plan_in_place:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain
	14,  // 163: standards.open.v1.RT000QY46.BusinessContinuityAndDisasterRecovery.dedicated_individual_responsible_for_bcp:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain
	14,  // 164: standards.open.v1.RT000QY46.Insurance.company_maintains_third_party_liability_insurance:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain
	13,  // 165: standards.open.v1.RT000QY46.Insurance.ever_used_the_insurance:type_name -> standards.open.v1.RT000QY46.YesExplainNo
	38,  // 166: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.transaction_input_or_bookkeeping_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 167: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.income_and_expense_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 168: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.management_and_performance_fee_calculation_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 169: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.investments_and_disinvestments_recording_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 170: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.income_and_accruals_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 171: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.fx_gains_and_losses_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 172: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.pricing_and_valuation_of_quoted_assets_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 173: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.pricing_and_valuation_of_unquoted_assets_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 174: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.cash_reconcilliation_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 175: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.nav_calculation_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 176: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.nav_delivery_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 177: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.nav_control_and_errors_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 178: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.statutory_and_regulatory_reporting_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 179: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.tax_calculation_and_reporting_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	38,  // 180: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.client_complaint_monitoring_process_information:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation
	39,  // 181: standards.open.v1.RT000QY46.ReviewerInformation.entity_and_ownership_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 182: standards.open.v1.RT000QY46.ReviewerInformation.legal_and_regulatory_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 183: standards.open.v1.RT000QY46.ReviewerInformation.anti_bribery_and_corruption_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 184: standards.open.v1.RT000QY46.ReviewerInformation.aml_ctf_and_sanctions_policies_and_procedures_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 185: standards.open.v1.RT000QY46.ReviewerInformation.kyc_and_cdd_and_edd_policies_and_procedures_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 186: standards.open.v1.RT000QY46.ReviewerInformation.monitoring_and_reporting_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 187: standards.open.v1.RT000QY46.ReviewerInformation.training_and_education_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 188: standards.open.v1.RT000QY46.ReviewerInformation.audit_information_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 189: standards.open.v1.RT000QY46.ReviewerInformation.operational_risk_management_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 190: standards.open.v1.RT000QY46.ReviewerInformation.delegation_and_third_party_providers_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 191: standards.open.v1.RT000QY46.ReviewerInformation.information_technology_systems_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 192: standards.open.v1.RT000QY46.ReviewerInformation.business_continuity_and_disaster_recovery_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 193: standards.open.v1.RT000QY46.ReviewerInformation.insurance_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 194: standards.open.v1.RT000QY46.ReviewerInformation.fund_accounting_operations_and_controls_review:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	39,  // 195: standards.open.v1.RT000QY46.ReviewerInformation.aggregate_conclusion:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review
	4,   // 196: standards.open.v1.RT000QY46.EntityAndOwnership.TradedSecurityIdentifier.financial_identifier:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.TradedSecurityIdentifier.FinancialInstrumentIdentifier
	5,   // 197: standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.beneficial_owner_type:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.BeneficialOwnerType
	34,  // 198: standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.natural_person_ownership_details:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.NaturalPerson
	35,  // 199: standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.legal_entity_ownership_details:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.LegalEntity
	34,  // 200: standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.LegalEntity.directors_or_managers:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.NaturalPerson
	3,   // 201: standards.open.v1.RT000QY46.EntityAndOwnership.SignificantShareholder.LegalEntity.ownership_type:type_name -> standards.open.v1.RT000QY46.EntityAndOwnership.OwnershipType
	40,  // 202: standards.open.v1.RT000QY46.LegalAndRegulatory.OnSiteAudit.audit_date:type_name -> google.type.Date
	6,   // 203: standards.open.v1.RT000QY46.LegalAndRegulatory.OnSiteAudit.regulator:type_name -> standards.open.v1.RT000QY46.LegalAndRegulatory.Regulator
	14,  // 204: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation.standard_process_applied:type_name -> standards.open.v1.RT000QY46.YesNoAndExplain
	7,   // 205: standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation.process_automation_level:type_name -> standards.open.v1.RT000QY46.FundAccountingOperationsAndControls.ProcessInformation.AutomationLevels
	8,   // 206: standards.open.v1.RT000QY46.ReviewerInformation.Review.review_status:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review.ReviewStatus
	9,   // 207: standards.open.v1.RT000QY46.ReviewerInformation.Review.risk_assessment:type_name -> standards.open.v1.RT000QY46.ReviewerInformation.Review.RiskAssessment
	208, // [208:208] is the sub-list for method output_type
	208, // [208:208] is the sub-list for method input_type
	208, // [208:208] is the sub-list for extension type_name
	208, // [208:208] is the sub-list for extension extendee
	0,   // [0:208] is the sub-list for field type_name
}

func init() { file_standards_open_v1_RT000QY46_proto_init() }
func file_standards_open_v1_RT000QY46_proto_init() {
	if File_standards_open_v1_RT000QY46_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_RT000QY46_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_YesNoExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_YesExplainNo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_YesNoAndExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_DocumentAttachmentChecklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_EntityAndOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_LegalAndRegulatory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_AntiBriberyAndCorruptionPoliciesAndProcedures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_AMLAndCTFAndSanctionsPoliciesAndProcedures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_KYCAndCDDAndEDDPoliciesAndProcedures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_MonitoringAndReporting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_TrainingAndEducation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_AuditInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_OperationalRiskManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_DelegateAndThirdPartyProviders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_InformationTechnologySystems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_BusinessContinuityAndDisasterRecovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_Insurance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_FundAccountingOperationsAndControls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_ReviewerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_EntityAndOwnership_Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_EntityAndOwnership_TradedSecurityIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_EntityAndOwnership_SignificantShareholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_EntityAndOwnership_SignificantShareholder_NaturalPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_EntityAndOwnership_SignificantShareholder_LegalEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_LegalAndRegulatory_OnSiteAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_DelegateAndThirdPartyProviders_Delegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_FundAccountingOperationsAndControls_ProcessInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000QY46_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000QY46_ReviewerInformation_Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_RT000QY46_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_RT000QY46_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_RT000QY46_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_RT000QY46_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_RT000QY46_proto_msgTypes,
	}.Build()
	File_standards_open_v1_RT000QY46_proto = out.File
	file_standards_open_v1_RT000QY46_proto_rawDesc = nil
	file_standards_open_v1_RT000QY46_proto_goTypes = nil
	file_standards_open_v1_RT000QY46_proto_depIdxs = nil
}
