// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: RT000F0J4.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RT000F0J4_DatasetInformation_EETVersion int32

const (
	// Source not specified by the user.
	RT000F0J4_DatasetInformation_EET_VERSION_UNSPECIFIED RT000F0J4_DatasetInformation_EETVersion = 0
	// Version 1 of the FinDatEx EET template
	RT000F0J4_DatasetInformation_VERSION_1 RT000F0J4_DatasetInformation_EETVersion = 1
)

// Enum value maps for RT000F0J4_DatasetInformation_EETVersion.
var (
	RT000F0J4_DatasetInformation_EETVersion_name = map[int32]string{
		0: "EET_VERSION_UNSPECIFIED",
		1: "VERSION_1",
	}
	RT000F0J4_DatasetInformation_EETVersion_value = map[string]int32{
		"EET_VERSION_UNSPECIFIED": 0,
		"VERSION_1":               1,
	}
)

func (x RT000F0J4_DatasetInformation_EETVersion) Enum() *RT000F0J4_DatasetInformation_EETVersion {
	p := new(RT000F0J4_DatasetInformation_EETVersion)
	*p = x
	return p
}

func (x RT000F0J4_DatasetInformation_EETVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_DatasetInformation_EETVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[0].Descriptor()
}

func (RT000F0J4_DatasetInformation_EETVersion) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[0]
}

func (x RT000F0J4_DatasetInformation_EETVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_DatasetInformation_EETVersion.Descriptor instead.
func (RT000F0J4_DatasetInformation_EETVersion) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Codification used to determine the identification code. Either LEI or None.
type RT000F0J4_ManufacturerInformation_ManufacturerCodeType int32

const (
	// Type not specified.
	RT000F0J4_ManufacturerInformation_TYPE_UNSPECIFIED RT000F0J4_ManufacturerInformation_ManufacturerCodeType = 0
	// Legal Entity Identifier
	RT000F0J4_ManufacturerInformation_LEI RT000F0J4_ManufacturerInformation_ManufacturerCodeType = 1
)

// Enum value maps for RT000F0J4_ManufacturerInformation_ManufacturerCodeType.
var (
	RT000F0J4_ManufacturerInformation_ManufacturerCodeType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "LEI",
	}
	RT000F0J4_ManufacturerInformation_ManufacturerCodeType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"LEI":              1,
	}
)

func (x RT000F0J4_ManufacturerInformation_ManufacturerCodeType) Enum() *RT000F0J4_ManufacturerInformation_ManufacturerCodeType {
	p := new(RT000F0J4_ManufacturerInformation_ManufacturerCodeType)
	*p = x
	return p
}

func (x RT000F0J4_ManufacturerInformation_ManufacturerCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ManufacturerInformation_ManufacturerCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[1].Descriptor()
}

func (RT000F0J4_ManufacturerInformation_ManufacturerCodeType) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[1]
}

func (x RT000F0J4_ManufacturerInformation_ManufacturerCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ManufacturerInformation_ManufacturerCodeType.Descriptor instead.
func (RT000F0J4_ManufacturerInformation_ManufacturerCodeType) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Enumeration of Manufacturer Commitments
type RT000F0J4_ManufacturerInformation_Commitments int32

const (
	// Commitments not specified.
	RT000F0J4_ManufacturerInformation_COMMITMENTS_UNSPECIFIED RT000F0J4_ManufacturerInformation_Commitments = 0
	// TCFD
	RT000F0J4_ManufacturerInformation_A_TCFD RT000F0J4_ManufacturerInformation_Commitments = 1
	// NZAMI or NZAOA
	RT000F0J4_ManufacturerInformation_B_NZAMI_NZAOA RT000F0J4_ManufacturerInformation_Commitments = 2
	// SBT for FI
	RT000F0J4_ManufacturerInformation_C_SBT_FOR_FI RT000F0J4_ManufacturerInformation_Commitments = 3
	// Stewardship Code
	RT000F0J4_ManufacturerInformation_D_STEWARDSHIP_CODE RT000F0J4_ManufacturerInformation_Commitments = 4
	// UNGC
	RT000F0J4_ManufacturerInformation_E_UNGC RT000F0J4_ManufacturerInformation_Commitments = 5
	// Participation to the « Non-Disclosure Campaign » from CDP
	RT000F0J4_ManufacturerInformation_F_CDP RT000F0J4_ManufacturerInformation_Commitments = 6
)

// Enum value maps for RT000F0J4_ManufacturerInformation_Commitments.
var (
	RT000F0J4_ManufacturerInformation_Commitments_name = map[int32]string{
		0: "COMMITMENTS_UNSPECIFIED",
		1: "A_TCFD",
		2: "B_NZAMI_NZAOA",
		3: "C_SBT_FOR_FI",
		4: "D_STEWARDSHIP_CODE",
		5: "E_UNGC",
		6: "F_CDP",
	}
	RT000F0J4_ManufacturerInformation_Commitments_value = map[string]int32{
		"COMMITMENTS_UNSPECIFIED": 0,
		"A_TCFD":                  1,
		"B_NZAMI_NZAOA":           2,
		"C_SBT_FOR_FI":            3,
		"D_STEWARDSHIP_CODE":      4,
		"E_UNGC":                  5,
		"F_CDP":                   6,
	}
)

func (x RT000F0J4_ManufacturerInformation_Commitments) Enum() *RT000F0J4_ManufacturerInformation_Commitments {
	p := new(RT000F0J4_ManufacturerInformation_Commitments)
	*p = x
	return p
}

func (x RT000F0J4_ManufacturerInformation_Commitments) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ManufacturerInformation_Commitments) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[2].Descriptor()
}

func (RT000F0J4_ManufacturerInformation_Commitments) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[2]
}

func (x RT000F0J4_ManufacturerInformation_Commitments) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ManufacturerInformation_Commitments.Descriptor instead.
func (RT000F0J4_ManufacturerInformation_Commitments) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 1, 1}
}

// Enumerations of financial identifiers
type RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes int32

const (
	// Source not specified by the user.
	RT000F0J4_ProductData_ProductIdentification_ShareClass_IDENTIFIER_UNSPECIFIED RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 0
	// ISO 6166 code of ISIN when available
	RT000F0J4_ProductData_ProductIdentification_ShareClass_ISIN RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000F0J4_ProductData_ProductIdentification_ShareClass_CUSIP RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000F0J4_ProductData_ProductIdentification_ShareClass_SEDOL RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000F0J4_ProductData_ProductIdentification_ShareClass_WKN RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000F0J4_ProductData_ProductIdentification_ShareClass_BBG_TICKER RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 5
	// BBGID (The Bloomberg Global ID)
	RT000F0J4_ProductData_ProductIdentification_ShareClass_BBGID RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 6
	// Reuters RIC (Reuters instrument code)
	RT000F0J4_ProductData_ProductIdentification_ShareClass_RIC RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000F0J4_ProductData_ProductIdentification_ShareClass_FIGI RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 8
	// LEI 0 Legal Entity Identifier
	RT000F0J4_ProductData_ProductIdentification_ShareClass_LEI RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000F0J4_ProductData_ProductIdentification_ShareClass_PERM_ID RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes = 10
)

// Enum value maps for RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes.
var (
	RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes) Enum() *RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes {
	p := new(RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[3].Descriptor()
}

func (RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[3]
}

func (x RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes.Descriptor instead.
func (RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0}
}

// Enumeration of Fund categories in reference of the article of SFDR european regulation applying to the product.
type RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType int32

const (
	RT000F0J4_ProductData_ESGScreeningCriteria_DOES_NOT_FOLLOW_SFDR_GUIDELINES RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType = 0
	RT000F0J4_ProductData_ESGScreeningCriteria_FOLLOWS_ARTICLE_6_GUIDELINES    RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType = 1
	RT000F0J4_ProductData_ESGScreeningCriteria_ARTICLE_8_LIKE                  RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType = 2
	RT000F0J4_ProductData_ESGScreeningCriteria_ARTICLE_9_LIKE                  RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType = 3
	RT000F0J4_ProductData_ESGScreeningCriteria_NOT_ARTICLE_8_OR_9              RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType = 4
	// Product with ESG characteristics
	RT000F0J4_ProductData_ESGScreeningCriteria_ARTICLE_8_PRODUCT RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType = 5
	// Product with ESG objective
	RT000F0J4_ProductData_ESGScreeningCriteria_ARTICLE_9_PRODUCT RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType = 6
)

// Enum value maps for RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType.
var (
	RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType_name = map[int32]string{
		0: "DOES_NOT_FOLLOW_SFDR_GUIDELINES",
		1: "FOLLOWS_ARTICLE_6_GUIDELINES",
		2: "ARTICLE_8_LIKE",
		3: "ARTICLE_9_LIKE",
		4: "NOT_ARTICLE_8_OR_9",
		5: "ARTICLE_8_PRODUCT",
		6: "ARTICLE_9_PRODUCT",
	}
	RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType_value = map[string]int32{
		"DOES_NOT_FOLLOW_SFDR_GUIDELINES": 0,
		"FOLLOWS_ARTICLE_6_GUIDELINES":    1,
		"ARTICLE_8_LIKE":                  2,
		"ARTICLE_9_LIKE":                  3,
		"NOT_ARTICLE_8_OR_9":              4,
		"ARTICLE_8_PRODUCT":               5,
		"ARTICLE_9_PRODUCT":               6,
	}
)

func (x RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType) Enum() *RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType {
	p := new(RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[4].Descriptor()
}

func (RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[4]
}

func (x RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType.Descriptor instead.
func (RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 1, 0}
}

// Enumeration of ESG Labels
type RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel int32

const (
	RT000F0J4_ProductData_ESGScreeningCriteria_ESG_LABEL_UNSPECIFIED                          RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 0
	RT000F0J4_ProductData_ESGScreeningCriteria_A_ICMA_GREEN_BOND_PRINCIPLES                   RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 1
	RT000F0J4_ProductData_ESGScreeningCriteria_B_EU_GREEN_BOND_STANDARD                       RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 2
	RT000F0J4_ProductData_ESGScreeningCriteria_C_EU_ECOLABEL_FOR_FINANCIAL_PRODUCTS           RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 3
	RT000F0J4_ProductData_ESGScreeningCriteria_D_FNG_SIEGEL_FOND                              RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 4
	RT000F0J4_ProductData_ESGScreeningCriteria_E_CBI_CLIMATE_BONDS_STANDARDS                  RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 5
	RT000F0J4_ProductData_ESGScreeningCriteria_F_ICMA_SOCIAL_BONDS_PRINCIPLES                 RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 6
	RT000F0J4_ProductData_ESGScreeningCriteria_G_LUXFLAG_ESG                                  RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 7
	RT000F0J4_ProductData_ESGScreeningCriteria_H_LUXFLAG_CLIMATE_FINANCE                      RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 8
	RT000F0J4_ProductData_ESGScreeningCriteria_I_LUXFLAG_ENVIRONMENT                          RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 9
	RT000F0J4_ProductData_ESGScreeningCriteria_J_KEIN_VERSTOSS_GEGEN_ATOMWAFFENSPERRVERTRAG   RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 10
	RT000F0J4_ProductData_ESGScreeningCriteria_K_ISR                                          RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 11
	RT000F0J4_ProductData_ESGScreeningCriteria_L_TOWARDS_SUSTAINABILITY                       RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 12
	RT000F0J4_ProductData_ESGScreeningCriteria_M_UZ49_DAS_OSTERREICHISCHE_UMWELTZEICHEN       RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 13
	RT000F0J4_ProductData_ESGScreeningCriteria_N_NORDIC_SWAN                                  RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 14
	RT000F0J4_ProductData_ESGScreeningCriteria_O_GREENFIN_LABEL                               RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 15
	RT000F0J4_ProductData_ESGScreeningCriteria_P_FINANSOL                                     RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 16
	RT000F0J4_ProductData_ESGScreeningCriteria_Q_DDV_NACHHALTIGKEITSKODEX_ESG_STRATEGIE       RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 17
	RT000F0J4_ProductData_ESGScreeningCriteria_R_DDV_NACHHALTIGKEITSKODEX_ESG_IMPACT          RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 18
	RT000F0J4_ProductData_ESGScreeningCriteria_S_GRUNER_PFANDBRIEF                            RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 19
	RT000F0J4_ProductData_ESGScreeningCriteria_T_SOZIALER_PFANDBRIEF                          RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 20
	RT000F0J4_ProductData_ESGScreeningCriteria_U_LUXFLAG_MICROFINANCE                         RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 21
	RT000F0J4_ProductData_ESGScreeningCriteria_V_LUXFLAG_SUSTAINABLE_INSURANCE_PRODUCTS       RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 22
	RT000F0J4_ProductData_ESGScreeningCriteria_X_CHARTE_ESG_FRANCAISE_DES_PRODUITS_STRUCTURES RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 23
	RT000F0J4_ProductData_ESGScreeningCriteria_Z_OTHER                                        RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel = 99
)

// Enum value maps for RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel.
var (
	RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel_name = map[int32]string{
		0:  "ESG_LABEL_UNSPECIFIED",
		1:  "A_ICMA_GREEN_BOND_PRINCIPLES",
		2:  "B_EU_GREEN_BOND_STANDARD",
		3:  "C_EU_ECOLABEL_FOR_FINANCIAL_PRODUCTS",
		4:  "D_FNG_SIEGEL_FOND",
		5:  "E_CBI_CLIMATE_BONDS_STANDARDS",
		6:  "F_ICMA_SOCIAL_BONDS_PRINCIPLES",
		7:  "G_LUXFLAG_ESG",
		8:  "H_LUXFLAG_CLIMATE_FINANCE",
		9:  "I_LUXFLAG_ENVIRONMENT",
		10: "J_KEIN_VERSTOSS_GEGEN_ATOMWAFFENSPERRVERTRAG",
		11: "K_ISR",
		12: "L_TOWARDS_SUSTAINABILITY",
		13: "M_UZ49_DAS_OSTERREICHISCHE_UMWELTZEICHEN",
		14: "N_NORDIC_SWAN",
		15: "O_GREENFIN_LABEL",
		16: "P_FINANSOL",
		17: "Q_DDV_NACHHALTIGKEITSKODEX_ESG_STRATEGIE",
		18: "R_DDV_NACHHALTIGKEITSKODEX_ESG_IMPACT",
		19: "S_GRUNER_PFANDBRIEF",
		20: "T_SOZIALER_PFANDBRIEF",
		21: "U_LUXFLAG_MICROFINANCE",
		22: "V_LUXFLAG_SUSTAINABLE_INSURANCE_PRODUCTS",
		23: "X_CHARTE_ESG_FRANCAISE_DES_PRODUITS_STRUCTURES",
		99: "Z_OTHER",
	}
	RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel_value = map[string]int32{
		"ESG_LABEL_UNSPECIFIED":                        0,
		"A_ICMA_GREEN_BOND_PRINCIPLES":                 1,
		"B_EU_GREEN_BOND_STANDARD":                     2,
		"C_EU_ECOLABEL_FOR_FINANCIAL_PRODUCTS":         3,
		"D_FNG_SIEGEL_FOND":                            4,
		"E_CBI_CLIMATE_BONDS_STANDARDS":                5,
		"F_ICMA_SOCIAL_BONDS_PRINCIPLES":               6,
		"G_LUXFLAG_ESG":                                7,
		"H_LUXFLAG_CLIMATE_FINANCE":                    8,
		"I_LUXFLAG_ENVIRONMENT":                        9,
		"J_KEIN_VERSTOSS_GEGEN_ATOMWAFFENSPERRVERTRAG": 10,
		"K_ISR":                    11,
		"L_TOWARDS_SUSTAINABILITY": 12,
		"M_UZ49_DAS_OSTERREICHISCHE_UMWELTZEICHEN": 13,
		"N_NORDIC_SWAN":    14,
		"O_GREENFIN_LABEL": 15,
		"P_FINANSOL":       16,
		"Q_DDV_NACHHALTIGKEITSKODEX_ESG_STRATEGIE":       17,
		"R_DDV_NACHHALTIGKEITSKODEX_ESG_IMPACT":          18,
		"S_GRUNER_PFANDBRIEF":                            19,
		"T_SOZIALER_PFANDBRIEF":                          20,
		"U_LUXFLAG_MICROFINANCE":                         21,
		"V_LUXFLAG_SUSTAINABLE_INSURANCE_PRODUCTS":       22,
		"X_CHARTE_ESG_FRANCAISE_DES_PRODUITS_STRUCTURES": 23,
		"Z_OTHER": 99,
	}
)

func (x RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel) Enum() *RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel {
	p := new(RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[5].Descriptor()
}

func (RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[5]
}

func (x RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel.Descriptor instead.
func (RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 1, 1}
}

// Enumeration of main SFDR focus
type RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas int32

const (
	RT000F0J4_ProductData_ESGScreeningCriteria_FOCUS_UNSPECIFIED RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas = 0
	RT000F0J4_ProductData_ESGScreeningCriteria_ENVIRONMENTAL     RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas = 1
	RT000F0J4_ProductData_ESGScreeningCriteria_SOCIAL            RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas = 2
	RT000F0J4_ProductData_ESGScreeningCriteria_GOVERNMENTAL      RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas = 3
)

// Enum value maps for RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas.
var (
	RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas_name = map[int32]string{
		0: "FOCUS_UNSPECIFIED",
		1: "ENVIRONMENTAL",
		2: "SOCIAL",
		3: "GOVERNMENTAL",
	}
	RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas_value = map[string]int32{
		"FOCUS_UNSPECIFIED": 0,
		"ENVIRONMENTAL":     1,
		"SOCIAL":            2,
		"GOVERNMENTAL":      3,
	}
)

func (x RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas) Enum() *RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas {
	p := new(RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[6].Descriptor()
}

func (RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[6]
}

func (x RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas.Descriptor instead.
func (RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 1, 2}
}

// Enumeration of thematic environmental investment strategies
type RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes int32

const (
	RT000F0J4_ProductData_Article8Article9Information_ENVIRONMENTAL_THEME_UNSPECIFIED RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 0
	RT000F0J4_ProductData_Article8Article9Information_A_ENERGY                        RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 1
	RT000F0J4_ProductData_Article8Article9Information_B_RENEWABLE_ENERGY              RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 2
	RT000F0J4_ProductData_Article8Article9Information_C_RAW_MATERIALS                 RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 3
	RT000F0J4_ProductData_Article8Article9Information_D_WATER_AND_LAND                RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 4
	RT000F0J4_ProductData_Article8Article9Information_E_WASTE                         RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 5
	RT000F0J4_ProductData_Article8Article9Information_F_GREENHOUSE_GAS_EMISSIONS      RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 6
	RT000F0J4_ProductData_Article8Article9Information_G_BIODIVERSITY                  RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 7
	RT000F0J4_ProductData_Article8Article9Information_H_CIRCULAR_ECONOMY              RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 8
	RT000F0J4_ProductData_Article8Article9Information_I_ENVIRONMENTAL_OTHER           RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes = 9
)

// Enum value maps for RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes.
var (
	RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes_name = map[int32]string{
		0: "ENVIRONMENTAL_THEME_UNSPECIFIED",
		1: "A_ENERGY",
		2: "B_RENEWABLE_ENERGY",
		3: "C_RAW_MATERIALS",
		4: "D_WATER_AND_LAND",
		5: "E_WASTE",
		6: "F_GREENHOUSE_GAS_EMISSIONS",
		7: "G_BIODIVERSITY",
		8: "H_CIRCULAR_ECONOMY",
		9: "I_ENVIRONMENTAL_OTHER",
	}
	RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes_value = map[string]int32{
		"ENVIRONMENTAL_THEME_UNSPECIFIED": 0,
		"A_ENERGY":                        1,
		"B_RENEWABLE_ENERGY":              2,
		"C_RAW_MATERIALS":                 3,
		"D_WATER_AND_LAND":                4,
		"E_WASTE":                         5,
		"F_GREENHOUSE_GAS_EMISSIONS":      6,
		"G_BIODIVERSITY":                  7,
		"H_CIRCULAR_ECONOMY":              8,
		"I_ENVIRONMENTAL_OTHER":           9,
	}
)

func (x RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes) Enum() *RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes {
	p := new(RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[7].Descriptor()
}

func (RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[7]
}

func (x RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes.Descriptor instead.
func (RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 3, 0}
}

// Enumeration of thematic social investment strategies
type RT000F0J4_ProductData_Article8Article9Information_SocialThemes int32

const (
	RT000F0J4_ProductData_Article8Article9Information_SOCIAL_THEME_UNSPECIFIED                             RT000F0J4_ProductData_Article8Article9Information_SocialThemes = 0
	RT000F0J4_ProductData_Article8Article9Information_A_INEQUALITY                                         RT000F0J4_ProductData_Article8Article9Information_SocialThemes = 1
	RT000F0J4_ProductData_Article8Article9Information_B_SOCIAL_COHESION                                    RT000F0J4_ProductData_Article8Article9Information_SocialThemes = 2
	RT000F0J4_ProductData_Article8Article9Information_C_SOCIAL_INTEGRATION                                 RT000F0J4_ProductData_Article8Article9Information_SocialThemes = 3
	RT000F0J4_ProductData_Article8Article9Information_D_LABOUR_RELATIONS                                   RT000F0J4_ProductData_Article8Article9Information_SocialThemes = 4
	RT000F0J4_ProductData_Article8Article9Information_E_INVESTMENT_IN_HUMAN_CAPITAL                        RT000F0J4_ProductData_Article8Article9Information_SocialThemes = 5
	RT000F0J4_ProductData_Article8Article9Information_F_ECONOMICALLY_OR_SOCIALLY_DISADVANTAGED_COMMUNITIES RT000F0J4_ProductData_Article8Article9Information_SocialThemes = 6
	RT000F0J4_ProductData_Article8Article9Information_G_SOCIAL_OTHER                                       RT000F0J4_ProductData_Article8Article9Information_SocialThemes = 7
)

// Enum value maps for RT000F0J4_ProductData_Article8Article9Information_SocialThemes.
var (
	RT000F0J4_ProductData_Article8Article9Information_SocialThemes_name = map[int32]string{
		0: "SOCIAL_THEME_UNSPECIFIED",
		1: "A_INEQUALITY",
		2: "B_SOCIAL_COHESION",
		3: "C_SOCIAL_INTEGRATION",
		4: "D_LABOUR_RELATIONS",
		5: "E_INVESTMENT_IN_HUMAN_CAPITAL",
		6: "F_ECONOMICALLY_OR_SOCIALLY_DISADVANTAGED_COMMUNITIES",
		7: "G_SOCIAL_OTHER",
	}
	RT000F0J4_ProductData_Article8Article9Information_SocialThemes_value = map[string]int32{
		"SOCIAL_THEME_UNSPECIFIED":      0,
		"A_INEQUALITY":                  1,
		"B_SOCIAL_COHESION":             2,
		"C_SOCIAL_INTEGRATION":          3,
		"D_LABOUR_RELATIONS":            4,
		"E_INVESTMENT_IN_HUMAN_CAPITAL": 5,
		"F_ECONOMICALLY_OR_SOCIALLY_DISADVANTAGED_COMMUNITIES": 6,
		"G_SOCIAL_OTHER": 7,
	}
)

func (x RT000F0J4_ProductData_Article8Article9Information_SocialThemes) Enum() *RT000F0J4_ProductData_Article8Article9Information_SocialThemes {
	p := new(RT000F0J4_ProductData_Article8Article9Information_SocialThemes)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_Article8Article9Information_SocialThemes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_Article8Article9Information_SocialThemes) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[8].Descriptor()
}

func (RT000F0J4_ProductData_Article8Article9Information_SocialThemes) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[8]
}

func (x RT000F0J4_ProductData_Article8Article9Information_SocialThemes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_Article8Article9Information_SocialThemes.Descriptor instead.
func (RT000F0J4_ProductData_Article8Article9Information_SocialThemes) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 3, 1}
}

// Enumeration of thematic governance investment strategies
type RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes int32

const (
	RT000F0J4_ProductData_Article8Article9Information_GOVERNANCE_THEME_UNSPECIFIED  RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes = 0
	RT000F0J4_ProductData_Article8Article9Information_A_SOUND_MANAGEMENT_STRUCTURES RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes = 1
	RT000F0J4_ProductData_Article8Article9Information_B_EMPLOYEE_RELATIONS          RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes = 2
	RT000F0J4_ProductData_Article8Article9Information_C_RENUMERATION_OF_STAFF       RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes = 3
	RT000F0J4_ProductData_Article8Article9Information_D_TAX_COMPLIANCE              RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes = 4
	RT000F0J4_ProductData_Article8Article9Information_E_GOVERANCE_OTHER             RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes = 5
)

// Enum value maps for RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes.
var (
	RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes_name = map[int32]string{
		0: "GOVERNANCE_THEME_UNSPECIFIED",
		1: "A_SOUND_MANAGEMENT_STRUCTURES",
		2: "B_EMPLOYEE_RELATIONS",
		3: "C_RENUMERATION_OF_STAFF",
		4: "D_TAX_COMPLIANCE",
		5: "E_GOVERANCE_OTHER",
	}
	RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes_value = map[string]int32{
		"GOVERNANCE_THEME_UNSPECIFIED":  0,
		"A_SOUND_MANAGEMENT_STRUCTURES": 1,
		"B_EMPLOYEE_RELATIONS":          2,
		"C_RENUMERATION_OF_STAFF":       3,
		"D_TAX_COMPLIANCE":              4,
		"E_GOVERANCE_OTHER":             5,
	}
)

func (x RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes) Enum() *RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes {
	p := new(RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[9].Descriptor()
}

func (RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[9]
}

func (x RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes.Descriptor instead.
func (RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 3, 2}
}

// Enumeration of UN Sustainable Development Goals
type RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals int32

const (
	RT000F0J4_ProductData_Article8Article9Information_SDG_UNSPECIFIED                          RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 0
	RT000F0J4_ProductData_Article8Article9Information_A_NO_POVERTY                             RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 1
	RT000F0J4_ProductData_Article8Article9Information_B_NO_HUNGER                              RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 2
	RT000F0J4_ProductData_Article8Article9Information_C_GOOD_HEALTH_AND_WELLBEING              RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 3
	RT000F0J4_ProductData_Article8Article9Information_D_QUALITY_EDUCATION                      RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 4
	RT000F0J4_ProductData_Article8Article9Information_E_GENDER_EQUALITY                        RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 5
	RT000F0J4_ProductData_Article8Article9Information_F_CLEAN_WATER_AND_SANITATION             RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 6
	RT000F0J4_ProductData_Article8Article9Information_G_AFFORDABLE_AND_CLEAN_ENERGY            RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 7
	RT000F0J4_ProductData_Article8Article9Information_H_DECENT_WORK_AND_ECONOMIC_GROWTH        RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 8
	RT000F0J4_ProductData_Article8Article9Information_I_INDUSTRY_INNOVATION_AND_INFRASTRUCTURE RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 9
	RT000F0J4_ProductData_Article8Article9Information_J_REDUCED_INEQUALITY                     RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 10
	RT000F0J4_ProductData_Article8Article9Information_K_SUSTAINABLE_CITIES_AND_COMMUNITIES     RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 11
	RT000F0J4_ProductData_Article8Article9Information_L_RESPONSIBLE_CONSUMPTION_AND_PRODUCTION RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 12
	RT000F0J4_ProductData_Article8Article9Information_M_CLIMATE_ACTION                         RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 13
	RT000F0J4_ProductData_Article8Article9Information_N_LIFE_BELOW_WATER                       RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 14
	RT000F0J4_ProductData_Article8Article9Information_O_LIFE_ON_LAND                           RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 15
	RT000F0J4_ProductData_Article8Article9Information_P_PEACE_AND_JUSTICE_STRONG_INSTITUTIONS  RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 16
	RT000F0J4_ProductData_Article8Article9Information_Q_PARTNERSHIPS_TO_ACHIEVE_GOALS          RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals = 17
)

// Enum value maps for RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals.
var (
	RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals_name = map[int32]string{
		0:  "SDG_UNSPECIFIED",
		1:  "A_NO_POVERTY",
		2:  "B_NO_HUNGER",
		3:  "C_GOOD_HEALTH_AND_WELLBEING",
		4:  "D_QUALITY_EDUCATION",
		5:  "E_GENDER_EQUALITY",
		6:  "F_CLEAN_WATER_AND_SANITATION",
		7:  "G_AFFORDABLE_AND_CLEAN_ENERGY",
		8:  "H_DECENT_WORK_AND_ECONOMIC_GROWTH",
		9:  "I_INDUSTRY_INNOVATION_AND_INFRASTRUCTURE",
		10: "J_REDUCED_INEQUALITY",
		11: "K_SUSTAINABLE_CITIES_AND_COMMUNITIES",
		12: "L_RESPONSIBLE_CONSUMPTION_AND_PRODUCTION",
		13: "M_CLIMATE_ACTION",
		14: "N_LIFE_BELOW_WATER",
		15: "O_LIFE_ON_LAND",
		16: "P_PEACE_AND_JUSTICE_STRONG_INSTITUTIONS",
		17: "Q_PARTNERSHIPS_TO_ACHIEVE_GOALS",
	}
	RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals_value = map[string]int32{
		"SDG_UNSPECIFIED":                          0,
		"A_NO_POVERTY":                             1,
		"B_NO_HUNGER":                              2,
		"C_GOOD_HEALTH_AND_WELLBEING":              3,
		"D_QUALITY_EDUCATION":                      4,
		"E_GENDER_EQUALITY":                        5,
		"F_CLEAN_WATER_AND_SANITATION":             6,
		"G_AFFORDABLE_AND_CLEAN_ENERGY":            7,
		"H_DECENT_WORK_AND_ECONOMIC_GROWTH":        8,
		"I_INDUSTRY_INNOVATION_AND_INFRASTRUCTURE": 9,
		"J_REDUCED_INEQUALITY":                     10,
		"K_SUSTAINABLE_CITIES_AND_COMMUNITIES":     11,
		"L_RESPONSIBLE_CONSUMPTION_AND_PRODUCTION": 12,
		"M_CLIMATE_ACTION":                         13,
		"N_LIFE_BELOW_WATER":                       14,
		"O_LIFE_ON_LAND":                           15,
		"P_PEACE_AND_JUSTICE_STRONG_INSTITUTIONS":  16,
		"Q_PARTNERSHIPS_TO_ACHIEVE_GOALS":          17,
	}
)

func (x RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals) Enum() *RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals {
	p := new(RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[10].Descriptor()
}

func (RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[10]
}

func (x RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals.Descriptor instead.
func (RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 3, 3}
}

// Enumerations of benchmark identifiers
type RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes int32

const (
	// Source not specified by the user.
	RT000F0J4_ProductData_Article8Article9Information_IDENTIFIER_UNSPECIFIED RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes = 0
	// ISO 6166 code of ISIN when available
	RT000F0J4_ProductData_Article8Article9Information_ISIN RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes = 1
	// Reuters RIC (Reuters instrument code)
	RT000F0J4_ProductData_Article8Article9Information_RIC RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes = 2
	// FIGI (Financial_Instrument Global Identifier)
	RT000F0J4_ProductData_Article8Article9Information_FIGI RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes = 3
	// PermID - Refinitiv Permanent Identifiers
	RT000F0J4_ProductData_Article8Article9Information_PERM_ID RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes = 4
)

// Enum value maps for RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes.
var (
	RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes_name = map[int32]string{
		0: "IDENTIFIER_UNSPECIFIED",
		1: "ISIN",
		2: "RIC",
		3: "FIGI",
		4: "PERM_ID",
	}
	RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"RIC":                    2,
		"FIGI":                   3,
		"PERM_ID":                4,
	}
)

func (x RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes) Enum() *RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes {
	p := new(RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[11].Descriptor()
}

func (RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[11]
}

func (x RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes.Descriptor instead.
func (RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 3, 4}
}

// Enumerations for 20410_Financial_Instrument_EU_SFDR_Methodology_For_Sustainable_Investments_Calculation
type RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches int32

const (
	RT000F0J4_ProductData_Article8Article9Information_CALCULATION_APPROACH_UNSPECIFIED RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches = 0
	RT000F0J4_ProductData_Article8Article9Information_REVENUE                          RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches = 1
	RT000F0J4_ProductData_Article8Article9Information_CAPEX                            RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches = 2
	RT000F0J4_ProductData_Article8Article9Information_OPEX                             RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches = 3
)

// Enum value maps for RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches.
var (
	RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches_name = map[int32]string{
		0: "CALCULATION_APPROACH_UNSPECIFIED",
		1: "REVENUE",
		2: "CAPEX",
		3: "OPEX",
	}
	RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches_value = map[string]int32{
		"CALCULATION_APPROACH_UNSPECIFIED": 0,
		"REVENUE":                          1,
		"CAPEX":                            2,
		"OPEX":                             3,
	}
)

func (x RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches) Enum() *RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches {
	p := new(RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches)
	*p = x
	return p
}

func (x RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000F0J4_proto_enumTypes[12].Descriptor()
}

func (RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches) Type() protoreflect.EnumType {
	return &file_RT000F0J4_proto_enumTypes[12]
}

func (x RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches.Descriptor instead.
func (RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches) EnumDescriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 3, 5}
}

// FinDatEx ESG Template (EET) V1
type RT000F0J4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information related to the dataset and dataset producer
	DatasetInformation *RT000F0J4_DatasetInformation `protobuf:"bytes,1,opt,name=dataset_information,json=datasetInformation,proto3" json:"dataset_information,omitempty"`
	// Data relating to the product manufacturer
	ManufacturerInformation *RT000F0J4_ManufacturerInformation `protobuf:"bytes,2,opt,name=manufacturer_information,json=manufacturerInformation,proto3" json:"manufacturer_information,omitempty"`
	// Product level disclosures
	// Per guidelines, information should be disclosed on a per product basis
	PerProductInformation []*RT000F0J4_ProductData `protobuf:"bytes,3,rep,name=per_product_information,json=perProductInformation,proto3" json:"per_product_information,omitempty"`
}

func (x *RT000F0J4) Reset() {
	*x = RT000F0J4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4) ProtoMessage() {}

func (x *RT000F0J4) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4.ProtoReflect.Descriptor instead.
func (*RT000F0J4) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0}
}

func (x *RT000F0J4) GetDatasetInformation() *RT000F0J4_DatasetInformation {
	if x != nil {
		return x.DatasetInformation
	}
	return nil
}

func (x *RT000F0J4) GetManufacturerInformation() *RT000F0J4_ManufacturerInformation {
	if x != nil {
		return x.ManufacturerInformation
	}
	return nil
}

func (x *RT000F0J4) GetPerProductInformation() []*RT000F0J4_ProductData {
	if x != nil {
		return x.PerProductInformation
	}
	return nil
}

// Batch set of RT000F0J4 responses
type RT000F0J4Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*RT000F0J4 `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *RT000F0J4Batch) Reset() {
	*x = RT000F0J4Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4Batch) ProtoMessage() {}

func (x *RT000F0J4Batch) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4Batch.ProtoReflect.Descriptor instead.
func (*RT000F0J4Batch) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{1}
}

func (x *RT000F0J4Batch) GetResponse() []*RT000F0J4 {
	if x != nil {
		return x.Response
	}
	return nil
}

// Definition of information related to the dataset and dataset producer
type RT000F0J4_DatasetInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field specifies the output version of the template and is used by the recipient to understand the number of fields expected, their labeling and order.
	// 00010_EET_Version
	EetVersion RT000F0J4_DatasetInformation_EETVersion `protobuf:"varint,1,opt,name=eet_version,json=eetVersion,proto3,enum=standards.open.v1.RT000F0J4_DatasetInformation_EETVersion" json:"eet_version,omitempty"`
	// If the Manufacturer/Issuer have chosen to outsource the production of an EET posting to another party responsible for the production and publication of the EET data set, such party name should be entered in this field.
	// 00020_EET_Producer_Name
	ProducerName string `protobuf:"bytes,2,opt,name=producer_name,json=producerName,proto3" json:"producer_name,omitempty"`
	// If the Manufacturer/Issuer have chosen to outsource the production of an EET posting to another party responsible for the production and publication of the EET data set, such party LEI should be entered in this field.
	// 00030_EET_Producer_LEI
	ProducerLei string `protobuf:"bytes,3,opt,name=producer_lei,json=producerLei,proto3" json:"producer_lei,omitempty"`
	// Contact entry point for distributors regarding EET
	// 00040_EET_Producer_Email
	ProducerEmail string `protobuf:"bytes,4,opt,name=producer_email,json=producerEmail,proto3" json:"producer_email,omitempty"`
	// Date and Time of the creation of the EET file
	// 00050_EET_File_Generation_Date_And_Time
	FileGenerationTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=file_generation_timestamp,json=fileGenerationTimestamp,proto3" json:"file_generation_timestamp,omitempty"`
	// SFDR products pre-cont
	// 00060_EET_Data_Reporting_SFDR_Pre_Contractual
	DataReportingSfdrPreContractual bool `protobuf:"varint,6,opt,name=data_reporting_sfdr_pre_contractual,json=dataReportingSfdrPreContractual,proto3" json:"data_reporting_sfdr_pre_contractual,omitempty"`
	// SFDR products periodic
	// 00070_EET_Data_Reporting_SFDR_Periodic
	DataReportingSfdrPeriodic bool `protobuf:"varint,7,opt,name=data_reporting_sfdr_periodic,json=dataReportingSfdrPeriodic,proto3" json:"data_reporting_sfdr_periodic,omitempty"`
	// SFDR Entity (ins & dis)
	// 00080_EET_Data_Reporting_SFDR_Entity_Level
	DataReportingSfdrEntityLevel bool `protobuf:"varint,8,opt,name=data_reporting_sfdr_entity_level,json=dataReportingSfdrEntityLevel,proto3" json:"data_reporting_sfdr_entity_level,omitempty"`
	// MiFID Products (including target market) & MiFID distributors entity / client journey
	// 00090_EET_Data_Reporting_MiFID
	DataReportingMifid bool `protobuf:"varint,9,opt,name=data_reporting_mifid,json=dataReportingMifid,proto3" json:"data_reporting_mifid,omitempty"`
	// IDD Products (including target market), IDD insurers entity / client journey
	// 00100_EET_Data_Reporting_IDD
	DataReportingIdd bool `protobuf:"varint,10,opt,name=data_reporting_idd,json=dataReportingIdd,proto3" json:"data_reporting_idd,omitempty"`
}

func (x *RT000F0J4_DatasetInformation) Reset() {
	*x = RT000F0J4_DatasetInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4_DatasetInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4_DatasetInformation) ProtoMessage() {}

func (x *RT000F0J4_DatasetInformation) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4_DatasetInformation.ProtoReflect.Descriptor instead.
func (*RT000F0J4_DatasetInformation) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000F0J4_DatasetInformation) GetEetVersion() RT000F0J4_DatasetInformation_EETVersion {
	if x != nil {
		return x.EetVersion
	}
	return RT000F0J4_DatasetInformation_EET_VERSION_UNSPECIFIED
}

func (x *RT000F0J4_DatasetInformation) GetProducerName() string {
	if x != nil {
		return x.ProducerName
	}
	return ""
}

func (x *RT000F0J4_DatasetInformation) GetProducerLei() string {
	if x != nil {
		return x.ProducerLei
	}
	return ""
}

func (x *RT000F0J4_DatasetInformation) GetProducerEmail() string {
	if x != nil {
		return x.ProducerEmail
	}
	return ""
}

func (x *RT000F0J4_DatasetInformation) GetFileGenerationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FileGenerationTimestamp
	}
	return nil
}

func (x *RT000F0J4_DatasetInformation) GetDataReportingSfdrPreContractual() bool {
	if x != nil {
		return x.DataReportingSfdrPreContractual
	}
	return false
}

func (x *RT000F0J4_DatasetInformation) GetDataReportingSfdrPeriodic() bool {
	if x != nil {
		return x.DataReportingSfdrPeriodic
	}
	return false
}

func (x *RT000F0J4_DatasetInformation) GetDataReportingSfdrEntityLevel() bool {
	if x != nil {
		return x.DataReportingSfdrEntityLevel
	}
	return false
}

func (x *RT000F0J4_DatasetInformation) GetDataReportingMifid() bool {
	if x != nil {
		return x.DataReportingMifid
	}
	return false
}

func (x *RT000F0J4_DatasetInformation) GetDataReportingIdd() bool {
	if x != nil {
		return x.DataReportingIdd
	}
	return false
}

// Definition of data relating to the product manufacturer
type RT000F0J4_ManufacturerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Manufacturer
	// 10000_Manufacturer_Name
	ManufacturerName string `protobuf:"bytes,1,opt,name=manufacturer_name,json=manufacturerName,proto3" json:"manufacturer_name,omitempty"`
	// LEI codification should be provided if available.
	ManufacturerCodeType RT000F0J4_ManufacturerInformation_ManufacturerCodeType `protobuf:"varint,2,opt,name=manufacturer_code_type,json=manufacturerCodeType,proto3,enum=standards.open.v1.RT000F0J4_ManufacturerInformation_ManufacturerCodeType" json:"manufacturer_code_type,omitempty"` // 10010_Manufacturer_Code_Type
	// Identification code of the Manufacturer
	// Conditional to field 10010 is set to LEI
	ManufacturerCode string `protobuf:"bytes,3,opt,name=manufacturer_code,json=manufacturerCode,proto3" json:"manufacturer_code,omitempty"` // 10020_Manufacturer_Code
	// Contact entry point for distributors for content question
	ManufacturerEmail string `protobuf:"bytes,4,opt,name=manufacturer_email,json=manufacturerEmail,proto3" json:"manufacturer_email,omitempty"` // 10030_Manufacturer_Email
	// Date to which the general data refer
	GeneralReferenceDate *date.Date `protobuf:"bytes,5,opt,name=general_reference_date,json=generalReferenceDate,proto3" json:"general_reference_date,omitempty"` // 10040_General_Reference_Date
	// Has the Manufacturer signed the Principle for Responsible Investment?
	// Consider PRB or equivalent organisation for the banking strategy. Do we need to consider to consider the group or the asset manager itself ? This data point has been modified to consider the UNEP- FI Principles for Responsible Banking.
	ManufacturerPriOrPrbSignatory bool `protobuf:"varint,6,opt,name=manufacturer_pri_or_prb_signatory,json=manufacturerPriOrPrbSignatory,proto3" json:"manufacturer_pri_or_prb_signatory,omitempty"` // 11000_Manufacturer_PRI_Or_PRB_Signatory
	// Notation of the Manufacturer by the PRI on the "governance and strategy" pillar
	// After one year of application all Manufacturer should receive a notation. We propose to focus on "governance and strategy" notation because there is no consolidated PRI notation
	ManufacturerPriNotation string `protobuf:"bytes,7,opt,name=manufacturer_pri_notation,json=manufacturerPriNotation,proto3" json:"manufacturer_pri_notation,omitempty"` // 11010_Manufacturer_PRI_Notation
	// Notation of the Manufacturer by the PRI on the "governance and strategy" pillar
	ManufacturerPriCompliant bool `protobuf:"varint,8,opt,name=manufacturer_pri_compliant,json=manufacturerPriCompliant,proto3" json:"manufacturer_pri_compliant,omitempty"` // 11020_Manufacturer_PRI_Or_PRB_Compliant
	// The Manufacturer is  not a PRI/PRB signatory but considers it follows PRI/PRB rules.
	ManufacturerPriLike bool `protobuf:"varint,9,opt,name=manufacturer_pri_like,json=manufacturerPriLike,proto3" json:"manufacturer_pri_like,omitempty"` // 11030_Manufacturer_PRI_Or_PRB_Like
	// Other Commitments by Manufacturers
	OtherCommitments RT000F0J4_ManufacturerInformation_Commitments `protobuf:"varint,10,opt,name=other_commitments,json=otherCommitments,proto3,enum=standards.open.v1.RT000F0J4_ManufacturerInformation_Commitments" json:"other_commitments,omitempty"` // 11040_Manufacturer_Other_Commitments
	// Disclosure of the applicable Stewardship Code
	StewardshipCodeSignatory RT000F0J4_ManufacturerInformation_Commitments `protobuf:"varint,11,opt,name=stewardship_code_signatory,json=stewardshipCodeSignatory,proto3,enum=standards.open.v1.RT000F0J4_ManufacturerInformation_Commitments" json:"stewardship_code_signatory,omitempty"` // 12000_Manufacturer_Stewarship_Code_Signatory
	// Internet address where the client can find all relevant informations regarding stewardship and engagement of the manufacturer.
	ManufacturerWebsiteInformationStewardshipAndEngagement string `protobuf:"bytes,12,opt,name=manufacturer_website_information_stewardship_and_engagement,json=manufacturerWebsiteInformationStewardshipAndEngagement,proto3" json:"manufacturer_website_information_stewardship_and_engagement,omitempty"` // 13000_Manufacturer_Website_Information_Stewardship_And_Engagement
}

func (x *RT000F0J4_ManufacturerInformation) Reset() {
	*x = RT000F0J4_ManufacturerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4_ManufacturerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4_ManufacturerInformation) ProtoMessage() {}

func (x *RT000F0J4_ManufacturerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4_ManufacturerInformation.ProtoReflect.Descriptor instead.
func (*RT000F0J4_ManufacturerInformation) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT000F0J4_ManufacturerInformation) GetManufacturerName() string {
	if x != nil {
		return x.ManufacturerName
	}
	return ""
}

func (x *RT000F0J4_ManufacturerInformation) GetManufacturerCodeType() RT000F0J4_ManufacturerInformation_ManufacturerCodeType {
	if x != nil {
		return x.ManufacturerCodeType
	}
	return RT000F0J4_ManufacturerInformation_TYPE_UNSPECIFIED
}

func (x *RT000F0J4_ManufacturerInformation) GetManufacturerCode() string {
	if x != nil {
		return x.ManufacturerCode
	}
	return ""
}

func (x *RT000F0J4_ManufacturerInformation) GetManufacturerEmail() string {
	if x != nil {
		return x.ManufacturerEmail
	}
	return ""
}

func (x *RT000F0J4_ManufacturerInformation) GetGeneralReferenceDate() *date.Date {
	if x != nil {
		return x.GeneralReferenceDate
	}
	return nil
}

func (x *RT000F0J4_ManufacturerInformation) GetManufacturerPriOrPrbSignatory() bool {
	if x != nil {
		return x.ManufacturerPriOrPrbSignatory
	}
	return false
}

func (x *RT000F0J4_ManufacturerInformation) GetManufacturerPriNotation() string {
	if x != nil {
		return x.ManufacturerPriNotation
	}
	return ""
}

func (x *RT000F0J4_ManufacturerInformation) GetManufacturerPriCompliant() bool {
	if x != nil {
		return x.ManufacturerPriCompliant
	}
	return false
}

func (x *RT000F0J4_ManufacturerInformation) GetManufacturerPriLike() bool {
	if x != nil {
		return x.ManufacturerPriLike
	}
	return false
}

func (x *RT000F0J4_ManufacturerInformation) GetOtherCommitments() RT000F0J4_ManufacturerInformation_Commitments {
	if x != nil {
		return x.OtherCommitments
	}
	return RT000F0J4_ManufacturerInformation_COMMITMENTS_UNSPECIFIED
}

func (x *RT000F0J4_ManufacturerInformation) GetStewardshipCodeSignatory() RT000F0J4_ManufacturerInformation_Commitments {
	if x != nil {
		return x.StewardshipCodeSignatory
	}
	return RT000F0J4_ManufacturerInformation_COMMITMENTS_UNSPECIFIED
}

func (x *RT000F0J4_ManufacturerInformation) GetManufacturerWebsiteInformationStewardshipAndEngagement() string {
	if x != nil {
		return x.ManufacturerWebsiteInformationStewardshipAndEngagement
	}
	return ""
}

// Product level disclosure data.
type RT000F0J4_ProductData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Product disclosure data
	ProductIdentification *RT000F0J4_ProductData_ProductIdentification `protobuf:"bytes,1,opt,name=product_identification,json=productIdentification,proto3" json:"product_identification,omitempty"`
	// The ESG screening criteria of the fund
	EsgScreeningCriteria *RT000F0J4_ProductData_ESGScreeningCriteria `protobuf:"bytes,2,opt,name=esg_screening_criteria,json=esgScreeningCriteria,proto3" json:"esg_screening_criteria,omitempty"`
	// ESG Product disclosure documents for the fund.
	ProductDisclosures *RT000F0J4_ProductData_ProductDisclosures `protobuf:"bytes,3,opt,name=product_disclosures,json=productDisclosures,proto3" json:"product_disclosures,omitempty"`
}

func (x *RT000F0J4_ProductData) Reset() {
	*x = RT000F0J4_ProductData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4_ProductData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4_ProductData) ProtoMessage() {}

func (x *RT000F0J4_ProductData) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4_ProductData.ProtoReflect.Descriptor instead.
func (*RT000F0J4_ProductData) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT000F0J4_ProductData) GetProductIdentification() *RT000F0J4_ProductData_ProductIdentification {
	if x != nil {
		return x.ProductIdentification
	}
	return nil
}

func (x *RT000F0J4_ProductData) GetEsgScreeningCriteria() *RT000F0J4_ProductData_ESGScreeningCriteria {
	if x != nil {
		return x.EsgScreeningCriteria
	}
	return nil
}

func (x *RT000F0J4_ProductData) GetProductDisclosures() *RT000F0J4_ProductData_ProductDisclosures {
	if x != nil {
		return x.ProductDisclosures
	}
	return nil
}

// Definition of product disclosure information data
type RT000F0J4_ProductData_ProductIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The legal identifier of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,1,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The name of the fund to which the financial instrument belongs
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Share classes associated with the fund
	ShareClasses []*RT000F0J4_ProductData_ProductIdentification_ShareClass `protobuf:"bytes,3,rep,name=share_classes,json=shareClasses,proto3" json:"share_classes,omitempty"`
}

func (x *RT000F0J4_ProductData_ProductIdentification) Reset() {
	*x = RT000F0J4_ProductData_ProductIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4_ProductData_ProductIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4_ProductData_ProductIdentification) ProtoMessage() {}

func (x *RT000F0J4_ProductData_ProductIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4_ProductData_ProductIdentification.ProtoReflect.Descriptor instead.
func (*RT000F0J4_ProductData_ProductIdentification) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *RT000F0J4_ProductData_ProductIdentification) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000F0J4_ProductData_ProductIdentification) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000F0J4_ProductData_ProductIdentification) GetShareClasses() []*RT000F0J4_ProductData_ProductIdentification_ShareClass {
	if x != nil {
		return x.ShareClasses
	}
	return nil
}

//  Definition of ESG screening criteria
type RT000F0J4_ProductData_ESGScreeningCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fund categories in reference of the article of SFDR european regulation applying to the product.
	// See fields 20040 (27) and 20050 (28)
	SfdrProductType RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType `protobuf:"varint,7,opt,name=sfdr_product_type,json=sfdrProductType,proto3,enum=standards.open.v1.RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType" json:"sfdr_product_type,omitempty"`
	// Disclosure of applicable ESG labels. See 20060_Financial_Instrument_ESG_Label_Or_Standard
	EsgLabels []RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel `protobuf:"varint,8,rep,packed,name=esg_labels,json=esgLabels,proto3,enum=standards.open.v1.RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel" json:"esg_labels,omitempty"`
	// Proportion in look through of art 8 sub invested funds for funds of funds Nav based
	// See 20070_Financial_Instrument_Percentage_Of_Minimum_SFDR_Art_8_Funds
	FundOfFundMinExposureArticle_8 float64 `protobuf:"fixed64,9,opt,name=fund_of_fund_min_exposure_article_8,json=fundOfFundMinExposureArticle8,proto3" json:"fund_of_fund_min_exposure_article_8,omitempty"`
	// Proportion in look through of art 9 sub invested funds for funds of funds Nav based
	// See 20080_Financial_Instrument_Percentage_Of_Minimum_SFDR_Art_9_Funds
	FundOfFundMinExposureArticle_9 float64 `protobuf:"fixed64,10,opt,name=fund_of_fund_min_exposure_article_9,json=fundOfFundMinExposureArticle9,proto3" json:"fund_of_fund_min_exposure_article_9,omitempty"`
	// The main ESG focus of the fund
	// 20090_Financial_Instrument_Main_ESG_Focus
	MainEsgFocus []RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas `protobuf:"varint,11,rep,packed,name=main_esg_focus,json=mainEsgFocus,proto3,enum=standards.open.v1.RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas" json:"main_esg_focus,omitempty"`
	// Consideration of PAI is commitment to reduce or mitigate adverse impacts and can be done quantitative or qualitatively
	// 20100_Financial_Instrument_Does_This_Product_Consider_Principle_Adverse_Impact_In_Their_Investment
	PaiConsidered bool `protobuf:"varint,12,opt,name=pai_considered,json=paiConsidered,proto3" json:"pai_considered,omitempty"`
}

func (x *RT000F0J4_ProductData_ESGScreeningCriteria) Reset() {
	*x = RT000F0J4_ProductData_ESGScreeningCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4_ProductData_ESGScreeningCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4_ProductData_ESGScreeningCriteria) ProtoMessage() {}

func (x *RT000F0J4_ProductData_ESGScreeningCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4_ProductData_ESGScreeningCriteria.ProtoReflect.Descriptor instead.
func (*RT000F0J4_ProductData_ESGScreeningCriteria) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *RT000F0J4_ProductData_ESGScreeningCriteria) GetSfdrProductType() RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType {
	if x != nil {
		return x.SfdrProductType
	}
	return RT000F0J4_ProductData_ESGScreeningCriteria_DOES_NOT_FOLLOW_SFDR_GUIDELINES
}

func (x *RT000F0J4_ProductData_ESGScreeningCriteria) GetEsgLabels() []RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel {
	if x != nil {
		return x.EsgLabels
	}
	return nil
}

func (x *RT000F0J4_ProductData_ESGScreeningCriteria) GetFundOfFundMinExposureArticle_8() float64 {
	if x != nil {
		return x.FundOfFundMinExposureArticle_8
	}
	return 0
}

func (x *RT000F0J4_ProductData_ESGScreeningCriteria) GetFundOfFundMinExposureArticle_9() float64 {
	if x != nil {
		return x.FundOfFundMinExposureArticle_9
	}
	return 0
}

func (x *RT000F0J4_ProductData_ESGScreeningCriteria) GetMainEsgFocus() []RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas {
	if x != nil {
		return x.MainEsgFocus
	}
	return nil
}

func (x *RT000F0J4_ProductData_ESGScreeningCriteria) GetPaiConsidered() bool {
	if x != nil {
		return x.PaiConsidered
	}
	return false
}

// Definition of product disclosures
type RT000F0J4_ProductData_ProductDisclosures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Conditional on it being an Article 8 or 9 fund:
	// Each insurance company needs to have the pre contractual, periodic, websites translated and published in the language of the countries of distribution. This field allows to list the languages in which the annexes documents are translated
	// 20110_Financial_Instrument_Languages
	// Must be the https://en.wikipedia.org/wiki/ISO_639-1 two letter language code
	Languages []string `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
	// 20120_Financial_Instrument_Link_To_PCDFP_For_MOP.
	// Pre Contractual Disclosure for Financial Products referred to in  Article 8(1) and 9(1), (2) and (3) (EU) 2019/2088 as stand alone document PDF for underlying investment options in Multi Option Products. Annex I, Annex II (EU) 2019/2088.
	// "Link to the ""pre contractual"" informations document. Deep Link shall be https and without an additional disclaimers or authentication.
	//It must be a link to a standalone document
	//Conditional to 20040 or 20050 set to 8 or 9
	//Could be provided for art6 under insurers demand
	// 'Not Available' must be used when a specific document is not created in that language (could be seen as a benefit)"/
	PreContractualDisclosureForFinancialProductsLinks []*RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink `protobuf:"bytes,2,rep,name=pre_contractual_disclosure_for_financial_products_links,json=preContractualDisclosureForFinancialProductsLinks,proto3" json:"pre_contractual_disclosure_for_financial_products_links,omitempty"`
	// 20140_Financial_Instrument_Link_To_PDFP_for_MOP.
	// Periodic Disclosure for Financial Products referred to in  Article 8(1) and 9(1), (2) and (3) (EU) 2019/2088 as stand alone document PDF for underlying investment options in Multi Option Products. Annex III, Annex IV (EU) 2019/2088.
	PeriodicDisclosureLinks []*RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink `protobuf:"bytes,3,rep,name=periodic_disclosure_links,json=periodicDisclosureLinks,proto3" json:"periodic_disclosure_links,omitempty"`
	// 20150_Financial_Instrument_End_Date_Of_Reporting_Period_PDFP
	// End Date Of Reporting Period PDFP (based on 12 months reporting report market usage)
	EndOfReportingPeriodForPeriodicDisclosures *date.Date `protobuf:"bytes,4,opt,name=end_of_reporting_period_for_periodic_disclosures,json=endOfReportingPeriodForPeriodicDisclosures,proto3" json:"end_of_reporting_period_for_periodic_disclosures,omitempty"`
}

func (x *RT000F0J4_ProductData_ProductDisclosures) Reset() {
	*x = RT000F0J4_ProductData_ProductDisclosures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4_ProductData_ProductDisclosures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4_ProductData_ProductDisclosures) ProtoMessage() {}

func (x *RT000F0J4_ProductData_ProductDisclosures) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4_ProductData_ProductDisclosures.ProtoReflect.Descriptor instead.
func (*RT000F0J4_ProductData_ProductDisclosures) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *RT000F0J4_ProductData_ProductDisclosures) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *RT000F0J4_ProductData_ProductDisclosures) GetPreContractualDisclosureForFinancialProductsLinks() []*RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink {
	if x != nil {
		return x.PreContractualDisclosureForFinancialProductsLinks
	}
	return nil
}

func (x *RT000F0J4_ProductData_ProductDisclosures) GetPeriodicDisclosureLinks() []*RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink {
	if x != nil {
		return x.PeriodicDisclosureLinks
	}
	return nil
}

func (x *RT000F0J4_ProductData_ProductDisclosures) GetEndOfReportingPeriodForPeriodicDisclosures() *date.Date {
	if x != nil {
		return x.EndOfReportingPeriodForPeriodicDisclosures
	}
	return nil
}

// Definition of Article 8 and Article 9 disclosures
type RT000F0J4_ProductData_Article8Article9Information struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 20170_Financial_Instrument_Sustainable_Investments_Art_8
	// Does the art 8 product invest in sustainable investment?
	DoesArticle_8FundInvestInSustainableInvestments bool `protobuf:"varint,1,opt,name=does_article_8_fund_invest_in_sustainable_investments,json=doesArticle8FundInvestInSustainableInvestments,proto3" json:"does_article_8_fund_invest_in_sustainable_investments,omitempty"`
	// 20180_Financial_Instrument_Products_Minimal_Proportion_Of_Sustainable_Investments_Art_8
	// For art 8  products, the minimum proportion of sustainable investments.
	Article_8FundMinimumProportionOfSustainableInvestments float64 `protobuf:"fixed64,2,opt,name=article_8_fund_minimum_proportion_of_sustainable_investments,json=article8FundMinimumProportionOfSustainableInvestments,proto3" json:"article_8_fund_minimum_proportion_of_sustainable_investments,omitempty"`
	// 20190_Financial_Instrument_Sustainable_Investment_EU_Taxonomy_Art_8
	// Does the minimum specified in field 20180 include EU Taxonomy  sustainable investment?
	DoesArticle_8MinInvestmentsIncludeEuTaxonomyInvestments bool `protobuf:"varint,3,opt,name=does_article_8_min_investments_include_eu_taxonomy_investments,json=doesArticle8MinInvestmentsIncludeEuTaxonomyInvestments,proto3" json:"does_article_8_min_investments_include_eu_taxonomy_investments,omitempty"`
	// 20200_Financial_Instrument_Sustainable_Investment_Environmental_Not_EU_Taxonomy_Art_8
	// Does the minimum specified in field 20180 include Non EU Taxonomy Environmental sustainable investment?
	DoesArticle_8MinInvestmentsIncludeNonEuTaxonomyInvestments bool `protobuf:"varint,4,opt,name=does_article_8_min_investments_include_non_eu_taxonomy_investments,json=doesArticle8MinInvestmentsIncludeNonEuTaxonomyInvestments,proto3" json:"does_article_8_min_investments_include_non_eu_taxonomy_investments,omitempty"`
	// 20210_Financial_Instrument_Sustainable_Investment_Social_Objective_Art_8.
	// Does the minimum specified in field 20180 include sustainable investment with social objective?
	DoesMinInvestmentsIncludeInvestmentsWithSocialObjective bool `protobuf:"varint,5,opt,name=does_min_investments_include_investments_with_social_objective,json=doesMinInvestmentsIncludeInvestmentsWithSocialObjective,proto3" json:"does_min_investments_include_investments_with_social_objective,omitempty"`
	// 20220_Financial_Instrument_Minimum_Sustainable_Investment_With_Environmental_Objective_Art_9
	// For art 9 products, the minimum proportion of sustainable investments with environmental objective.
	Article_9FundMinimumProportionOfEnvironmentalInvestments float64 `protobuf:"fixed64,6,opt,name=article_9_fund_minimum_proportion_of_environmental_investments,json=article9FundMinimumProportionOfEnvironmentalInvestments,proto3" json:"article_9_fund_minimum_proportion_of_environmental_investments,omitempty"`
	// 20230_Financial_Instrument_Environmentally_Sustainable_Investment_EU_Taxonomy_Art_9
	// Does the minimum specified in field 20220 include EU Taxonomy Environmental sustainable investment?
	DoesArticle_9MinInvestmentsIncludeEuTaxonomyInvestments bool `protobuf:"varint,7,opt,name=does_article_9_min_investments_include_eu_taxonomy_investments,json=doesArticle9MinInvestmentsIncludeEuTaxonomyInvestments,proto3" json:"does_article_9_min_investments_include_eu_taxonomy_investments,omitempty"`
	// 20240_Financial_Instrument_Environmentally_Sustainable_Investment_Not_EU_Taxonomy_Art_9
	// Does the minimum specified in field 20220 include Non EU Taxonomy Environmental sustainable investment?
	DoesArticle_9MinInvestmentsIncludeNonEuTaxonomyInvestments bool `protobuf:"varint,8,opt,name=does_article_9_min_investments_include_non_eu_taxonomy_investments,json=doesArticle9MinInvestmentsIncludeNonEuTaxonomyInvestments,proto3" json:"does_article_9_min_investments_include_non_eu_taxonomy_investments,omitempty"`
	// 20250_Financial_Instrument_Minimum_Sustainable_Investment_Social_Objective_Art_9
	// For art 9 products, the minimum proportion of sustainable investments with social objective.
	Article_9FundMinimumProportionOfSocialInvestments float64 `protobuf:"fixed64,9,opt,name=article_9_fund_minimum_proportion_of_social_investments,json=article9FundMinimumProportionOfSocialInvestments,proto3" json:"article_9_fund_minimum_proportion_of_social_investments,omitempty"`
	// 20260_Financial_Instrument_ESG_Existing_Thematic_Characteristics
	// Does this Financial_Instrument incorporate ESG factors through ESG thematic approach ?
	ThematicApproach bool `protobuf:"varint,10,opt,name=thematic_approach,json=thematicApproach,proto3" json:"thematic_approach,omitempty"`
	// 20270_Financial_Instrument_Environmental_Thematic_Characteristics.
	EnvironmentalThemes []RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes `protobuf:"varint,11,rep,packed,name=environmental_themes,json=environmentalThemes,proto3,enum=standards.open.v1.RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes" json:"environmental_themes,omitempty"`
	// 20280_Financial_Instrument_Social_Thematic_Characteristics
	SocialThemes []RT000F0J4_ProductData_Article8Article9Information_SocialThemes `protobuf:"varint,12,rep,packed,name=social_themes,json=socialThemes,proto3,enum=standards.open.v1.RT000F0J4_ProductData_Article8Article9Information_SocialThemes" json:"social_themes,omitempty"`
	// 20290_Financial_Instrument_Governance_Thematic_Characteristics
	GovernanceThemes []RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes `protobuf:"varint,13,rep,packed,name=governance_themes,json=governanceThemes,proto3,enum=standards.open.v1.RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes" json:"governance_themes,omitempty"`
	// 20300_Financial_Instrument_Alignment_With_Sustainable_Development_Goals
	TargetedSustainableDevelopmentGoals []RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals `protobuf:"varint,14,rep,packed,name=TargetedSustainableDevelopmentGoals,proto3,enum=standards.open.v1.RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals" json:"TargetedSustainableDevelopmentGoals,omitempty"`
	// 20310_Financial_Instrument_Weight_Of_Eligible_Issuers
	WeightEligibleIssuers float64 `protobuf:"fixed64,15,opt,name=weight_eligible_issuers,json=weightEligibleIssuers,proto3" json:"weight_eligible_issuers,omitempty"`
	// 20320_Financial_Instrument_Number_Of_Eligible_Issuers
	NumberEligibleIssuers int32 `protobuf:"varint,16,opt,name=number_eligible_issuers,json=numberEligibleIssuers,proto3" json:"number_eligible_issuers,omitempty"`
	// 20330_Financial_Instrument_Weight_Of_ESG_Covered_Issuers
	WeightCoveredIssuers float64 `protobuf:"fixed64,17,opt,name=weight_covered_issuers,json=weightCoveredIssuers,proto3" json:"weight_covered_issuers,omitempty"`
	// 20340_Financial_Instrument_Number_Of_ESG_Covered_Issuers
	NumberCoveredIssuers int32 `protobuf:"varint,18,opt,name=number_covered_issuers,json=numberCoveredIssuers,proto3" json:"number_covered_issuers,omitempty"`
	// 20350_Financial_Instrument_Weight_Of_Engaged_Issuers
	WeightEngagedIssuers float64 `protobuf:"fixed64,19,opt,name=weight_engaged_issuers,json=weightEngagedIssuers,proto3" json:"weight_engaged_issuers,omitempty"`
	// 20360_Financial_Instrument_Number_Of_Engaged_Issuers
	NumberEngagedIssuers int32 `protobuf:"varint,20,opt,name=number_engaged_issuers,json=numberEngagedIssuers,proto3" json:"number_engaged_issuers,omitempty"`
	// 20370_Financial_Instrument_Has_A_Reference_ESG_Benchmark.
	//  Has a reference benchmark been designated for the purpose of attaining the environmental or social characteristics promoted by the financial product?
	EsgBenchmark bool `protobuf:"varint,21,opt,name=esg_benchmark,json=esgBenchmark,proto3" json:"esg_benchmark,omitempty"`
	// The display name of the ESG benchmark.
	EsgBenchmarkName string `protobuf:"bytes,22,opt,name=esg_benchmark_name,json=esgBenchmarkName,proto3" json:"esg_benchmark_name,omitempty"`
	// The global identifier of ESG benchmark.
	// 20380_Financial_Instrument_Benchmark_Name
	EsgBenchmarkId string `protobuf:"bytes,23,opt,name=esg_benchmark_id,json=esgBenchmarkId,proto3" json:"esg_benchmark_id,omitempty"`
	// Codification chosen to identify the share class
	EsgBenchmarkIdType RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes `protobuf:"varint,24,opt,name=esg_benchmark_id_type,json=esgBenchmarkIdType,proto3,enum=standards.open.v1.RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes" json:"esg_benchmark_id_type,omitempty"`
	// 20390_Financial_Instrument_Minimum_Or_Planned_Asset_Allocation_Date.
	// Link to pre-contractual report. Before there is a pre contractual report, the date is the date of commitment (equal to or before today). Then it will be the date of the latest pre-contractual report
	MinimumOrPlannedAllocationDate *date.Date `protobuf:"bytes,25,opt,name=minimum_or_planned_allocation_date,json=minimumOrPlannedAllocationDate,proto3" json:"minimum_or_planned_allocation_date,omitempty"`
	// 20400_Financial_Instrument_EU_SFDR_Minimum_Or_Planned_Investments_With_Environmental_Or_Social_Characteristics
	MinimumOrPlannedInvestmentsWithEnvironmentalOrSocialCharacteristics float64 `protobuf:"fixed64,26,opt,name=minimum_or_planned_investments_with_environmental_or_social_characteristics,json=minimumOrPlannedInvestmentsWithEnvironmentalOrSocialCharacteristics,proto3" json:"minimum_or_planned_investments_with_environmental_or_social_characteristics,omitempty"`
	// 20410_Financial_Instrument_EU_SFDR_Methodology_For_Sustainable_Investments_Calculation
	SustainableInvestmentCalculationApproaches []RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches `protobuf:"varint,27,rep,packed,name=sustainable_investment_calculation_approaches,json=sustainableInvestmentCalculationApproaches,proto3,enum=standards.open.v1.RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches" json:"sustainable_investment_calculation_approaches,omitempty"`
	// 20420_Financial_Instrument_EU_SFDR_Minimum_Or_Planned_Investments_Sustainable_Investments
	MinimumOrPlannedSustainableInvestments float64 `protobuf:"fixed64,28,opt,name=minimum_or_planned_sustainable_investments,json=minimumOrPlannedSustainableInvestments,proto3" json:"minimum_or_planned_sustainable_investments,omitempty"`
	// 20430_Financial_Instrument_EU_SFDR_Minimum_Or_Planned_Other_Investments_With_Environmental_Or_Social_Characteristics
	MinimumOrPlannedOtherInvestmentsWithEnvironmentalOrSocialCharacteristics float64 `protobuf:"fixed64,29,opt,name=minimum_or_planned_other_investments_with_environmental_or_social_characteristics,json=minimumOrPlannedOtherInvestmentsWithEnvironmentalOrSocialCharacteristics,proto3" json:"minimum_or_planned_other_investments_with_environmental_or_social_characteristics,omitempty"`
	// 20440_Financial_Instrument_EU_SFDR_Minimum_Or_Planned_Investments_Sustainable_Investments_Environmental
	MinimumOrPlannedSustainableInvestmentsEnvironmental float64 `protobuf:"fixed64,30,opt,name=minimum_or_planned_sustainable_investments_environmental,json=minimumOrPlannedSustainableInvestmentsEnvironmental,proto3" json:"minimum_or_planned_sustainable_investments_environmental,omitempty"`
	// 20450_Financial_Instrument_EU_SFDR_Minimum_Or_Planned_Investments_Sustainable_Investments_Taxonomy_Aligned
	MinimumOrPlannedSustainableInvestmentsTaxonomyAligned float64 `protobuf:"fixed64,31,opt,name=minimum_or_planned_sustainable_investments_taxonomy_aligned,json=minimumOrPlannedSustainableInvestmentsTaxonomyAligned,proto3" json:"minimum_or_planned_sustainable_investments_taxonomy_aligned,omitempty"`
	// 20460_Financial_Instrument_EU_SFDR_Minimum_Or_Planned_Investments_Sustainable_Investments_Other_Environmental
	MinimumOrPlannedSustainableInvestmentsOtherEnvironmental float64 `protobuf:"fixed64,32,opt,name=minimum_or_planned_sustainable_investments_other_environmental,json=minimumOrPlannedSustainableInvestmentsOtherEnvironmental,proto3" json:"minimum_or_planned_sustainable_investments_other_environmental,omitempty"`
	// 20470_Financial_Instrument_EU_SFDR_Minimum_Or_Planned_Investments_Sustainable_Investments_Social
	MinimumOrPlannedSustainableInvestmentsSocial float64 `protobuf:"fixed64,33,opt,name=minimum_or_planned_sustainable_investments_social,json=minimumOrPlannedSustainableInvestmentsSocial,proto3" json:"minimum_or_planned_sustainable_investments_social,omitempty"`
	// 20480_Financial_Instrument_Last_Reported_Asset_Allocation_Date.
	// The date to which sustainable investment allocations refer.
	LastReportedAllocationDate *date.Date `protobuf:"bytes,34,opt,name=last_reported_allocation_date,json=lastReportedAllocationDate,proto3" json:"last_reported_allocation_date,omitempty"`
	// 20490_Financial_Instrument_EU_SFDR_Last_Reported_Investments_With_Environmental_Or_Social_Characteristics
	EuSfdrLastReportedInvestmentsWithEnvironmentalOrSocialCharacteristics float64 `protobuf:"fixed64,35,opt,name=eu_sfdr_last_reported_investments_with_environmental_or_social_characteristics,json=euSfdrLastReportedInvestmentsWithEnvironmentalOrSocialCharacteristics,proto3" json:"eu_sfdr_last_reported_investments_with_environmental_or_social_characteristics,omitempty"`
	// 20500_Financial_Instrument_EU_SFDR_Last_Reported_Investments_Not_Sustainable_Other
	EuSfdrLastReportedInvestmentsNotSustainableOther float64 `protobuf:"fixed64,36,opt,name=eu_sfdr_last_reported_investments_not_sustainable_other,json=euSfdrLastReportedInvestmentsNotSustainableOther,proto3" json:"eu_sfdr_last_reported_investments_not_sustainable_other,omitempty"`
	// 20510_Financial_Instrument_EU_SFDR_Last_Reported_Investments_Are_Sustainable_Investments
	EuSfdrLastReportedInvestmentsSustainable float64 `protobuf:"fixed64,37,opt,name=eu_sfdr_last_reported_investments_sustainable,json=euSfdrLastReportedInvestmentsSustainable,proto3" json:"eu_sfdr_last_reported_investments_sustainable,omitempty"`
	// 20520_Financial_Instrument_EU_SFDR_Last_Reported_Other_Investments_With_Environmental_Or_Social_Characteristics
	EuSfdrLastReportedOtherInvestmentsWithEnvironmentalOrSocialCharacteristics float64 `protobuf:"fixed64,38,opt,name=eu_sfdr_last_reported_other_investments_with_environmental_or_social_characteristics,json=euSfdrLastReportedOtherInvestmentsWithEnvironmentalOrSocialCharacteristics,proto3" json:"eu_sfdr_last_reported_other_investments_with_environmental_or_social_characteristics,omitempty"`
	// 20530_Financial_Instrument_EU_SFDR_Last_Reported_Investments_Are_Sustainable_Investments_Environmental
	EuSfdrLastReportedInvestmentsSustainableEnvironmental float64 `protobuf:"fixed64,39,opt,name=eu_sfdr_last_reported_investments_sustainable_environmental,json=euSfdrLastReportedInvestmentsSustainableEnvironmental,proto3" json:"eu_sfdr_last_reported_investments_sustainable_environmental,omitempty"`
	// 20540_Financial_Instrument_EU_SFDR_Last_Reported_Investments_Are_Sustainable_Investments_Taxonomy_Aligned
	EuSfdrLastReportedInvestmentsSustainableTaxonomyAligned float64 `protobuf:"fixed64,40,opt,name=eu_sfdr_last_reported_investments_sustainable_taxonomy_aligned,json=euSfdrLastReportedInvestmentsSustainableTaxonomyAligned,proto3" json:"eu_sfdr_last_reported_investments_sustainable_taxonomy_aligned,omitempty"`
	// 20550_Financial_Instrument_EU_SFDR_Last_Reported_Investments_Are_Sustainable_Investments_Other_Environmental
	EuSfdrLastReportedInvestmentsSustainableOtherEnvironmental float64 `protobuf:"fixed64,41,opt,name=eu_sfdr_last_reported_investments_sustainable_other_environmental,json=euSfdrLastReportedInvestmentsSustainableOtherEnvironmental,proto3" json:"eu_sfdr_last_reported_investments_sustainable_other_environmental,omitempty"`
	// 20560_Financial_Instrument_EU_SFDR_Last_Reported_Investments_Are_Sustainable_Investments_Social
	EuSfdrLastReportedInvestmentsSustainableSocial float64 `protobuf:"fixed64,42,opt,name=eu_sfdr_last_reported_investments_sustainable_social,json=euSfdrLastReportedInvestmentsSustainableSocial,proto3" json:"eu_sfdr_last_reported_investments_sustainable_social,omitempty"`
	// 20570_Financial_Instrument_With_Objective_Of_A_Reduction_In_Carbon_Emissions
	ReductionInCarbonEmissionsObjective bool `protobuf:"varint,43,opt,name=reduction_in_carbon_emissions_objective,json=reductionInCarbonEmissionsObjective,proto3" json:"reduction_in_carbon_emissions_objective,omitempty"`
	// 20580_Financial_Instrument_Aligned_With_Paris_Agreement
	AlignedWithParisAgreement bool `protobuf:"varint,44,opt,name=aligned_with_paris_agreement,json=alignedWithParisAgreement,proto3" json:"aligned_with_paris_agreement,omitempty"`
	// 20590_Does_This_Financial_Instrument_Consider_End_Client_Sustainability_Preferences.
	// False == Neutral.
	ConsiderEndClientSustainabilityPreferences bool `protobuf:"varint,45,opt,name=consider_end_client_sustainability_preferences,json=considerEndClientSustainabilityPreferences,proto3" json:"consider_end_client_sustainability_preferences,omitempty"`
	// 20600_Financial_Instrument_Minimum_Percentage_Investments_Aligned_EU_Taxonomy_Incl_Sovereign_Bonds
	MinimumPercentageAlignedWithEuTaxonomyInclSovereignBonds float64 `protobuf:"fixed64,46,opt,name=minimum_percentage_aligned_with_eu_taxonomy_incl_sovereign_bonds,json=minimumPercentageAlignedWithEuTaxonomyInclSovereignBonds,proto3" json:"minimum_percentage_aligned_with_eu_taxonomy_incl_sovereign_bonds,omitempty"`
	// 20610_Financial_Instrument_Minimum_Percentage_Investments_Aligned_EU_Taxonomy_Excl_Sovereign_Bonds
	MinimumPercentageAlignedWithEuTaxonomyExclSovereignBonds float64 `protobuf:"fixed64,47,opt,name=minimum_percentage_aligned_with_eu_taxonomy_excl_sovereign_bonds,json=minimumPercentageAlignedWithEuTaxonomyExclSovereignBonds,proto3" json:"minimum_percentage_aligned_with_eu_taxonomy_excl_sovereign_bonds,omitempty"`
	// 20620_Financial_Instrument_Was_This_Statement_Subject_To_An_External_Review_By_Third_Party
	SubjectToThirdPartyReview bool `protobuf:"varint,48,opt,name=subject_to_third_party_review,json=subjectToThirdPartyReview,proto3" json:"subject_to_third_party_review,omitempty"`
	// 20630_Financial_Instrument_Methodology_Used_For_Alignment_Calculation_With_EU_Taxonomy.
	// Discloses the methodology used for alignment calculation with the EU Taxonomy, defined as either Revenue, CapEx or OpEx.
	MethodologyUsedForEuTaxonomyAlignmentCalculation RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches `protobuf:"varint,49,opt,name=methodology_used_for_eu_taxonomy_alignment_calculation,json=methodologyUsedForEuTaxonomyAlignmentCalculation,proto3,enum=standards.open.v1.RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches" json:"methodology_used_for_eu_taxonomy_alignment_calculation,omitempty"`
	// 20640_Financial_Instrument_Minimum_Share_Of_Transitional_Activities
	MinimumShareTransitionalActivities float64 `protobuf:"fixed64,50,opt,name=minimum_share_transitional_activities,json=minimumShareTransitionalActivities,proto3" json:"minimum_share_transitional_activities,omitempty"`
	// 20650_Financial_Instrument_Minimum_Share_Of_Enabling_Activities
	MinimumShareEnablingActivities float64 `protobuf:"fixed64,51,opt,name=minimum_share_enabling_activities,json=minimumShareEnablingActivities,proto3" json:"minimum_share_enabling_activities,omitempty"`
	// 20660_Financial_Instrument_Percentage_Taxonomy_Aligned_Incl_Sovereign_Revenue
	PercentageTaxonomyAlignedInclSovereignRevenue float64 `protobuf:"fixed64,52,opt,name=percentage_taxonomy_aligned_incl_sovereign_revenue,json=percentageTaxonomyAlignedInclSovereignRevenue,proto3" json:"percentage_taxonomy_aligned_incl_sovereign_revenue,omitempty"`
	// 20670_Financial_Instrument_Percentage_Taxonomy_Aligned_Incl_Sovereign_Capex
	PercentageTaxonomyAlignedInclSovereignCapex float64 `protobuf:"fixed64,53,opt,name=percentage_taxonomy_aligned_incl_sovereign_capex,json=percentageTaxonomyAlignedInclSovereignCapex,proto3" json:"percentage_taxonomy_aligned_incl_sovereign_capex,omitempty"`
	// 20680_Financial_Instrument_Percentage_Taxonomy_Aligned_Incl_Sovereign_Opex
	PercentageTaxonomyAlignedInclSovereignOpex float64 `protobuf:"fixed64,54,opt,name=percentage_taxonomy_aligned_incl_sovereign_opex,json=percentageTaxonomyAlignedInclSovereignOpex,proto3" json:"percentage_taxonomy_aligned_incl_sovereign_opex,omitempty"`
	// 20690_Financial_Instrument_Percentage_Taxonomy_Aligned_Excl_Sovereign_Revenue
	PercentageTaxonomyAlignedExclSovereignRevenue float64 `protobuf:"fixed64,55,opt,name=percentage_taxonomy_aligned_excl_sovereign_revenue,json=percentageTaxonomyAlignedExclSovereignRevenue,proto3" json:"percentage_taxonomy_aligned_excl_sovereign_revenue,omitempty"`
	// 20700_Financial_Instrument_Percentage_Taxonomy_Aligned_Excl_Sovereign_Capex
	PercentageTaxonomyAlignedExclSovereignCapex float64 `protobuf:"fixed64,56,opt,name=percentage_taxonomy_aligned_excl_sovereign_capex,json=percentageTaxonomyAlignedExclSovereignCapex,proto3" json:"percentage_taxonomy_aligned_excl_sovereign_capex,omitempty"`
	// 20710_Financial_Instrument_Percentage_Taxonomy_Aligned_Excl_Sovereign_Opex
	PercentageTaxonomyAlignedExclSovereignOpex float64 `protobuf:"fixed64,57,opt,name=percentage_taxonomy_aligned_excl_sovereign_opex,json=percentageTaxonomyAlignedExclSovereignOpex,proto3" json:"percentage_taxonomy_aligned_excl_sovereign_opex,omitempty"`
	// 20721_Financial_Instrument_Climate_Change_Mitigation_Percentage
	PercentageTaxonomyAlignedClimateChangeMitigation float64 `protobuf:"fixed64,58,opt,name=percentage_taxonomy_aligned_climate_change_mitigation,json=percentageTaxonomyAlignedClimateChangeMitigation,proto3" json:"percentage_taxonomy_aligned_climate_change_mitigation,omitempty"`
	// 20731_Financial_Instrument_Climate_Change_Adaptation_Percentage
	PercentageTaxonomyAlignedClimateChangeAdaption float64 `protobuf:"fixed64,59,opt,name=percentage_taxonomy_aligned_climate_change_adaption,json=percentageTaxonomyAlignedClimateChangeAdaption,proto3" json:"percentage_taxonomy_aligned_climate_change_adaption,omitempty"`
	// 20741_Financial_Instrument_Sustainable_Use_And_Protection_Of_Water_And_Marine_Resources_Percentage
	PercentageTaxonomyAlignedSustainableUseAndProtectionOfWaterAndMarineResources float64 `protobuf:"fixed64,60,opt,name=percentage_taxonomy_aligned_sustainable_use_and_protection_of_water_and_marine_resources,json=percentageTaxonomyAlignedSustainableUseAndProtectionOfWaterAndMarineResources,proto3" json:"percentage_taxonomy_aligned_sustainable_use_and_protection_of_water_and_marine_resources,omitempty"`
	// 20751_Financial_Instrument_Transition_To_A_Circular_Economy_Percentage
	PercentageTaxonomyAlignedCircularEconomy float64 `protobuf:"fixed64,61,opt,name=percentage_taxonomy_aligned_circular_economy,json=percentageTaxonomyAlignedCircularEconomy,proto3" json:"percentage_taxonomy_aligned_circular_economy,omitempty"`
	// 20761_Financial_Instrument_Pollution_Prevention_And_Control_Percentage
	PercentageTaxonomyAlignedPollutionPreventionAndControl float64 `protobuf:"fixed64,62,opt,name=percentage_taxonomy_aligned_pollution_prevention_and_control,json=percentageTaxonomyAlignedPollutionPreventionAndControl,proto3" json:"percentage_taxonomy_aligned_pollution_prevention_and_control,omitempty"`
	// 20771_Financial_Instrument_Protection_And_Restoration_Of_Biodiversity_And_Ecosystems_Percentage
	PercentageTaxonomyAlignedProtectionAndRestorationOfBiodiversityAndEcosystems float64 `protobuf:"fixed64,63,opt,name=percentage_taxonomy_aligned_protection_and_restoration_of_biodiversity_and_ecosystems,json=percentageTaxonomyAlignedProtectionAndRestorationOfBiodiversityAndEcosystems,proto3" json:"percentage_taxonomy_aligned_protection_and_restoration_of_biodiversity_and_ecosystems,omitempty"`
	// 20780_Financial_Instrument_Share_Of_Transitional_Activities
	PercentageTaxonomyAlignedShareOfTransitionalActivities float64 `protobuf:"fixed64,64,opt,name=percentage_taxonomy_aligned_share_of_transitional_activities,json=percentageTaxonomyAlignedShareOfTransitionalActivities,proto3" json:"percentage_taxonomy_aligned_share_of_transitional_activities,omitempty"`
	// 20790_Financial_Instrument_Share_Of_Enabling_Activities
	PercentageTaxonomyAlignedShareOfEnablingActivities float64 `protobuf:"fixed64,65,opt,name=percentage_taxonomy_aligned_share_of_enabling_activities,json=percentageTaxonomyAlignedShareOfEnablingActivities,proto3" json:"percentage_taxonomy_aligned_share_of_enabling_activities,omitempty"`
}

func (x *RT000F0J4_ProductData_Article8Article9Information) Reset() {
	*x = RT000F0J4_ProductData_Article8Article9Information{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4_ProductData_Article8Article9Information) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4_ProductData_Article8Article9Information) ProtoMessage() {}

func (x *RT000F0J4_ProductData_Article8Article9Information) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4_ProductData_Article8Article9Information.ProtoReflect.Descriptor instead.
func (*RT000F0J4_ProductData_Article8Article9Information) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetDoesArticle_8FundInvestInSustainableInvestments() bool {
	if x != nil {
		return x.DoesArticle_8FundInvestInSustainableInvestments
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetArticle_8FundMinimumProportionOfSustainableInvestments() float64 {
	if x != nil {
		return x.Article_8FundMinimumProportionOfSustainableInvestments
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetDoesArticle_8MinInvestmentsIncludeEuTaxonomyInvestments() bool {
	if x != nil {
		return x.DoesArticle_8MinInvestmentsIncludeEuTaxonomyInvestments
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetDoesArticle_8MinInvestmentsIncludeNonEuTaxonomyInvestments() bool {
	if x != nil {
		return x.DoesArticle_8MinInvestmentsIncludeNonEuTaxonomyInvestments
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetDoesMinInvestmentsIncludeInvestmentsWithSocialObjective() bool {
	if x != nil {
		return x.DoesMinInvestmentsIncludeInvestmentsWithSocialObjective
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetArticle_9FundMinimumProportionOfEnvironmentalInvestments() float64 {
	if x != nil {
		return x.Article_9FundMinimumProportionOfEnvironmentalInvestments
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetDoesArticle_9MinInvestmentsIncludeEuTaxonomyInvestments() bool {
	if x != nil {
		return x.DoesArticle_9MinInvestmentsIncludeEuTaxonomyInvestments
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetDoesArticle_9MinInvestmentsIncludeNonEuTaxonomyInvestments() bool {
	if x != nil {
		return x.DoesArticle_9MinInvestmentsIncludeNonEuTaxonomyInvestments
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetArticle_9FundMinimumProportionOfSocialInvestments() float64 {
	if x != nil {
		return x.Article_9FundMinimumProportionOfSocialInvestments
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetThematicApproach() bool {
	if x != nil {
		return x.ThematicApproach
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEnvironmentalThemes() []RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes {
	if x != nil {
		return x.EnvironmentalThemes
	}
	return nil
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetSocialThemes() []RT000F0J4_ProductData_Article8Article9Information_SocialThemes {
	if x != nil {
		return x.SocialThemes
	}
	return nil
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetGovernanceThemes() []RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes {
	if x != nil {
		return x.GovernanceThemes
	}
	return nil
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetTargetedSustainableDevelopmentGoals() []RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals {
	if x != nil {
		return x.TargetedSustainableDevelopmentGoals
	}
	return nil
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetWeightEligibleIssuers() float64 {
	if x != nil {
		return x.WeightEligibleIssuers
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetNumberEligibleIssuers() int32 {
	if x != nil {
		return x.NumberEligibleIssuers
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetWeightCoveredIssuers() float64 {
	if x != nil {
		return x.WeightCoveredIssuers
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetNumberCoveredIssuers() int32 {
	if x != nil {
		return x.NumberCoveredIssuers
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetWeightEngagedIssuers() float64 {
	if x != nil {
		return x.WeightEngagedIssuers
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetNumberEngagedIssuers() int32 {
	if x != nil {
		return x.NumberEngagedIssuers
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEsgBenchmark() bool {
	if x != nil {
		return x.EsgBenchmark
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEsgBenchmarkName() string {
	if x != nil {
		return x.EsgBenchmarkName
	}
	return ""
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEsgBenchmarkId() string {
	if x != nil {
		return x.EsgBenchmarkId
	}
	return ""
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEsgBenchmarkIdType() RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes {
	if x != nil {
		return x.EsgBenchmarkIdType
	}
	return RT000F0J4_ProductData_Article8Article9Information_IDENTIFIER_UNSPECIFIED
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumOrPlannedAllocationDate() *date.Date {
	if x != nil {
		return x.MinimumOrPlannedAllocationDate
	}
	return nil
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumOrPlannedInvestmentsWithEnvironmentalOrSocialCharacteristics() float64 {
	if x != nil {
		return x.MinimumOrPlannedInvestmentsWithEnvironmentalOrSocialCharacteristics
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetSustainableInvestmentCalculationApproaches() []RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches {
	if x != nil {
		return x.SustainableInvestmentCalculationApproaches
	}
	return nil
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumOrPlannedSustainableInvestments() float64 {
	if x != nil {
		return x.MinimumOrPlannedSustainableInvestments
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumOrPlannedOtherInvestmentsWithEnvironmentalOrSocialCharacteristics() float64 {
	if x != nil {
		return x.MinimumOrPlannedOtherInvestmentsWithEnvironmentalOrSocialCharacteristics
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumOrPlannedSustainableInvestmentsEnvironmental() float64 {
	if x != nil {
		return x.MinimumOrPlannedSustainableInvestmentsEnvironmental
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumOrPlannedSustainableInvestmentsTaxonomyAligned() float64 {
	if x != nil {
		return x.MinimumOrPlannedSustainableInvestmentsTaxonomyAligned
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumOrPlannedSustainableInvestmentsOtherEnvironmental() float64 {
	if x != nil {
		return x.MinimumOrPlannedSustainableInvestmentsOtherEnvironmental
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumOrPlannedSustainableInvestmentsSocial() float64 {
	if x != nil {
		return x.MinimumOrPlannedSustainableInvestmentsSocial
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetLastReportedAllocationDate() *date.Date {
	if x != nil {
		return x.LastReportedAllocationDate
	}
	return nil
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEuSfdrLastReportedInvestmentsWithEnvironmentalOrSocialCharacteristics() float64 {
	if x != nil {
		return x.EuSfdrLastReportedInvestmentsWithEnvironmentalOrSocialCharacteristics
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEuSfdrLastReportedInvestmentsNotSustainableOther() float64 {
	if x != nil {
		return x.EuSfdrLastReportedInvestmentsNotSustainableOther
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEuSfdrLastReportedInvestmentsSustainable() float64 {
	if x != nil {
		return x.EuSfdrLastReportedInvestmentsSustainable
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEuSfdrLastReportedOtherInvestmentsWithEnvironmentalOrSocialCharacteristics() float64 {
	if x != nil {
		return x.EuSfdrLastReportedOtherInvestmentsWithEnvironmentalOrSocialCharacteristics
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEuSfdrLastReportedInvestmentsSustainableEnvironmental() float64 {
	if x != nil {
		return x.EuSfdrLastReportedInvestmentsSustainableEnvironmental
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEuSfdrLastReportedInvestmentsSustainableTaxonomyAligned() float64 {
	if x != nil {
		return x.EuSfdrLastReportedInvestmentsSustainableTaxonomyAligned
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEuSfdrLastReportedInvestmentsSustainableOtherEnvironmental() float64 {
	if x != nil {
		return x.EuSfdrLastReportedInvestmentsSustainableOtherEnvironmental
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetEuSfdrLastReportedInvestmentsSustainableSocial() float64 {
	if x != nil {
		return x.EuSfdrLastReportedInvestmentsSustainableSocial
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetReductionInCarbonEmissionsObjective() bool {
	if x != nil {
		return x.ReductionInCarbonEmissionsObjective
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetAlignedWithParisAgreement() bool {
	if x != nil {
		return x.AlignedWithParisAgreement
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetConsiderEndClientSustainabilityPreferences() bool {
	if x != nil {
		return x.ConsiderEndClientSustainabilityPreferences
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumPercentageAlignedWithEuTaxonomyInclSovereignBonds() float64 {
	if x != nil {
		return x.MinimumPercentageAlignedWithEuTaxonomyInclSovereignBonds
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumPercentageAlignedWithEuTaxonomyExclSovereignBonds() float64 {
	if x != nil {
		return x.MinimumPercentageAlignedWithEuTaxonomyExclSovereignBonds
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetSubjectToThirdPartyReview() bool {
	if x != nil {
		return x.SubjectToThirdPartyReview
	}
	return false
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMethodologyUsedForEuTaxonomyAlignmentCalculation() RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches {
	if x != nil {
		return x.MethodologyUsedForEuTaxonomyAlignmentCalculation
	}
	return RT000F0J4_ProductData_Article8Article9Information_CALCULATION_APPROACH_UNSPECIFIED
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumShareTransitionalActivities() float64 {
	if x != nil {
		return x.MinimumShareTransitionalActivities
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetMinimumShareEnablingActivities() float64 {
	if x != nil {
		return x.MinimumShareEnablingActivities
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedInclSovereignRevenue() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedInclSovereignRevenue
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedInclSovereignCapex() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedInclSovereignCapex
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedInclSovereignOpex() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedInclSovereignOpex
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedExclSovereignRevenue() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedExclSovereignRevenue
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedExclSovereignCapex() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedExclSovereignCapex
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedExclSovereignOpex() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedExclSovereignOpex
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedClimateChangeMitigation() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedClimateChangeMitigation
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedClimateChangeAdaption() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedClimateChangeAdaption
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedSustainableUseAndProtectionOfWaterAndMarineResources() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedSustainableUseAndProtectionOfWaterAndMarineResources
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedCircularEconomy() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedCircularEconomy
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedPollutionPreventionAndControl() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedPollutionPreventionAndControl
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedProtectionAndRestorationOfBiodiversityAndEcosystems() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedProtectionAndRestorationOfBiodiversityAndEcosystems
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedShareOfTransitionalActivities() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedShareOfTransitionalActivities
	}
	return 0
}

func (x *RT000F0J4_ProductData_Article8Article9Information) GetPercentageTaxonomyAlignedShareOfEnablingActivities() float64 {
	if x != nil {
		return x.PercentageTaxonomyAlignedShareOfEnablingActivities
	}
	return 0
}

// Definition of information defining the relevant share classes
type RT000F0J4_ProductData_ProductIdentification_ShareClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extension that identifies the share class.
	// Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
	ShareClassExtension string `protobuf:"bytes,1,opt,name=share_class_extension,json=shareClassExtension,proto3" json:"share_class_extension,omitempty"`
	// The global identifier of the share class
	ShareClassId string `protobuf:"bytes,2,opt,name=share_class_id,json=shareClassId,proto3" json:"share_class_id,omitempty"`
	// Codification chosen to identify the share class
	ShareClassIdType RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes `protobuf:"varint,3,opt,name=share_class_id_type,json=shareClassIdType,proto3,enum=standards.open.v1.RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes" json:"share_class_id_type,omitempty"`
}

func (x *RT000F0J4_ProductData_ProductIdentification_ShareClass) Reset() {
	*x = RT000F0J4_ProductData_ProductIdentification_ShareClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4_ProductData_ProductIdentification_ShareClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4_ProductData_ProductIdentification_ShareClass) ProtoMessage() {}

func (x *RT000F0J4_ProductData_ProductIdentification_ShareClass) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4_ProductData_ProductIdentification_ShareClass.ProtoReflect.Descriptor instead.
func (*RT000F0J4_ProductData_ProductIdentification_ShareClass) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *RT000F0J4_ProductData_ProductIdentification_ShareClass) GetShareClassExtension() string {
	if x != nil {
		return x.ShareClassExtension
	}
	return ""
}

func (x *RT000F0J4_ProductData_ProductIdentification_ShareClass) GetShareClassId() string {
	if x != nil {
		return x.ShareClassId
	}
	return ""
}

func (x *RT000F0J4_ProductData_ProductIdentification_ShareClass) GetShareClassIdType() RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes {
	if x != nil {
		return x.ShareClassIdType
	}
	return RT000F0J4_ProductData_ProductIdentification_ShareClass_IDENTIFIER_UNSPECIFIED
}

// Definition of a product disclosure link
type RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must be the https://en.wikipedia.org/wiki/ISO_639-1 two letter language code
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// The link to the disclosure. Must be a valid weburl e.g. www.findatex/sample/pre-contractual/LU0001234567/EN.pdf
	// Link must be a standalone document without additional disclaimers or authentication.
	// "Not available" must be used when a specific document is not created in that language.
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	// The date the disclosure was produced
	ProductionDate *date.Date `protobuf:"bytes,3,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
}

func (x *RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink) Reset() {
	*x = RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000F0J4_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink) ProtoMessage() {}

func (x *RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink) ProtoReflect() protoreflect.Message {
	mi := &file_RT000F0J4_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink.ProtoReflect.Descriptor instead.
func (*RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink) Descriptor() ([]byte, []int) {
	return file_RT000F0J4_proto_rawDescGZIP(), []int{0, 2, 2, 0}
}

func (x *RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink) GetProductionDate() *date.Date {
	if x != nil {
		return x.ProductionDate
	}
	return nil
}

var File_RT000F0J4_proto protoreflect.FileDescriptor

var file_RT000F0J4_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe3, 0x6f, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x12, 0x60, 0x0a,
	0x13, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6f, 0x0a, 0x18, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x60, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x70, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xa9, 0x05, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0b, 0x65, 0x65, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x45, 0x54, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c, 0x65, 0x69, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x56, 0x0a, 0x19, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4c, 0x0a,
	0x23, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x66, 0x64, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x64, 0x72, 0x50, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x66,
	0x64, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x66, 0x64, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x12, 0x46, 0x0a, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x66, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x64, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x64, 0x22, 0x38, 0x0a, 0x0a, 0x45, 0x45, 0x54, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x45, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x10, 0x01, 0x1a, 0x94,
	0x09, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x16, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x21, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x62, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x50, 0x72, 0x69, 0x4f, 0x72, 0x50, 0x72, 0x62, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x50, 0x72, 0x69, 0x4e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x50, 0x72, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x6d, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x7e, 0x0a, 0x1a, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x18, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x7b, 0x0a, 0x3b, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x36, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x68, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x35, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x5f, 0x54, 0x43, 0x46, 0x44, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x5f, 0x4e, 0x5a, 0x41, 0x4d, 0x49, 0x5f, 0x4e, 0x5a, 0x41,
	0x4f, 0x41, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x5f, 0x53, 0x42, 0x54, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x46, 0x49, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x5f, 0x53, 0x54, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x5f, 0x55, 0x4e, 0x47, 0x43, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x5f,
	0x43, 0x44, 0x50, 0x10, 0x06, 0x1a, 0xdd, 0x5e, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x75, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46,
	0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x16,
	0x65, 0x73, 0x67, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x53, 0x47, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x14, 0x65, 0x73, 0x67,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x12, 0x6c, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x1a,
	0xee, 0x04, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62,
	0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x0d, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x1a, 0xa2, 0x03, 0x0a, 0x0a,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f,
	0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x07,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45,
	0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0a,
	0x1a, 0xe5, 0x0c, 0x0a, 0x14, 0x45, 0x53, 0x47, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x79, 0x0a, 0x11, 0x73, 0x66, 0x64,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30,
	0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45,
	0x53, 0x47, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x2e, 0x53, 0x46, 0x44, 0x52, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x66, 0x64, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x65, 0x73, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x53, 0x47, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x45, 0x53, 0x47, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x09, 0x65, 0x73, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x23, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x38, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x66,
	0x46, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x12, 0x4a, 0x0a, 0x23, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x39, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64,
	0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x39, 0x12, 0x72, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x73, 0x67, 0x5f,
	0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x53, 0x47, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x45,
	0x73, 0x67, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x70, 0x61, 0x69, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x22, 0xc6,
	0x01, 0x0a, 0x0f, 0x53, 0x46, 0x44, 0x52, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x46, 0x44, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x4f, 0x4c, 0x4c, 0x4f,
	0x57, 0x53, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x36, 0x5f, 0x47, 0x55, 0x49,
	0x44, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x4c, 0x45, 0x5f, 0x38, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x39, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x38, 0x5f, 0x4f, 0x52, 0x5f, 0x39, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x4c, 0x45, 0x5f, 0x38, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x39, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x06, 0x22, 0x94, 0x06, 0x0a, 0x08, 0x45, 0x53, 0x47, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x47, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x5f, 0x49, 0x43, 0x4d, 0x41, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f,
	0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x4c, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x5f, 0x45, 0x55, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f,
	0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12,
	0x28, 0x0a, 0x24, 0x43, 0x5f, 0x45, 0x55, 0x5f, 0x45, 0x43, 0x4f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x5f, 0x46,
	0x4e, 0x47, 0x5f, 0x53, 0x49, 0x45, 0x47, 0x45, 0x4c, 0x5f, 0x46, 0x4f, 0x4e, 0x44, 0x10, 0x04,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x5f, 0x43, 0x42, 0x49, 0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x53, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x5f, 0x49, 0x43, 0x4d, 0x41, 0x5f, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43,
	0x49, 0x50, 0x4c, 0x45, 0x53, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x5f, 0x4c, 0x55, 0x58,
	0x46, 0x4c, 0x41, 0x47, 0x5f, 0x45, 0x53, 0x47, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x5f,
	0x4c, 0x55, 0x58, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x5f, 0x4c,
	0x55, 0x58, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c, 0x4a, 0x5f, 0x4b, 0x45, 0x49, 0x4e, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x54, 0x4f, 0x53, 0x53, 0x5f, 0x47, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x41, 0x54,
	0x4f, 0x4d, 0x57, 0x41, 0x46, 0x46, 0x45, 0x4e, 0x53, 0x50, 0x45, 0x52, 0x52, 0x56, 0x45, 0x52,
	0x54, 0x52, 0x41, 0x47, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x5f, 0x49, 0x53, 0x52, 0x10,
	0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x5f, 0x54, 0x4f, 0x57, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x53,
	0x55, 0x53, 0x54, 0x41, 0x49, 0x4e, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0c, 0x12,
	0x2c, 0x0a, 0x28, 0x4d, 0x5f, 0x55, 0x5a, 0x34, 0x39, 0x5f, 0x44, 0x41, 0x53, 0x5f, 0x4f, 0x53,
	0x54, 0x45, 0x52, 0x52, 0x45, 0x49, 0x43, 0x48, 0x49, 0x53, 0x43, 0x48, 0x45, 0x5f, 0x55, 0x4d,
	0x57, 0x45, 0x4c, 0x54, 0x5a, 0x45, 0x49, 0x43, 0x48, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x5f, 0x4e, 0x4f, 0x52, 0x44, 0x49, 0x43, 0x5f, 0x53, 0x57, 0x41, 0x4e, 0x10, 0x0e,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x46, 0x49, 0x4e, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x5f, 0x46, 0x49, 0x4e, 0x41,
	0x4e, 0x53, 0x4f, 0x4c, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x51, 0x5f, 0x44, 0x44, 0x56, 0x5f,
	0x4e, 0x41, 0x43, 0x48, 0x48, 0x41, 0x4c, 0x54, 0x49, 0x47, 0x4b, 0x45, 0x49, 0x54, 0x53, 0x4b,
	0x4f, 0x44, 0x45, 0x58, 0x5f, 0x45, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47,
	0x49, 0x45, 0x10, 0x11, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x5f, 0x44, 0x44, 0x56, 0x5f, 0x4e, 0x41,
	0x43, 0x48, 0x48, 0x41, 0x4c, 0x54, 0x49, 0x47, 0x4b, 0x45, 0x49, 0x54, 0x53, 0x4b, 0x4f, 0x44,
	0x45, 0x58, 0x5f, 0x45, 0x53, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x12, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x5f, 0x47, 0x52, 0x55, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x46, 0x41, 0x4e,
	0x44, 0x42, 0x52, 0x49, 0x45, 0x46, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x5f, 0x53, 0x4f,
	0x5a, 0x49, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x50, 0x46, 0x41, 0x4e, 0x44, 0x42, 0x52, 0x49, 0x45,
	0x46, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x5f, 0x4c, 0x55, 0x58, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x15, 0x12,
	0x2c, 0x0a, 0x28, 0x56, 0x5f, 0x4c, 0x55, 0x58, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x55, 0x53,
	0x54, 0x41, 0x49, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x16, 0x12, 0x32, 0x0a,
	0x2e, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x45, 0x5f, 0x45, 0x53, 0x47, 0x5f, 0x46, 0x52,
	0x41, 0x4e, 0x43, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x53, 0x10,
	0x17, 0x12, 0x0b, 0x0a, 0x07, 0x5a, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x22, 0x58,
	0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x72, 0x65, 0x61, 0x73,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x56, 0x49, 0x52,
	0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x89, 0x05, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0xc5, 0x01,
	0x0a, 0x37, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x31, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6c,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x17, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x77, 0x0a, 0x30, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x2a, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x83,
	0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x1a, 0x8e, 0x45, 0x0a, 0x1b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x38, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x35, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x38, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x2e, 0x64, 0x6f, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x38, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x53, 0x75, 0x73,
	0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x3c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x38,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x73, 0x74,
	0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x35, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x38, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x7e, 0x0a, 0x3e, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x38, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x75, 0x5f, 0x74, 0x61,
	0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x36, 0x64, 0x6f, 0x65, 0x73, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x75, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x85, 0x01, 0x0a, 0x42, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x38, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x65, 0x75, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x39, 0x64,
	0x6f, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x4d, 0x69, 0x6e, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4e, 0x6f, 0x6e, 0x45, 0x75, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7f, 0x0a, 0x3e, 0x64, 0x6f, 0x65, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x37, 0x64, 0x6f, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x7f, 0x0a, 0x3e, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x39, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x66, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x37, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x46, 0x75, 0x6e, 0x64, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7e, 0x0a, 0x3e, 0x64, 0x6f,
	0x65, 0x73, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x39, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x75, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x36, 0x64, 0x6f, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39,
	0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x75, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x42, 0x64,
	0x6f, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x39, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x75, 0x5f, 0x74, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x39, 0x64, 0x6f, 0x65, 0x73, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x39, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x45, 0x75, 0x54,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x71, 0x0a, 0x37, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x39, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x30, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x46, 0x75, 0x6e,
	0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61,
	0x63, 0x68, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x58, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x38, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x13, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x12, 0x76, 0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x39, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30,
	0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x10, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0xb2, 0x01,
	0x0a, 0x23, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x52, 0x23, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x67, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x67, 0x61,
	0x67, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x73,
	0x67, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x65, 0x73, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x73, 0x67, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x73, 0x67,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x73, 0x67, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x73, 0x67, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x65, 0x73, 0x67, 0x5f,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x39, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x12, 0x65, 0x73, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x22, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x4b, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x43, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x2d, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x6f, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x52, 0x2a, 0x73,
	0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x2a, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x26, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53,
	0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x51, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x48, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x75, 0x0a, 0x38, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x33, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53,
	0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x12, 0x7a, 0x0a, 0x3b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x35, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x80,
	0x01, 0x0a, 0x3e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x38, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x12, 0x67, 0x0a, 0x31, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2c, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x1d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x9d, 0x01, 0x0a, 0x4e, 0x65, 0x75, 0x5f, 0x73, 0x66, 0x64, 0x72, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x45, 0x65, 0x75, 0x53, 0x66, 0x64,
	0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x71, 0x0a, 0x37, 0x65, 0x75, 0x5f, 0x73, 0x66, 0x64, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x30, 0x65, 0x75, 0x53, 0x66, 0x64, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4e, 0x6f, 0x74, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x2d, 0x65, 0x75, 0x5f, 0x73, 0x66, 0x64, 0x72, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x28, 0x65, 0x75, 0x53, 0x66,
	0x64, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x54, 0x65, 0x75, 0x5f, 0x73, 0x66, 0x64, 0x72,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x4a, 0x65, 0x75, 0x53, 0x66, 0x64, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x7a, 0x0a, 0x3b, 0x65, 0x75, 0x5f, 0x73, 0x66, 0x64, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x35, 0x65, 0x75, 0x53, 0x66, 0x64, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x7f, 0x0a, 0x3e, 0x65,
	0x75, 0x5f, 0x73, 0x66, 0x64, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x37, 0x65, 0x75, 0x53, 0x66, 0x64, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a,
	0x41, 0x65, 0x75, 0x5f, 0x73, 0x66, 0x64, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x3a, 0x65, 0x75, 0x53, 0x66, 0x64, 0x72,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x12, 0x6c, 0x0a, 0x34, 0x65, 0x75, 0x5f, 0x73, 0x66, 0x64, 0x72, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x2e, 0x65, 0x75, 0x53, 0x66, 0x64, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x12, 0x54, 0x0a, 0x27, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x23, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x69, 0x73, 0x5f, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x69, 0x73,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x82, 0x01,
	0x0a, 0x40, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x65, 0x75, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x38, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x75, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x42, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x40, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x75, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x38, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x75, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0xe1, 0x01, 0x0a, 0x36, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x65, 0x75, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6f, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x38, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x39, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x52, 0x30, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x45,
	0x75, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x25, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x22, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x49, 0x0a, 0x21, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x32, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f,
	0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x65, 0x0a, 0x30, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x78, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x2b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x53,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x61, 0x70, 0x65, 0x78, 0x12, 0x63, 0x0a,
	0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x78,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4f, 0x70,
	0x65, 0x78, 0x12, 0x69, 0x0a, 0x32, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2d,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x65, 0x0a,
	0x30, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x65,
	0x78, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43,
	0x61, 0x70, 0x65, 0x78, 0x12, 0x63, 0x0a, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x78, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x53, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x65, 0x78, 0x12, 0x6f, 0x0a, 0x35, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x30, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x33, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xaf, 0x01, 0x0a, 0x58, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x4d, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x2c, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61,
	0x72, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x28, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x7c, 0x0a, 0x3c, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x36, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0xab, 0x01, 0x0a, 0x55, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x6f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x4c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x69, 0x6f, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x45, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x7c, 0x0a, 0x3c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x01, 0x52, 0x36, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x38, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x01, 0x52, 0x32, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x13, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x4c, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x5f, 0x45, 0x4e, 0x45, 0x52,
	0x47, 0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x53, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x5f, 0x57, 0x41, 0x53,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x48,
	0x4f, 0x55, 0x53, 0x45, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x45, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x5f, 0x42, 0x49, 0x4f, 0x44, 0x49, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x5f, 0x43, 0x49,
	0x52, 0x43, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x10, 0x08,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x09, 0x22, 0xf8, 0x01, 0x0a, 0x0c,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x5f,
	0x49, 0x4e, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x48, 0x45, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x4f, 0x55, 0x52, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x5f, 0x43,
	0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x38, 0x0a, 0x34, 0x46, 0x5f, 0x45, 0x43,
	0x4f, 0x4e, 0x4f, 0x4d, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x54,
	0x41, 0x47, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x45, 0x53,
	0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x47,
	0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x53, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x5f,
	0x52, 0x45, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f,
	0x53, 0x54, 0x41, 0x46, 0x46, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x5f, 0x54, 0x41, 0x58,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x05, 0x22, 0xc6, 0x04, 0x0a, 0x1b, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x6f, 0x61, 0x6c, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x44, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x5f, 0x4e,
	0x4f, 0x5f, 0x50, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x5f, 0x4e, 0x4f, 0x5f, 0x48, 0x55, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x43, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x20, 0x0a,
	0x1c, 0x46, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x53, 0x41, 0x4e, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12,
	0x21, 0x0a, 0x1d, 0x47, 0x5f, 0x41, 0x46, 0x46, 0x4f, 0x52, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59,
	0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x5f, 0x44, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x49, 0x43,
	0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x5f, 0x49,
	0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x4e, 0x4f, 0x56, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x5f, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x0a, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x5f, 0x53, 0x55, 0x53, 0x54, 0x41, 0x49, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x43, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x2c, 0x0a, 0x28, 0x4c,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x55, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x5f, 0x43,
	0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f,
	0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x5f, 0x4c, 0x49, 0x46,
	0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x50,
	0x5f, 0x50, 0x45, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4a, 0x55, 0x53, 0x54, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x49, 0x54,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x51, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43,
	0x48, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x53, 0x10, 0x11, 0x22, 0x60, 0x0a,
	0x18, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x22,
	0x74, 0x0a, 0x2a, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x41, 0x43, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x50, 0x45, 0x58, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4f,
	0x50, 0x45, 0x58, 0x10, 0x03, 0x22, 0x4b, 0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x46, 0x30,
	0x4a, 0x34, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x46, 0x30, 0x4a, 0x34, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RT000F0J4_proto_rawDescOnce sync.Once
	file_RT000F0J4_proto_rawDescData = file_RT000F0J4_proto_rawDesc
)

func file_RT000F0J4_proto_rawDescGZIP() []byte {
	file_RT000F0J4_proto_rawDescOnce.Do(func() {
		file_RT000F0J4_proto_rawDescData = protoimpl.X.CompressGZIP(file_RT000F0J4_proto_rawDescData)
	})
	return file_RT000F0J4_proto_rawDescData
}

var file_RT000F0J4_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_RT000F0J4_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_RT000F0J4_proto_goTypes = []interface{}{
	(RT000F0J4_DatasetInformation_EETVersion)(0),                                                      // 0: standards.open.v1.RT000F0J4.DatasetInformation.EETVersion
	(RT000F0J4_ManufacturerInformation_ManufacturerCodeType)(0),                                       // 1: standards.open.v1.RT000F0J4.ManufacturerInformation.ManufacturerCodeType
	(RT000F0J4_ManufacturerInformation_Commitments)(0),                                                // 2: standards.open.v1.RT000F0J4.ManufacturerInformation.Commitments
	(RT000F0J4_ProductData_ProductIdentification_ShareClass_ShareClassIdentifierTypes)(0),             // 3: standards.open.v1.RT000F0J4.ProductData.ProductIdentification.ShareClass.ShareClassIdentifierTypes
	(RT000F0J4_ProductData_ESGScreeningCriteria_SFDRProductType)(0),                                   // 4: standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria.SFDRProductType
	(RT000F0J4_ProductData_ESGScreeningCriteria_ESGLabel)(0),                                          // 5: standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria.ESGLabel
	(RT000F0J4_ProductData_ESGScreeningCriteria_MainFocusAreas)(0),                                    // 6: standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria.MainFocusAreas
	(RT000F0J4_ProductData_Article8Article9Information_EnvironmentalThemes)(0),                        // 7: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.EnvironmentalThemes
	(RT000F0J4_ProductData_Article8Article9Information_SocialThemes)(0),                               // 8: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.SocialThemes
	(RT000F0J4_ProductData_Article8Article9Information_GovernanceThemes)(0),                           // 9: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.GovernanceThemes
	(RT000F0J4_ProductData_Article8Article9Information_SustainableDevelopmentGoals)(0),                // 10: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.SustainableDevelopmentGoals
	(RT000F0J4_ProductData_Article8Article9Information_BenchmarkIdentifierTypes)(0),                   // 11: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.BenchmarkIdentifierTypes
	(RT000F0J4_ProductData_Article8Article9Information_SustainableInvestmentCalculationApproaches)(0), // 12: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.SustainableInvestmentCalculationApproaches
	(*RT000F0J4)(nil),                                                      // 13: standards.open.v1.RT000F0J4
	(*RT000F0J4Batch)(nil),                                                 // 14: standards.open.v1.RT000F0J4_batch
	(*RT000F0J4_DatasetInformation)(nil),                                   // 15: standards.open.v1.RT000F0J4.DatasetInformation
	(*RT000F0J4_ManufacturerInformation)(nil),                              // 16: standards.open.v1.RT000F0J4.ManufacturerInformation
	(*RT000F0J4_ProductData)(nil),                                          // 17: standards.open.v1.RT000F0J4.ProductData
	(*RT000F0J4_ProductData_ProductIdentification)(nil),                    // 18: standards.open.v1.RT000F0J4.ProductData.ProductIdentification
	(*RT000F0J4_ProductData_ESGScreeningCriteria)(nil),                     // 19: standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria
	(*RT000F0J4_ProductData_ProductDisclosures)(nil),                       // 20: standards.open.v1.RT000F0J4.ProductData.ProductDisclosures
	(*RT000F0J4_ProductData_Article8Article9Information)(nil),              // 21: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information
	(*RT000F0J4_ProductData_ProductIdentification_ShareClass)(nil),         // 22: standards.open.v1.RT000F0J4.ProductData.ProductIdentification.ShareClass
	(*RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink)(nil), // 23: standards.open.v1.RT000F0J4.ProductData.ProductDisclosures.ProductDisclosureLink
	(*timestamppb.Timestamp)(nil),                                          // 24: google.protobuf.Timestamp
	(*date.Date)(nil),                                                      // 25: google.type.Date
}
var file_RT000F0J4_proto_depIdxs = []int32{
	15, // 0: standards.open.v1.RT000F0J4.dataset_information:type_name -> standards.open.v1.RT000F0J4.DatasetInformation
	16, // 1: standards.open.v1.RT000F0J4.manufacturer_information:type_name -> standards.open.v1.RT000F0J4.ManufacturerInformation
	17, // 2: standards.open.v1.RT000F0J4.per_product_information:type_name -> standards.open.v1.RT000F0J4.ProductData
	13, // 3: standards.open.v1.RT000F0J4_batch.response:type_name -> standards.open.v1.RT000F0J4
	0,  // 4: standards.open.v1.RT000F0J4.DatasetInformation.eet_version:type_name -> standards.open.v1.RT000F0J4.DatasetInformation.EETVersion
	24, // 5: standards.open.v1.RT000F0J4.DatasetInformation.file_generation_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 6: standards.open.v1.RT000F0J4.ManufacturerInformation.manufacturer_code_type:type_name -> standards.open.v1.RT000F0J4.ManufacturerInformation.ManufacturerCodeType
	25, // 7: standards.open.v1.RT000F0J4.ManufacturerInformation.general_reference_date:type_name -> google.type.Date
	2,  // 8: standards.open.v1.RT000F0J4.ManufacturerInformation.other_commitments:type_name -> standards.open.v1.RT000F0J4.ManufacturerInformation.Commitments
	2,  // 9: standards.open.v1.RT000F0J4.ManufacturerInformation.stewardship_code_signatory:type_name -> standards.open.v1.RT000F0J4.ManufacturerInformation.Commitments
	18, // 10: standards.open.v1.RT000F0J4.ProductData.product_identification:type_name -> standards.open.v1.RT000F0J4.ProductData.ProductIdentification
	19, // 11: standards.open.v1.RT000F0J4.ProductData.esg_screening_criteria:type_name -> standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria
	20, // 12: standards.open.v1.RT000F0J4.ProductData.product_disclosures:type_name -> standards.open.v1.RT000F0J4.ProductData.ProductDisclosures
	22, // 13: standards.open.v1.RT000F0J4.ProductData.ProductIdentification.share_classes:type_name -> standards.open.v1.RT000F0J4.ProductData.ProductIdentification.ShareClass
	4,  // 14: standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria.sfdr_product_type:type_name -> standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria.SFDRProductType
	5,  // 15: standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria.esg_labels:type_name -> standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria.ESGLabel
	6,  // 16: standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria.main_esg_focus:type_name -> standards.open.v1.RT000F0J4.ProductData.ESGScreeningCriteria.MainFocusAreas
	23, // 17: standards.open.v1.RT000F0J4.ProductData.ProductDisclosures.pre_contractual_disclosure_for_financial_products_links:type_name -> standards.open.v1.RT000F0J4.ProductData.ProductDisclosures.ProductDisclosureLink
	23, // 18: standards.open.v1.RT000F0J4.ProductData.ProductDisclosures.periodic_disclosure_links:type_name -> standards.open.v1.RT000F0J4.ProductData.ProductDisclosures.ProductDisclosureLink
	25, // 19: standards.open.v1.RT000F0J4.ProductData.ProductDisclosures.end_of_reporting_period_for_periodic_disclosures:type_name -> google.type.Date
	7,  // 20: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.environmental_themes:type_name -> standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.EnvironmentalThemes
	8,  // 21: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.social_themes:type_name -> standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.SocialThemes
	9,  // 22: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.governance_themes:type_name -> standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.GovernanceThemes
	10, // 23: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.TargetedSustainableDevelopmentGoals:type_name -> standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.SustainableDevelopmentGoals
	11, // 24: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.esg_benchmark_id_type:type_name -> standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.BenchmarkIdentifierTypes
	25, // 25: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.minimum_or_planned_allocation_date:type_name -> google.type.Date
	12, // 26: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.sustainable_investment_calculation_approaches:type_name -> standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.SustainableInvestmentCalculationApproaches
	25, // 27: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.last_reported_allocation_date:type_name -> google.type.Date
	12, // 28: standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.methodology_used_for_eu_taxonomy_alignment_calculation:type_name -> standards.open.v1.RT000F0J4.ProductData.Article8Article9Information.SustainableInvestmentCalculationApproaches
	3,  // 29: standards.open.v1.RT000F0J4.ProductData.ProductIdentification.ShareClass.share_class_id_type:type_name -> standards.open.v1.RT000F0J4.ProductData.ProductIdentification.ShareClass.ShareClassIdentifierTypes
	25, // 30: standards.open.v1.RT000F0J4.ProductData.ProductDisclosures.ProductDisclosureLink.production_date:type_name -> google.type.Date
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_RT000F0J4_proto_init() }
func file_RT000F0J4_proto_init() {
	if File_RT000F0J4_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RT000F0J4_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4_DatasetInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4_ManufacturerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4_ProductData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4_ProductData_ProductIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4_ProductData_ESGScreeningCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4_ProductData_ProductDisclosures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4_ProductData_Article8Article9Information); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4_ProductData_ProductIdentification_ShareClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000F0J4_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000F0J4_ProductData_ProductDisclosures_ProductDisclosureLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RT000F0J4_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RT000F0J4_proto_goTypes,
		DependencyIndexes: file_RT000F0J4_proto_depIdxs,
		EnumInfos:         file_RT000F0J4_proto_enumTypes,
		MessageInfos:      file_RT000F0J4_proto_msgTypes,
	}.Build()
	File_RT000F0J4_proto = out.File
	file_RT000F0J4_proto_rawDesc = nil
	file_RT000F0J4_proto_goTypes = nil
	file_RT000F0J4_proto_depIdxs = nil
}
