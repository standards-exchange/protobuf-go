// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/RT000ZR69.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	money "google.golang.org/genproto/googleapis/type/money"
	month "google.golang.org/genproto/googleapis/type/month"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types of account holders
type RT000ZR69_Account_AccountType int32

const (
	// AccountType unspecified
	RT000ZR69_Account_TYPE_UNSPECIFIED RT000ZR69_Account_AccountType = 0
	// The account holder is a natural person
	RT000ZR69_Account_NATURAL_PERSON RT000ZR69_Account_AccountType = 1
	// The account holder is a legal entity
	RT000ZR69_Account_LEGAL_ENTITY RT000ZR69_Account_AccountType = 2
)

// Enum value maps for RT000ZR69_Account_AccountType.
var (
	RT000ZR69_Account_AccountType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NATURAL_PERSON",
		2: "LEGAL_ENTITY",
	}
	RT000ZR69_Account_AccountType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"NATURAL_PERSON":   1,
		"LEGAL_ENTITY":     2,
	}
)

func (x RT000ZR69_Account_AccountType) Enum() *RT000ZR69_Account_AccountType {
	p := new(RT000ZR69_Account_AccountType)
	*p = x
	return p
}

func (x RT000ZR69_Account_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Account_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[0].Descriptor()
}

func (RT000ZR69_Account_AccountType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[0]
}

func (x RT000ZR69_Account_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Account_AccountType.Descriptor instead.
func (RT000ZR69_Account_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Enumerations of the status of the account
type RT000ZR69_Account_Status int32

const (
	// Account status unspecified
	RT000ZR69_Account_STATE_UNSPECIFIED RT000ZR69_Account_Status = 0
	// Account status active
	RT000ZR69_Account_ACTIVE RT000ZR69_Account_Status = 1
	// Account status inactive
	RT000ZR69_Account_INACTIVE RT000ZR69_Account_Status = 2
	// The account is blocked
	RT000ZR69_Account_BLOCKED RT000ZR69_Account_Status = 3
	// The account is in the process of being onboarded, but not blocked
	RT000ZR69_Account_ONBOARDING RT000ZR69_Account_Status = 4
)

// Enum value maps for RT000ZR69_Account_Status.
var (
	RT000ZR69_Account_Status_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "BLOCKED",
		4: "ONBOARDING",
	}
	RT000ZR69_Account_Status_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"INACTIVE":          2,
		"BLOCKED":           3,
		"ONBOARDING":        4,
	}
)

func (x RT000ZR69_Account_Status) Enum() *RT000ZR69_Account_Status {
	p := new(RT000ZR69_Account_Status)
	*p = x
	return p
}

func (x RT000ZR69_Account_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Account_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[1].Descriptor()
}

func (RT000ZR69_Account_Status) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[1]
}

func (x RT000ZR69_Account_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Account_Status.Descriptor instead.
func (RT000ZR69_Account_Status) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2, 1}
}

// Enumerations of the risk categorizations
type RT000ZR69_Account_Risk int32

const (
	// Client risk unspecified
	RT000ZR69_Account_RISK_UNSPECIFIED RT000ZR69_Account_Risk = 0
	// The client is deemed low risk
	RT000ZR69_Account_LOW RT000ZR69_Account_Risk = 1
	// The client is deemed medium risk
	RT000ZR69_Account_MEDIUM RT000ZR69_Account_Risk = 2
	// The client is deemed high risk
	RT000ZR69_Account_HIGH RT000ZR69_Account_Risk = 3
)

// Enum value maps for RT000ZR69_Account_Risk.
var (
	RT000ZR69_Account_Risk_name = map[int32]string{
		0: "RISK_UNSPECIFIED",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	RT000ZR69_Account_Risk_value = map[string]int32{
		"RISK_UNSPECIFIED": 0,
		"LOW":              1,
		"MEDIUM":           2,
		"HIGH":             3,
	}
)

func (x RT000ZR69_Account_Risk) Enum() *RT000ZR69_Account_Risk {
	p := new(RT000ZR69_Account_Risk)
	*p = x
	return p
}

func (x RT000ZR69_Account_Risk) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Account_Risk) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[2].Descriptor()
}

func (RT000ZR69_Account_Risk) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[2]
}

func (x RT000ZR69_Account_Risk) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Account_Risk.Descriptor instead.
func (RT000ZR69_Account_Risk) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2, 2}
}

// Enumerations of financial identifiers
type RT000ZR69_Account_Subscription_ShareClassIdentifierTypes int32

const (
	// Source not specified by the user.
	RT000ZR69_Account_Subscription_IDENTIFIER_UNSPECIFIED RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 0
	// ISO 6166 code of ISIN when available
	RT000ZR69_Account_Subscription_ISIN RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 1
	// CUSIP - The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies
	RT000ZR69_Account_Subscription_CUSIP RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 2
	// SEDOL - Stock Exchange Daily Official List for the London Stock Exchange
	RT000ZR69_Account_Subscription_SEDOL RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 3
	// WKN - Wertpapier Kenn-Nummer, the alphanumeric German identification number
	RT000ZR69_Account_Subscription_WKN RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 4
	// Bloomberg Ticker - Bloomberg letters code that identify a company's securities
	RT000ZR69_Account_Subscription_BBG_TICKER RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 5
	// BBGID - The Bloomberg Global ID
	RT000ZR69_Account_Subscription_BBGID RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 6
	// Reuters RIC - Reuters instrument code
	RT000ZR69_Account_Subscription_RIC RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 7
	// FIGI - Financial_Instrument Global Identifier
	RT000ZR69_Account_Subscription_FIGI RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 8
	// LEI - Legal Entity Identifier
	RT000ZR69_Account_Subscription_LEI RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000ZR69_Account_Subscription_PERM_ID RT000ZR69_Account_Subscription_ShareClassIdentifierTypes = 10
)

// Enum value maps for RT000ZR69_Account_Subscription_ShareClassIdentifierTypes.
var (
	RT000ZR69_Account_Subscription_ShareClassIdentifierTypes_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000ZR69_Account_Subscription_ShareClassIdentifierTypes_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000ZR69_Account_Subscription_ShareClassIdentifierTypes) Enum() *RT000ZR69_Account_Subscription_ShareClassIdentifierTypes {
	p := new(RT000ZR69_Account_Subscription_ShareClassIdentifierTypes)
	*p = x
	return p
}

func (x RT000ZR69_Account_Subscription_ShareClassIdentifierTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Account_Subscription_ShareClassIdentifierTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[3].Descriptor()
}

func (RT000ZR69_Account_Subscription_ShareClassIdentifierTypes) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[3]
}

func (x RT000ZR69_Account_Subscription_ShareClassIdentifierTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Account_Subscription_ShareClassIdentifierTypes.Descriptor instead.
func (RT000ZR69_Account_Subscription_ShareClassIdentifierTypes) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

// Types of account holders
type RT000ZR69_Transaction_AccountType int32

const (
	// AccountType unspecified
	RT000ZR69_Transaction_TYPE_UNSPECIFIED RT000ZR69_Transaction_AccountType = 0
	// The account holder is a natural person
	RT000ZR69_Transaction_NATURAL_PERSON RT000ZR69_Transaction_AccountType = 1
	// The account holder is a legal entity
	RT000ZR69_Transaction_LEGAL_ENTITY RT000ZR69_Transaction_AccountType = 2
)

// Enum value maps for RT000ZR69_Transaction_AccountType.
var (
	RT000ZR69_Transaction_AccountType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NATURAL_PERSON",
		2: "LEGAL_ENTITY",
	}
	RT000ZR69_Transaction_AccountType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"NATURAL_PERSON":   1,
		"LEGAL_ENTITY":     2,
	}
)

func (x RT000ZR69_Transaction_AccountType) Enum() *RT000ZR69_Transaction_AccountType {
	p := new(RT000ZR69_Transaction_AccountType)
	*p = x
	return p
}

func (x RT000ZR69_Transaction_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Transaction_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[4].Descriptor()
}

func (RT000ZR69_Transaction_AccountType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[4]
}

func (x RT000ZR69_Transaction_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Transaction_AccountType.Descriptor instead.
func (RT000ZR69_Transaction_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 3, 0}
}

// Enumerations of financial identifiers
type RT000ZR69_Transaction_ShareClassIdentifierTypes int32

const (
	// Source not specified by the user.
	RT000ZR69_Transaction_IDENTIFIER_UNSPECIFIED RT000ZR69_Transaction_ShareClassIdentifierTypes = 0
	// ISO 6166 code of ISIN when available
	RT000ZR69_Transaction_ISIN RT000ZR69_Transaction_ShareClassIdentifierTypes = 1
	// CUSIP - The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies
	RT000ZR69_Transaction_CUSIP RT000ZR69_Transaction_ShareClassIdentifierTypes = 2
	// SEDOL - Stock Exchange Daily Official List for the London Stock Exchange
	RT000ZR69_Transaction_SEDOL RT000ZR69_Transaction_ShareClassIdentifierTypes = 3
	// WKN - Wertpapier Kenn-Nummer, the alphanumeric German identification number
	RT000ZR69_Transaction_WKN RT000ZR69_Transaction_ShareClassIdentifierTypes = 4
	// Bloomberg Ticker - Bloomberg letters code that identify a company's securities
	RT000ZR69_Transaction_BBG_TICKER RT000ZR69_Transaction_ShareClassIdentifierTypes = 5
	// BBGID - The Bloomberg Global ID
	RT000ZR69_Transaction_BBGID RT000ZR69_Transaction_ShareClassIdentifierTypes = 6
	// Reuters RIC - Reuters instrument code
	RT000ZR69_Transaction_RIC RT000ZR69_Transaction_ShareClassIdentifierTypes = 7
	// FIGI - (Financial Instrument Global Identifier). To look up the FIGI navigate to https://www.openfigi.com/.
	RT000ZR69_Transaction_FIGI RT000ZR69_Transaction_ShareClassIdentifierTypes = 8
	// LEI - Legal Entity Identifier
	RT000ZR69_Transaction_LEI RT000ZR69_Transaction_ShareClassIdentifierTypes = 9
	// PermID - (Refinitiv Permanent Identifier). To look up the PermID navigate to https://permid.org/
	RT000ZR69_Transaction_PERM_ID RT000ZR69_Transaction_ShareClassIdentifierTypes = 10
)

// Enum value maps for RT000ZR69_Transaction_ShareClassIdentifierTypes.
var (
	RT000ZR69_Transaction_ShareClassIdentifierTypes_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000ZR69_Transaction_ShareClassIdentifierTypes_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000ZR69_Transaction_ShareClassIdentifierTypes) Enum() *RT000ZR69_Transaction_ShareClassIdentifierTypes {
	p := new(RT000ZR69_Transaction_ShareClassIdentifierTypes)
	*p = x
	return p
}

func (x RT000ZR69_Transaction_ShareClassIdentifierTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Transaction_ShareClassIdentifierTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[5].Descriptor()
}

func (RT000ZR69_Transaction_ShareClassIdentifierTypes) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[5]
}

func (x RT000ZR69_Transaction_ShareClassIdentifierTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Transaction_ShareClassIdentifierTypes.Descriptor instead.
func (RT000ZR69_Transaction_ShareClassIdentifierTypes) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 3, 1}
}

// Enumerations of transaction types
type RT000ZR69_Transaction_TransactionType int32

const (
	// The transaction type is unspecified
	RT000ZR69_Transaction_TRANSACTION_TYPE_UNSPECIFIED RT000ZR69_Transaction_TransactionType = 0
	// Purchase of shares in the specified share class
	RT000ZR69_Transaction_SUBSCRIPTION RT000ZR69_Transaction_TransactionType = 1
	// Redemption of shares from the specified share class
	RT000ZR69_Transaction_REDEMPTION RT000ZR69_Transaction_TransactionType = 2
	// Movement between accounts for a single share class (ISIN), for example from PartyA to PartyB
	RT000ZR69_Transaction_TRANSFER RT000ZR69_Transaction_TransactionType = 3
	// Movement between share classes (i.e. ISIN) for a single account, for example PartyA switches their holdings of ShareClassA for holdings of ShareClassB
	RT000ZR69_Transaction_SWITCH RT000ZR69_Transaction_TransactionType = 4
)

// Enum value maps for RT000ZR69_Transaction_TransactionType.
var (
	RT000ZR69_Transaction_TransactionType_name = map[int32]string{
		0: "TRANSACTION_TYPE_UNSPECIFIED",
		1: "SUBSCRIPTION",
		2: "REDEMPTION",
		3: "TRANSFER",
		4: "SWITCH",
	}
	RT000ZR69_Transaction_TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_UNSPECIFIED": 0,
		"SUBSCRIPTION":                 1,
		"REDEMPTION":                   2,
		"TRANSFER":                     3,
		"SWITCH":                       4,
	}
)

func (x RT000ZR69_Transaction_TransactionType) Enum() *RT000ZR69_Transaction_TransactionType {
	p := new(RT000ZR69_Transaction_TransactionType)
	*p = x
	return p
}

func (x RT000ZR69_Transaction_TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Transaction_TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[6].Descriptor()
}

func (RT000ZR69_Transaction_TransactionType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[6]
}

func (x RT000ZR69_Transaction_TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Transaction_TransactionType.Descriptor instead.
func (RT000ZR69_Transaction_TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 3, 2}
}

// Enumerations of transaction source types
type RT000ZR69_Transaction_SourceType int32

const (
	// Source type unspecified
	RT000ZR69_Transaction_SOURCE_TYPE_UNSPECIFIED RT000ZR69_Transaction_SourceType = 0
	// Fax
	RT000ZR69_Transaction_FAX RT000ZR69_Transaction_SourceType = 1
	// Email
	RT000ZR69_Transaction_EMAIL RT000ZR69_Transaction_SourceType = 2
	// Telephone
	RT000ZR69_Transaction_TELEPHONE RT000ZR69_Transaction_SourceType = 3
	// SWIFT
	RT000ZR69_Transaction_SWIFT RT000ZR69_Transaction_SourceType = 4
	// API
	RT000ZR69_Transaction_API RT000ZR69_Transaction_SourceType = 5
	// BlockChain
	RT000ZR69_Transaction_BLOCK_CHAIN RT000ZR69_Transaction_SourceType = 6
)

// Enum value maps for RT000ZR69_Transaction_SourceType.
var (
	RT000ZR69_Transaction_SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "FAX",
		2: "EMAIL",
		3: "TELEPHONE",
		4: "SWIFT",
		5: "API",
		6: "BLOCK_CHAIN",
	}
	RT000ZR69_Transaction_SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"FAX":                     1,
		"EMAIL":                   2,
		"TELEPHONE":               3,
		"SWIFT":                   4,
		"API":                     5,
		"BLOCK_CHAIN":             6,
	}
)

func (x RT000ZR69_Transaction_SourceType) Enum() *RT000ZR69_Transaction_SourceType {
	p := new(RT000ZR69_Transaction_SourceType)
	*p = x
	return p
}

func (x RT000ZR69_Transaction_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Transaction_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[7].Descriptor()
}

func (RT000ZR69_Transaction_SourceType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[7]
}

func (x RT000ZR69_Transaction_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Transaction_SourceType.Descriptor instead.
func (RT000ZR69_Transaction_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 3, 3}
}

// Enumerations of the types of the breach or error.
type RT000ZR69_TransferAgencyBreach_Type int32

const (
	RT000ZR69_TransferAgencyBreach_SEVERITY_UNSPECIFIED RT000ZR69_TransferAgencyBreach_Type = 0
	// A breach or error the nature of which requires reporting to the regulator
	RT000ZR69_TransferAgencyBreach_REGULATORY_BREACH RT000ZR69_TransferAgencyBreach_Type = 1
	// An breach or error that should be logged and reported internally
	RT000ZR69_TransferAgencyBreach_INTERNAL_BREACH RT000ZR69_TransferAgencyBreach_Type = 2
	// An error that should be noted, but does not need to be reported
	RT000ZR69_TransferAgencyBreach_ERROR RT000ZR69_TransferAgencyBreach_Type = 3
)

// Enum value maps for RT000ZR69_TransferAgencyBreach_Type.
var (
	RT000ZR69_TransferAgencyBreach_Type_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "REGULATORY_BREACH",
		2: "INTERNAL_BREACH",
		3: "ERROR",
	}
	RT000ZR69_TransferAgencyBreach_Type_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"REGULATORY_BREACH":    1,
		"INTERNAL_BREACH":      2,
		"ERROR":                3,
	}
)

func (x RT000ZR69_TransferAgencyBreach_Type) Enum() *RT000ZR69_TransferAgencyBreach_Type {
	p := new(RT000ZR69_TransferAgencyBreach_Type)
	*p = x
	return p
}

func (x RT000ZR69_TransferAgencyBreach_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_TransferAgencyBreach_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[8].Descriptor()
}

func (RT000ZR69_TransferAgencyBreach_Type) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[8]
}

func (x RT000ZR69_TransferAgencyBreach_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_TransferAgencyBreach_Type.Descriptor instead.
func (RT000ZR69_TransferAgencyBreach_Type) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 6, 0}
}

// Transfer Agency Monthly KPI & MI Report for governance oversight and reporting for UCITS funds
type RT000ZR69 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Overview of the Transfer Monthly KPI & MI Report
	Overview *RT000ZR69_Overview `protobuf:"bytes,1,opt,name=overview,proto3" json:"overview,omitempty"`
	// The transfer agency metrics (KPIs) over the reporting period
	Metrics *RT000ZR69_Metrics `protobuf:"bytes,20,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// Transfer agency breaches in the last thirteen months
	TransferAgencyBreaches []*RT000ZR69_TransferAgencyBreach `protobuf:"bytes,51,rep,name=transfer_agency_breaches,json=transferAgencyBreaches,proto3" json:"transfer_agency_breaches,omitempty"`
	// Recent late trade events. Convention is to report last twelve months.
	LateTradeEvents []*RT000ZR69_LateTradeEvent `protobuf:"bytes,53,rep,name=late_trade_events,json=lateTradeEvents,proto3" json:"late_trade_events,omitempty"`
	// Recent complains. Convention is to report last thirteen months
	Complaints []*RT000ZR69_Complaint `protobuf:"bytes,54,rep,name=complaints,proto3" json:"complaints,omitempty"`
	// List of suspicious transactions in the format:
	SuspiciousTransactions []*RT000ZR69_Transaction `protobuf:"bytes,55,rep,name=suspicious_transactions,json=suspiciousTransactions,proto3" json:"suspicious_transactions,omitempty"`
	// List of transactions related to PEP accounts
	PepTransactions []*RT000ZR69_Transaction `protobuf:"bytes,56,rep,name=pep_transactions,json=pepTransactions,proto3" json:"pep_transactions,omitempty"`
	// List of transactions with a late cash receipt
	LateCashReceiptTransactions []*RT000ZR69_Transaction `protobuf:"bytes,57,rep,name=late_cash_receipt_transactions,json=lateCashReceiptTransactions,proto3" json:"late_cash_receipt_transactions,omitempty"`
	// The largest N account holders by AUM.
	LargestShareholders []*RT000ZR69_Account `protobuf:"bytes,71,rep,name=largest_shareholders,json=largestShareholders,proto3" json:"largest_shareholders,omitempty"`
	// List of blocked accounts
	BlockedAccounts []*RT000ZR69_Account `protobuf:"bytes,72,rep,name=blocked_accounts,json=blockedAccounts,proto3" json:"blocked_accounts,omitempty"`
	// List of PEP accounts
	PepAccounts []*RT000ZR69_Account `protobuf:"bytes,73,rep,name=pep_accounts,json=pepAccounts,proto3" json:"pep_accounts,omitempty"`
	// List of new accounts last 3 months
	NewAccountsLastThreeMonths []*RT000ZR69_Account `protobuf:"bytes,74,rep,name=new_accounts_last_three_months,json=newAccountsLastThreeMonths,proto3" json:"new_accounts_last_three_months,omitempty"`
	// List of high risk accounts
	HighRiskAccounts []*RT000ZR69_Account `protobuf:"bytes,75,rep,name=high_risk_accounts,json=highRiskAccounts,proto3" json:"high_risk_accounts,omitempty"`
	// Largest N accounts by transaction volume
	LargestAccountsByTransactionVolume []*RT000ZR69_Account `protobuf:"bytes,76,rep,name=largest_accounts_by_transaction_volume,json=largestAccountsByTransactionVolume,proto3" json:"largest_accounts_by_transaction_volume,omitempty"`
	// Accounts that have holdings and have dealt within the last thirteen months
	ActiveAccounts []*RT000ZR69_Account `protobuf:"bytes,77,rep,name=active_accounts,json=activeAccounts,proto3" json:"active_accounts,omitempty"`
	// Accounts blocked for AML reasons
	AccountsBlockedForAmlReasons []*RT000ZR69_Account `protobuf:"bytes,78,rep,name=accounts_blocked_for_aml_reasons,json=accountsBlockedForAmlReasons,proto3" json:"accounts_blocked_for_aml_reasons,omitempty"`
	// Accounts created in the last thirteen months from high risk countries
	NewAccountsFromHighRiskCountries []*RT000ZR69_Account `protobuf:"bytes,79,rep,name=new_accounts_from_high_risk_countries,json=newAccountsFromHighRiskCountries,proto3" json:"new_accounts_from_high_risk_countries,omitempty"`
}

func (x *RT000ZR69) Reset() {
	*x = RT000ZR69{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69) ProtoMessage() {}

func (x *RT000ZR69) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69.ProtoReflect.Descriptor instead.
func (*RT000ZR69) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0}
}

func (x *RT000ZR69) GetOverview() *RT000ZR69_Overview {
	if x != nil {
		return x.Overview
	}
	return nil
}

func (x *RT000ZR69) GetMetrics() *RT000ZR69_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *RT000ZR69) GetTransferAgencyBreaches() []*RT000ZR69_TransferAgencyBreach {
	if x != nil {
		return x.TransferAgencyBreaches
	}
	return nil
}

func (x *RT000ZR69) GetLateTradeEvents() []*RT000ZR69_LateTradeEvent {
	if x != nil {
		return x.LateTradeEvents
	}
	return nil
}

func (x *RT000ZR69) GetComplaints() []*RT000ZR69_Complaint {
	if x != nil {
		return x.Complaints
	}
	return nil
}

func (x *RT000ZR69) GetSuspiciousTransactions() []*RT000ZR69_Transaction {
	if x != nil {
		return x.SuspiciousTransactions
	}
	return nil
}

func (x *RT000ZR69) GetPepTransactions() []*RT000ZR69_Transaction {
	if x != nil {
		return x.PepTransactions
	}
	return nil
}

func (x *RT000ZR69) GetLateCashReceiptTransactions() []*RT000ZR69_Transaction {
	if x != nil {
		return x.LateCashReceiptTransactions
	}
	return nil
}

func (x *RT000ZR69) GetLargestShareholders() []*RT000ZR69_Account {
	if x != nil {
		return x.LargestShareholders
	}
	return nil
}

func (x *RT000ZR69) GetBlockedAccounts() []*RT000ZR69_Account {
	if x != nil {
		return x.BlockedAccounts
	}
	return nil
}

func (x *RT000ZR69) GetPepAccounts() []*RT000ZR69_Account {
	if x != nil {
		return x.PepAccounts
	}
	return nil
}

func (x *RT000ZR69) GetNewAccountsLastThreeMonths() []*RT000ZR69_Account {
	if x != nil {
		return x.NewAccountsLastThreeMonths
	}
	return nil
}

func (x *RT000ZR69) GetHighRiskAccounts() []*RT000ZR69_Account {
	if x != nil {
		return x.HighRiskAccounts
	}
	return nil
}

func (x *RT000ZR69) GetLargestAccountsByTransactionVolume() []*RT000ZR69_Account {
	if x != nil {
		return x.LargestAccountsByTransactionVolume
	}
	return nil
}

func (x *RT000ZR69) GetActiveAccounts() []*RT000ZR69_Account {
	if x != nil {
		return x.ActiveAccounts
	}
	return nil
}

func (x *RT000ZR69) GetAccountsBlockedForAmlReasons() []*RT000ZR69_Account {
	if x != nil {
		return x.AccountsBlockedForAmlReasons
	}
	return nil
}

func (x *RT000ZR69) GetNewAccountsFromHighRiskCountries() []*RT000ZR69_Account {
	if x != nil {
		return x.NewAccountsFromHighRiskCountries
	}
	return nil
}

// Batch set of RT000ZR69 responses
type RT000ZR69Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*RT000ZR69 `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *RT000ZR69Batch) Reset() {
	*x = RT000ZR69Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69Batch) ProtoMessage() {}

func (x *RT000ZR69Batch) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69Batch.ProtoReflect.Descriptor instead.
func (*RT000ZR69Batch) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{1}
}

func (x *RT000ZR69Batch) GetResponse() []*RT000ZR69 {
	if x != nil {
		return x.Response
	}
	return nil
}

// Definition of an overview message
type RT000ZR69_Overview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reporting year
	ReportingYear int32 `protobuf:"varint,2,opt,name=reporting_year,json=reportingYear,proto3" json:"reporting_year,omitempty"`
	// The reporting month
	ReportingMonth month.Month `protobuf:"varint,3,opt,name=reporting_month,json=reportingMonth,proto3,enum=google.type.Month" json:"reporting_month,omitempty"`
	// The date data was produced (YYYY-MM-DD)
	ProductionDate string `protobuf:"bytes,4,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
	// The legal identifier of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,5,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// Name of the relevant sub-fund
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,6,opt,name=fund,proto3" json:"fund,omitempty"`
	// Aggregation entity
	// The name of the entity at which metrics should be aggregated for downstream reporting purposes
	AggregationEntity string `protobuf:"bytes,8,opt,name=aggregation_entity,json=aggregationEntity,proto3" json:"aggregation_entity,omitempty"`
}

func (x *RT000ZR69_Overview) Reset() {
	*x = RT000ZR69_Overview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Overview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Overview) ProtoMessage() {}

func (x *RT000ZR69_Overview) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Overview.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Overview) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000ZR69_Overview) GetReportingYear() int32 {
	if x != nil {
		return x.ReportingYear
	}
	return 0
}

func (x *RT000ZR69_Overview) GetReportingMonth() month.Month {
	if x != nil {
		return x.ReportingMonth
	}
	return month.Month(0)
}

func (x *RT000ZR69_Overview) GetProductionDate() string {
	if x != nil {
		return x.ProductionDate
	}
	return ""
}

func (x *RT000ZR69_Overview) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000ZR69_Overview) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000ZR69_Overview) GetAggregationEntity() string {
	if x != nil {
		return x.AggregationEntity
	}
	return ""
}

// Definition of metrics
type RT000ZR69_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of transactions settled during the month, excluding cash dividends
	// i.e. subscriptions, redemptions, switches in/out, dividend and trailer fee reinvestments.
	TransactionsProcessed []*MonthlyRAGMetric `protobuf:"bytes,1,rep,name=transactions_processed,json=transactionsProcessed,proto3" json:"transactions_processed,omitempty"`
	// The number of STP transactions processed (transactions that came across via an automated method versus manual
	// for example fax/post..etc)
	StpTransactionsProcessed []*MonthlyRAGMetric `protobuf:"bytes,2,rep,name=stp_transactions_processed,json=stpTransactionsProcessed,proto3" json:"stp_transactions_processed,omitempty"`
	// The STP transaction rate (stp_transactions_processed / transactions_processed)
	StpTransactionRate []*MonthlyRAGMetric `protobuf:"bytes,3,rep,name=stp_transaction_rate,json=stpTransactionRate,proto3" json:"stp_transaction_rate,omitempty"`
	// Number of TA transactions processed correctly as a percentage of total number of TA transactions settled during the reporting month.
	TransactionProcessAccuracy []*MonthlyRAGMetric `protobuf:"bytes,4,rep,name=transaction_process_accuracy,json=transactionProcessAccuracy,proto3" json:"transaction_process_accuracy,omitempty"`
	// Number of TA transactional errors identified during the reporting month.
	NumberOfTaTransactionalErrorsIdentified []*MonthlyRAGMetric `protobuf:"bytes,5,rep,name=number_of_ta_transactional_errors_identified,json=numberOfTaTransactionalErrorsIdentified,proto3" json:"number_of_ta_transactional_errors_identified,omitempty"`
	// Number of TA operational errors identified during the reporting month.
	NumberOfTaOperationalErrorsIdentified []*MonthlyRAGMetric `protobuf:"bytes,6,rep,name=number_of_ta_operational_errors_identified,json=numberOfTaOperationalErrorsIdentified,proto3" json:"number_of_ta_operational_errors_identified,omitempty"`
	// Value in the fund reporting currency of errors identified during the reporting month
	ValueOfIdentifiedErrors []*MonthlyRAGMetric `protobuf:"bytes,7,rep,name=value_of_identified_errors,json=valueOfIdentifiedErrors,proto3" json:"value_of_identified_errors,omitempty"`
	// The number of complaints in the last month
	ComplaintsInLastMonth []*MonthlyRAGMetric `protobuf:"bytes,8,rep,name=complaints_in_last_month,json=complaintsInLastMonth,proto3" json:"complaints_in_last_month,omitempty"`
	// The number of upheld complaints in the last month
	ComplaintsUpheldInLastMonth []*MonthlyRAGMetric `protobuf:"bytes,9,rep,name=complaints_upheld_in_last_month,json=complaintsUpheldInLastMonth,proto3" json:"complaints_upheld_in_last_month,omitempty"`
	// The number of complaints not upheld in the last month
	ComplaintsNotUpheldInLastMonth []*MonthlyRAGMetric `protobuf:"bytes,10,rep,name=complaints_not_upheld_in_last_month,json=complaintsNotUpheldInLastMonth,proto3" json:"complaints_not_upheld_in_last_month,omitempty"`
	// Number of accounts which had "In Good Order" AML/KYC status at month end.
	AccountsInGoodOrder []*MonthlyRAGMetric `protobuf:"bytes,11,rep,name=accounts_in_good_order,json=accountsInGoodOrder,proto3" json:"accounts_in_good_order,omitempty"`
	// Number of accounts which had "Not In Good Order" AML/KYC status at month end.
	AccountsNotInGoodOrder []*MonthlyRAGMetric `protobuf:"bytes,12,rep,name=accounts_not_in_good_order,json=accountsNotInGoodOrder,proto3" json:"accounts_not_in_good_order,omitempty"`
	// Number of same-day estimate reports sent
	EstimateReports []*MonthlyRAGMetric `protobuf:"bytes,13,rep,name=estimate_reports,json=estimateReports,proto3" json:"estimate_reports,omitempty"`
	// Percentage of same-day estimate reports delayed by >15min
	EstimateReportsDelayed []*MonthlyRAGMetric `protobuf:"bytes,14,rep,name=estimate_reports_delayed,json=estimateReportsDelayed,proto3" json:"estimate_reports_delayed,omitempty"`
	// Percentage of same-day estimate reports with an error
	EstimateReportsError []*MonthlyRAGMetric `protobuf:"bytes,15,rep,name=estimate_reports_error,json=estimateReportsError,proto3" json:"estimate_reports_error,omitempty"`
	// Number of next-day confirmed reports sent
	ConfirmedReports []*MonthlyRAGMetric `protobuf:"bytes,16,rep,name=confirmed_reports,json=confirmedReports,proto3" json:"confirmed_reports,omitempty"`
	// Percentage of next-day confirmed reports delayed by >15min
	ConfirmedReportsDelayed []*MonthlyRAGMetric `protobuf:"bytes,17,rep,name=confirmed_reports_delayed,json=confirmedReportsDelayed,proto3" json:"confirmed_reports_delayed,omitempty"`
	// Percentage of next-day confirmed reports with an error
	ConfirmedReportsError []*MonthlyRAGMetric `protobuf:"bytes,18,rep,name=confirmed_reports_error,json=confirmedReportsError,proto3" json:"confirmed_reports_error,omitempty"`
	// The average amount of time (seconds) taken to respond to an email query
	AverageEmailQueryTime []*MonthlyRAGMetric `protobuf:"bytes,19,rep,name=average_email_query_time,json=averageEmailQueryTime,proto3" json:"average_email_query_time,omitempty"`
	// The average amount of time (seconds) taken to respond to an phone query
	AveragePhoneQueryTime []*MonthlyRAGMetric `protobuf:"bytes,20,rep,name=average_phone_query_time,json=averagePhoneQueryTime,proto3" json:"average_phone_query_time,omitempty"`
	// Number of system issues that occurred during the month.
	SystemIssues []*MonthlyRAGMetric `protobuf:"bytes,21,rep,name=system_issues,json=systemIssues,proto3" json:"system_issues,omitempty"`
}

func (x *RT000ZR69_Metrics) Reset() {
	*x = RT000ZR69_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Metrics) ProtoMessage() {}

func (x *RT000ZR69_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Metrics.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Metrics) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT000ZR69_Metrics) GetTransactionsProcessed() []*MonthlyRAGMetric {
	if x != nil {
		return x.TransactionsProcessed
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetStpTransactionsProcessed() []*MonthlyRAGMetric {
	if x != nil {
		return x.StpTransactionsProcessed
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetStpTransactionRate() []*MonthlyRAGMetric {
	if x != nil {
		return x.StpTransactionRate
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetTransactionProcessAccuracy() []*MonthlyRAGMetric {
	if x != nil {
		return x.TransactionProcessAccuracy
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetNumberOfTaTransactionalErrorsIdentified() []*MonthlyRAGMetric {
	if x != nil {
		return x.NumberOfTaTransactionalErrorsIdentified
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetNumberOfTaOperationalErrorsIdentified() []*MonthlyRAGMetric {
	if x != nil {
		return x.NumberOfTaOperationalErrorsIdentified
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetValueOfIdentifiedErrors() []*MonthlyRAGMetric {
	if x != nil {
		return x.ValueOfIdentifiedErrors
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetComplaintsInLastMonth() []*MonthlyRAGMetric {
	if x != nil {
		return x.ComplaintsInLastMonth
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetComplaintsUpheldInLastMonth() []*MonthlyRAGMetric {
	if x != nil {
		return x.ComplaintsUpheldInLastMonth
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetComplaintsNotUpheldInLastMonth() []*MonthlyRAGMetric {
	if x != nil {
		return x.ComplaintsNotUpheldInLastMonth
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetAccountsInGoodOrder() []*MonthlyRAGMetric {
	if x != nil {
		return x.AccountsInGoodOrder
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetAccountsNotInGoodOrder() []*MonthlyRAGMetric {
	if x != nil {
		return x.AccountsNotInGoodOrder
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetEstimateReports() []*MonthlyRAGMetric {
	if x != nil {
		return x.EstimateReports
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetEstimateReportsDelayed() []*MonthlyRAGMetric {
	if x != nil {
		return x.EstimateReportsDelayed
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetEstimateReportsError() []*MonthlyRAGMetric {
	if x != nil {
		return x.EstimateReportsError
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetConfirmedReports() []*MonthlyRAGMetric {
	if x != nil {
		return x.ConfirmedReports
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetConfirmedReportsDelayed() []*MonthlyRAGMetric {
	if x != nil {
		return x.ConfirmedReportsDelayed
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetConfirmedReportsError() []*MonthlyRAGMetric {
	if x != nil {
		return x.ConfirmedReportsError
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetAverageEmailQueryTime() []*MonthlyRAGMetric {
	if x != nil {
		return x.AverageEmailQueryTime
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetAveragePhoneQueryTime() []*MonthlyRAGMetric {
	if x != nil {
		return x.AveragePhoneQueryTime
	}
	return nil
}

func (x *RT000ZR69_Metrics) GetSystemIssues() []*MonthlyRAGMetric {
	if x != nil {
		return x.SystemIssues
	}
	return nil
}

// The definition of an account resource
type RT000ZR69_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the client
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The type of account
	AccountType RT000ZR69_Account_AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=standards.open.v1.RT000ZR69_Account_AccountType" json:"account_type,omitempty"`
	// The internal unique identifier of the account
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The status of the account (i.e. active or inactive)
	Status RT000ZR69_Account_Status `protobuf:"varint,6,opt,name=status,proto3,enum=standards.open.v1.RT000ZR69_Account_Status" json:"status,omitempty"`
	// The address of the account
	Address string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// The risk categorization of the client (i.e. low, medium or high)
	Risk RT000ZR69_Account_Risk `protobuf:"varint,8,opt,name=risk,proto3,enum=standards.open.v1.RT000ZR69_Account_Risk" json:"risk,omitempty"`
	// Whether the client has a purchase stop
	PurchaseStop bool `protobuf:"varint,9,opt,name=purchase_stop,json=purchaseStop,proto3" json:"purchase_stop,omitempty"`
	// Whether the client has a redemption stop
	RedemptionStop bool `protobuf:"varint,10,opt,name=redemption_stop,json=redemptionStop,proto3" json:"redemption_stop,omitempty"`
	// Whether the client has a stop on redemptions settling
	StopRedSettle bool `protobuf:"varint,11,opt,name=stop_red_settle,json=stopRedSettle,proto3" json:"stop_red_settle,omitempty"`
	// Whether the client has a stop on transfers in
	TransferInwardStop bool `protobuf:"varint,12,opt,name=transfer_inward_stop,json=transferInwardStop,proto3" json:"transfer_inward_stop,omitempty"`
	// Whether the client has a stop on transfers out
	TransferOutStop bool `protobuf:"varint,13,opt,name=transfer_out_stop,json=transferOutStop,proto3" json:"transfer_out_stop,omitempty"`
	// Whether there is a stop on the account for PEP reasons
	StopPep bool `protobuf:"varint,14,opt,name=stop_pep,json=stopPep,proto3" json:"stop_pep,omitempty"`
	// Whether there is a stop on the account for AML reasons
	StopAml bool `protobuf:"varint,15,opt,name=stop_aml,json=stopAml,proto3" json:"stop_aml,omitempty"`
	// If there is a stop, what is the stop date
	StopDate *date.Date `protobuf:"bytes,16,opt,name=stop_date,json=stopDate,proto3" json:"stop_date,omitempty"`
	// The subscriptions (i.e. the share class holdings) of the client
	Subscriptions []*RT000ZR69_Account_Subscription `protobuf:"bytes,17,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// The share of total shares - unsettled
	PercentTotalShares float64 `protobuf:"fixed64,18,opt,name=percent_total_shares,json=percentTotalShares,proto3" json:"percent_total_shares,omitempty"`
	// The total value of the account
	AccountValue *money.Money `protobuf:"bytes,19,opt,name=account_value,json=accountValue,proto3" json:"account_value,omitempty"`
	// The share of total aum - unsettled
	PercentTotalAum float64 `protobuf:"fixed64,20,opt,name=percent_total_aum,json=percentTotalAum,proto3" json:"percent_total_aum,omitempty"`
	// The list of transactions made by the account
	Transactions []*RT000ZR69_Transaction `protobuf:"bytes,21,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// The date the account was created
	AccountCreationDate *date.Date `protobuf:"bytes,22,opt,name=account_creation_date,json=accountCreationDate,proto3" json:"account_creation_date,omitempty"`
	// The date the account was active and onboarded
	AccountActiveDate *date.Date `protobuf:"bytes,23,opt,name=account_active_date,json=accountActiveDate,proto3" json:"account_active_date,omitempty"`
	// The date of the last AML refresh
	LastAmlRefreshDate *date.Date `protobuf:"bytes,24,opt,name=last_aml_refresh_date,json=lastAmlRefreshDate,proto3" json:"last_aml_refresh_date,omitempty"`
}

func (x *RT000ZR69_Account) Reset() {
	*x = RT000ZR69_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Account) ProtoMessage() {}

func (x *RT000ZR69_Account) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Account.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Account) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT000ZR69_Account) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RT000ZR69_Account) GetAccountType() RT000ZR69_Account_AccountType {
	if x != nil {
		return x.AccountType
	}
	return RT000ZR69_Account_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_Account) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RT000ZR69_Account) GetStatus() RT000ZR69_Account_Status {
	if x != nil {
		return x.Status
	}
	return RT000ZR69_Account_STATE_UNSPECIFIED
}

func (x *RT000ZR69_Account) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RT000ZR69_Account) GetRisk() RT000ZR69_Account_Risk {
	if x != nil {
		return x.Risk
	}
	return RT000ZR69_Account_RISK_UNSPECIFIED
}

func (x *RT000ZR69_Account) GetPurchaseStop() bool {
	if x != nil {
		return x.PurchaseStop
	}
	return false
}

func (x *RT000ZR69_Account) GetRedemptionStop() bool {
	if x != nil {
		return x.RedemptionStop
	}
	return false
}

func (x *RT000ZR69_Account) GetStopRedSettle() bool {
	if x != nil {
		return x.StopRedSettle
	}
	return false
}

func (x *RT000ZR69_Account) GetTransferInwardStop() bool {
	if x != nil {
		return x.TransferInwardStop
	}
	return false
}

func (x *RT000ZR69_Account) GetTransferOutStop() bool {
	if x != nil {
		return x.TransferOutStop
	}
	return false
}

func (x *RT000ZR69_Account) GetStopPep() bool {
	if x != nil {
		return x.StopPep
	}
	return false
}

func (x *RT000ZR69_Account) GetStopAml() bool {
	if x != nil {
		return x.StopAml
	}
	return false
}

func (x *RT000ZR69_Account) GetStopDate() *date.Date {
	if x != nil {
		return x.StopDate
	}
	return nil
}

func (x *RT000ZR69_Account) GetSubscriptions() []*RT000ZR69_Account_Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *RT000ZR69_Account) GetPercentTotalShares() float64 {
	if x != nil {
		return x.PercentTotalShares
	}
	return 0
}

func (x *RT000ZR69_Account) GetAccountValue() *money.Money {
	if x != nil {
		return x.AccountValue
	}
	return nil
}

func (x *RT000ZR69_Account) GetPercentTotalAum() float64 {
	if x != nil {
		return x.PercentTotalAum
	}
	return 0
}

func (x *RT000ZR69_Account) GetTransactions() []*RT000ZR69_Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *RT000ZR69_Account) GetAccountCreationDate() *date.Date {
	if x != nil {
		return x.AccountCreationDate
	}
	return nil
}

func (x *RT000ZR69_Account) GetAccountActiveDate() *date.Date {
	if x != nil {
		return x.AccountActiveDate
	}
	return nil
}

func (x *RT000ZR69_Account) GetLastAmlRefreshDate() *date.Date {
	if x != nil {
		return x.LastAmlRefreshDate
	}
	return nil
}

// Definition of a transaction
type RT000ZR69_Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the client
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// The type of account
	AccountType RT000ZR69_Transaction_AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=standards.open.v1.RT000ZR69_Transaction_AccountType" json:"account_type,omitempty"`
	// The internal unique identifier of the account
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The global identifier of the share class
	ShareClassId string `protobuf:"bytes,4,opt,name=share_class_id,json=shareClassId,proto3" json:"share_class_id,omitempty"`
	// Codification chosen to identify the share class
	ShareClassIdType RT000ZR69_Transaction_ShareClassIdentifierTypes `protobuf:"varint,5,opt,name=share_class_id_type,json=shareClassIdType,proto3,enum=standards.open.v1.RT000ZR69_Transaction_ShareClassIdentifierTypes" json:"share_class_id_type,omitempty"`
	// Extension that identifies the share class.
	// Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
	ShareClassExtension string `protobuf:"bytes,6,opt,name=share_class_extension,json=shareClassExtension,proto3" json:"share_class_extension,omitempty"`
	// The number of settled units subscribed to or redeeemed
	Units float64 `protobuf:"fixed64,7,opt,name=units,proto3" json:"units,omitempty"`
	// The nav of the subscription per unit at which the transaction was priced
	NavPerUnit *money.Money `protobuf:"bytes,9,opt,name=nav_per_unit,json=navPerUnit,proto3" json:"nav_per_unit,omitempty"`
	// The current total value of the transaction
	TotalValue *money.Money `protobuf:"bytes,10,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	// The type of transaction
	TransactionType RT000ZR69_Transaction_TransactionType `protobuf:"varint,11,opt,name=transaction_type,json=transactionType,proto3,enum=standards.open.v1.RT000ZR69_Transaction_TransactionType" json:"transaction_type,omitempty"`
	// The trade date of the transaction
	TradeDate *date.Date `protobuf:"bytes,12,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	// The settlement date of the transaction
	SettlementDate *date.Date `protobuf:"bytes,13,opt,name=settlement_date,json=settlementDate,proto3" json:"settlement_date,omitempty"`
	// The transaction source type
	SourceType RT000ZR69_Transaction_SourceType `protobuf:"varint,14,opt,name=source_type,json=sourceType,proto3,enum=standards.open.v1.RT000ZR69_Transaction_SourceType" json:"source_type,omitempty"`
	// The source of the transaction
	Source string `protobuf:"bytes,15,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *RT000ZR69_Transaction) Reset() {
	*x = RT000ZR69_Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Transaction) ProtoMessage() {}

func (x *RT000ZR69_Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Transaction.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Transaction) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RT000ZR69_Transaction) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetAccountType() RT000ZR69_Transaction_AccountType {
	if x != nil {
		return x.AccountType
	}
	return RT000ZR69_Transaction_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_Transaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetShareClassId() string {
	if x != nil {
		return x.ShareClassId
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetShareClassIdType() RT000ZR69_Transaction_ShareClassIdentifierTypes {
	if x != nil {
		return x.ShareClassIdType
	}
	return RT000ZR69_Transaction_IDENTIFIER_UNSPECIFIED
}

func (x *RT000ZR69_Transaction) GetShareClassExtension() string {
	if x != nil {
		return x.ShareClassExtension
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetUnits() float64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *RT000ZR69_Transaction) GetNavPerUnit() *money.Money {
	if x != nil {
		return x.NavPerUnit
	}
	return nil
}

func (x *RT000ZR69_Transaction) GetTotalValue() *money.Money {
	if x != nil {
		return x.TotalValue
	}
	return nil
}

func (x *RT000ZR69_Transaction) GetTransactionType() RT000ZR69_Transaction_TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return RT000ZR69_Transaction_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_Transaction) GetTradeDate() *date.Date {
	if x != nil {
		return x.TradeDate
	}
	return nil
}

func (x *RT000ZR69_Transaction) GetSettlementDate() *date.Date {
	if x != nil {
		return x.SettlementDate
	}
	return nil
}

func (x *RT000ZR69_Transaction) GetSourceType() RT000ZR69_Transaction_SourceType {
	if x != nil {
		return x.SourceType
	}
	return RT000ZR69_Transaction_SOURCE_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_Transaction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// Definition of a Complaint
type RT000ZR69_Complaint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the complaint
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// Description of the complaint
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The account information related to the complainant (if applicable)
	ComplainantAccount *RT000ZR69_Account `protobuf:"bytes,3,opt,name=complainant_account,json=complainantAccount,proto3" json:"complainant_account,omitempty"`
	// Resolution of the complaint
	Resolution string `protobuf:"bytes,4,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Whether the complaint was upheld
	ComplaintUpheld bool `protobuf:"varint,5,opt,name=complaint_upheld,json=complaintUpheld,proto3" json:"complaint_upheld,omitempty"`
}

func (x *RT000ZR69_Complaint) Reset() {
	*x = RT000ZR69_Complaint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Complaint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Complaint) ProtoMessage() {}

func (x *RT000ZR69_Complaint) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Complaint.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Complaint) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RT000ZR69_Complaint) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000ZR69_Complaint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RT000ZR69_Complaint) GetComplainantAccount() *RT000ZR69_Account {
	if x != nil {
		return x.ComplainantAccount
	}
	return nil
}

func (x *RT000ZR69_Complaint) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *RT000ZR69_Complaint) GetComplaintUpheld() bool {
	if x != nil {
		return x.ComplaintUpheld
	}
	return false
}

// Definition of a late trade events
type RT000ZR69_LateTradeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the event
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// Cause of the late trade
	Cause string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	// Resolution of the breach and underlying source of issue
	Resolution string `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
}

func (x *RT000ZR69_LateTradeEvent) Reset() {
	*x = RT000ZR69_LateTradeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_LateTradeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_LateTradeEvent) ProtoMessage() {}

func (x *RT000ZR69_LateTradeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_LateTradeEvent.ProtoReflect.Descriptor instead.
func (*RT000ZR69_LateTradeEvent) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RT000ZR69_LateTradeEvent) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000ZR69_LateTradeEvent) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000ZR69_LateTradeEvent) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

// Definition of a Transfer Agency Breach or Error
type RT000ZR69_TransferAgencyBreach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of the breach
	EffectiveDate *date.Date `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The date the breach was identified
	IdentificationDate *date.Date `protobuf:"bytes,2,opt,name=identification_date,json=identificationDate,proto3" json:"identification_date,omitempty"`
	// The date the breach was resolved
	ResolutionDate *date.Date `protobuf:"bytes,3,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	// The type of severity of the breach or error.
	Type RT000ZR69_TransferAgencyBreach_Type `protobuf:"varint,4,opt,name=type,proto3,enum=standards.open.v1.RT000ZR69_TransferAgencyBreach_Type" json:"type,omitempty"`
	// Description of the breach
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Whether the breach is active or not
	Active bool `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	// Resolution of the breach and underlying source of issue
	ResolutionCommentary string `protobuf:"bytes,7,opt,name=resolution_commentary,json=resolutionCommentary,proto3" json:"resolution_commentary,omitempty"`
}

func (x *RT000ZR69_TransferAgencyBreach) Reset() {
	*x = RT000ZR69_TransferAgencyBreach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_TransferAgencyBreach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_TransferAgencyBreach) ProtoMessage() {}

func (x *RT000ZR69_TransferAgencyBreach) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_TransferAgencyBreach.ProtoReflect.Descriptor instead.
func (*RT000ZR69_TransferAgencyBreach) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RT000ZR69_TransferAgencyBreach) GetEffectiveDate() *date.Date {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *RT000ZR69_TransferAgencyBreach) GetIdentificationDate() *date.Date {
	if x != nil {
		return x.IdentificationDate
	}
	return nil
}

func (x *RT000ZR69_TransferAgencyBreach) GetResolutionDate() *date.Date {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *RT000ZR69_TransferAgencyBreach) GetType() RT000ZR69_TransferAgencyBreach_Type {
	if x != nil {
		return x.Type
	}
	return RT000ZR69_TransferAgencyBreach_SEVERITY_UNSPECIFIED
}

func (x *RT000ZR69_TransferAgencyBreach) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RT000ZR69_TransferAgencyBreach) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *RT000ZR69_TransferAgencyBreach) GetResolutionCommentary() string {
	if x != nil {
		return x.ResolutionCommentary
	}
	return ""
}

// Definition of a client subscription
type RT000ZR69_Account_Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The global identifier of the share class
	ShareClassId string `protobuf:"bytes,1,opt,name=share_class_id,json=shareClassId,proto3" json:"share_class_id,omitempty"`
	// Codification chosen to identify the share class
	ShareClassIdType RT000ZR69_Account_Subscription_ShareClassIdentifierTypes `protobuf:"varint,2,opt,name=share_class_id_type,json=shareClassIdType,proto3,enum=standards.open.v1.RT000ZR69_Account_Subscription_ShareClassIdentifierTypes" json:"share_class_id_type,omitempty"`
	// Extension that identifies the share class.
	// Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
	ShareClassExtension string `protobuf:"bytes,3,opt,name=share_class_extension,json=shareClassExtension,proto3" json:"share_class_extension,omitempty"`
	// The number of settled units
	SettledUnits float64 `protobuf:"fixed64,4,opt,name=settled_units,json=settledUnits,proto3" json:"settled_units,omitempty"`
	// The number of unsettled units
	UnsettledUnits float64 `protobuf:"fixed64,5,opt,name=unsettled_units,json=unsettledUnits,proto3" json:"unsettled_units,omitempty"`
	// The nav of the subscription per unit
	NavPerUnit *money.Money `protobuf:"bytes,6,opt,name=nav_per_unit,json=navPerUnit,proto3" json:"nav_per_unit,omitempty"`
	// The current total value of the subscription
	TotalValue *money.Money `protobuf:"bytes,7,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
}

func (x *RT000ZR69_Account_Subscription) Reset() {
	*x = RT000ZR69_Account_Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Account_Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Account_Subscription) ProtoMessage() {}

func (x *RT000ZR69_Account_Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Account_Subscription.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Account_Subscription) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *RT000ZR69_Account_Subscription) GetShareClassId() string {
	if x != nil {
		return x.ShareClassId
	}
	return ""
}

func (x *RT000ZR69_Account_Subscription) GetShareClassIdType() RT000ZR69_Account_Subscription_ShareClassIdentifierTypes {
	if x != nil {
		return x.ShareClassIdType
	}
	return RT000ZR69_Account_Subscription_IDENTIFIER_UNSPECIFIED
}

func (x *RT000ZR69_Account_Subscription) GetShareClassExtension() string {
	if x != nil {
		return x.ShareClassExtension
	}
	return ""
}

func (x *RT000ZR69_Account_Subscription) GetSettledUnits() float64 {
	if x != nil {
		return x.SettledUnits
	}
	return 0
}

func (x *RT000ZR69_Account_Subscription) GetUnsettledUnits() float64 {
	if x != nil {
		return x.UnsettledUnits
	}
	return 0
}

func (x *RT000ZR69_Account_Subscription) GetNavPerUnit() *money.Money {
	if x != nil {
		return x.NavPerUnit
	}
	return nil
}

func (x *RT000ZR69_Account_Subscription) GetTotalValue() *money.Money {
	if x != nil {
		return x.TotalValue
	}
	return nil
}

var File_standards_open_v1_RT000ZR69_proto protoreflect.FileDescriptor

var file_standards_open_v1_RT000ZR69_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe0, 0x3e, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x12, 0x41, 0x0a,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x6b, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x33, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x11, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x61,
	0x0a, 0x17, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x75, 0x73, 0x70, 0x69,
	0x63, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x65, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x65, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6d, 0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x47, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36,
	0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4f,
	0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x47, 0x0a, 0x0c, 0x70, 0x65, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a,
	0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x65, 0x70,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x1e, 0x6e, 0x65, 0x77, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x4a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x1a, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x26, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x4c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x22, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x4d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x6c, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x41, 0x6d, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a,
	0x25, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x4f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x20, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x1a, 0xff, 0x01, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46,
	0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x83, 0x10, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41,
	0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x61,
	0x0a, 0x1a, 0x73, 0x74, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41,
	0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x18, 0x73, 0x74, 0x70, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x74, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x12, 0x73, 0x74, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12,
	0x82, 0x01, 0x0a, 0x2c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x61,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x27, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x2a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x74, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x25, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x17, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x15, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x69, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x75, 0x70, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70,
	0x68, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x70, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x75, 0x70, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74,
	0x55, 0x70, 0x68, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x58, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x1a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4e, 0x6f,
	0x74, 0x49, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x10,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0f, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x18,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x16, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x15, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x15, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0c,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x1a, 0xad, 0x0f, 0x0a,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d,
	0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x6d, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x41, 0x6d, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x6d,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x13,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x11, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6d, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xc4, 0x04, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x13,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x75, 0x6e, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x6e, 0x61,
	0x76, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x6e, 0x61, 0x76, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x33, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x53,
	0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47, 0x5f,
	0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x42, 0x47, 0x49,
	0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x22, 0x49, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x02, 0x22, 0x56, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22,
	0x3b, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x1a, 0x8d, 0x0a, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a,
	0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x71, 0x0a,
	0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x6e, 0x61,
	0x76, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x6e, 0x61, 0x76, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x33, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x02, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57,
	0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49,
	0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x22, 0x6f, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x04, 0x22, 0x71, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x41, 0x58, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4c, 0x45,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x57, 0x49, 0x46, 0x54,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x06, 0x1a, 0x89, 0x02, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36,
	0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x68, 0x65, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x55, 0x70, 0x68, 0x65, 0x6c, 0x64, 0x1a, 0x80, 0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe4, 0x03, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x22, 0x57, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x42,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x22, 0x4b, 0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x5a, 0x52, 0x36, 0x39, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_standards_open_v1_RT000ZR69_proto_rawDescOnce sync.Once
	file_standards_open_v1_RT000ZR69_proto_rawDescData = file_standards_open_v1_RT000ZR69_proto_rawDesc
)

func file_standards_open_v1_RT000ZR69_proto_rawDescGZIP() []byte {
	file_standards_open_v1_RT000ZR69_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_RT000ZR69_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_RT000ZR69_proto_rawDescData)
	})
	return file_standards_open_v1_RT000ZR69_proto_rawDescData
}

var file_standards_open_v1_RT000ZR69_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_standards_open_v1_RT000ZR69_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_standards_open_v1_RT000ZR69_proto_goTypes = []interface{}{
	(RT000ZR69_Account_AccountType)(0),                            // 0: standards.open.v1.RT000ZR69.Account.AccountType
	(RT000ZR69_Account_Status)(0),                                 // 1: standards.open.v1.RT000ZR69.Account.Status
	(RT000ZR69_Account_Risk)(0),                                   // 2: standards.open.v1.RT000ZR69.Account.Risk
	(RT000ZR69_Account_Subscription_ShareClassIdentifierTypes)(0), // 3: standards.open.v1.RT000ZR69.Account.Subscription.ShareClassIdentifierTypes
	(RT000ZR69_Transaction_AccountType)(0),                        // 4: standards.open.v1.RT000ZR69.Transaction.AccountType
	(RT000ZR69_Transaction_ShareClassIdentifierTypes)(0),          // 5: standards.open.v1.RT000ZR69.Transaction.ShareClassIdentifierTypes
	(RT000ZR69_Transaction_TransactionType)(0),                    // 6: standards.open.v1.RT000ZR69.Transaction.TransactionType
	(RT000ZR69_Transaction_SourceType)(0),                         // 7: standards.open.v1.RT000ZR69.Transaction.SourceType
	(RT000ZR69_TransferAgencyBreach_Type)(0),                      // 8: standards.open.v1.RT000ZR69.TransferAgencyBreach.Type
	(*RT000ZR69)(nil),                                             // 9: standards.open.v1.RT000ZR69
	(*RT000ZR69Batch)(nil),                                        // 10: standards.open.v1.RT000ZR69_batch
	(*RT000ZR69_Overview)(nil),                                    // 11: standards.open.v1.RT000ZR69.Overview
	(*RT000ZR69_Metrics)(nil),                                     // 12: standards.open.v1.RT000ZR69.Metrics
	(*RT000ZR69_Account)(nil),                                     // 13: standards.open.v1.RT000ZR69.Account
	(*RT000ZR69_Transaction)(nil),                                 // 14: standards.open.v1.RT000ZR69.Transaction
	(*RT000ZR69_Complaint)(nil),                                   // 15: standards.open.v1.RT000ZR69.Complaint
	(*RT000ZR69_LateTradeEvent)(nil),                              // 16: standards.open.v1.RT000ZR69.LateTradeEvent
	(*RT000ZR69_TransferAgencyBreach)(nil),                        // 17: standards.open.v1.RT000ZR69.TransferAgencyBreach
	(*RT000ZR69_Account_Subscription)(nil),                        // 18: standards.open.v1.RT000ZR69.Account.Subscription
	(month.Month)(0),                                              // 19: google.type.Month
	(*MonthlyRAGMetric)(nil),                                      // 20: standards.open.v1.MonthlyRAGMetric
	(*date.Date)(nil),                                             // 21: google.type.Date
	(*money.Money)(nil),                                           // 22: google.type.Money
}
var file_standards_open_v1_RT000ZR69_proto_depIdxs = []int32{
	11, // 0: standards.open.v1.RT000ZR69.overview:type_name -> standards.open.v1.RT000ZR69.Overview
	12, // 1: standards.open.v1.RT000ZR69.metrics:type_name -> standards.open.v1.RT000ZR69.Metrics
	17, // 2: standards.open.v1.RT000ZR69.transfer_agency_breaches:type_name -> standards.open.v1.RT000ZR69.TransferAgencyBreach
	16, // 3: standards.open.v1.RT000ZR69.late_trade_events:type_name -> standards.open.v1.RT000ZR69.LateTradeEvent
	15, // 4: standards.open.v1.RT000ZR69.complaints:type_name -> standards.open.v1.RT000ZR69.Complaint
	14, // 5: standards.open.v1.RT000ZR69.suspicious_transactions:type_name -> standards.open.v1.RT000ZR69.Transaction
	14, // 6: standards.open.v1.RT000ZR69.pep_transactions:type_name -> standards.open.v1.RT000ZR69.Transaction
	14, // 7: standards.open.v1.RT000ZR69.late_cash_receipt_transactions:type_name -> standards.open.v1.RT000ZR69.Transaction
	13, // 8: standards.open.v1.RT000ZR69.largest_shareholders:type_name -> standards.open.v1.RT000ZR69.Account
	13, // 9: standards.open.v1.RT000ZR69.blocked_accounts:type_name -> standards.open.v1.RT000ZR69.Account
	13, // 10: standards.open.v1.RT000ZR69.pep_accounts:type_name -> standards.open.v1.RT000ZR69.Account
	13, // 11: standards.open.v1.RT000ZR69.new_accounts_last_three_months:type_name -> standards.open.v1.RT000ZR69.Account
	13, // 12: standards.open.v1.RT000ZR69.high_risk_accounts:type_name -> standards.open.v1.RT000ZR69.Account
	13, // 13: standards.open.v1.RT000ZR69.largest_accounts_by_transaction_volume:type_name -> standards.open.v1.RT000ZR69.Account
	13, // 14: standards.open.v1.RT000ZR69.active_accounts:type_name -> standards.open.v1.RT000ZR69.Account
	13, // 15: standards.open.v1.RT000ZR69.accounts_blocked_for_aml_reasons:type_name -> standards.open.v1.RT000ZR69.Account
	13, // 16: standards.open.v1.RT000ZR69.new_accounts_from_high_risk_countries:type_name -> standards.open.v1.RT000ZR69.Account
	9,  // 17: standards.open.v1.RT000ZR69_batch.response:type_name -> standards.open.v1.RT000ZR69
	19, // 18: standards.open.v1.RT000ZR69.Overview.reporting_month:type_name -> google.type.Month
	20, // 19: standards.open.v1.RT000ZR69.Metrics.transactions_processed:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 20: standards.open.v1.RT000ZR69.Metrics.stp_transactions_processed:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 21: standards.open.v1.RT000ZR69.Metrics.stp_transaction_rate:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 22: standards.open.v1.RT000ZR69.Metrics.transaction_process_accuracy:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 23: standards.open.v1.RT000ZR69.Metrics.number_of_ta_transactional_errors_identified:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 24: standards.open.v1.RT000ZR69.Metrics.number_of_ta_operational_errors_identified:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 25: standards.open.v1.RT000ZR69.Metrics.value_of_identified_errors:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 26: standards.open.v1.RT000ZR69.Metrics.complaints_in_last_month:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 27: standards.open.v1.RT000ZR69.Metrics.complaints_upheld_in_last_month:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 28: standards.open.v1.RT000ZR69.Metrics.complaints_not_upheld_in_last_month:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 29: standards.open.v1.RT000ZR69.Metrics.accounts_in_good_order:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 30: standards.open.v1.RT000ZR69.Metrics.accounts_not_in_good_order:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 31: standards.open.v1.RT000ZR69.Metrics.estimate_reports:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 32: standards.open.v1.RT000ZR69.Metrics.estimate_reports_delayed:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 33: standards.open.v1.RT000ZR69.Metrics.estimate_reports_error:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 34: standards.open.v1.RT000ZR69.Metrics.confirmed_reports:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 35: standards.open.v1.RT000ZR69.Metrics.confirmed_reports_delayed:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 36: standards.open.v1.RT000ZR69.Metrics.confirmed_reports_error:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 37: standards.open.v1.RT000ZR69.Metrics.average_email_query_time:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 38: standards.open.v1.RT000ZR69.Metrics.average_phone_query_time:type_name -> standards.open.v1.MonthlyRAGMetric
	20, // 39: standards.open.v1.RT000ZR69.Metrics.system_issues:type_name -> standards.open.v1.MonthlyRAGMetric
	0,  // 40: standards.open.v1.RT000ZR69.Account.account_type:type_name -> standards.open.v1.RT000ZR69.Account.AccountType
	1,  // 41: standards.open.v1.RT000ZR69.Account.status:type_name -> standards.open.v1.RT000ZR69.Account.Status
	2,  // 42: standards.open.v1.RT000ZR69.Account.risk:type_name -> standards.open.v1.RT000ZR69.Account.Risk
	21, // 43: standards.open.v1.RT000ZR69.Account.stop_date:type_name -> google.type.Date
	18, // 44: standards.open.v1.RT000ZR69.Account.subscriptions:type_name -> standards.open.v1.RT000ZR69.Account.Subscription
	22, // 45: standards.open.v1.RT000ZR69.Account.account_value:type_name -> google.type.Money
	14, // 46: standards.open.v1.RT000ZR69.Account.transactions:type_name -> standards.open.v1.RT000ZR69.Transaction
	21, // 47: standards.open.v1.RT000ZR69.Account.account_creation_date:type_name -> google.type.Date
	21, // 48: standards.open.v1.RT000ZR69.Account.account_active_date:type_name -> google.type.Date
	21, // 49: standards.open.v1.RT000ZR69.Account.last_aml_refresh_date:type_name -> google.type.Date
	4,  // 50: standards.open.v1.RT000ZR69.Transaction.account_type:type_name -> standards.open.v1.RT000ZR69.Transaction.AccountType
	5,  // 51: standards.open.v1.RT000ZR69.Transaction.share_class_id_type:type_name -> standards.open.v1.RT000ZR69.Transaction.ShareClassIdentifierTypes
	22, // 52: standards.open.v1.RT000ZR69.Transaction.nav_per_unit:type_name -> google.type.Money
	22, // 53: standards.open.v1.RT000ZR69.Transaction.total_value:type_name -> google.type.Money
	6,  // 54: standards.open.v1.RT000ZR69.Transaction.transaction_type:type_name -> standards.open.v1.RT000ZR69.Transaction.TransactionType
	21, // 55: standards.open.v1.RT000ZR69.Transaction.trade_date:type_name -> google.type.Date
	21, // 56: standards.open.v1.RT000ZR69.Transaction.settlement_date:type_name -> google.type.Date
	7,  // 57: standards.open.v1.RT000ZR69.Transaction.source_type:type_name -> standards.open.v1.RT000ZR69.Transaction.SourceType
	21, // 58: standards.open.v1.RT000ZR69.Complaint.effective_date:type_name -> google.type.Date
	13, // 59: standards.open.v1.RT000ZR69.Complaint.complainant_account:type_name -> standards.open.v1.RT000ZR69.Account
	21, // 60: standards.open.v1.RT000ZR69.LateTradeEvent.effective_date:type_name -> google.type.Date
	21, // 61: standards.open.v1.RT000ZR69.TransferAgencyBreach.effective_date:type_name -> google.type.Date
	21, // 62: standards.open.v1.RT000ZR69.TransferAgencyBreach.identification_date:type_name -> google.type.Date
	21, // 63: standards.open.v1.RT000ZR69.TransferAgencyBreach.resolution_date:type_name -> google.type.Date
	8,  // 64: standards.open.v1.RT000ZR69.TransferAgencyBreach.type:type_name -> standards.open.v1.RT000ZR69.TransferAgencyBreach.Type
	3,  // 65: standards.open.v1.RT000ZR69.Account.Subscription.share_class_id_type:type_name -> standards.open.v1.RT000ZR69.Account.Subscription.ShareClassIdentifierTypes
	22, // 66: standards.open.v1.RT000ZR69.Account.Subscription.nav_per_unit:type_name -> google.type.Money
	22, // 67: standards.open.v1.RT000ZR69.Account.Subscription.total_value:type_name -> google.type.Money
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_standards_open_v1_RT000ZR69_proto_init() }
func file_standards_open_v1_RT000ZR69_proto_init() {
	if File_standards_open_v1_RT000ZR69_proto != nil {
		return
	}
	file_standards_open_v1_metric_proto_init()
	file_standards_open_v1_rag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_RT000ZR69_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Overview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Complaint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_LateTradeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_TransferAgencyBreach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Account_Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_RT000ZR69_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_RT000ZR69_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_RT000ZR69_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_RT000ZR69_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_RT000ZR69_proto_msgTypes,
	}.Build()
	File_standards_open_v1_RT000ZR69_proto = out.File
	file_standards_open_v1_RT000ZR69_proto_rawDesc = nil
	file_standards_open_v1_RT000ZR69_proto_goTypes = nil
	file_standards_open_v1_RT000ZR69_proto_depIdxs = nil
}
