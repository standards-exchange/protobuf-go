// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/RT000ZR69.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	_ "google.golang.org/genproto/googleapis/type/month"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of metricIDs
type RT000ZR69_MonthlyRAGMetric_MetricID int32

const (
	// The enumeration of the metrics measured
	RT000ZR69_MonthlyRAGMetric_METRIC_ID_UNSPECIFIED RT000ZR69_MonthlyRAGMetric_MetricID = 0
	// Total number of transactions settled during the month (core + corporate action + other)
	RT000ZR69_MonthlyRAGMetric_TRANSACTIONS_PROCESSED RT000ZR69_MonthlyRAGMetric_MetricID = 1
	// The number of financial transactions processed (e.g. subscriptions, redemptions, switches in/out, dividend- and trailer fees reinvestments)
	RT000ZR69_MonthlyRAGMetric_CORE_TRANSACTIONS_PROCESSED RT000ZR69_MonthlyRAGMetric_MetricID = 2
	// The number of corporate action transactions processed (e.g. cash dividends)
	RT000ZR69_MonthlyRAGMetric_CORPORATE_ACTION_FINANCIAL_TRANSACTIONS_PROCESSED RT000ZR69_MonthlyRAGMetric_MetricID = 3
	// Other transactions (e.g stock transfers)
	RT000ZR69_MonthlyRAGMetric_OTHER_TRANSACTIONS_PROCESSED RT000ZR69_MonthlyRAGMetric_MetricID = 4
	// The aggregate STP rate across all transactions
	RT000ZR69_MonthlyRAGMetric_AGGREGATE_TRANSACTIONS_STP_RATE RT000ZR69_MonthlyRAGMetric_MetricID = 5
	// The number of STP transactions processed (transactions that came across via an automated method versus manual
	// for example fax/post..etc)
	RT000ZR69_MonthlyRAGMetric_CORE_TRANSACTIONS_STP_RATE RT000ZR69_MonthlyRAGMetric_MetricID = 6
	// The STP transaction rate (stp_transactions_processed / transactions_processed)
	RT000ZR69_MonthlyRAGMetric_CORPORATE_ACTION_TRANSACTIONS_STP_RATE RT000ZR69_MonthlyRAGMetric_MetricID = 7
	// The total value of net in/outflows in the currency units of the metric subject
	RT000ZR69_MonthlyRAGMetric_NET_FLOWS RT000ZR69_MonthlyRAGMetric_MetricID = 8
	// Number of transactions processed correctly as a percentage of total number of TA transactions settled during the reporting month.
	RT000ZR69_MonthlyRAGMetric_TRANSACTION_PROCESSING_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 9
	// The total number of transactional errors
	RT000ZR69_MonthlyRAGMetric_TRANSACTIONAL_ERRORS RT000ZR69_MonthlyRAGMetric_MetricID = 10
	// The total number of operational errors
	RT000ZR69_MonthlyRAGMetric_OPERATIONAL_ERRORS RT000ZR69_MonthlyRAGMetric_MetricID = 11
	// Value of errors in the reporting currency
	RT000ZR69_MonthlyRAGMetric_VALUE_OF_ERRORS_REPORTING_CURRENCY RT000ZR69_MonthlyRAGMetric_MetricID = 12
	// The number of complaints in the reporting period
	RT000ZR69_MonthlyRAGMetric_NUMBER_OF_COMPLAINTS RT000ZR69_MonthlyRAGMetric_MetricID = 13
	// The number of complaints upheld
	RT000ZR69_MonthlyRAGMetric_NUMBER_OF_UPHELD_COMPLAINTS RT000ZR69_MonthlyRAGMetric_MetricID = 14
	// The total number of accounts
	RT000ZR69_MonthlyRAGMetric_NUMBER_OF_ACCOUNTS RT000ZR69_MonthlyRAGMetric_MetricID = 15
	// Total number of accounts with balances
	RT000ZR69_MonthlyRAGMetric_PERCENTAGE_ACCOUNTS_WITH_BALANCES RT000ZR69_MonthlyRAGMetric_MetricID = 16
	// The number of accounts in good order at the end of the reporting period
	RT000ZR69_MonthlyRAGMetric_PERCENTAGE_ACCOUNTS_IN_GOOD_ORDER RT000ZR69_MonthlyRAGMetric_MetricID = 17
	// The percentage of large trade reports sent within the agreed timeframe
	RT000ZR69_MonthlyRAGMetric_INVESTOR_REPORTS_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 18
	// Number of phone calls processed
	RT000ZR69_MonthlyRAGMetric_NUMBER_OF_PHONE_CALLS_PROCESSED RT000ZR69_MonthlyRAGMetric_MetricID = 19
	// Number of email queries processed
	RT000ZR69_MonthlyRAGMetric_NUMBER_OF_EMAIL_QUERIES_PROCESSED RT000ZR69_MonthlyRAGMetric_MetricID = 20
	// The percentage of calls that were abandoned
	RT000ZR69_MonthlyRAGMetric_ABANDON_RATE RT000ZR69_MonthlyRAGMetric_MetricID = 21
	// The average amount of time (seconds) taken to respond to an email query
	RT000ZR69_MonthlyRAGMetric_AVERAGE_EMAIL_QUERY_TIME RT000ZR69_MonthlyRAGMetric_MetricID = 22
	// The average amount of time (seconds) taken to respond to an phone query
	RT000ZR69_MonthlyRAGMetric_AVERAGE_PHONE_QUERY_TIME RT000ZR69_MonthlyRAGMetric_MetricID = 23
	// The rate at which email response timeliness met agreed service level thresholds
	RT000ZR69_MonthlyRAGMetric_EMAIL_QUERY_TIMELINESS_RATE RT000ZR69_MonthlyRAGMetric_MetricID = 24
	// The rate at which email response timeliness met agreed service level thresholds
	RT000ZR69_MonthlyRAGMetric_PHONE_QUERY_TIMELINESS_RATE RT000ZR69_MonthlyRAGMetric_MetricID = 25
	// Number of system issues that occurred during the month.
	RT000ZR69_MonthlyRAGMetric_SYSTEM_ISSUES RT000ZR69_MonthlyRAGMetric_MetricID = 26
	// The self-assessment rating of the provider (typically on a scale of 1 - below expectations to 5 - well above expectations)
	RT000ZR69_MonthlyRAGMetric_PROVIDER_SELF_ASSESSMENT RT000ZR69_MonthlyRAGMetric_MetricID = 27
	// The service assessment rating of the customer (typically on a scale of 1 - below expectations to 5 - well above expectations)
	RT000ZR69_MonthlyRAGMetric_CUSTOMER_SERVICE_ASSESSMENT RT000ZR69_MonthlyRAGMetric_MetricID = 28
	// The net asset value at the end of the period in reporting currency
	RT000ZR69_MonthlyRAGMetric_NET_ASSET_VALUE_REPORTING_CURRENCY RT000ZR69_MonthlyRAGMetric_MetricID = 29
	// The net asset value at the end of the period in subject currency
	RT000ZR69_MonthlyRAGMetric_NET_ASSET_VALUE_SUBJECT_CURRENCY RT000ZR69_MonthlyRAGMetric_MetricID = 30
	// Number of new investor accounts registered during the reporting period
	RT000ZR69_MonthlyRAGMetric_NEW_INVESTOR_ACCOUNTS RT000ZR69_MonthlyRAGMetric_MetricID = 31
	// Number of new investor accounts registered classifying as high risk
	RT000ZR69_MonthlyRAGMetric_NEW_HIGH_RISK_INVESTOR_ACCOUNTS RT000ZR69_MonthlyRAGMetric_MetricID = 32
	// Total number of investor accounts classified as high risk
	RT000ZR69_MonthlyRAGMetric_HIGH_RISK_ACCOUNTS RT000ZR69_MonthlyRAGMetric_MetricID = 33
	// Total number of PEP accounts
	RT000ZR69_MonthlyRAGMetric_PEP_ACCOUNTS RT000ZR69_MonthlyRAGMetric_MetricID = 34
	// Total number of dormant accounts
	RT000ZR69_MonthlyRAGMetric_DORMANT_ACCOUNTS RT000ZR69_MonthlyRAGMetric_MetricID = 35
	// Number of unusual or suspicious activity exceptions raised to Manco
	RT000ZR69_MonthlyRAGMetric_SUSPICIOUS_ACTIVITY_EXCEPTIONS_RAISED RT000ZR69_MonthlyRAGMetric_MetricID = 36
	// Number of sanctions screening exceptions raised to Manco
	RT000ZR69_MonthlyRAGMetric_SANCTIONS_SCREENING_EXCEPTIONS_RAISED RT000ZR69_MonthlyRAGMetric_MetricID = 37
	// Number of negative media screening exceptions raised to Manco
	RT000ZR69_MonthlyRAGMetric_NEGATIVE_MEDIA_SCREENING_EXCEPTIONS_RAISED RT000ZR69_MonthlyRAGMetric_MetricID = 38
	// Number of AML or financial crime exceptions
	RT000ZR69_MonthlyRAGMetric_AML_OR_FINANCIAL_CRIME_EXCEPTIONS_RAISED RT000ZR69_MonthlyRAGMetric_MetricID = 39
	// Total number of blocked accounts
	RT000ZR69_MonthlyRAGMetric_BLOCKED_ACCOUNTS RT000ZR69_MonthlyRAGMetric_MetricID = 40
	// Total number of accounts blocked for AML reasons
	RT000ZR69_MonthlyRAGMetric_BLOCKED_ACCOUNTS_AML RT000ZR69_MonthlyRAGMetric_MetricID = 41
	// Total number of accounts restricted for sanctions reasons (Cuba/Iran/Syria etc)
	RT000ZR69_MonthlyRAGMetric_RESTRICTED_ACCOUNTS_SANCTIONS RT000ZR69_MonthlyRAGMetric_MetricID = 42
	// The number of investor payments made
	RT000ZR69_MonthlyRAGMetric_INVESTOR_PAYMENTS RT000ZR69_MonthlyRAGMetric_MetricID = 43
	// The accuracy of investor payments
	RT000ZR69_MonthlyRAGMetric_INVESTOR_PAYMENTS_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 44
	// The timeliness of investor payments
	RT000ZR69_MonthlyRAGMetric_INVESTOR_PAYMENTS_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 45
	// The number of dividend payouts
	RT000ZR69_MonthlyRAGMetric_DIVIDEND_PAYOUTS RT000ZR69_MonthlyRAGMetric_MetricID = 46
	// The accuracy of dividend payouts
	RT000ZR69_MonthlyRAGMetric_DIVIDEND_PAYOUT_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 47
	// The timeliness of dividend payouts
	RT000ZR69_MonthlyRAGMetric_DIVIDEND_PAYOUT_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 48
	// The number of commission and trailer fee payments
	RT000ZR69_MonthlyRAGMetric_COMMISSION_AND_TRAILER_FEE_PAYMENTS RT000ZR69_MonthlyRAGMetric_MetricID = 49
	// The accuracy of commission and trailer fee payments
	RT000ZR69_MonthlyRAGMetric_COMMISSION_AND_TRAILER_FEE_PAYMENTS_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 50
	// The timeliness of commission and trailer fee payments
	RT000ZR69_MonthlyRAGMetric_COMMISSION_AND_TRAILER_FEE_PAYMENTS_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 51
	// The percentage of new account openings completed without error
	RT000ZR69_MonthlyRAGMetric_NEW_ACCOUNT_OPENING_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 52
	// The percentage of new account openings within SLA
	RT000ZR69_MonthlyRAGMetric_NEW_ACCOUNT_OPENING_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 53
	// The number of new agent / distributor onboardings that occurred in the period
	RT000ZR69_MonthlyRAGMetric_NEW_AGENTS_OR_DISTRIBUTORS RT000ZR69_MonthlyRAGMetric_MetricID = 54
	// The percentage of new agent / distributor onboardings that occurred without error
	RT000ZR69_MonthlyRAGMetric_NEW_AGENTS_OR_DISTRIBUTOR_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 55
	// The percentage of new agent / distributor onboardings that occurred within the SLA
	RT000ZR69_MonthlyRAGMetric_NEW_AGENTS_OR_DISTRIBUTOR_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 56
	// The total number of reports provided in the reporting period
	RT000ZR69_MonthlyRAGMetric_REPORTS_SENT RT000ZR69_MonthlyRAGMetric_MetricID = 101
	// The percentage of all reports delivered without error
	RT000ZR69_MonthlyRAGMetric_REPORTS_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 102
	// The percentage of all reports within the agreed timeframe
	RT000ZR69_MonthlyRAGMetric_REPORTS_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 103
	// The number of estimate reports provided in the reporting period
	RT000ZR69_MonthlyRAGMetric_ESTIMATE_REPORTS RT000ZR69_MonthlyRAGMetric_MetricID = 104
	// The percentage of estimate reports delivered without error
	RT000ZR69_MonthlyRAGMetric_ESTIMATE_REPORTS_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 105
	// The percentage of estimate reports within the agreed timeframe
	RT000ZR69_MonthlyRAGMetric_ESTIMATE_REPORTS_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 106
	// The number of confirmed reports provided in the reporting period
	RT000ZR69_MonthlyRAGMetric_CONFIRMED_REPORTS RT000ZR69_MonthlyRAGMetric_MetricID = 107
	// The percentage of confirmed reports delivered without error
	RT000ZR69_MonthlyRAGMetric_CONFIRMED_REPORTS_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 108
	// The percentage of confirmed reports within the agreed timeframe
	RT000ZR69_MonthlyRAGMetric_CONFIRMED_REPORTS_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 109
	// The number of large trade reports sent
	RT000ZR69_MonthlyRAGMetric_LARGE_TRADE_REPORTS RT000ZR69_MonthlyRAGMetric_MetricID = 110
	// The number of large trade reports sent without error
	RT000ZR69_MonthlyRAGMetric_LARGE_TRADE_REPORTS_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 111
	// The number of large trade reports sent within the agreed timeframe
	RT000ZR69_MonthlyRAGMetric_LARGE_TRADE_REPORTS_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 112
	// The number of investor reports sent
	RT000ZR69_MonthlyRAGMetric_INVESTOR_REPORTS RT000ZR69_MonthlyRAGMetric_MetricID = 113
	// The number of large trade reports sent without error
	RT000ZR69_MonthlyRAGMetric_INVESTOR_REPORTS_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 114
	// The number of contract notes
	RT000ZR69_MonthlyRAGMetric_CONTRACT_NOTES_SENT RT000ZR69_MonthlyRAGMetric_MetricID = 115
	// The accuracy of contract notes sent
	RT000ZR69_MonthlyRAGMetric_CONTRACT_NOTE_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 116
	// The timeliness of contract notes sent
	RT000ZR69_MonthlyRAGMetric_CONTRACT_NOTE_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 117
	// The number of monthly statements sent
	RT000ZR69_MonthlyRAGMetric_MONTHLY_STATEMENTS_SENT RT000ZR69_MonthlyRAGMetric_MetricID = 118
	// The accuracy of monthly statements sent
	RT000ZR69_MonthlyRAGMetric_MONTHLY_STATEMENTS_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 119
	// The timeliness of monthly statements sent
	RT000ZR69_MonthlyRAGMetric_MONTHLY_STATEMENTS_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 120
	// The number of estimate cash reports provided in the reporting period
	RT000ZR69_MonthlyRAGMetric_ESTIMATE_CASH_REPORTS RT000ZR69_MonthlyRAGMetric_MetricID = 121
	// The percentage of estimate cash reports provided in the reporting period without error
	RT000ZR69_MonthlyRAGMetric_ESTIMATE_CASH_REPORTS_ACCURACY RT000ZR69_MonthlyRAGMetric_MetricID = 122
	// The percentage of timeliness of estimate cash reports provided in the reporting period
	RT000ZR69_MonthlyRAGMetric_ESTIMATE_CASH_REPORTS_TIMELINESS RT000ZR69_MonthlyRAGMetric_MetricID = 123
)

// Enum value maps for RT000ZR69_MonthlyRAGMetric_MetricID.
var (
	RT000ZR69_MonthlyRAGMetric_MetricID_name = map[int32]string{
		0:   "METRIC_ID_UNSPECIFIED",
		1:   "TRANSACTIONS_PROCESSED",
		2:   "CORE_TRANSACTIONS_PROCESSED",
		3:   "CORPORATE_ACTION_FINANCIAL_TRANSACTIONS_PROCESSED",
		4:   "OTHER_TRANSACTIONS_PROCESSED",
		5:   "AGGREGATE_TRANSACTIONS_STP_RATE",
		6:   "CORE_TRANSACTIONS_STP_RATE",
		7:   "CORPORATE_ACTION_TRANSACTIONS_STP_RATE",
		8:   "NET_FLOWS",
		9:   "TRANSACTION_PROCESSING_ACCURACY",
		10:  "TRANSACTIONAL_ERRORS",
		11:  "OPERATIONAL_ERRORS",
		12:  "VALUE_OF_ERRORS_REPORTING_CURRENCY",
		13:  "NUMBER_OF_COMPLAINTS",
		14:  "NUMBER_OF_UPHELD_COMPLAINTS",
		15:  "NUMBER_OF_ACCOUNTS",
		16:  "PERCENTAGE_ACCOUNTS_WITH_BALANCES",
		17:  "PERCENTAGE_ACCOUNTS_IN_GOOD_ORDER",
		18:  "INVESTOR_REPORTS_TIMELINESS",
		19:  "NUMBER_OF_PHONE_CALLS_PROCESSED",
		20:  "NUMBER_OF_EMAIL_QUERIES_PROCESSED",
		21:  "ABANDON_RATE",
		22:  "AVERAGE_EMAIL_QUERY_TIME",
		23:  "AVERAGE_PHONE_QUERY_TIME",
		24:  "EMAIL_QUERY_TIMELINESS_RATE",
		25:  "PHONE_QUERY_TIMELINESS_RATE",
		26:  "SYSTEM_ISSUES",
		27:  "PROVIDER_SELF_ASSESSMENT",
		28:  "CUSTOMER_SERVICE_ASSESSMENT",
		29:  "NET_ASSET_VALUE_REPORTING_CURRENCY",
		30:  "NET_ASSET_VALUE_SUBJECT_CURRENCY",
		31:  "NEW_INVESTOR_ACCOUNTS",
		32:  "NEW_HIGH_RISK_INVESTOR_ACCOUNTS",
		33:  "HIGH_RISK_ACCOUNTS",
		34:  "PEP_ACCOUNTS",
		35:  "DORMANT_ACCOUNTS",
		36:  "SUSPICIOUS_ACTIVITY_EXCEPTIONS_RAISED",
		37:  "SANCTIONS_SCREENING_EXCEPTIONS_RAISED",
		38:  "NEGATIVE_MEDIA_SCREENING_EXCEPTIONS_RAISED",
		39:  "AML_OR_FINANCIAL_CRIME_EXCEPTIONS_RAISED",
		40:  "BLOCKED_ACCOUNTS",
		41:  "BLOCKED_ACCOUNTS_AML",
		42:  "RESTRICTED_ACCOUNTS_SANCTIONS",
		43:  "INVESTOR_PAYMENTS",
		44:  "INVESTOR_PAYMENTS_ACCURACY",
		45:  "INVESTOR_PAYMENTS_TIMELINESS",
		46:  "DIVIDEND_PAYOUTS",
		47:  "DIVIDEND_PAYOUT_ACCURACY",
		48:  "DIVIDEND_PAYOUT_TIMELINESS",
		49:  "COMMISSION_AND_TRAILER_FEE_PAYMENTS",
		50:  "COMMISSION_AND_TRAILER_FEE_PAYMENTS_ACCURACY",
		51:  "COMMISSION_AND_TRAILER_FEE_PAYMENTS_TIMELINESS",
		52:  "NEW_ACCOUNT_OPENING_ACCURACY",
		53:  "NEW_ACCOUNT_OPENING_TIMELINESS",
		54:  "NEW_AGENTS_OR_DISTRIBUTORS",
		55:  "NEW_AGENTS_OR_DISTRIBUTOR_ACCURACY",
		56:  "NEW_AGENTS_OR_DISTRIBUTOR_TIMELINESS",
		101: "REPORTS_SENT",
		102: "REPORTS_ACCURACY",
		103: "REPORTS_TIMELINESS",
		104: "ESTIMATE_REPORTS",
		105: "ESTIMATE_REPORTS_ACCURACY",
		106: "ESTIMATE_REPORTS_TIMELINESS",
		107: "CONFIRMED_REPORTS",
		108: "CONFIRMED_REPORTS_ACCURACY",
		109: "CONFIRMED_REPORTS_TIMELINESS",
		110: "LARGE_TRADE_REPORTS",
		111: "LARGE_TRADE_REPORTS_ACCURACY",
		112: "LARGE_TRADE_REPORTS_TIMELINESS",
		113: "INVESTOR_REPORTS",
		114: "INVESTOR_REPORTS_ACCURACY",
		115: "CONTRACT_NOTES_SENT",
		116: "CONTRACT_NOTE_ACCURACY",
		117: "CONTRACT_NOTE_TIMELINESS",
		118: "MONTHLY_STATEMENTS_SENT",
		119: "MONTHLY_STATEMENTS_ACCURACY",
		120: "MONTHLY_STATEMENTS_TIMELINESS",
		121: "ESTIMATE_CASH_REPORTS",
		122: "ESTIMATE_CASH_REPORTS_ACCURACY",
		123: "ESTIMATE_CASH_REPORTS_TIMELINESS",
	}
	RT000ZR69_MonthlyRAGMetric_MetricID_value = map[string]int32{
		"METRIC_ID_UNSPECIFIED":                             0,
		"TRANSACTIONS_PROCESSED":                            1,
		"CORE_TRANSACTIONS_PROCESSED":                       2,
		"CORPORATE_ACTION_FINANCIAL_TRANSACTIONS_PROCESSED": 3,
		"OTHER_TRANSACTIONS_PROCESSED":                      4,
		"AGGREGATE_TRANSACTIONS_STP_RATE":                   5,
		"CORE_TRANSACTIONS_STP_RATE":                        6,
		"CORPORATE_ACTION_TRANSACTIONS_STP_RATE":            7,
		"NET_FLOWS":                                         8,
		"TRANSACTION_PROCESSING_ACCURACY":                   9,
		"TRANSACTIONAL_ERRORS":                              10,
		"OPERATIONAL_ERRORS":                                11,
		"VALUE_OF_ERRORS_REPORTING_CURRENCY":                12,
		"NUMBER_OF_COMPLAINTS":                              13,
		"NUMBER_OF_UPHELD_COMPLAINTS":                       14,
		"NUMBER_OF_ACCOUNTS":                                15,
		"PERCENTAGE_ACCOUNTS_WITH_BALANCES":                 16,
		"PERCENTAGE_ACCOUNTS_IN_GOOD_ORDER":                 17,
		"INVESTOR_REPORTS_TIMELINESS":                       18,
		"NUMBER_OF_PHONE_CALLS_PROCESSED":                   19,
		"NUMBER_OF_EMAIL_QUERIES_PROCESSED":                 20,
		"ABANDON_RATE":                                      21,
		"AVERAGE_EMAIL_QUERY_TIME":                          22,
		"AVERAGE_PHONE_QUERY_TIME":                          23,
		"EMAIL_QUERY_TIMELINESS_RATE":                       24,
		"PHONE_QUERY_TIMELINESS_RATE":                       25,
		"SYSTEM_ISSUES":                                     26,
		"PROVIDER_SELF_ASSESSMENT":                          27,
		"CUSTOMER_SERVICE_ASSESSMENT":                       28,
		"NET_ASSET_VALUE_REPORTING_CURRENCY":                29,
		"NET_ASSET_VALUE_SUBJECT_CURRENCY":                  30,
		"NEW_INVESTOR_ACCOUNTS":                             31,
		"NEW_HIGH_RISK_INVESTOR_ACCOUNTS":                   32,
		"HIGH_RISK_ACCOUNTS":                                33,
		"PEP_ACCOUNTS":                                      34,
		"DORMANT_ACCOUNTS":                                  35,
		"SUSPICIOUS_ACTIVITY_EXCEPTIONS_RAISED":             36,
		"SANCTIONS_SCREENING_EXCEPTIONS_RAISED":             37,
		"NEGATIVE_MEDIA_SCREENING_EXCEPTIONS_RAISED":        38,
		"AML_OR_FINANCIAL_CRIME_EXCEPTIONS_RAISED":          39,
		"BLOCKED_ACCOUNTS":                                  40,
		"BLOCKED_ACCOUNTS_AML":                              41,
		"RESTRICTED_ACCOUNTS_SANCTIONS":                     42,
		"INVESTOR_PAYMENTS":                                 43,
		"INVESTOR_PAYMENTS_ACCURACY":                        44,
		"INVESTOR_PAYMENTS_TIMELINESS":                      45,
		"DIVIDEND_PAYOUTS":                                  46,
		"DIVIDEND_PAYOUT_ACCURACY":                          47,
		"DIVIDEND_PAYOUT_TIMELINESS":                        48,
		"COMMISSION_AND_TRAILER_FEE_PAYMENTS":               49,
		"COMMISSION_AND_TRAILER_FEE_PAYMENTS_ACCURACY":      50,
		"COMMISSION_AND_TRAILER_FEE_PAYMENTS_TIMELINESS":    51,
		"NEW_ACCOUNT_OPENING_ACCURACY":                      52,
		"NEW_ACCOUNT_OPENING_TIMELINESS":                    53,
		"NEW_AGENTS_OR_DISTRIBUTORS":                        54,
		"NEW_AGENTS_OR_DISTRIBUTOR_ACCURACY":                55,
		"NEW_AGENTS_OR_DISTRIBUTOR_TIMELINESS":              56,
		"REPORTS_SENT":                                      101,
		"REPORTS_ACCURACY":                                  102,
		"REPORTS_TIMELINESS":                                103,
		"ESTIMATE_REPORTS":                                  104,
		"ESTIMATE_REPORTS_ACCURACY":                         105,
		"ESTIMATE_REPORTS_TIMELINESS":                       106,
		"CONFIRMED_REPORTS":                                 107,
		"CONFIRMED_REPORTS_ACCURACY":                        108,
		"CONFIRMED_REPORTS_TIMELINESS":                      109,
		"LARGE_TRADE_REPORTS":                               110,
		"LARGE_TRADE_REPORTS_ACCURACY":                      111,
		"LARGE_TRADE_REPORTS_TIMELINESS":                    112,
		"INVESTOR_REPORTS":                                  113,
		"INVESTOR_REPORTS_ACCURACY":                         114,
		"CONTRACT_NOTES_SENT":                               115,
		"CONTRACT_NOTE_ACCURACY":                            116,
		"CONTRACT_NOTE_TIMELINESS":                          117,
		"MONTHLY_STATEMENTS_SENT":                           118,
		"MONTHLY_STATEMENTS_ACCURACY":                       119,
		"MONTHLY_STATEMENTS_TIMELINESS":                     120,
		"ESTIMATE_CASH_REPORTS":                             121,
		"ESTIMATE_CASH_REPORTS_ACCURACY":                    122,
		"ESTIMATE_CASH_REPORTS_TIMELINESS":                  123,
	}
)

func (x RT000ZR69_MonthlyRAGMetric_MetricID) Enum() *RT000ZR69_MonthlyRAGMetric_MetricID {
	p := new(RT000ZR69_MonthlyRAGMetric_MetricID)
	*p = x
	return p
}

func (x RT000ZR69_MonthlyRAGMetric_MetricID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_MonthlyRAGMetric_MetricID) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[0].Descriptor()
}

func (RT000ZR69_MonthlyRAGMetric_MetricID) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[0]
}

func (x RT000ZR69_MonthlyRAGMetric_MetricID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_MonthlyRAGMetric_MetricID.Descriptor instead.
func (RT000ZR69_MonthlyRAGMetric_MetricID) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 0, 0}
}

// The type of value used to measure the metric
type RT000ZR69_MonthlyRAGMetric_ValueType int32

const (
	RT000ZR69_MonthlyRAGMetric_METRIC_TYPE_UNSPECIFIED RT000ZR69_MonthlyRAGMetric_ValueType = 0
	RT000ZR69_MonthlyRAGMetric_NUMBER                  RT000ZR69_MonthlyRAGMetric_ValueType = 1
	RT000ZR69_MonthlyRAGMetric_PERCENTAGE              RT000ZR69_MonthlyRAGMetric_ValueType = 2
	RT000ZR69_MonthlyRAGMetric_CURRENCY                RT000ZR69_MonthlyRAGMetric_ValueType = 3
)

// Enum value maps for RT000ZR69_MonthlyRAGMetric_ValueType.
var (
	RT000ZR69_MonthlyRAGMetric_ValueType_name = map[int32]string{
		0: "METRIC_TYPE_UNSPECIFIED",
		1: "NUMBER",
		2: "PERCENTAGE",
		3: "CURRENCY",
	}
	RT000ZR69_MonthlyRAGMetric_ValueType_value = map[string]int32{
		"METRIC_TYPE_UNSPECIFIED": 0,
		"NUMBER":                  1,
		"PERCENTAGE":              2,
		"CURRENCY":                3,
	}
)

func (x RT000ZR69_MonthlyRAGMetric_ValueType) Enum() *RT000ZR69_MonthlyRAGMetric_ValueType {
	p := new(RT000ZR69_MonthlyRAGMetric_ValueType)
	*p = x
	return p
}

func (x RT000ZR69_MonthlyRAGMetric_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_MonthlyRAGMetric_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[1].Descriptor()
}

func (RT000ZR69_MonthlyRAGMetric_ValueType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[1]
}

func (x RT000ZR69_MonthlyRAGMetric_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_MonthlyRAGMetric_ValueType.Descriptor instead.
func (RT000ZR69_MonthlyRAGMetric_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 0, 1}
}

// Options for how to evaluate the metric
type RT000ZR69_MonthlyRAGMetric_EvaluationType int32

const (
	RT000ZR69_MonthlyRAGMetric_EVALUATION_TYPE_UNSPECIFIED RT000ZR69_MonthlyRAGMetric_EvaluationType = 0
	// A higher result is more favorable
	RT000ZR69_MonthlyRAGMetric_MAXIMISE RT000ZR69_MonthlyRAGMetric_EvaluationType = 1
	// A lower result is more favorable
	RT000ZR69_MonthlyRAGMetric_MINIMISE RT000ZR69_MonthlyRAGMetric_EvaluationType = 2
)

// Enum value maps for RT000ZR69_MonthlyRAGMetric_EvaluationType.
var (
	RT000ZR69_MonthlyRAGMetric_EvaluationType_name = map[int32]string{
		0: "EVALUATION_TYPE_UNSPECIFIED",
		1: "MAXIMISE",
		2: "MINIMISE",
	}
	RT000ZR69_MonthlyRAGMetric_EvaluationType_value = map[string]int32{
		"EVALUATION_TYPE_UNSPECIFIED": 0,
		"MAXIMISE":                    1,
		"MINIMISE":                    2,
	}
)

func (x RT000ZR69_MonthlyRAGMetric_EvaluationType) Enum() *RT000ZR69_MonthlyRAGMetric_EvaluationType {
	p := new(RT000ZR69_MonthlyRAGMetric_EvaluationType)
	*p = x
	return p
}

func (x RT000ZR69_MonthlyRAGMetric_EvaluationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_MonthlyRAGMetric_EvaluationType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[2].Descriptor()
}

func (RT000ZR69_MonthlyRAGMetric_EvaluationType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[2]
}

func (x RT000ZR69_MonthlyRAGMetric_EvaluationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_MonthlyRAGMetric_EvaluationType.Descriptor instead.
func (RT000ZR69_MonthlyRAGMetric_EvaluationType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 0, 2}
}

// Types of account holders
type RT000ZR69_Account_AccountType int32

const (
	// AccountType unspecified
	RT000ZR69_Account_TYPE_UNSPECIFIED RT000ZR69_Account_AccountType = 0
	// The account holder is a natural person
	RT000ZR69_Account_NATURAL_PERSON RT000ZR69_Account_AccountType = 1
	// The account holder is a legal entity
	RT000ZR69_Account_LEGAL_ENTITY RT000ZR69_Account_AccountType = 2
)

// Enum value maps for RT000ZR69_Account_AccountType.
var (
	RT000ZR69_Account_AccountType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NATURAL_PERSON",
		2: "LEGAL_ENTITY",
	}
	RT000ZR69_Account_AccountType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"NATURAL_PERSON":   1,
		"LEGAL_ENTITY":     2,
	}
)

func (x RT000ZR69_Account_AccountType) Enum() *RT000ZR69_Account_AccountType {
	p := new(RT000ZR69_Account_AccountType)
	*p = x
	return p
}

func (x RT000ZR69_Account_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Account_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[3].Descriptor()
}

func (RT000ZR69_Account_AccountType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[3]
}

func (x RT000ZR69_Account_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Account_AccountType.Descriptor instead.
func (RT000ZR69_Account_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Enumerations of the status of the account
type RT000ZR69_Account_Status int32

const (
	// Account status unspecified
	RT000ZR69_Account_STATE_UNSPECIFIED RT000ZR69_Account_Status = 0
	// Account status active
	RT000ZR69_Account_ACTIVE RT000ZR69_Account_Status = 1
	// Account status inactive
	RT000ZR69_Account_INACTIVE RT000ZR69_Account_Status = 2
	// The account is blocked
	RT000ZR69_Account_BLOCKED RT000ZR69_Account_Status = 3
	// The account is in the process of being onboarded, but not blocked
	RT000ZR69_Account_ONBOARDING RT000ZR69_Account_Status = 4
)

// Enum value maps for RT000ZR69_Account_Status.
var (
	RT000ZR69_Account_Status_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "BLOCKED",
		4: "ONBOARDING",
	}
	RT000ZR69_Account_Status_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"INACTIVE":          2,
		"BLOCKED":           3,
		"ONBOARDING":        4,
	}
)

func (x RT000ZR69_Account_Status) Enum() *RT000ZR69_Account_Status {
	p := new(RT000ZR69_Account_Status)
	*p = x
	return p
}

func (x RT000ZR69_Account_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Account_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[4].Descriptor()
}

func (RT000ZR69_Account_Status) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[4]
}

func (x RT000ZR69_Account_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Account_Status.Descriptor instead.
func (RT000ZR69_Account_Status) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 1, 1}
}

// Enumerations of the risk categorizations
type RT000ZR69_Account_Risk int32

const (
	// Client risk unspecified
	RT000ZR69_Account_RISK_UNSPECIFIED RT000ZR69_Account_Risk = 0
	// The client is deemed low risk
	RT000ZR69_Account_LOW RT000ZR69_Account_Risk = 1
	// The client is deemed medium risk
	RT000ZR69_Account_MEDIUM RT000ZR69_Account_Risk = 2
	// The client is deemed high risk
	RT000ZR69_Account_HIGH RT000ZR69_Account_Risk = 3
)

// Enum value maps for RT000ZR69_Account_Risk.
var (
	RT000ZR69_Account_Risk_name = map[int32]string{
		0: "RISK_UNSPECIFIED",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	RT000ZR69_Account_Risk_value = map[string]int32{
		"RISK_UNSPECIFIED": 0,
		"LOW":              1,
		"MEDIUM":           2,
		"HIGH":             3,
	}
)

func (x RT000ZR69_Account_Risk) Enum() *RT000ZR69_Account_Risk {
	p := new(RT000ZR69_Account_Risk)
	*p = x
	return p
}

func (x RT000ZR69_Account_Risk) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Account_Risk) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[5].Descriptor()
}

func (RT000ZR69_Account_Risk) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[5]
}

func (x RT000ZR69_Account_Risk) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Account_Risk.Descriptor instead.
func (RT000ZR69_Account_Risk) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 1, 2}
}

// Types of account holders
type RT000ZR69_Transaction_AccountType int32

const (
	// AccountType unspecified
	RT000ZR69_Transaction_TYPE_UNSPECIFIED RT000ZR69_Transaction_AccountType = 0
	// The account holder is a natural person
	RT000ZR69_Transaction_NATURAL_PERSON RT000ZR69_Transaction_AccountType = 1
	// The account holder is a legal entity
	RT000ZR69_Transaction_LEGAL_ENTITY RT000ZR69_Transaction_AccountType = 2
)

// Enum value maps for RT000ZR69_Transaction_AccountType.
var (
	RT000ZR69_Transaction_AccountType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NATURAL_PERSON",
		2: "LEGAL_ENTITY",
	}
	RT000ZR69_Transaction_AccountType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"NATURAL_PERSON":   1,
		"LEGAL_ENTITY":     2,
	}
)

func (x RT000ZR69_Transaction_AccountType) Enum() *RT000ZR69_Transaction_AccountType {
	p := new(RT000ZR69_Transaction_AccountType)
	*p = x
	return p
}

func (x RT000ZR69_Transaction_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Transaction_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[6].Descriptor()
}

func (RT000ZR69_Transaction_AccountType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[6]
}

func (x RT000ZR69_Transaction_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Transaction_AccountType.Descriptor instead.
func (RT000ZR69_Transaction_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Enumerations of financial identifiers
type RT000ZR69_Transaction_ShareClassIdentifierTypes int32

const (
	// Source not specified by the user.
	RT000ZR69_Transaction_IDENTIFIER_UNSPECIFIED RT000ZR69_Transaction_ShareClassIdentifierTypes = 0
	// ISO 6166 code of ISIN when available
	RT000ZR69_Transaction_ISIN RT000ZR69_Transaction_ShareClassIdentifierTypes = 1
	// CUSIP - The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies
	RT000ZR69_Transaction_CUSIP RT000ZR69_Transaction_ShareClassIdentifierTypes = 2
	// SEDOL - Stock Exchange Daily Official List for the London Stock Exchange
	RT000ZR69_Transaction_SEDOL RT000ZR69_Transaction_ShareClassIdentifierTypes = 3
	// WKN - Wertpapier Kenn-Nummer, the alphanumeric German identification number
	RT000ZR69_Transaction_WKN RT000ZR69_Transaction_ShareClassIdentifierTypes = 4
	// Bloomberg Ticker - Bloomberg letters code that identify a company's securities
	RT000ZR69_Transaction_BBG_TICKER RT000ZR69_Transaction_ShareClassIdentifierTypes = 5
	// BBGID - The Bloomberg Global ID
	RT000ZR69_Transaction_BBGID RT000ZR69_Transaction_ShareClassIdentifierTypes = 6
	// Reuters RIC - Reuters instrument code
	RT000ZR69_Transaction_RIC RT000ZR69_Transaction_ShareClassIdentifierTypes = 7
	// FIGI - (Financial Instrument Global Identifier). To look up the FIGI navigate to https://www.openfigi.com/.
	RT000ZR69_Transaction_FIGI RT000ZR69_Transaction_ShareClassIdentifierTypes = 8
	// LEI - Legal Entity Identifier
	RT000ZR69_Transaction_LEI RT000ZR69_Transaction_ShareClassIdentifierTypes = 9
	// PermID - (Refinitiv Permanent Identifier). To look up the PermID navigate to https://permid.org/
	RT000ZR69_Transaction_PERM_ID RT000ZR69_Transaction_ShareClassIdentifierTypes = 10
)

// Enum value maps for RT000ZR69_Transaction_ShareClassIdentifierTypes.
var (
	RT000ZR69_Transaction_ShareClassIdentifierTypes_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000ZR69_Transaction_ShareClassIdentifierTypes_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000ZR69_Transaction_ShareClassIdentifierTypes) Enum() *RT000ZR69_Transaction_ShareClassIdentifierTypes {
	p := new(RT000ZR69_Transaction_ShareClassIdentifierTypes)
	*p = x
	return p
}

func (x RT000ZR69_Transaction_ShareClassIdentifierTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Transaction_ShareClassIdentifierTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[7].Descriptor()
}

func (RT000ZR69_Transaction_ShareClassIdentifierTypes) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[7]
}

func (x RT000ZR69_Transaction_ShareClassIdentifierTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Transaction_ShareClassIdentifierTypes.Descriptor instead.
func (RT000ZR69_Transaction_ShareClassIdentifierTypes) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2, 1}
}

// Enumerations of transaction types
type RT000ZR69_Transaction_TransactionType int32

const (
	// The transaction type is unspecified
	RT000ZR69_Transaction_TRANSACTION_TYPE_UNSPECIFIED RT000ZR69_Transaction_TransactionType = 0
	// Purchase of shares in the specified share class
	RT000ZR69_Transaction_SUBSCRIPTION RT000ZR69_Transaction_TransactionType = 1
	// Redemption of shares from the specified share class
	RT000ZR69_Transaction_REDEMPTION RT000ZR69_Transaction_TransactionType = 2
	// Movement between accounts for a single share class (ISIN), for example from PartyA to PartyB
	RT000ZR69_Transaction_TRANSFER RT000ZR69_Transaction_TransactionType = 3
	// Movement between share classes (i.e. ISIN) for a single account, for example PartyA switches their holdings of ShareClassA for holdings of ShareClassB
	RT000ZR69_Transaction_SWITCH RT000ZR69_Transaction_TransactionType = 4
)

// Enum value maps for RT000ZR69_Transaction_TransactionType.
var (
	RT000ZR69_Transaction_TransactionType_name = map[int32]string{
		0: "TRANSACTION_TYPE_UNSPECIFIED",
		1: "SUBSCRIPTION",
		2: "REDEMPTION",
		3: "TRANSFER",
		4: "SWITCH",
	}
	RT000ZR69_Transaction_TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_UNSPECIFIED": 0,
		"SUBSCRIPTION":                 1,
		"REDEMPTION":                   2,
		"TRANSFER":                     3,
		"SWITCH":                       4,
	}
)

func (x RT000ZR69_Transaction_TransactionType) Enum() *RT000ZR69_Transaction_TransactionType {
	p := new(RT000ZR69_Transaction_TransactionType)
	*p = x
	return p
}

func (x RT000ZR69_Transaction_TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Transaction_TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[8].Descriptor()
}

func (RT000ZR69_Transaction_TransactionType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[8]
}

func (x RT000ZR69_Transaction_TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Transaction_TransactionType.Descriptor instead.
func (RT000ZR69_Transaction_TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2, 2}
}

// Enumerations of transaction source types
type RT000ZR69_Transaction_SourceType int32

const (
	// Source type unspecified
	RT000ZR69_Transaction_SOURCE_TYPE_UNSPECIFIED RT000ZR69_Transaction_SourceType = 0
	// Fax
	RT000ZR69_Transaction_FAX RT000ZR69_Transaction_SourceType = 1
	// Email
	RT000ZR69_Transaction_EMAIL RT000ZR69_Transaction_SourceType = 2
	// Telephone
	RT000ZR69_Transaction_TELEPHONE RT000ZR69_Transaction_SourceType = 3
	// SWIFT
	RT000ZR69_Transaction_SWIFT RT000ZR69_Transaction_SourceType = 4
	// API
	RT000ZR69_Transaction_API RT000ZR69_Transaction_SourceType = 5
	// BlockChain
	RT000ZR69_Transaction_BLOCK_CHAIN RT000ZR69_Transaction_SourceType = 6
)

// Enum value maps for RT000ZR69_Transaction_SourceType.
var (
	RT000ZR69_Transaction_SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "FAX",
		2: "EMAIL",
		3: "TELEPHONE",
		4: "SWIFT",
		5: "API",
		6: "BLOCK_CHAIN",
	}
	RT000ZR69_Transaction_SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"FAX":                     1,
		"EMAIL":                   2,
		"TELEPHONE":               3,
		"SWIFT":                   4,
		"API":                     5,
		"BLOCK_CHAIN":             6,
	}
)

func (x RT000ZR69_Transaction_SourceType) Enum() *RT000ZR69_Transaction_SourceType {
	p := new(RT000ZR69_Transaction_SourceType)
	*p = x
	return p
}

func (x RT000ZR69_Transaction_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Transaction_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[9].Descriptor()
}

func (RT000ZR69_Transaction_SourceType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[9]
}

func (x RT000ZR69_Transaction_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Transaction_SourceType.Descriptor instead.
func (RT000ZR69_Transaction_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2, 3}
}

// Enumerations of impact of the error
type RT000ZR69_Error_Impact int32

const (
	RT000ZR69_Error_IMPACT_UNSPECIFIED RT000ZR69_Error_Impact = 0
	RT000ZR69_Error_WITHOUT_IMPACT     RT000ZR69_Error_Impact = 1
	RT000ZR69_Error_IMMATERIAL         RT000ZR69_Error_Impact = 2
	RT000ZR69_Error_MATERIAL           RT000ZR69_Error_Impact = 3
)

// Enum value maps for RT000ZR69_Error_Impact.
var (
	RT000ZR69_Error_Impact_name = map[int32]string{
		0: "IMPACT_UNSPECIFIED",
		1: "WITHOUT_IMPACT",
		2: "IMMATERIAL",
		3: "MATERIAL",
	}
	RT000ZR69_Error_Impact_value = map[string]int32{
		"IMPACT_UNSPECIFIED": 0,
		"WITHOUT_IMPACT":     1,
		"IMMATERIAL":         2,
		"MATERIAL":           3,
	}
)

func (x RT000ZR69_Error_Impact) Enum() *RT000ZR69_Error_Impact {
	p := new(RT000ZR69_Error_Impact)
	*p = x
	return p
}

func (x RT000ZR69_Error_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000ZR69_Error_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000ZR69_proto_enumTypes[10].Descriptor()
}

func (RT000ZR69_Error_Impact) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000ZR69_proto_enumTypes[10]
}

func (x RT000ZR69_Error_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000ZR69_Error_Impact.Descriptor instead.
func (RT000ZR69_Error_Impact) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 5, 0}
}

// Transfer Agency Monthly KPI & MI Report for governance oversight and reporting for UCITS funds
type RT000ZR69 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KPIs & other key quantitative metrics for the current and preceding 13 periods
	Metrics []*RT000ZR69_MonthlyRAGMetric `protobuf:"bytes,20,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Recent late trade events. Convention is to report last twelve months.
	LateTradeEvents []*RT000ZR69_LateTradeEvent `protobuf:"bytes,53,rep,name=late_trade_events,json=lateTradeEvents,proto3" json:"late_trade_events,omitempty"`
	// Recent complains. Convention is to report last thirteen months
	Complaints []*RT000ZR69_Complaint `protobuf:"bytes,54,rep,name=complaints,proto3" json:"complaints,omitempty"`
	// List of suspicious transactions in the format:
	SuspiciousTransactions []*RT000ZR69_Transaction `protobuf:"bytes,55,rep,name=suspicious_transactions,json=suspiciousTransactions,proto3" json:"suspicious_transactions,omitempty"`
	// List of transactions related to PEP accounts
	PepTransactions []*RT000ZR69_Transaction `protobuf:"bytes,56,rep,name=pep_transactions,json=pepTransactions,proto3" json:"pep_transactions,omitempty"`
	// List of transactions with a late cash receipt
	LateCashReceiptTransactions []*RT000ZR69_Transaction `protobuf:"bytes,57,rep,name=late_cash_receipt_transactions,json=lateCashReceiptTransactions,proto3" json:"late_cash_receipt_transactions,omitempty"`
	// The largest N account holders by AUM.
	LargestShareholders []*RT000ZR69_Account `protobuf:"bytes,71,rep,name=largest_shareholders,json=largestShareholders,proto3" json:"largest_shareholders,omitempty"`
	// List of blocked accounts
	BlockedAccounts []*RT000ZR69_Account `protobuf:"bytes,72,rep,name=blocked_accounts,json=blockedAccounts,proto3" json:"blocked_accounts,omitempty"`
	// List of PEP accounts
	PepAccounts []*RT000ZR69_Account `protobuf:"bytes,73,rep,name=pep_accounts,json=pepAccounts,proto3" json:"pep_accounts,omitempty"`
	// List of new accounts last 3 months
	NewAccountsLastThreeMonths []*RT000ZR69_Account `protobuf:"bytes,74,rep,name=new_accounts_last_three_months,json=newAccountsLastThreeMonths,proto3" json:"new_accounts_last_three_months,omitempty"`
	// List of high risk accounts
	HighRiskAccounts []*RT000ZR69_Account `protobuf:"bytes,75,rep,name=high_risk_accounts,json=highRiskAccounts,proto3" json:"high_risk_accounts,omitempty"`
	// Largest N accounts by transaction volume
	LargestAccountsByTransactionVolume []*RT000ZR69_Account `protobuf:"bytes,76,rep,name=largest_accounts_by_transaction_volume,json=largestAccountsByTransactionVolume,proto3" json:"largest_accounts_by_transaction_volume,omitempty"`
	// Accounts that have holdings and have dealt within the last thirteen months
	ActiveAccounts []*RT000ZR69_Account `protobuf:"bytes,77,rep,name=active_accounts,json=activeAccounts,proto3" json:"active_accounts,omitempty"`
	// Accounts blocked for AML reasons
	AccountsBlockedForAmlReasons []*RT000ZR69_Account `protobuf:"bytes,78,rep,name=accounts_blocked_for_aml_reasons,json=accountsBlockedForAmlReasons,proto3" json:"accounts_blocked_for_aml_reasons,omitempty"`
	// Accounts created in the last thirteen months from high risk countries
	NewAccountsFromHighRiskCountries []*RT000ZR69_Account `protobuf:"bytes,79,rep,name=new_accounts_from_high_risk_countries,json=newAccountsFromHighRiskCountries,proto3" json:"new_accounts_from_high_risk_countries,omitempty"`
	// Information on transfer agency errors
	Errors []*RT000ZR69_Error `protobuf:"bytes,80,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RT000ZR69) Reset() {
	*x = RT000ZR69{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69) ProtoMessage() {}

func (x *RT000ZR69) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69.ProtoReflect.Descriptor instead.
func (*RT000ZR69) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0}
}

func (x *RT000ZR69) GetMetrics() []*RT000ZR69_MonthlyRAGMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *RT000ZR69) GetLateTradeEvents() []*RT000ZR69_LateTradeEvent {
	if x != nil {
		return x.LateTradeEvents
	}
	return nil
}

func (x *RT000ZR69) GetComplaints() []*RT000ZR69_Complaint {
	if x != nil {
		return x.Complaints
	}
	return nil
}

func (x *RT000ZR69) GetSuspiciousTransactions() []*RT000ZR69_Transaction {
	if x != nil {
		return x.SuspiciousTransactions
	}
	return nil
}

func (x *RT000ZR69) GetPepTransactions() []*RT000ZR69_Transaction {
	if x != nil {
		return x.PepTransactions
	}
	return nil
}

func (x *RT000ZR69) GetLateCashReceiptTransactions() []*RT000ZR69_Transaction {
	if x != nil {
		return x.LateCashReceiptTransactions
	}
	return nil
}

func (x *RT000ZR69) GetLargestShareholders() []*RT000ZR69_Account {
	if x != nil {
		return x.LargestShareholders
	}
	return nil
}

func (x *RT000ZR69) GetBlockedAccounts() []*RT000ZR69_Account {
	if x != nil {
		return x.BlockedAccounts
	}
	return nil
}

func (x *RT000ZR69) GetPepAccounts() []*RT000ZR69_Account {
	if x != nil {
		return x.PepAccounts
	}
	return nil
}

func (x *RT000ZR69) GetNewAccountsLastThreeMonths() []*RT000ZR69_Account {
	if x != nil {
		return x.NewAccountsLastThreeMonths
	}
	return nil
}

func (x *RT000ZR69) GetHighRiskAccounts() []*RT000ZR69_Account {
	if x != nil {
		return x.HighRiskAccounts
	}
	return nil
}

func (x *RT000ZR69) GetLargestAccountsByTransactionVolume() []*RT000ZR69_Account {
	if x != nil {
		return x.LargestAccountsByTransactionVolume
	}
	return nil
}

func (x *RT000ZR69) GetActiveAccounts() []*RT000ZR69_Account {
	if x != nil {
		return x.ActiveAccounts
	}
	return nil
}

func (x *RT000ZR69) GetAccountsBlockedForAmlReasons() []*RT000ZR69_Account {
	if x != nil {
		return x.AccountsBlockedForAmlReasons
	}
	return nil
}

func (x *RT000ZR69) GetNewAccountsFromHighRiskCountries() []*RT000ZR69_Account {
	if x != nil {
		return x.NewAccountsFromHighRiskCountries
	}
	return nil
}

func (x *RT000ZR69) GetErrors() []*RT000ZR69_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Batch set of RT000ZR69 responses
type RT000ZR69Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*RT000ZR69 `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *RT000ZR69Batch) Reset() {
	*x = RT000ZR69Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69Batch) ProtoMessage() {}

func (x *RT000ZR69Batch) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69Batch.ProtoReflect.Descriptor instead.
func (*RT000ZR69Batch) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{1}
}

func (x *RT000ZR69Batch) GetResponse() []*RT000ZR69 {
	if x != nil {
		return x.Response
	}
	return nil
}

// Definition of a monthly metric
type RT000ZR69_MonthlyRAGMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The year of the metric
	Year int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	// The month of the metric
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	// The date metric was produced
	ProductionDate *date.Date `protobuf:"bytes,3,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
	// The legal identifier of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,4,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// Names of the relevant sub-fund (if applicable)
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,5,opt,name=fund,proto3" json:"fund,omitempty"`
	// The common identifier of the subject.
	// In most instances the subject (i.e the entity being measured by the metric) should be the umbrella for which the report is provided.
	// Metrics related to specific sub-funds, however, can be reported alongside the aggregated values
	// so long as the this is consistently applied
	SubjectId string `protobuf:"bytes,6,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	// The human readable name of the subject of the metric
	SubjectName string `protobuf:"bytes,7,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	// The identifier of what the metric measures
	MetricId RT000ZR69_MonthlyRAGMetric_MetricID `protobuf:"varint,8,opt,name=metric_id,json=metricId,proto3,enum=standards.open.v1.RT000ZR69_MonthlyRAGMetric_MetricID" json:"metric_id,omitempty"`
	// Enumeration for how to interpret the metric value
	ValueType RT000ZR69_MonthlyRAGMetric_ValueType `protobuf:"varint,9,opt,name=value_type,json=valueType,proto3,enum=standards.open.v1.RT000ZR69_MonthlyRAGMetric_ValueType" json:"value_type,omitempty"`
	// The currency code is required to comply with the 3-letter ISO 4217 standard.
	// The ISO 4217 is a set of 3-letter currency codes to represent countries' currencies.
	// Make sure the provided currency code is in uppercase.
	// Example: 'USD' for United States Dollar, 'GBP' for Great Britain Pound, 'EUR' for Euro, etc.
	CurrencyCode string `protobuf:"bytes,10,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// The value of the metric
	Metric float64 `protobuf:"fixed64,11,opt,name=metric,proto3" json:"metric,omitempty"`
	// How to evaluate the metric (i.e. is a higher or lower value more favorable)
	EvaluationType RT000ZR69_MonthlyRAGMetric_EvaluationType `protobuf:"varint,12,opt,name=evaluation_type,json=evaluationType,proto3,enum=standards.open.v1.RT000ZR69_MonthlyRAGMetric_EvaluationType" json:"evaluation_type,omitempty"`
	// The "RED/AMBER/GREEN" designation if applicable
	Rag RedAmberGreen `protobuf:"varint,13,opt,name=rag,proto3,enum=standards.open.v1.RedAmberGreen" json:"rag,omitempty"`
	// The amber cutoff (i.e. the value above which the metric is no longer classified as "RED") if applicable
	AmberCutoff float64 `protobuf:"fixed64,14,opt,name=amber_cutoff,json=amberCutoff,proto3" json:"amber_cutoff,omitempty"`
	// The green cutoff (i.e. the value above which the metric is no longer classified as "AMBER")  if applicable
	GreenCutoff float64 `protobuf:"fixed64,15,opt,name=green_cutoff,json=greenCutoff,proto3" json:"green_cutoff,omitempty"`
	// Optional. The name of the provider
	Provider string `protobuf:"bytes,20,opt,name=provider,proto3" json:"provider,omitempty"`
	// Optional. The metric ID used by the provider
	ProviderMetricId string `protobuf:"bytes,21,opt,name=provider_metric_id,json=providerMetricId,proto3" json:"provider_metric_id,omitempty"`
	// Optional. The KPI name used by the provider
	ProviderMetricName string `protobuf:"bytes,22,opt,name=provider_metric_name,json=providerMetricName,proto3" json:"provider_metric_name,omitempty"`
	// Optional. Any comments attached to the metric
	Comments string `protobuf:"bytes,99,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000ZR69_MonthlyRAGMetric) Reset() {
	*x = RT000ZR69_MonthlyRAGMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_MonthlyRAGMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_MonthlyRAGMetric) ProtoMessage() {}

func (x *RT000ZR69_MonthlyRAGMetric) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_MonthlyRAGMetric.ProtoReflect.Descriptor instead.
func (*RT000ZR69_MonthlyRAGMetric) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000ZR69_MonthlyRAGMetric) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RT000ZR69_MonthlyRAGMetric) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *RT000ZR69_MonthlyRAGMetric) GetProductionDate() *date.Date {
	if x != nil {
		return x.ProductionDate
	}
	return nil
}

func (x *RT000ZR69_MonthlyRAGMetric) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000ZR69_MonthlyRAGMetric) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000ZR69_MonthlyRAGMetric) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *RT000ZR69_MonthlyRAGMetric) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *RT000ZR69_MonthlyRAGMetric) GetMetricId() RT000ZR69_MonthlyRAGMetric_MetricID {
	if x != nil {
		return x.MetricId
	}
	return RT000ZR69_MonthlyRAGMetric_METRIC_ID_UNSPECIFIED
}

func (x *RT000ZR69_MonthlyRAGMetric) GetValueType() RT000ZR69_MonthlyRAGMetric_ValueType {
	if x != nil {
		return x.ValueType
	}
	return RT000ZR69_MonthlyRAGMetric_METRIC_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_MonthlyRAGMetric) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *RT000ZR69_MonthlyRAGMetric) GetMetric() float64 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *RT000ZR69_MonthlyRAGMetric) GetEvaluationType() RT000ZR69_MonthlyRAGMetric_EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return RT000ZR69_MonthlyRAGMetric_EVALUATION_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_MonthlyRAGMetric) GetRag() RedAmberGreen {
	if x != nil {
		return x.Rag
	}
	return RedAmberGreen_RAG_UNSPECIFIED
}

func (x *RT000ZR69_MonthlyRAGMetric) GetAmberCutoff() float64 {
	if x != nil {
		return x.AmberCutoff
	}
	return 0
}

func (x *RT000ZR69_MonthlyRAGMetric) GetGreenCutoff() float64 {
	if x != nil {
		return x.GreenCutoff
	}
	return 0
}

func (x *RT000ZR69_MonthlyRAGMetric) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RT000ZR69_MonthlyRAGMetric) GetProviderMetricId() string {
	if x != nil {
		return x.ProviderMetricId
	}
	return ""
}

func (x *RT000ZR69_MonthlyRAGMetric) GetProviderMetricName() string {
	if x != nil {
		return x.ProviderMetricName
	}
	return ""
}

func (x *RT000ZR69_MonthlyRAGMetric) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

// The definition of an account resource
type RT000ZR69_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date as of which the information is being reported
	ReportingDate *date.Date `protobuf:"bytes,101,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,102,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,103,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,104,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,105,opt,name=fund,proto3" json:"fund,omitempty"`
	// The resource name of the client
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The type of account
	AccountType RT000ZR69_Account_AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=standards.open.v1.RT000ZR69_Account_AccountType" json:"account_type,omitempty"`
	// The internal unique identifier of the account
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The status of the account (i.e. active or inactive)
	Status RT000ZR69_Account_Status `protobuf:"varint,6,opt,name=status,proto3,enum=standards.open.v1.RT000ZR69_Account_Status" json:"status,omitempty"`
	// The address of the account
	Address string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// The risk categorization of the client (i.e. low, medium or high)
	Risk RT000ZR69_Account_Risk `protobuf:"varint,8,opt,name=risk,proto3,enum=standards.open.v1.RT000ZR69_Account_Risk" json:"risk,omitempty"`
	// Whether the client has a purchase stop
	PurchaseStop *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=purchase_stop,json=purchaseStop,proto3" json:"purchase_stop,omitempty"`
	// Whether the client has a redemption stop
	RedemptionStop *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=redemption_stop,json=redemptionStop,proto3" json:"redemption_stop,omitempty"`
	// Whether the client has a stop on redemptions settling
	StopRedSettle *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=stop_red_settle,json=stopRedSettle,proto3" json:"stop_red_settle,omitempty"`
	// Whether the client has a stop on transfers in
	TransferInwardStop *wrapperspb.BoolValue `protobuf:"bytes,12,opt,name=transfer_inward_stop,json=transferInwardStop,proto3" json:"transfer_inward_stop,omitempty"`
	// Whether the client has a stop on transfers out
	TransferOutStop *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=transfer_out_stop,json=transferOutStop,proto3" json:"transfer_out_stop,omitempty"`
	// Whether there is a stop on the account for PEP reasons
	StopPep *wrapperspb.BoolValue `protobuf:"bytes,14,opt,name=stop_pep,json=stopPep,proto3" json:"stop_pep,omitempty"`
	// Whether there is a stop on the account for AML reasons
	StopAml *wrapperspb.BoolValue `protobuf:"bytes,15,opt,name=stop_aml,json=stopAml,proto3" json:"stop_aml,omitempty"`
	// If there is a stop, what is the stop date
	StopDate *date.Date `protobuf:"bytes,16,opt,name=stop_date,json=stopDate,proto3" json:"stop_date,omitempty"`
	// The share of total shares - unsettled
	PercentTotalShares float64 `protobuf:"fixed64,18,opt,name=percent_total_shares,json=percentTotalShares,proto3" json:"percent_total_shares,omitempty"`
	// The total value of the account
	AccountValue float64 `protobuf:"fixed64,19,opt,name=account_value,json=accountValue,proto3" json:"account_value,omitempty"`
	// The share of total aum - unsettled
	PercentTotalAum float64 `protobuf:"fixed64,20,opt,name=percent_total_aum,json=percentTotalAum,proto3" json:"percent_total_aum,omitempty"`
	// The date the account was created
	AccountCreationDate *date.Date `protobuf:"bytes,22,opt,name=account_creation_date,json=accountCreationDate,proto3" json:"account_creation_date,omitempty"`
	// The date the account was active and onboarded
	AccountActiveDate *date.Date `protobuf:"bytes,23,opt,name=account_active_date,json=accountActiveDate,proto3" json:"account_active_date,omitempty"`
	// The date of the last AML refresh
	LastAmlRefreshDate *date.Date `protobuf:"bytes,24,opt,name=last_aml_refresh_date,json=lastAmlRefreshDate,proto3" json:"last_aml_refresh_date,omitempty"`
}

func (x *RT000ZR69_Account) Reset() {
	*x = RT000ZR69_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Account) ProtoMessage() {}

func (x *RT000ZR69_Account) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Account.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Account) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT000ZR69_Account) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000ZR69_Account) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000ZR69_Account) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000ZR69_Account) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000ZR69_Account) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000ZR69_Account) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RT000ZR69_Account) GetAccountType() RT000ZR69_Account_AccountType {
	if x != nil {
		return x.AccountType
	}
	return RT000ZR69_Account_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_Account) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RT000ZR69_Account) GetStatus() RT000ZR69_Account_Status {
	if x != nil {
		return x.Status
	}
	return RT000ZR69_Account_STATE_UNSPECIFIED
}

func (x *RT000ZR69_Account) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RT000ZR69_Account) GetRisk() RT000ZR69_Account_Risk {
	if x != nil {
		return x.Risk
	}
	return RT000ZR69_Account_RISK_UNSPECIFIED
}

func (x *RT000ZR69_Account) GetPurchaseStop() *wrapperspb.BoolValue {
	if x != nil {
		return x.PurchaseStop
	}
	return nil
}

func (x *RT000ZR69_Account) GetRedemptionStop() *wrapperspb.BoolValue {
	if x != nil {
		return x.RedemptionStop
	}
	return nil
}

func (x *RT000ZR69_Account) GetStopRedSettle() *wrapperspb.BoolValue {
	if x != nil {
		return x.StopRedSettle
	}
	return nil
}

func (x *RT000ZR69_Account) GetTransferInwardStop() *wrapperspb.BoolValue {
	if x != nil {
		return x.TransferInwardStop
	}
	return nil
}

func (x *RT000ZR69_Account) GetTransferOutStop() *wrapperspb.BoolValue {
	if x != nil {
		return x.TransferOutStop
	}
	return nil
}

func (x *RT000ZR69_Account) GetStopPep() *wrapperspb.BoolValue {
	if x != nil {
		return x.StopPep
	}
	return nil
}

func (x *RT000ZR69_Account) GetStopAml() *wrapperspb.BoolValue {
	if x != nil {
		return x.StopAml
	}
	return nil
}

func (x *RT000ZR69_Account) GetStopDate() *date.Date {
	if x != nil {
		return x.StopDate
	}
	return nil
}

func (x *RT000ZR69_Account) GetPercentTotalShares() float64 {
	if x != nil {
		return x.PercentTotalShares
	}
	return 0
}

func (x *RT000ZR69_Account) GetAccountValue() float64 {
	if x != nil {
		return x.AccountValue
	}
	return 0
}

func (x *RT000ZR69_Account) GetPercentTotalAum() float64 {
	if x != nil {
		return x.PercentTotalAum
	}
	return 0
}

func (x *RT000ZR69_Account) GetAccountCreationDate() *date.Date {
	if x != nil {
		return x.AccountCreationDate
	}
	return nil
}

func (x *RT000ZR69_Account) GetAccountActiveDate() *date.Date {
	if x != nil {
		return x.AccountActiveDate
	}
	return nil
}

func (x *RT000ZR69_Account) GetLastAmlRefreshDate() *date.Date {
	if x != nil {
		return x.LastAmlRefreshDate
	}
	return nil
}

// Definition of a transaction
type RT000ZR69_Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date as of which the information is being reported
	ReportingDate *date.Date `protobuf:"bytes,101,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,102,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,103,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,104,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,105,opt,name=fund,proto3" json:"fund,omitempty"`
	// The resource name of the client
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// The type of account
	AccountType RT000ZR69_Transaction_AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=standards.open.v1.RT000ZR69_Transaction_AccountType" json:"account_type,omitempty"`
	// The internal unique identifier of the account
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The global identifier of the share class
	ShareClassId string `protobuf:"bytes,4,opt,name=share_class_id,json=shareClassId,proto3" json:"share_class_id,omitempty"`
	// Codification chosen to identify the share class
	ShareClassIdType RT000ZR69_Transaction_ShareClassIdentifierTypes `protobuf:"varint,5,opt,name=share_class_id_type,json=shareClassIdType,proto3,enum=standards.open.v1.RT000ZR69_Transaction_ShareClassIdentifierTypes" json:"share_class_id_type,omitempty"`
	// Extension that identifies the share class.
	// Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
	ShareClassExtension string `protobuf:"bytes,6,opt,name=share_class_extension,json=shareClassExtension,proto3" json:"share_class_extension,omitempty"`
	// The number of settled units subscribed to or redeeemed
	Units float64 `protobuf:"fixed64,7,opt,name=units,proto3" json:"units,omitempty"`
	// The nav of the subscription per unit at which the transaction was priced
	NavPerUnit float64 `protobuf:"fixed64,9,opt,name=nav_per_unit,json=navPerUnit,proto3" json:"nav_per_unit,omitempty"`
	// The current total value of the transaction
	TotalValue float64 `protobuf:"fixed64,10,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	// The type of transaction
	TransactionType RT000ZR69_Transaction_TransactionType `protobuf:"varint,11,opt,name=transaction_type,json=transactionType,proto3,enum=standards.open.v1.RT000ZR69_Transaction_TransactionType" json:"transaction_type,omitempty"`
	// The trade date of the transaction
	TradeDate *date.Date `protobuf:"bytes,12,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	// The settlement date of the transaction
	SettlementDate *date.Date `protobuf:"bytes,13,opt,name=settlement_date,json=settlementDate,proto3" json:"settlement_date,omitempty"`
	// The transaction source type
	SourceType RT000ZR69_Transaction_SourceType `protobuf:"varint,14,opt,name=source_type,json=sourceType,proto3,enum=standards.open.v1.RT000ZR69_Transaction_SourceType" json:"source_type,omitempty"`
	// The source of the transaction
	Source string `protobuf:"bytes,15,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *RT000ZR69_Transaction) Reset() {
	*x = RT000ZR69_Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Transaction) ProtoMessage() {}

func (x *RT000ZR69_Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Transaction.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Transaction) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT000ZR69_Transaction) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000ZR69_Transaction) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetAccountType() RT000ZR69_Transaction_AccountType {
	if x != nil {
		return x.AccountType
	}
	return RT000ZR69_Transaction_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_Transaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetShareClassId() string {
	if x != nil {
		return x.ShareClassId
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetShareClassIdType() RT000ZR69_Transaction_ShareClassIdentifierTypes {
	if x != nil {
		return x.ShareClassIdType
	}
	return RT000ZR69_Transaction_IDENTIFIER_UNSPECIFIED
}

func (x *RT000ZR69_Transaction) GetShareClassExtension() string {
	if x != nil {
		return x.ShareClassExtension
	}
	return ""
}

func (x *RT000ZR69_Transaction) GetUnits() float64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *RT000ZR69_Transaction) GetNavPerUnit() float64 {
	if x != nil {
		return x.NavPerUnit
	}
	return 0
}

func (x *RT000ZR69_Transaction) GetTotalValue() float64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *RT000ZR69_Transaction) GetTransactionType() RT000ZR69_Transaction_TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return RT000ZR69_Transaction_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_Transaction) GetTradeDate() *date.Date {
	if x != nil {
		return x.TradeDate
	}
	return nil
}

func (x *RT000ZR69_Transaction) GetSettlementDate() *date.Date {
	if x != nil {
		return x.SettlementDate
	}
	return nil
}

func (x *RT000ZR69_Transaction) GetSourceType() RT000ZR69_Transaction_SourceType {
	if x != nil {
		return x.SourceType
	}
	return RT000ZR69_Transaction_SOURCE_TYPE_UNSPECIFIED
}

func (x *RT000ZR69_Transaction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// Definition of a Complaint
type RT000ZR69_Complaint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date as of which the information is being reported
	ReportingDate *date.Date `protobuf:"bytes,101,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,102,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,103,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund)
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,104,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund)
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,105,opt,name=fund,proto3" json:"fund,omitempty"`
	// The date of the complaint
	ComplaintDate *date.Date `protobuf:"bytes,2,opt,name=complaint_date,json=complaintDate,proto3" json:"complaint_date,omitempty"`
	// Description of the complaint
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The account identifier related to the complainant (if applicable)
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Resolution of the complaint
	Resolution string `protobuf:"bytes,5,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Whether the complaint was upheld
	ComplaintUpheld *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=complaint_upheld,json=complaintUpheld,proto3" json:"complaint_upheld,omitempty"`
}

func (x *RT000ZR69_Complaint) Reset() {
	*x = RT000ZR69_Complaint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Complaint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Complaint) ProtoMessage() {}

func (x *RT000ZR69_Complaint) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Complaint.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Complaint) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RT000ZR69_Complaint) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000ZR69_Complaint) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000ZR69_Complaint) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000ZR69_Complaint) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000ZR69_Complaint) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000ZR69_Complaint) GetComplaintDate() *date.Date {
	if x != nil {
		return x.ComplaintDate
	}
	return nil
}

func (x *RT000ZR69_Complaint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RT000ZR69_Complaint) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RT000ZR69_Complaint) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *RT000ZR69_Complaint) GetComplaintUpheld() *wrapperspb.BoolValue {
	if x != nil {
		return x.ComplaintUpheld
	}
	return nil
}

// Definition of a late trade events
type RT000ZR69_LateTradeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date as of which the information is being reported
	ReportingDate *date.Date `protobuf:"bytes,101,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,102,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,103,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund)
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,104,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund)
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,105,opt,name=fund,proto3" json:"fund,omitempty"`
	// The date of the late trade
	LateTradeDate *date.Date `protobuf:"bytes,1,opt,name=late_trade_date,json=lateTradeDate,proto3" json:"late_trade_date,omitempty"`
	// The date the late trade was identified
	IdentificationDate *date.Date `protobuf:"bytes,2,opt,name=identification_date,json=identificationDate,proto3" json:"identification_date,omitempty"`
	// Cause of the late trade
	Cause string `protobuf:"bytes,3,opt,name=cause,proto3" json:"cause,omitempty"`
	// Resolution of the breach and underlying source of issue
	Resolution string `protobuf:"bytes,4,opt,name=resolution,proto3" json:"resolution,omitempty"`
}

func (x *RT000ZR69_LateTradeEvent) Reset() {
	*x = RT000ZR69_LateTradeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_LateTradeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_LateTradeEvent) ProtoMessage() {}

func (x *RT000ZR69_LateTradeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_LateTradeEvent.ProtoReflect.Descriptor instead.
func (*RT000ZR69_LateTradeEvent) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RT000ZR69_LateTradeEvent) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000ZR69_LateTradeEvent) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000ZR69_LateTradeEvent) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000ZR69_LateTradeEvent) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000ZR69_LateTradeEvent) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000ZR69_LateTradeEvent) GetLateTradeDate() *date.Date {
	if x != nil {
		return x.LateTradeDate
	}
	return nil
}

func (x *RT000ZR69_LateTradeEvent) GetIdentificationDate() *date.Date {
	if x != nil {
		return x.IdentificationDate
	}
	return nil
}

func (x *RT000ZR69_LateTradeEvent) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000ZR69_LateTradeEvent) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

// Definition of an error
type RT000ZR69_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reporting date for the error
	ReportingDate *date.Date `protobuf:"bytes,1,opt,name=reporting_date,json=reportingDate,proto3" json:"reporting_date,omitempty"`
	// The internal referenceID used to track the breach
	ReferenceId string `protobuf:"bytes,2,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// The identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,3,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,4,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The identifier of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	FundIdentifier string `protobuf:"bytes,5,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,6,opt,name=fund,proto3" json:"fund,omitempty"`
	// The date the error was detected
	DetectionDate *date.Date `protobuf:"bytes,7,opt,name=detection_date,json=detectionDate,proto3" json:"detection_date,omitempty"`
	// Period of the error - Start Date
	ErrorPeriodStartDate *date.Date `protobuf:"bytes,8,opt,name=error_period_start_date,json=errorPeriodStartDate,proto3" json:"error_period_start_date,omitempty"`
	// Period of the breach - End Date
	ErrorPeriodEndDate *date.Date `protobuf:"bytes,9,opt,name=error_period_end_date,json=errorPeriodEndDate,proto3" json:"error_period_end_date,omitempty"`
	// The identifier of the impacted account
	AccountId string `protobuf:"bytes,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Description and cause of the error
	Cause string `protobuf:"bytes,15,opt,name=cause,proto3" json:"cause,omitempty"`
	// Corrective measures taken to fix the error
	CorrectiveMeasures string `protobuf:"bytes,16,opt,name=corrective_measures,json=correctiveMeasures,proto3" json:"corrective_measures,omitempty"`
	// Measures taken to avoid recurrence
	Remediation string `protobuf:"bytes,17,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// The impact of the error
	Impact RT000ZR69_Error_Impact `protobuf:"varint,18,opt,name=impact,proto3,enum=standards.open.v1.RT000ZR69_Error_Impact" json:"impact,omitempty"`
	// The amount of impact (in currency terms)
	ImpactAmount float64 `protobuf:"fixed64,19,opt,name=impact_amount,json=impactAmount,proto3" json:"impact_amount,omitempty"`
	// The currency code of the impact amount
	// The country code is required to comply with the 3-letter ISO 3166-1 alpha-3 standard.
	// The ISO 3166-1 alpha-3 is a set of 3-letter country codes to represent countries and dependent areas.
	// Make sure the provided country code is in uppercase.
	// Example: 'USA' for the United States, 'GBR' for Great Britain, 'DEU' for Germany, etc.
	ImpactAmountCurrency string `protobuf:"bytes,20,opt,name=impact_amount_currency,json=impactAmountCurrency,proto3" json:"impact_amount_currency,omitempty"`
	// Other Comments
	Comments string `protobuf:"bytes,51,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000ZR69_Error) Reset() {
	*x = RT000ZR69_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000ZR69_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000ZR69_Error) ProtoMessage() {}

func (x *RT000ZR69_Error) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000ZR69_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000ZR69_Error.ProtoReflect.Descriptor instead.
func (*RT000ZR69_Error) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000ZR69_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RT000ZR69_Error) GetReportingDate() *date.Date {
	if x != nil {
		return x.ReportingDate
	}
	return nil
}

func (x *RT000ZR69_Error) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *RT000ZR69_Error) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000ZR69_Error) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000ZR69_Error) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000ZR69_Error) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000ZR69_Error) GetDetectionDate() *date.Date {
	if x != nil {
		return x.DetectionDate
	}
	return nil
}

func (x *RT000ZR69_Error) GetErrorPeriodStartDate() *date.Date {
	if x != nil {
		return x.ErrorPeriodStartDate
	}
	return nil
}

func (x *RT000ZR69_Error) GetErrorPeriodEndDate() *date.Date {
	if x != nil {
		return x.ErrorPeriodEndDate
	}
	return nil
}

func (x *RT000ZR69_Error) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RT000ZR69_Error) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *RT000ZR69_Error) GetCorrectiveMeasures() string {
	if x != nil {
		return x.CorrectiveMeasures
	}
	return ""
}

func (x *RT000ZR69_Error) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *RT000ZR69_Error) GetImpact() RT000ZR69_Error_Impact {
	if x != nil {
		return x.Impact
	}
	return RT000ZR69_Error_IMPACT_UNSPECIFIED
}

func (x *RT000ZR69_Error) GetImpactAmount() float64 {
	if x != nil {
		return x.ImpactAmount
	}
	return 0
}

func (x *RT000ZR69_Error) GetImpactAmountCurrency() string {
	if x != nil {
		return x.ImpactAmountCurrency
	}
	return ""
}

func (x *RT000ZR69_Error) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

var File_standards_open_v1_RT000ZR69_proto protoreflect.FileDescriptor

var file_standards_open_v1_RT000ZR69_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x4d, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x5a, 0x52, 0x36, 0x39, 0x12, 0x47, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a,
	0x52, 0x36, 0x39, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x57, 0x0a,
	0x11, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x61,
	0x0a, 0x17, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x75, 0x73, 0x70, 0x69,
	0x63, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x65, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x65, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6d, 0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x47, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36,
	0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4f,
	0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x47, 0x0a, 0x0c, 0x70, 0x65, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a,
	0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x65, 0x70,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x1e, 0x6e, 0x65, 0x77, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x4a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x1a, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x26, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x4c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x22, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x4d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x6c, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x41, 0x6d, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a,
	0x25, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x4f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x20, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x50,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52,
	0x36, 0x39, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0x8b, 0x1c, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52,
	0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49,
	0x44, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x65, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52,
	0x41, 0x47, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x72, 0x61, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x41, 0x6d, 0x62, 0x65,
	0x72, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x03, 0x72, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8f, 0x14, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x35,
	0x0a, 0x31, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26,
	0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x54,
	0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x54, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x53, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x53, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x0b, 0x12, 0x26,
	0x0a, 0x22, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x0d,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x55, 0x50,
	0x48, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x10,
	0x0e, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x10,
	0x12, 0x25, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x12, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x13, 0x12, 0x25, 0x0a,
	0x21, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x45, 0x44, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x53, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x1b, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x1d, 0x12, 0x24,
	0x0a, 0x20, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x1f, 0x12,
	0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x57, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x53, 0x10, 0x20, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x45, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x22, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x53, 0x10, 0x23, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f,
	0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x44, 0x10, 0x24, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x41, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x43, 0x52,
	0x45, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x44, 0x10, 0x25, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x43, 0x52,
	0x45, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x44, 0x10, 0x26, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x4d,
	0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x43,
	0x52, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x52, 0x41, 0x49, 0x53, 0x45, 0x44, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x28, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x53, 0x5f, 0x41, 0x4d, 0x4c, 0x10, 0x29, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f,
	0x53, 0x41, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53,
	0x10, 0x2b, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59,
	0x10, 0x2c, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44,
	0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x53, 0x10, 0x2e, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x2f, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x56, 0x49,
	0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x30, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c,
	0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10,
	0x31, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43,
	0x59, 0x10, 0x32, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x46, 0x45,
	0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c,
	0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x33, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x57, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x34, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x57,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x35, 0x12, 0x1e, 0x0a,
	0x1a, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x36, 0x12, 0x26, 0x0a,
	0x22, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52,
	0x41, 0x43, 0x59, 0x10, 0x37, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x38, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43,
	0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x66, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x67, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x53, 0x10, 0x68, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41,
	0x43, 0x59, 0x10, 0x69, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x6a, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x6b, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x6c, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x6d, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41,
	0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x6f, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x70, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x10, 0x71, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59,
	0x10, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x75, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0x76, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43,
	0x59, 0x10, 0x77, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49,
	0x4e, 0x45, 0x53, 0x53, 0x10, 0x78, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10,
	0x79, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52,
	0x41, 0x43, 0x59, 0x10, 0x7a, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x7b, 0x22, 0x52, 0x0a, 0x09, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x03, 0x22,
	0x4d, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x02, 0x1a, 0xc5,
	0x0c, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61,
	0x46, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46,
	0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x75, 0x6e, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52,
	0x36, 0x39, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52,
	0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x46, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x65,
	0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x70, 0x12, 0x35, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x6d, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70,
	0x41, 0x6d, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x6d, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x11, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6d, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x02, 0x22, 0x56, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0x3b, 0x0a, 0x04, 0x52, 0x69, 0x73,
	0x6b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x1a, 0xbb, 0x0b, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d,
	0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a,
	0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x71, 0x0a,
	0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x61,
	0x76, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x6e, 0x61, 0x76, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x54, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a,
	0x52, 0x36, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x49,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x50,
	0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x47, 0x41, 0x4c,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x02, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x55, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f,
	0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x42, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x42, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x07,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45,
	0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0a,
	0x22, 0x6f, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x44, 0x45, 0x4d,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10,
	0x04, 0x22, 0x71, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x46, 0x41, 0x58, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x57, 0x49, 0x46, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50,
	0x49, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x10, 0x06, 0x1a, 0xc3, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c,
	0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x68, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x55, 0x70, 0x68, 0x65, 0x6c, 0x64, 0x1a, 0x9b, 0x03, 0x0a, 0x0e, 0x4c,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65,
	0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65,
	0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c,
	0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe0, 0x06, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62,
	0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x17, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x15, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49, 0x54,
	0x48, 0x4f, 0x55, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x4d, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x4b, 0x0a, 0x0f, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x5a, 0x52, 0x36, 0x39, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_standards_open_v1_RT000ZR69_proto_rawDescOnce sync.Once
	file_standards_open_v1_RT000ZR69_proto_rawDescData = file_standards_open_v1_RT000ZR69_proto_rawDesc
)

func file_standards_open_v1_RT000ZR69_proto_rawDescGZIP() []byte {
	file_standards_open_v1_RT000ZR69_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_RT000ZR69_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_RT000ZR69_proto_rawDescData)
	})
	return file_standards_open_v1_RT000ZR69_proto_rawDescData
}

var file_standards_open_v1_RT000ZR69_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_standards_open_v1_RT000ZR69_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_standards_open_v1_RT000ZR69_proto_goTypes = []interface{}{
	(RT000ZR69_MonthlyRAGMetric_MetricID)(0),             // 0: standards.open.v1.RT000ZR69.MonthlyRAGMetric.MetricID
	(RT000ZR69_MonthlyRAGMetric_ValueType)(0),            // 1: standards.open.v1.RT000ZR69.MonthlyRAGMetric.ValueType
	(RT000ZR69_MonthlyRAGMetric_EvaluationType)(0),       // 2: standards.open.v1.RT000ZR69.MonthlyRAGMetric.EvaluationType
	(RT000ZR69_Account_AccountType)(0),                   // 3: standards.open.v1.RT000ZR69.Account.AccountType
	(RT000ZR69_Account_Status)(0),                        // 4: standards.open.v1.RT000ZR69.Account.Status
	(RT000ZR69_Account_Risk)(0),                          // 5: standards.open.v1.RT000ZR69.Account.Risk
	(RT000ZR69_Transaction_AccountType)(0),               // 6: standards.open.v1.RT000ZR69.Transaction.AccountType
	(RT000ZR69_Transaction_ShareClassIdentifierTypes)(0), // 7: standards.open.v1.RT000ZR69.Transaction.ShareClassIdentifierTypes
	(RT000ZR69_Transaction_TransactionType)(0),           // 8: standards.open.v1.RT000ZR69.Transaction.TransactionType
	(RT000ZR69_Transaction_SourceType)(0),                // 9: standards.open.v1.RT000ZR69.Transaction.SourceType
	(RT000ZR69_Error_Impact)(0),                          // 10: standards.open.v1.RT000ZR69.Error.Impact
	(*RT000ZR69)(nil),                                    // 11: standards.open.v1.RT000ZR69
	(*RT000ZR69Batch)(nil),                               // 12: standards.open.v1.RT000ZR69_batch
	(*RT000ZR69_MonthlyRAGMetric)(nil),                   // 13: standards.open.v1.RT000ZR69.MonthlyRAGMetric
	(*RT000ZR69_Account)(nil),                            // 14: standards.open.v1.RT000ZR69.Account
	(*RT000ZR69_Transaction)(nil),                        // 15: standards.open.v1.RT000ZR69.Transaction
	(*RT000ZR69_Complaint)(nil),                          // 16: standards.open.v1.RT000ZR69.Complaint
	(*RT000ZR69_LateTradeEvent)(nil),                     // 17: standards.open.v1.RT000ZR69.LateTradeEvent
	(*RT000ZR69_Error)(nil),                              // 18: standards.open.v1.RT000ZR69.Error
	(*date.Date)(nil),                                    // 19: google.type.Date
	(RedAmberGreen)(0),                                   // 20: standards.open.v1.RedAmberGreen
	(*wrapperspb.BoolValue)(nil),                         // 21: google.protobuf.BoolValue
}
var file_standards_open_v1_RT000ZR69_proto_depIdxs = []int32{
	13, // 0: standards.open.v1.RT000ZR69.metrics:type_name -> standards.open.v1.RT000ZR69.MonthlyRAGMetric
	17, // 1: standards.open.v1.RT000ZR69.late_trade_events:type_name -> standards.open.v1.RT000ZR69.LateTradeEvent
	16, // 2: standards.open.v1.RT000ZR69.complaints:type_name -> standards.open.v1.RT000ZR69.Complaint
	15, // 3: standards.open.v1.RT000ZR69.suspicious_transactions:type_name -> standards.open.v1.RT000ZR69.Transaction
	15, // 4: standards.open.v1.RT000ZR69.pep_transactions:type_name -> standards.open.v1.RT000ZR69.Transaction
	15, // 5: standards.open.v1.RT000ZR69.late_cash_receipt_transactions:type_name -> standards.open.v1.RT000ZR69.Transaction
	14, // 6: standards.open.v1.RT000ZR69.largest_shareholders:type_name -> standards.open.v1.RT000ZR69.Account
	14, // 7: standards.open.v1.RT000ZR69.blocked_accounts:type_name -> standards.open.v1.RT000ZR69.Account
	14, // 8: standards.open.v1.RT000ZR69.pep_accounts:type_name -> standards.open.v1.RT000ZR69.Account
	14, // 9: standards.open.v1.RT000ZR69.new_accounts_last_three_months:type_name -> standards.open.v1.RT000ZR69.Account
	14, // 10: standards.open.v1.RT000ZR69.high_risk_accounts:type_name -> standards.open.v1.RT000ZR69.Account
	14, // 11: standards.open.v1.RT000ZR69.largest_accounts_by_transaction_volume:type_name -> standards.open.v1.RT000ZR69.Account
	14, // 12: standards.open.v1.RT000ZR69.active_accounts:type_name -> standards.open.v1.RT000ZR69.Account
	14, // 13: standards.open.v1.RT000ZR69.accounts_blocked_for_aml_reasons:type_name -> standards.open.v1.RT000ZR69.Account
	14, // 14: standards.open.v1.RT000ZR69.new_accounts_from_high_risk_countries:type_name -> standards.open.v1.RT000ZR69.Account
	18, // 15: standards.open.v1.RT000ZR69.errors:type_name -> standards.open.v1.RT000ZR69.Error
	11, // 16: standards.open.v1.RT000ZR69_batch.response:type_name -> standards.open.v1.RT000ZR69
	19, // 17: standards.open.v1.RT000ZR69.MonthlyRAGMetric.production_date:type_name -> google.type.Date
	0,  // 18: standards.open.v1.RT000ZR69.MonthlyRAGMetric.metric_id:type_name -> standards.open.v1.RT000ZR69.MonthlyRAGMetric.MetricID
	1,  // 19: standards.open.v1.RT000ZR69.MonthlyRAGMetric.value_type:type_name -> standards.open.v1.RT000ZR69.MonthlyRAGMetric.ValueType
	2,  // 20: standards.open.v1.RT000ZR69.MonthlyRAGMetric.evaluation_type:type_name -> standards.open.v1.RT000ZR69.MonthlyRAGMetric.EvaluationType
	20, // 21: standards.open.v1.RT000ZR69.MonthlyRAGMetric.rag:type_name -> standards.open.v1.RedAmberGreen
	19, // 22: standards.open.v1.RT000ZR69.Account.reporting_date:type_name -> google.type.Date
	3,  // 23: standards.open.v1.RT000ZR69.Account.account_type:type_name -> standards.open.v1.RT000ZR69.Account.AccountType
	4,  // 24: standards.open.v1.RT000ZR69.Account.status:type_name -> standards.open.v1.RT000ZR69.Account.Status
	5,  // 25: standards.open.v1.RT000ZR69.Account.risk:type_name -> standards.open.v1.RT000ZR69.Account.Risk
	21, // 26: standards.open.v1.RT000ZR69.Account.purchase_stop:type_name -> google.protobuf.BoolValue
	21, // 27: standards.open.v1.RT000ZR69.Account.redemption_stop:type_name -> google.protobuf.BoolValue
	21, // 28: standards.open.v1.RT000ZR69.Account.stop_red_settle:type_name -> google.protobuf.BoolValue
	21, // 29: standards.open.v1.RT000ZR69.Account.transfer_inward_stop:type_name -> google.protobuf.BoolValue
	21, // 30: standards.open.v1.RT000ZR69.Account.transfer_out_stop:type_name -> google.protobuf.BoolValue
	21, // 31: standards.open.v1.RT000ZR69.Account.stop_pep:type_name -> google.protobuf.BoolValue
	21, // 32: standards.open.v1.RT000ZR69.Account.stop_aml:type_name -> google.protobuf.BoolValue
	19, // 33: standards.open.v1.RT000ZR69.Account.stop_date:type_name -> google.type.Date
	19, // 34: standards.open.v1.RT000ZR69.Account.account_creation_date:type_name -> google.type.Date
	19, // 35: standards.open.v1.RT000ZR69.Account.account_active_date:type_name -> google.type.Date
	19, // 36: standards.open.v1.RT000ZR69.Account.last_aml_refresh_date:type_name -> google.type.Date
	19, // 37: standards.open.v1.RT000ZR69.Transaction.reporting_date:type_name -> google.type.Date
	6,  // 38: standards.open.v1.RT000ZR69.Transaction.account_type:type_name -> standards.open.v1.RT000ZR69.Transaction.AccountType
	7,  // 39: standards.open.v1.RT000ZR69.Transaction.share_class_id_type:type_name -> standards.open.v1.RT000ZR69.Transaction.ShareClassIdentifierTypes
	8,  // 40: standards.open.v1.RT000ZR69.Transaction.transaction_type:type_name -> standards.open.v1.RT000ZR69.Transaction.TransactionType
	19, // 41: standards.open.v1.RT000ZR69.Transaction.trade_date:type_name -> google.type.Date
	19, // 42: standards.open.v1.RT000ZR69.Transaction.settlement_date:type_name -> google.type.Date
	9,  // 43: standards.open.v1.RT000ZR69.Transaction.source_type:type_name -> standards.open.v1.RT000ZR69.Transaction.SourceType
	19, // 44: standards.open.v1.RT000ZR69.Complaint.reporting_date:type_name -> google.type.Date
	19, // 45: standards.open.v1.RT000ZR69.Complaint.complaint_date:type_name -> google.type.Date
	21, // 46: standards.open.v1.RT000ZR69.Complaint.complaint_upheld:type_name -> google.protobuf.BoolValue
	19, // 47: standards.open.v1.RT000ZR69.LateTradeEvent.reporting_date:type_name -> google.type.Date
	19, // 48: standards.open.v1.RT000ZR69.LateTradeEvent.late_trade_date:type_name -> google.type.Date
	19, // 49: standards.open.v1.RT000ZR69.LateTradeEvent.identification_date:type_name -> google.type.Date
	19, // 50: standards.open.v1.RT000ZR69.Error.reporting_date:type_name -> google.type.Date
	19, // 51: standards.open.v1.RT000ZR69.Error.detection_date:type_name -> google.type.Date
	19, // 52: standards.open.v1.RT000ZR69.Error.error_period_start_date:type_name -> google.type.Date
	19, // 53: standards.open.v1.RT000ZR69.Error.error_period_end_date:type_name -> google.type.Date
	10, // 54: standards.open.v1.RT000ZR69.Error.impact:type_name -> standards.open.v1.RT000ZR69.Error.Impact
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_standards_open_v1_RT000ZR69_proto_init() }
func file_standards_open_v1_RT000ZR69_proto_init() {
	if File_standards_open_v1_RT000ZR69_proto != nil {
		return
	}
	file_standards_open_v1_metric_proto_init()
	file_standards_open_v1_rag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_RT000ZR69_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_MonthlyRAGMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Complaint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_LateTradeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000ZR69_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000ZR69_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_RT000ZR69_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_RT000ZR69_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_RT000ZR69_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_RT000ZR69_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_RT000ZR69_proto_msgTypes,
	}.Build()
	File_standards_open_v1_RT000ZR69_proto = out.File
	file_standards_open_v1_RT000ZR69_proto_rawDesc = nil
	file_standards_open_v1_RT000ZR69_proto_goTypes = nil
	file_standards_open_v1_RT000ZR69_proto_depIdxs = nil
}
