// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: RT000D034.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	money "google.golang.org/genproto/googleapis/type/money"
	_ "google.golang.org/genproto/googleapis/type/postaladdress"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Standard frequency responses
type RT000D034_Frequency int32

const (
	RT000D034_FREQUENCY_UNSPECIFIED RT000D034_Frequency = 0
	RT000D034_DAILY                 RT000D034_Frequency = 1
	RT000D034_WEEKLY                RT000D034_Frequency = 2
	RT000D034_MONTHLY               RT000D034_Frequency = 3
	RT000D034_QUARTERLY             RT000D034_Frequency = 4
	RT000D034_BI_ANNUALLY           RT000D034_Frequency = 5
	RT000D034_ANNUALLY              RT000D034_Frequency = 6
	RT000D034_AD_HOC                RT000D034_Frequency = 7
)

// Enum value maps for RT000D034_Frequency.
var (
	RT000D034_Frequency_name = map[int32]string{
		0: "FREQUENCY_UNSPECIFIED",
		1: "DAILY",
		2: "WEEKLY",
		3: "MONTHLY",
		4: "QUARTERLY",
		5: "BI_ANNUALLY",
		6: "ANNUALLY",
		7: "AD_HOC",
	}
	RT000D034_Frequency_value = map[string]int32{
		"FREQUENCY_UNSPECIFIED": 0,
		"DAILY":                 1,
		"WEEKLY":                2,
		"MONTHLY":               3,
		"QUARTERLY":             4,
		"BI_ANNUALLY":           5,
		"ANNUALLY":              6,
		"AD_HOC":                7,
	}
)

func (x RT000D034_Frequency) Enum() *RT000D034_Frequency {
	p := new(RT000D034_Frequency)
	*p = x
	return p
}

func (x RT000D034_Frequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000D034_Frequency) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000D034_proto_enumTypes[0].Descriptor()
}

func (RT000D034_Frequency) Type() protoreflect.EnumType {
	return &file_RT000D034_proto_enumTypes[0]
}

func (x RT000D034_Frequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000D034_Frequency.Descriptor instead.
func (RT000D034_Frequency) EnumDescriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 0}
}

// Enumeration of license types
type RT000D034_License int32

const (
	RT000D034_LICENSE_UNSPECIFIED RT000D034_License = 0
	RT000D034_UCITS               RT000D034_License = 1
	RT000D034_AIF                 RT000D034_License = 2
	RT000D034_MONEY_MARKET        RT000D034_License = 3
)

// Enum value maps for RT000D034_License.
var (
	RT000D034_License_name = map[int32]string{
		0: "LICENSE_UNSPECIFIED",
		1: "UCITS",
		2: "AIF",
		3: "MONEY_MARKET",
	}
	RT000D034_License_value = map[string]int32{
		"LICENSE_UNSPECIFIED": 0,
		"UCITS":               1,
		"AIF":                 2,
		"MONEY_MARKET":        3,
	}
)

func (x RT000D034_License) Enum() *RT000D034_License {
	p := new(RT000D034_License)
	*p = x
	return p
}

func (x RT000D034_License) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000D034_License) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000D034_proto_enumTypes[1].Descriptor()
}

func (RT000D034_License) Type() protoreflect.EnumType {
	return &file_RT000D034_proto_enumTypes[1]
}

func (x RT000D034_License) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000D034_License.Descriptor instead.
func (RT000D034_License) EnumDescriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 1}
}

// Enumeration of types of instruments
type RT000D034_InstrumentType int32

const (
	RT000D034_INSTRUMENT_TYPE_UNSPECIFIED                                                                             RT000D034_InstrumentType = 0
	RT000D034_MONEY_MARKET_INSTRUMENTS                                                                                RT000D034_InstrumentType = 1
	RT000D034_DEPOSITS_TERM_OR_CASH                                                                                   RT000D034_InstrumentType = 2
	RT000D034_REPURCHASE_TRANSACTIONS_REPO_OR_REVERSE_REPO                                                            RT000D034_InstrumentType = 3
	RT000D034_SECURITIES_LENDING                                                                                      RT000D034_InstrumentType = 4
	RT000D034_LISTED_EQUITIES                                                                                         RT000D034_InstrumentType = 5
	RT000D034_CORPORATE_BONDS                                                                                         RT000D034_InstrumentType = 6
	RT000D034_GOVERNMENT_OR_MUNICIPAL_BONDS                                                                           RT000D034_InstrumentType = 7
	RT000D034_REAL_ESTATE_INVESTMENT_TRUSTS_REITS                                                                     RT000D034_InstrumentType = 8
	RT000D034_CONVERTIBLE_BONDS                                                                                       RT000D034_InstrumentType = 9
	RT000D034_LOANS_OR_PRIVATE_CREDITS                                                                                RT000D034_InstrumentType = 10
	RT000D034_STRUCTURED_OR_SECURITIZED_PRODUCTS                                                                      RT000D034_InstrumentType = 11
	RT000D034_EQUITY_DERIVATIVES                                                                                      RT000D034_InstrumentType = 12
	RT000D034_FIXED_INCOME_DERIVATIVES                                                                                RT000D034_InstrumentType = 13
	RT000D034_CREDIT_DERIVATIVES                                                                                      RT000D034_InstrumentType = 14
	RT000D034_FX_DERIVATIVES                                                                                          RT000D034_InstrumentType = 15
	RT000D034_COMMODITY_DERIVATIVES                                                                                   RT000D034_InstrumentType = 16
	RT000D034_OTHER_DERIVATIVES                                                                                       RT000D034_InstrumentType = 17
	RT000D034_HEDGE_FUNDS_HF                                                                                          RT000D034_InstrumentType = 18
	RT000D034_REAL_ESTATE_OR_INFRASTRUCTURE_OR_RENEWABLES_DIRECT_OR_INDIRECT                                          RT000D034_InstrumentType = 19
	RT000D034_PRIVATE_EQUITY_DIRECT_OR_INDIRECT                                                                       RT000D034_InstrumentType = 20
	RT000D034_OPEN_ENDED_FUNDS_EXCL_HF_OR_RE_OR_PE                                                                    RT000D034_InstrumentType = 21
	RT000D034_CLOSED_ENDED_FUNDS_EXC_HF_OR_RE_OR_PE                                                                   RT000D034_InstrumentType = 22
	RT000D034_PHYSICAL_ASSETS_DIRECT_INVESTMENTS_IN_REAL_OR_TANGIBLE_ASSETS_EXCL_RE_OR_INFRASTRUCTURE_OR_RENEWABLES   RT000D034_InstrumentType = 23
	RT000D034_PHYSICAL_ASSETS_INDIRECT_INVESTMENTS_IN_REAL_OR_TANGIBLE_ASSETS_EXCL_RE_OR_INFRASTRUCTURE_OR_RENEWABLES RT000D034_InstrumentType = 24
	RT000D034_OTHER                                                                                                   RT000D034_InstrumentType = 25
)

// Enum value maps for RT000D034_InstrumentType.
var (
	RT000D034_InstrumentType_name = map[int32]string{
		0:  "INSTRUMENT_TYPE_UNSPECIFIED",
		1:  "MONEY_MARKET_INSTRUMENTS",
		2:  "DEPOSITS_TERM_OR_CASH",
		3:  "REPURCHASE_TRANSACTIONS_REPO_OR_REVERSE_REPO",
		4:  "SECURITIES_LENDING",
		5:  "LISTED_EQUITIES",
		6:  "CORPORATE_BONDS",
		7:  "GOVERNMENT_OR_MUNICIPAL_BONDS",
		8:  "REAL_ESTATE_INVESTMENT_TRUSTS_REITS",
		9:  "CONVERTIBLE_BONDS",
		10: "LOANS_OR_PRIVATE_CREDITS",
		11: "STRUCTURED_OR_SECURITIZED_PRODUCTS",
		12: "EQUITY_DERIVATIVES",
		13: "FIXED_INCOME_DERIVATIVES",
		14: "CREDIT_DERIVATIVES",
		15: "FX_DERIVATIVES",
		16: "COMMODITY_DERIVATIVES",
		17: "OTHER_DERIVATIVES",
		18: "HEDGE_FUNDS_HF",
		19: "REAL_ESTATE_OR_INFRASTRUCTURE_OR_RENEWABLES_DIRECT_OR_INDIRECT",
		20: "PRIVATE_EQUITY_DIRECT_OR_INDIRECT",
		21: "OPEN_ENDED_FUNDS_EXCL_HF_OR_RE_OR_PE",
		22: "CLOSED_ENDED_FUNDS_EXC_HF_OR_RE_OR_PE",
		23: "PHYSICAL_ASSETS_DIRECT_INVESTMENTS_IN_REAL_OR_TANGIBLE_ASSETS_EXCL_RE_OR_INFRASTRUCTURE_OR_RENEWABLES",
		24: "PHYSICAL_ASSETS_INDIRECT_INVESTMENTS_IN_REAL_OR_TANGIBLE_ASSETS_EXCL_RE_OR_INFRASTRUCTURE_OR_RENEWABLES",
		25: "OTHER",
	}
	RT000D034_InstrumentType_value = map[string]int32{
		"INSTRUMENT_TYPE_UNSPECIFIED":                  0,
		"MONEY_MARKET_INSTRUMENTS":                     1,
		"DEPOSITS_TERM_OR_CASH":                        2,
		"REPURCHASE_TRANSACTIONS_REPO_OR_REVERSE_REPO": 3,
		"SECURITIES_LENDING":                           4,
		"LISTED_EQUITIES":                              5,
		"CORPORATE_BONDS":                              6,
		"GOVERNMENT_OR_MUNICIPAL_BONDS":                7,
		"REAL_ESTATE_INVESTMENT_TRUSTS_REITS":          8,
		"CONVERTIBLE_BONDS":                            9,
		"LOANS_OR_PRIVATE_CREDITS":                     10,
		"STRUCTURED_OR_SECURITIZED_PRODUCTS":           11,
		"EQUITY_DERIVATIVES":                           12,
		"FIXED_INCOME_DERIVATIVES":                     13,
		"CREDIT_DERIVATIVES":                           14,
		"FX_DERIVATIVES":                               15,
		"COMMODITY_DERIVATIVES":                        16,
		"OTHER_DERIVATIVES":                            17,
		"HEDGE_FUNDS_HF":                               18,
		"REAL_ESTATE_OR_INFRASTRUCTURE_OR_RENEWABLES_DIRECT_OR_INDIRECT":                                          19,
		"PRIVATE_EQUITY_DIRECT_OR_INDIRECT":                                                                       20,
		"OPEN_ENDED_FUNDS_EXCL_HF_OR_RE_OR_PE":                                                                    21,
		"CLOSED_ENDED_FUNDS_EXC_HF_OR_RE_OR_PE":                                                                   22,
		"PHYSICAL_ASSETS_DIRECT_INVESTMENTS_IN_REAL_OR_TANGIBLE_ASSETS_EXCL_RE_OR_INFRASTRUCTURE_OR_RENEWABLES":   23,
		"PHYSICAL_ASSETS_INDIRECT_INVESTMENTS_IN_REAL_OR_TANGIBLE_ASSETS_EXCL_RE_OR_INFRASTRUCTURE_OR_RENEWABLES": 24,
		"OTHER": 25,
	}
)

func (x RT000D034_InstrumentType) Enum() *RT000D034_InstrumentType {
	p := new(RT000D034_InstrumentType)
	*p = x
	return p
}

func (x RT000D034_InstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000D034_InstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000D034_proto_enumTypes[2].Descriptor()
}

func (RT000D034_InstrumentType) Type() protoreflect.EnumType {
	return &file_RT000D034_proto_enumTypes[2]
}

func (x RT000D034_InstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000D034_InstrumentType.Descriptor instead.
func (RT000D034_InstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 2}
}

type RT000D034_YesNoExplain_Response int32

const (
	RT000D034_YesNoExplain_RESPONSE_UNSPECIFIED RT000D034_YesNoExplain_Response = 0
	RT000D034_YesNoExplain_YES                  RT000D034_YesNoExplain_Response = 1
	RT000D034_YesNoExplain_NO                   RT000D034_YesNoExplain_Response = 2
)

// Enum value maps for RT000D034_YesNoExplain_Response.
var (
	RT000D034_YesNoExplain_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT000D034_YesNoExplain_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT000D034_YesNoExplain_Response) Enum() *RT000D034_YesNoExplain_Response {
	p := new(RT000D034_YesNoExplain_Response)
	*p = x
	return p
}

func (x RT000D034_YesNoExplain_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000D034_YesNoExplain_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000D034_proto_enumTypes[3].Descriptor()
}

func (RT000D034_YesNoExplain_Response) Type() protoreflect.EnumType {
	return &file_RT000D034_proto_enumTypes[3]
}

func (x RT000D034_YesNoExplain_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000D034_YesNoExplain_Response.Descriptor instead.
func (RT000D034_YesNoExplain_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Enumeration of management meeting subjects
type RT000D034_Organisation_ManagementMeetingSubjects int32

const (
	RT000D034_Organisation_MANAGEMENT_MEETING_SUBJECT_UNSPECIFIED         RT000D034_Organisation_ManagementMeetingSubjects = 0
	RT000D034_Organisation_DELEGATE_OVERSIGHT_IFM                         RT000D034_Organisation_ManagementMeetingSubjects = 1
	RT000D034_Organisation_DELEGATE_OVERSIGHT_CENTRAL_ADMINISTRATION      RT000D034_Organisation_ManagementMeetingSubjects = 2
	RT000D034_Organisation_DELEGATE_OVERSIGHT_TRANSFER_OR_REGISTRAR_AGENT RT000D034_Organisation_ManagementMeetingSubjects = 3
	RT000D034_Organisation_DELEGATE_OVERSIGHT_DISTRIBUTORS                RT000D034_Organisation_ManagementMeetingSubjects = 4
	RT000D034_Organisation_DELEGATE_OVERSIGHT_PORTFOLIO_MANAGERS          RT000D034_Organisation_ManagementMeetingSubjects = 5
	RT000D034_Organisation_DELEGATE_OVERSIGHT_INVESTMENT_ADVISORS         RT000D034_Organisation_ManagementMeetingSubjects = 6
	RT000D034_Organisation_PORTFOLIO_MANAGEMENT_OF_FUND                   RT000D034_Organisation_ManagementMeetingSubjects = 7
	RT000D034_Organisation_RISK_MANAGEMENT_AND_FUND_RISKS                 RT000D034_Organisation_ManagementMeetingSubjects = 8
	RT000D034_Organisation_CYBER_AND_IT_RISKS                             RT000D034_Organisation_ManagementMeetingSubjects = 9
	RT000D034_Organisation_FUND_DEVELOPMENT_AND_PERFORMANCE               RT000D034_Organisation_ManagementMeetingSubjects = 10
	RT000D034_Organisation_INVESTMENT_COMPLIANCE                          RT000D034_Organisation_ManagementMeetingSubjects = 11
	RT000D034_Organisation_VALUATION_AND_NAV_DETERMINATION                RT000D034_Organisation_ManagementMeetingSubjects = 12
	RT000D034_Organisation_FEES_AND_EXPENSES                              RT000D034_Organisation_ManagementMeetingSubjects = 13
	// i. Capital transactions at the level of the Fund (e.g. subscriptions, redemptions, distributions, liquidity management tools, capital calls, etc...)
	RT000D034_Organisation_CAPITAL_TRANSACTIONS                        RT000D034_Organisation_ManagementMeetingSubjects = 14
	RT000D034_Organisation_CONFLICTS_OF_INTEREST                       RT000D034_Organisation_ManagementMeetingSubjects = 15
	RT000D034_Organisation_AML_CFT                                     RT000D034_Organisation_ManagementMeetingSubjects = 16
	RT000D034_Organisation_CENTRAL_ADMINISTRATION_OR_ACCOUNTING_ISSUES RT000D034_Organisation_ManagementMeetingSubjects = 17
	RT000D034_Organisation_MARKETING                                   RT000D034_Organisation_ManagementMeetingSubjects = 18
	RT000D034_Organisation_RELATIONSHIP_WITH_DEPOSITORY                RT000D034_Organisation_ManagementMeetingSubjects = 19
	RT000D034_Organisation_REGULATORY_DEVELOPMENTS                     RT000D034_Organisation_ManagementMeetingSubjects = 20
	RT000D034_Organisation_OTHER                                       RT000D034_Organisation_ManagementMeetingSubjects = 21
)

// Enum value maps for RT000D034_Organisation_ManagementMeetingSubjects.
var (
	RT000D034_Organisation_ManagementMeetingSubjects_name = map[int32]string{
		0:  "MANAGEMENT_MEETING_SUBJECT_UNSPECIFIED",
		1:  "DELEGATE_OVERSIGHT_IFM",
		2:  "DELEGATE_OVERSIGHT_CENTRAL_ADMINISTRATION",
		3:  "DELEGATE_OVERSIGHT_TRANSFER_OR_REGISTRAR_AGENT",
		4:  "DELEGATE_OVERSIGHT_DISTRIBUTORS",
		5:  "DELEGATE_OVERSIGHT_PORTFOLIO_MANAGERS",
		6:  "DELEGATE_OVERSIGHT_INVESTMENT_ADVISORS",
		7:  "PORTFOLIO_MANAGEMENT_OF_FUND",
		8:  "RISK_MANAGEMENT_AND_FUND_RISKS",
		9:  "CYBER_AND_IT_RISKS",
		10: "FUND_DEVELOPMENT_AND_PERFORMANCE",
		11: "INVESTMENT_COMPLIANCE",
		12: "VALUATION_AND_NAV_DETERMINATION",
		13: "FEES_AND_EXPENSES",
		14: "CAPITAL_TRANSACTIONS",
		15: "CONFLICTS_OF_INTEREST",
		16: "AML_CFT",
		17: "CENTRAL_ADMINISTRATION_OR_ACCOUNTING_ISSUES",
		18: "MARKETING",
		19: "RELATIONSHIP_WITH_DEPOSITORY",
		20: "REGULATORY_DEVELOPMENTS",
		21: "OTHER",
	}
	RT000D034_Organisation_ManagementMeetingSubjects_value = map[string]int32{
		"MANAGEMENT_MEETING_SUBJECT_UNSPECIFIED":         0,
		"DELEGATE_OVERSIGHT_IFM":                         1,
		"DELEGATE_OVERSIGHT_CENTRAL_ADMINISTRATION":      2,
		"DELEGATE_OVERSIGHT_TRANSFER_OR_REGISTRAR_AGENT": 3,
		"DELEGATE_OVERSIGHT_DISTRIBUTORS":                4,
		"DELEGATE_OVERSIGHT_PORTFOLIO_MANAGERS":          5,
		"DELEGATE_OVERSIGHT_INVESTMENT_ADVISORS":         6,
		"PORTFOLIO_MANAGEMENT_OF_FUND":                   7,
		"RISK_MANAGEMENT_AND_FUND_RISKS":                 8,
		"CYBER_AND_IT_RISKS":                             9,
		"FUND_DEVELOPMENT_AND_PERFORMANCE":               10,
		"INVESTMENT_COMPLIANCE":                          11,
		"VALUATION_AND_NAV_DETERMINATION":                12,
		"FEES_AND_EXPENSES":                              13,
		"CAPITAL_TRANSACTIONS":                           14,
		"CONFLICTS_OF_INTEREST":                          15,
		"AML_CFT":                                        16,
		"CENTRAL_ADMINISTRATION_OR_ACCOUNTING_ISSUES":    17,
		"MARKETING":                    18,
		"RELATIONSHIP_WITH_DEPOSITORY": 19,
		"REGULATORY_DEVELOPMENTS":      20,
		"OTHER":                        21,
	}
)

func (x RT000D034_Organisation_ManagementMeetingSubjects) Enum() *RT000D034_Organisation_ManagementMeetingSubjects {
	p := new(RT000D034_Organisation_ManagementMeetingSubjects)
	*p = x
	return p
}

func (x RT000D034_Organisation_ManagementMeetingSubjects) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000D034_Organisation_ManagementMeetingSubjects) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000D034_proto_enumTypes[4].Descriptor()
}

func (RT000D034_Organisation_ManagementMeetingSubjects) Type() protoreflect.EnumType {
	return &file_RT000D034_proto_enumTypes[4]
}

func (x RT000D034_Organisation_ManagementMeetingSubjects) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000D034_Organisation_ManagementMeetingSubjects.Descriptor instead.
func (RT000D034_Organisation_ManagementMeetingSubjects) EnumDescriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 4, 0}
}

// enumeration of types of informed investors
type RT000D034_Organisation_InformedInvestorCategories int32

const (
	RT000D034_Organisation_INFORMED_INVESTOR_CATEGORY_UNSPECIFIED RT000D034_Organisation_InformedInvestorCategories = 0
	// a. Institutional investors / professional investors
	RT000D034_Organisation_INSTITUTIONAL_OR_PROFESSIONAL_INVESTORS RT000D034_Organisation_InformedInvestorCategories = 1
	// b. Investors confirmed in writing that they adhere to the status of well-informed investor AND investeda minimum of 125,000 Euro
	RT000D034_Organisation_LARGE_AND_CONFIRMED_INFORMED_INVESTOR RT000D034_Organisation_InformedInvestorCategories = 2
	// c. Investors confirmed in writing that they adhere to the status of well-informed investor and have been the subject of an assessment made by a credit institution within the meaning of Directive 2006/48/EC, by an investment firm within the meaning of Directive 2004/39/EC or by a management company within the meaning of “Directive 2009/65/EC”4 certifying his expertise, his experience and his knowledge in adequately apprising an investment in the specialised investment fund
	RT000D034_Organisation_CONFIRMED_INFORMED_AND_ASSESSED_TO_CERTIFY_EXPERTISE RT000D034_Organisation_InformedInvestorCategories = 3
)

// Enum value maps for RT000D034_Organisation_InformedInvestorCategories.
var (
	RT000D034_Organisation_InformedInvestorCategories_name = map[int32]string{
		0: "INFORMED_INVESTOR_CATEGORY_UNSPECIFIED",
		1: "INSTITUTIONAL_OR_PROFESSIONAL_INVESTORS",
		2: "LARGE_AND_CONFIRMED_INFORMED_INVESTOR",
		3: "CONFIRMED_INFORMED_AND_ASSESSED_TO_CERTIFY_EXPERTISE",
	}
	RT000D034_Organisation_InformedInvestorCategories_value = map[string]int32{
		"INFORMED_INVESTOR_CATEGORY_UNSPECIFIED":               0,
		"INSTITUTIONAL_OR_PROFESSIONAL_INVESTORS":              1,
		"LARGE_AND_CONFIRMED_INFORMED_INVESTOR":                2,
		"CONFIRMED_INFORMED_AND_ASSESSED_TO_CERTIFY_EXPERTISE": 3,
	}
)

func (x RT000D034_Organisation_InformedInvestorCategories) Enum() *RT000D034_Organisation_InformedInvestorCategories {
	p := new(RT000D034_Organisation_InformedInvestorCategories)
	*p = x
	return p
}

func (x RT000D034_Organisation_InformedInvestorCategories) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000D034_Organisation_InformedInvestorCategories) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000D034_proto_enumTypes[5].Descriptor()
}

func (RT000D034_Organisation_InformedInvestorCategories) Type() protoreflect.EnumType {
	return &file_RT000D034_proto_enumTypes[5]
}

func (x RT000D034_Organisation_InformedInvestorCategories) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000D034_Organisation_InformedInvestorCategories.Descriptor instead.
func (RT000D034_Organisation_InformedInvestorCategories) EnumDescriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 4, 1}
}

// Enumerations of financial identifiers
type RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes int32

const (
	// Source not specified by the user.
	RT000D034_ExpensesAndIncome_ExpenseRatio_IDENTIFIER_UNSPECIFIED RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 0
	// ISO 6166 code of ISIN when available
	RT000D034_ExpensesAndIncome_ExpenseRatio_ISIN RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 1
	// CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
	RT000D034_ExpensesAndIncome_ExpenseRatio_CUSIP RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 2
	// SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
	RT000D034_ExpensesAndIncome_ExpenseRatio_SEDOL RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 3
	// WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
	RT000D034_ExpensesAndIncome_ExpenseRatio_WKN RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 4
	// Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
	RT000D034_ExpensesAndIncome_ExpenseRatio_BBG_TICKER RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 5
	// BBGID (The Bloomberg Global ID)
	RT000D034_ExpensesAndIncome_ExpenseRatio_BBGID RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 6
	// Reuters RIC (Reuters instrument code)
	RT000D034_ExpensesAndIncome_ExpenseRatio_RIC RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 7
	// FIGI (Financial_Instrument Global Identifier)
	RT000D034_ExpensesAndIncome_ExpenseRatio_FIGI RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 8
	// LEI 0 Legal Entity Identifier
	RT000D034_ExpensesAndIncome_ExpenseRatio_LEI RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 9
	// PermID - Refinitiv Permanent Identifiers
	RT000D034_ExpensesAndIncome_ExpenseRatio_PERM_ID RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes = 10
)

// Enum value maps for RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes.
var (
	RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes_name = map[int32]string{
		0:  "IDENTIFIER_UNSPECIFIED",
		1:  "ISIN",
		2:  "CUSIP",
		3:  "SEDOL",
		4:  "WKN",
		5:  "BBG_TICKER",
		6:  "BBGID",
		7:  "RIC",
		8:  "FIGI",
		9:  "LEI",
		10: "PERM_ID",
	}
	RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"ISIN":                   1,
		"CUSIP":                  2,
		"SEDOL":                  3,
		"WKN":                    4,
		"BBG_TICKER":             5,
		"BBGID":                  6,
		"RIC":                    7,
		"FIGI":                   8,
		"LEI":                    9,
		"PERM_ID":                10,
	}
)

func (x RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes) Enum() *RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes {
	p := new(RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes)
	*p = x
	return p
}

func (x RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000D034_proto_enumTypes[6].Descriptor()
}

func (RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes) Type() protoreflect.EnumType {
	return &file_RT000D034_proto_enumTypes[6]
}

func (x RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes.Descriptor instead.
func (RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes) EnumDescriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 8, 2, 0}
}

type RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason int32

const (
	RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_REASON_UNSPECIFIED                     RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason = 0
	RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CHANGE_IN_COST_STRUCTURE_IN_PROSPECTUS RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason = 1
	RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_DECREASE_IN_NAV                        RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason = 2
	RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_NON_RECURRING_FEES                     RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason = 3
	RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_OTHER                                  RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason = 4
)

// Enum value maps for RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason.
var (
	RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "CHANGE_IN_COST_STRUCTURE_IN_PROSPECTUS",
		2: "DECREASE_IN_NAV",
		3: "NON_RECURRING_FEES",
		4: "OTHER",
	}
	RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason_value = map[string]int32{
		"REASON_UNSPECIFIED":                     0,
		"CHANGE_IN_COST_STRUCTURE_IN_PROSPECTUS": 1,
		"DECREASE_IN_NAV":                        2,
		"NON_RECURRING_FEES":                     3,
		"OTHER":                                  4,
	}
)

func (x RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason) Enum() *RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason {
	p := new(RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason)
	*p = x
	return p
}

func (x RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason) Descriptor() protoreflect.EnumDescriptor {
	return file_RT000D034_proto_enumTypes[7].Descriptor()
}

func (RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason) Type() protoreflect.EnumType {
	return &file_RT000D034_proto_enumTypes[7]
}

func (x RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason.Descriptor instead.
func (RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason) EnumDescriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 8, 3, 0}
}

// The CSSF self-assessment questionnaire to be submitted annually by Undertakings for Collective Investment as per Circular CSSF 21/790. See https://www.cssf.lu/en/Document/circular-cssf-21-790/
type RT000D034 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The legal identifier of the fund.
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella).
	// Note: The Luxembourg market typically uses the Fund / Sub-fund nomenclature. We have made a decision to standardize on
	// UmbrellaFund / Fund to keep the nomenclature consistent with reports from other markets.
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,1,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The CSSF entity code
	CssfCode string `protobuf:"bytes,2,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The address street and number of the entity
	AddressStreetAndNumber string `protobuf:"bytes,3,opt,name=address_street_and_number,json=addressStreetAndNumber,proto3" json:"address_street_and_number,omitempty"`
	// The address postal code of the entity
	PostalCodeAndCity string `protobuf:"bytes,4,opt,name=postal_code_and_city,json=postalCodeAndCity,proto3" json:"postal_code_and_city,omitempty"`
	// What is the number of staff members (including the management) involved/dealing with AML/CFT?
	NumberOfStaffDealingWithAmlCft int32 `protobuf:"varint,5,opt,name=number_of_staff_dealing_with_aml_cft,json=numberOfStaffDealingWithAmlCft,proto3" json:"number_of_staff_dealing_with_aml_cft,omitempty"`
	// What licenses does the entity have
	Licenses []RT000D034_License `protobuf:"varint,6,rep,packed,name=licenses,proto3,enum=standards.open.v1.RT000D034_License" json:"licenses,omitempty"`
	// Financial year end of the entity
	EntityYearEnd *date.Date `protobuf:"bytes,7,opt,name=entity_year_end,json=entityYearEnd,proto3" json:"entity_year_end,omitempty"`
	// Information regarding Members of the Management of the Fund
	Managers []*RT000D034_Manager `protobuf:"bytes,8,rep,name=managers,proto3" json:"managers,omitempty"`
	// Descriptive information per (sub-)fund
	FundDescriptions []*RT000D034_DescriptiveFundInformation `protobuf:"bytes,9,rep,name=fund_descriptions,json=fundDescriptions,proto3" json:"fund_descriptions,omitempty"`
	// 2. Did the Fund record any capital transaction(s) in its accounts for any (sub-)fund during the year?
	SubscriptionsValue *money.Money `protobuf:"bytes,10,opt,name=subscriptions_value,json=subscriptionsValue,proto3" json:"subscriptions_value,omitempty"`
	RedemptionsValue   *money.Money `protobuf:"bytes,11,opt,name=redemptions_value,json=redemptionsValue,proto3" json:"redemptions_value,omitempty"`
	// 3. In which types of investments was the Fund invested at year-end (direct investments, except where
	InstrumentTypesInvestedIn      []RT000D034_InstrumentType `protobuf:"varint,12,rep,packed,name=instrument_types_invested_in,json=instrumentTypesInvestedIn,proto3,enum=standards.open.v1.RT000D034_InstrumentType" json:"instrument_types_invested_in,omitempty"`
	OtherInstrumentTypesInvestedIn []string                   `protobuf:"bytes,13,rep,name=other_instrument_types_invested_in,json=otherInstrumentTypesInvestedIn,proto3" json:"other_instrument_types_invested_in,omitempty"`
	// 4. Was any (sub-)fund invested at year-end at the level of its portfolio in a special purpose vehicle
	InvestedInSpv bool `protobuf:"varint,14,opt,name=invested_in_spv,json=investedInSpv,proto3" json:"invested_in_spv,omitempty"`
	// 4.1. If the answer to Q4. is YES, specify the number of sub-funds investing in SPVs or other similar intermediate vehicles/entities for facilitating the investment in the underlying assets?
	NumberOfSpvs int32 `protobuf:"varint,15,opt,name=number_of_spvs,json=numberOfSpvs,proto3" json:"number_of_spvs,omitempty"`
	// Responses to questions relating to the organization of the fund
	Organisation *RT000D034_Organisation `protobuf:"bytes,16,opt,name=organisation,proto3" json:"organisation,omitempty"`
	// Responses to questions relating to investment compliance
	InvestmentCompliance *RT000D034_InvestmentCompliance `protobuf:"bytes,17,opt,name=investment_compliance,json=investmentCompliance,proto3" json:"investment_compliance,omitempty"`
	// Responses to questions relating to valuation
	Valuation *RT000D034_Valuation `protobuf:"bytes,18,opt,name=valuation,proto3" json:"valuation,omitempty"`
	// Responses to questions relating to NAV determination
	NavDetermination *RT000D034_NAVDeterminiation `protobuf:"bytes,19,opt,name=nav_determination,json=navDetermination,proto3" json:"nav_determination,omitempty"`
	// Responses to questions relating to Expenses & Income
	ExpensesAndIncome *RT000D034_ExpensesAndIncome `protobuf:"bytes,20,opt,name=expenses_and_income,json=expensesAndIncome,proto3" json:"expenses_and_income,omitempty"`
	// Responses to questions relating to Relationship with Depositary
	DepositaryRelationship *RT000D034_DepositaryRelationship `protobuf:"bytes,21,opt,name=depositary_relationship,json=depositaryRelationship,proto3" json:"depositary_relationship,omitempty"`
}

func (x *RT000D034) Reset() {
	*x = RT000D034{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034) ProtoMessage() {}

func (x *RT000D034) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034.ProtoReflect.Descriptor instead.
func (*RT000D034) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0}
}

func (x *RT000D034) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000D034) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034) GetAddressStreetAndNumber() string {
	if x != nil {
		return x.AddressStreetAndNumber
	}
	return ""
}

func (x *RT000D034) GetPostalCodeAndCity() string {
	if x != nil {
		return x.PostalCodeAndCity
	}
	return ""
}

func (x *RT000D034) GetNumberOfStaffDealingWithAmlCft() int32 {
	if x != nil {
		return x.NumberOfStaffDealingWithAmlCft
	}
	return 0
}

func (x *RT000D034) GetLicenses() []RT000D034_License {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *RT000D034) GetEntityYearEnd() *date.Date {
	if x != nil {
		return x.EntityYearEnd
	}
	return nil
}

func (x *RT000D034) GetManagers() []*RT000D034_Manager {
	if x != nil {
		return x.Managers
	}
	return nil
}

func (x *RT000D034) GetFundDescriptions() []*RT000D034_DescriptiveFundInformation {
	if x != nil {
		return x.FundDescriptions
	}
	return nil
}

func (x *RT000D034) GetSubscriptionsValue() *money.Money {
	if x != nil {
		return x.SubscriptionsValue
	}
	return nil
}

func (x *RT000D034) GetRedemptionsValue() *money.Money {
	if x != nil {
		return x.RedemptionsValue
	}
	return nil
}

func (x *RT000D034) GetInstrumentTypesInvestedIn() []RT000D034_InstrumentType {
	if x != nil {
		return x.InstrumentTypesInvestedIn
	}
	return nil
}

func (x *RT000D034) GetOtherInstrumentTypesInvestedIn() []string {
	if x != nil {
		return x.OtherInstrumentTypesInvestedIn
	}
	return nil
}

func (x *RT000D034) GetInvestedInSpv() bool {
	if x != nil {
		return x.InvestedInSpv
	}
	return false
}

func (x *RT000D034) GetNumberOfSpvs() int32 {
	if x != nil {
		return x.NumberOfSpvs
	}
	return 0
}

func (x *RT000D034) GetOrganisation() *RT000D034_Organisation {
	if x != nil {
		return x.Organisation
	}
	return nil
}

func (x *RT000D034) GetInvestmentCompliance() *RT000D034_InvestmentCompliance {
	if x != nil {
		return x.InvestmentCompliance
	}
	return nil
}

func (x *RT000D034) GetValuation() *RT000D034_Valuation {
	if x != nil {
		return x.Valuation
	}
	return nil
}

func (x *RT000D034) GetNavDetermination() *RT000D034_NAVDeterminiation {
	if x != nil {
		return x.NavDetermination
	}
	return nil
}

func (x *RT000D034) GetExpensesAndIncome() *RT000D034_ExpensesAndIncome {
	if x != nil {
		return x.ExpensesAndIncome
	}
	return nil
}

func (x *RT000D034) GetDepositaryRelationship() *RT000D034_DepositaryRelationship {
	if x != nil {
		return x.DepositaryRelationship
	}
	return nil
}

// Batch set of RT000D034 responses
type RT000D034Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*RT000D034 `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *RT000D034Batch) Reset() {
	*x = RT000D034Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034Batch) ProtoMessage() {}

func (x *RT000D034Batch) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034Batch.ProtoReflect.Descriptor instead.
func (*RT000D034Batch) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{1}
}

func (x *RT000D034Batch) GetResponse() []*RT000D034 {
	if x != nil {
		return x.Response
	}
	return nil
}

// Definition of questions related to a fund specific cost
type RT000D034_FundSpecificExplanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Description of the cost
	Explanation string `protobuf:"bytes,3,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT000D034_FundSpecificExplanation) Reset() {
	*x = RT000D034_FundSpecificExplanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_FundSpecificExplanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_FundSpecificExplanation) ProtoMessage() {}

func (x *RT000D034_FundSpecificExplanation) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_FundSpecificExplanation.ProtoReflect.Descriptor instead.
func (*RT000D034_FundSpecificExplanation) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000D034_FundSpecificExplanation) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_FundSpecificExplanation) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_FundSpecificExplanation) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

type RT000D034_YesNoExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary Yes / No response.
	Response RT000D034_YesNoExplain_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT000D034_YesNoExplain_Response" json:"response,omitempty"`
	// Explanation if required
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT000D034_YesNoExplain) Reset() {
	*x = RT000D034_YesNoExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_YesNoExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_YesNoExplain) ProtoMessage() {}

func (x *RT000D034_YesNoExplain) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_YesNoExplain.ProtoReflect.Descriptor instead.
func (*RT000D034_YesNoExplain) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT000D034_YesNoExplain) GetResponse() RT000D034_YesNoExplain_Response {
	if x != nil {
		return x.Response
	}
	return RT000D034_YesNoExplain_RESPONSE_UNSPECIFIED
}

func (x *RT000D034_YesNoExplain) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Definition of a manager of a fund
type RT000D034_Manager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first name
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The phone number including country code
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The email address of the manager
	EmailAddress string `protobuf:"bytes,4,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// The three letter ISO code of the country of residence
	CountryOfResidence string `protobuf:"bytes,5,opt,name=country_of_residence,json=countryOfResidence,proto3" json:"country_of_residence,omitempty"`
}

func (x *RT000D034_Manager) Reset() {
	*x = RT000D034_Manager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Manager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Manager) ProtoMessage() {}

func (x *RT000D034_Manager) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Manager.ProtoReflect.Descriptor instead.
func (*RT000D034_Manager) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT000D034_Manager) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RT000D034_Manager) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RT000D034_Manager) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RT000D034_Manager) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *RT000D034_Manager) GetCountryOfResidence() string {
	if x != nil {
		return x.CountryOfResidence
	}
	return ""
}

// Definition for data to be provided per fund (i.e. sub-fund or standalone fund).
type RT000D034_DescriptiveFundInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CSSF Code of the (sub-)fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// Name of the (sub-)fund
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// ISO code (https://en.wikipedia.org/wiki/ISO_4217) of base currency of (sub-)fund
	FundCurrency string `protobuf:"bytes,4,opt,name=fund_currency,json=fundCurrency,proto3" json:"fund_currency,omitempty"`
	// Active at any time during the year
	ActiveDuringYear bool `protobuf:"varint,5,opt,name=active_during_year,json=activeDuringYear,proto3" json:"active_during_year,omitempty"`
	// Applicable nav materiality threshold (see CSSF circular 02/77)
	MaterialityThreshold float64 `protobuf:"fixed64,6,opt,name=materiality_threshold,json=materialityThreshold,proto3" json:"materiality_threshold,omitempty"`
	// Active at year end
	ActiveAtYearEnd bool `protobuf:"varint,7,opt,name=active_at_year_end,json=activeAtYearEnd,proto3" json:"active_at_year_end,omitempty"`
	// Whether in liquidation
	InLiquidation bool `protobuf:"varint,8,opt,name=in_liquidation,json=inLiquidation,proto3" json:"in_liquidation,omitempty"`
	// Whether open ended
	OpenEnded bool `protobuf:"varint,9,opt,name=open_ended,json=openEnded,proto3" json:"open_ended,omitempty"`
	// Whether in a lock-up period
	InLockupPeriod bool `protobuf:"varint,10,opt,name=in_lockup_period,json=inLockupPeriod,proto3" json:"in_lockup_period,omitempty"`
	// Whether redemptions suspended at year-end
	RedemptionsSuspendedAtYearEnd bool `protobuf:"varint,11,opt,name=redemptions_suspended_at_year_end,json=redemptionsSuspendedAtYearEnd,proto3" json:"redemptions_suspended_at_year_end,omitempty"`
	// frequency of investor redemptions
	RedemptionFrequency string `protobuf:"bytes,12,opt,name=redemption_frequency,json=redemptionFrequency,proto3" json:"redemption_frequency,omitempty"`
}

func (x *RT000D034_DescriptiveFundInformation) Reset() {
	*x = RT000D034_DescriptiveFundInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_DescriptiveFundInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_DescriptiveFundInformation) ProtoMessage() {}

func (x *RT000D034_DescriptiveFundInformation) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_DescriptiveFundInformation.ProtoReflect.Descriptor instead.
func (*RT000D034_DescriptiveFundInformation) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RT000D034_DescriptiveFundInformation) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_DescriptiveFundInformation) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_DescriptiveFundInformation) GetFundCurrency() string {
	if x != nil {
		return x.FundCurrency
	}
	return ""
}

func (x *RT000D034_DescriptiveFundInformation) GetActiveDuringYear() bool {
	if x != nil {
		return x.ActiveDuringYear
	}
	return false
}

func (x *RT000D034_DescriptiveFundInformation) GetMaterialityThreshold() float64 {
	if x != nil {
		return x.MaterialityThreshold
	}
	return 0
}

func (x *RT000D034_DescriptiveFundInformation) GetActiveAtYearEnd() bool {
	if x != nil {
		return x.ActiveAtYearEnd
	}
	return false
}

func (x *RT000D034_DescriptiveFundInformation) GetInLiquidation() bool {
	if x != nil {
		return x.InLiquidation
	}
	return false
}

func (x *RT000D034_DescriptiveFundInformation) GetOpenEnded() bool {
	if x != nil {
		return x.OpenEnded
	}
	return false
}

func (x *RT000D034_DescriptiveFundInformation) GetInLockupPeriod() bool {
	if x != nil {
		return x.InLockupPeriod
	}
	return false
}

func (x *RT000D034_DescriptiveFundInformation) GetRedemptionsSuspendedAtYearEnd() bool {
	if x != nil {
		return x.RedemptionsSuspendedAtYearEnd
	}
	return false
}

func (x *RT000D034_DescriptiveFundInformation) GetRedemptionFrequency() string {
	if x != nil {
		return x.RedemptionFrequency
	}
	return ""
}

// Definition of questions relating to the organization of the fund
type RT000D034_Organisation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 2.1.1. Did the Management of the Fund convene any extraordinary general meeting which was organized during the year?
	ExtraordinaryGeneralMeetings *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=extraordinary_general_meetings,json=extraordinaryGeneralMeetings,proto3" json:"extraordinary_general_meetings,omitempty"`
	// 2.1.2. How many formal meetings of the Management of the Fund have taken place during the financial year?
	NumberFormalManagementMeetings int32 `protobuf:"varint,2,opt,name=number_formal_management_meetings,json=numberFormalManagementMeetings,proto3" json:"number_formal_management_meetings,omitempty"`
	// 2.1.3. Were all the meetings subject to documented minutes?
	DocumentedMinutes *RT000D034_YesNoExplain `protobuf:"bytes,3,opt,name=documented_minutes,json=documentedMinutes,proto3" json:"documented_minutes,omitempty"`
	// 2.1.4. Has any member of the Management of the Fund resigned during the year?
	// 2.1.4.1. If the answer to Q4. is YES, how many members of the Management of the Fund have resigned during the year?
	NumberOfManagementResignations int32 `protobuf:"varint,4,opt,name=number_of_management_resignations,json=numberOfManagementResignations,proto3" json:"number_of_management_resignations,omitempty"`
	// 2.1.5. Which subjects were covered in the meetings held by the Management of the Fund during the financial year?
	ManagementMeetingSubjects []RT000D034_Organisation_ManagementMeetingSubjects `protobuf:"varint,5,rep,packed,name=management_meeting_subjects,json=managementMeetingSubjects,proto3,enum=standards.open.v1.RT000D034_Organisation_ManagementMeetingSubjects" json:"management_meeting_subjects,omitempty"`
	// If the answer to Q5.p. is YES, specify the subject(s)
	OtherManagementMeetingSubjects string `protobuf:"bytes,6,opt,name=other_management_meeting_subjects,json=otherManagementMeetingSubjects,proto3" json:"other_management_meeting_subjects,omitempty"`
	// 2.1.6. Did the Management of the Fund attend trainings during the year?: a. professional training(s) update and develop their skills.
	ManagementAttendTrainingProfessional *RT000D034_YesNoExplain `protobuf:"bytes,7,opt,name=management_attend_training_professional,json=managementAttendTrainingProfessional,proto3" json:"management_attend_training_professional,omitempty"`
	// 2.1.6. Did the Management of the Fund attend trainings during the year?: b. AML/CFT training(s)
	ManagementAttendTrainingAml *RT000D034_YesNoExplain `protobuf:"bytes,8,opt,name=management_attend_training_aml,json=managementAttendTrainingAml,proto3" json:"management_attend_training_aml,omitempty"`
	// 2.1.7. Did the Fund identify any material organizational deficiency regarding legal, regulatory or contractual responsibilities for one of its delegates/service providers (including depositary) which or could have had an impact on the Fund and its investors during the year? If YES, explain.
	MaterialDeficiencyIfm *RT000D034_YesNoExplain `protobuf:"bytes,9,opt,name=material_deficiency_ifm,json=materialDeficiencyIfm,proto3" json:"material_deficiency_ifm,omitempty"`
	// 2.1.7. Did the Fund identify any material organizational deficiency regarding legal, regulatory or contractual responsibilities for one of its delegates/service providers (including depositary) which or could have had an impact on the Fund and its investors during the year? If YES, explain.
	MaterialDeficiencyCentralAdministration *RT000D034_YesNoExplain `protobuf:"bytes,10,opt,name=material_deficiency_central_administration,json=materialDeficiencyCentralAdministration,proto3" json:"material_deficiency_central_administration,omitempty"`
	// 2.1.7. Did the Fund identify any material organizational deficiency regarding legal, regulatory or contractual responsibilities for one of its delegates/service providers (including depositary) which or could have had an impact on the Fund and its investors during the year? If YES, explain.
	MaterialDeficiencyTransferOrRegistrarAgent *RT000D034_YesNoExplain `protobuf:"bytes,11,opt,name=material_deficiency_transfer_or_registrar_agent,json=materialDeficiencyTransferOrRegistrarAgent,proto3" json:"material_deficiency_transfer_or_registrar_agent,omitempty"`
	// 2.1.7. Did the Fund identify any material organizational deficiency regarding legal, regulatory or contractual responsibilities for one of its delegates/service providers (including depositary) which or could have had an impact on the Fund and its investors during the year? If YES, explain.
	MaterialDeficiencyDistributor *RT000D034_YesNoExplain `protobuf:"bytes,12,opt,name=material_deficiency_distributor,json=materialDeficiencyDistributor,proto3" json:"material_deficiency_distributor,omitempty"`
	// 2.1.7. Did the Fund identify any material organizational deficiency regarding legal, regulatory or contractual responsibilities for one of its delegates/service providers (including depositary) which or could have had an impact on the Fund and its investors during the year? If YES, explain.
	MaterialDeficiencyPortfolioManager *RT000D034_YesNoExplain `protobuf:"bytes,13,opt,name=material_deficiency_portfolio_manager,json=materialDeficiencyPortfolioManager,proto3" json:"material_deficiency_portfolio_manager,omitempty"`
	// 2.1.7. Did the Fund identify any material organizational deficiency regarding legal, regulatory or contractual responsibilities for one of its delegates/service providers (including depositary) which or could have had an impact on the Fund and its investors during the year? If YES, explain.
	MaterialDeficiencyInvestmentAdvisor *RT000D034_YesNoExplain `protobuf:"bytes,14,opt,name=material_deficiency_investment_advisor,json=materialDeficiencyInvestmentAdvisor,proto3" json:"material_deficiency_investment_advisor,omitempty"`
	// 2.1.7. Did the Fund identify any material organizational deficiency regarding legal, regulatory or contractual responsibilities for one of its delegates/service providers (including depositary) which or could have had an impact on the Fund and its investors during the year? If YES, explain.
	MaterialDeficiencyDepository *RT000D034_YesNoExplain `protobuf:"bytes,15,opt,name=material_deficiency_depository,json=materialDeficiencyDepository,proto3" json:"material_deficiency_depository,omitempty"`
	// 2.1.7. Did the Fund identify any material organizational deficiency regarding legal, regulatory or contractual responsibilities for one of its delegates/service providers (including depositary) which or could have had an impact on the Fund and its investors during the year? If YES, explain.
	MaterialDeficiencyOtherDelegate *RT000D034_YesNoExplain `protobuf:"bytes,16,opt,name=material_deficiency_other_delegate,json=materialDeficiencyOtherDelegate,proto3" json:"material_deficiency_other_delegate,omitempty"`
	// 2.1.8. Did the Fund meet at year-end the minimum capital requirement as laid down in the applicable sectorial law?
	MeetMinimumCapitalRequirements bool `protobuf:"varint,17,opt,name=meet_minimum_capital_requirements,json=meetMinimumCapitalRequirements,proto3" json:"meet_minimum_capital_requirements,omitempty"`
	// 2.1.8.1. If the answer to Q8. is NO, did the Fund convene an Extraordinary General Meeting and/or inform the CSSF in accordance with the applicable sectorial laws?
	IfNotMeetingCapReqsDidBoardConveneExtraordinaryGeneralMeetingAndInformCssf bool `protobuf:"varint,18,opt,name=if_not_meeting_cap_reqs_did_board_convene_extraordinary_general_meeting_and_inform_cssf,json=ifNotMeetingCapReqsDidBoardConveneExtraordinaryGeneralMeetingAndInformCssf,proto3" json:"if_not_meeting_cap_reqs_did_board_convene_extraordinary_general_meeting_and_inform_cssf,omitempty"`
	// 2.1.9. Did the Fund or a service provider of the Fund receive during the year a specific request from a foreign national competent authority concerning a potential issue in relation to the functioning of the Fund?
	ReceivedRequestFromForeignCompetentAuthorityConcerningPotentialIssue bool `protobuf:"varint,19,opt,name=received_request_from_foreign_competent_authority_concerning_potential_issue,json=receivedRequestFromForeignCompetentAuthorityConcerningPotentialIssue,proto3" json:"received_request_from_foreign_competent_authority_concerning_potential_issue,omitempty"`
	// 2.1.10. Did the Fund or a service provider of the Fund receive during the year any sanction from a foreign national competent authority regarding wrondoings at the level of the Fund?
	ReceivedRequestFromForeignCompetentAuthorityConcerningWrongdoings bool `protobuf:"varint,20,opt,name=received_request_from_foreign_competent_authority_concerning_wrongdoings,json=receivedRequestFromForeignCompetentAuthorityConcerningWrongdoings,proto3" json:"received_request_from_foreign_competent_authority_concerning_wrongdoings,omitempty"`
	// 2.1.11. Did the Fund or a service provider of the Fund receive any investor claim and/or complaint during the year in relation to the functioning of the Fund?
	FundReceivedInvestorComplaintDuringYear bool `protobuf:"varint,21,opt,name=fund_received_investor_complaint_during_year,json=fundReceivedInvestorComplaintDuringYear,proto3" json:"fund_received_investor_complaint_during_year,omitempty"`
	// 2.1.11.1. If the answer to Q11. is YES, indicate the number
	NumberOfInvestorComplaintsReceivedDuringYear int32 `protobuf:"varint,22,opt,name=number_of_investor_complaints_received_during_year,json=numberOfInvestorComplaintsReceivedDuringYear,proto3" json:"number_of_investor_complaints_received_during_year,omitempty"`
	// 2.1.11.2. If the answer to Q11. is YES, could any claim and/or complaint received from investor(s) during the year have a material impact on the Fund/sub-fund or its investors?
	CouldAnyComplaintHaveMaterialImpactOnFund *RT000D034_YesNoExplain `protobuf:"bytes,23,opt,name=could_any_complaint_have_material_impact_on_fund,json=couldAnyComplaintHaveMaterialImpactOnFund,proto3" json:"could_any_complaint_have_material_impact_on_fund,omitempty"`
	// 2.1.12. Was the Fund involved in a litigation or judicial proceeding during the year? 12.1. If the answer to Q12. is YES, explain.
	FundInvolvedInLitigationDuringYear *RT000D034_YesNoExplain `protobuf:"bytes,24,opt,name=fund_involved_in_litigation_during_year,json=fundInvolvedInLitigationDuringYear,proto3" json:"fund_involved_in_litigation_during_year,omitempty"`
	// 2.1.13. Is the Management of the Fund aware of any case(s) of suspected or actual fraud (at Fund level or investment level) which could have an impact on the Fund/sub-fund or its investors?. 13.1. If the answer to Q10. is YES, explain.
	AnyCasesOfSuspectedOrActualFraud *RT000D034_YesNoExplain `protobuf:"bytes,25,opt,name=any_cases_of_suspected_or_actual_fraud,json=anyCasesOfSuspectedOrActualFraud,proto3" json:"any_cases_of_suspected_or_actual_fraud,omitempty"`
	// 2.1.14. Did the Fund notify (respectively did any service provider notify on behalf of the Fund) a suspected fraud and/or a suspected case of money laundering/terrorist financing to the State Attorney’s Office (“Parquet”) and/or the Financial Intelligence Unit (“Cellule de Renseignement Financier”) during the year?
	NotificationOfSuspectedFraud bool `protobuf:"varint,26,opt,name=notification_of_suspected_fraud,json=notificationOfSuspectedFraud,proto3" json:"notification_of_suspected_fraud,omitempty"`
	// 2.1.14. Did the Fund notify (respectively did any service provider notify on behalf of the Fund) a suspected fraud and/or a suspected case of money laundering/terrorist financing to the State Attorney’s Office (“Parquet”) and/or the Financial Intelligence Unit (“Cellule de Renseignement Financier”) during the year?.
	// 2.1.14.1. If the answer to Q14. is YES, indicate the number
	NumberOfNotificationsOfSuspectedFraud int32 `protobuf:"varint,27,opt,name=number_of_notifications_of_suspected_fraud,json=numberOfNotificationsOfSuspectedFraud,proto3" json:"number_of_notifications_of_suspected_fraud,omitempty"`
	// 2.1.14. Did the Fund notify (respectively did any service provider notify on behalf of the Fund) a suspected fraud and/or a suspected case of money laundering/terrorist financing to the State Attorney’s Office (“Parquet”) and/or the Financial Intelligence Unit (“Cellule de Renseignement Financier”) during the year?.
	// 2.1.14.2. If the answer to Q14. is YES, did the Fund send a copy of all these communication(s) to the CSSF as required by the Circular CSSF 11/528?
	NotificationsOfSuspectedFraudSharedWithCssf *RT000D034_YesNoExplain `protobuf:"bytes,28,opt,name=notifications_of_suspected_fraud_shared_with_cssf,json=notificationsOfSuspectedFraudSharedWithCssf,proto3" json:"notifications_of_suspected_fraud_shared_with_cssf,omitempty"`
	// 2.1.15. Did the Management of the Fund, in accordance with article 4(5) of the CSSF Regulation N° 15-07, formally adopt the risk management system of the SIF and, subsequently, have it reviewed and documented on a regular basis?
	// 2.1.15.1. If the response to Q15. is NO, explain
	AdoptedRiskManagementSystemOfSif *RT000D034_YesNoExplain `protobuf:"bytes,29,opt,name=adopted_risk_management_system_of_sif,json=adoptedRiskManagementSystemOfSif,proto3" json:"adopted_risk_management_system_of_sif,omitempty"`
	// 2.1.15. Did the Management of the Fund, in accordance with article 4(5) of the CSSF Regulation N° 15-07, formally adopt the risk management system of the SIF and, subsequently, have it reviewed and documented on a regular basis?
	// 2.1.15.2. If the answer to Q15. is YES, indicate the date of the last regular review.
	RiskManagementSystemOfSifDateOfLastReview *date.Date `protobuf:"bytes,30,opt,name=risk_management_system_of_sif_date_of_last_review,json=riskManagementSystemOfSifDateOfLastReview,proto3" json:"risk_management_system_of_sif_date_of_last_review,omitempty"`
	// 2.2.1 Were an effective conflicts of interest policy and effective procedures in place for the Fund
	// (including at IFM level if applicable) (i) to identify the circumstances which constitute or may give rise to a conflict of interest entailing a material risk of damage to the interests of the Fund and/or its investors and (ii) to manage existing (if any) material conflict(s) of interests?
	EffectiveConflictsOfInterestPolicyInPlace bool `protobuf:"varint,31,opt,name=effective_conflicts_of_interest_policy_in_place,json=effectiveConflictsOfInterestPolicyInPlace,proto3" json:"effective_conflicts_of_interest_policy_in_place,omitempty"`
	// 2.2.1.1 If the answer to Q16. is YES, did the Management of the Fund (or its IFM if any) identify such material conflict(s) of interests?
	// 2.2.1.1.1. If the answer to Q16.1. is YES, explain
	AnyConflictsOfInterestIdentified *RT000D034_YesNoExplain `protobuf:"bytes,32,opt,name=any_conflicts_of_interest_identified,json=anyConflictsOfInterestIdentified,proto3" json:"any_conflicts_of_interest_identified,omitempty"`
	// 2.2.1.1.2. If the answer to Q16.1. is YES, did the Fund or its IFM (if any) keep an exhaustive and up-todate register of such conflicts of interests?
	RegisterOfConflictsMaintained *RT000D034_YesNoExplain `protobuf:"bytes,33,opt,name=register_of_conflicts_maintained,json=registerOfConflictsMaintained,proto3" json:"register_of_conflicts_maintained,omitempty"`
	// 2.2.1.1.2.1. If the answer to Q16.1.2. is YES, how many conflict(s) of interests are recorded in the register?
	NumberOfConflictsRecorded int32 `protobuf:"varint,34,opt,name=number_of_conflicts_recorded,json=numberOfConflictsRecorded,proto3" json:"number_of_conflicts_recorded,omitempty"`
	// 2.2.1.1.3. If the answer to Q16.1. is YES, were the procedures in place for the Fund sufficient to ensure, with reasonable confidence, that the risks of damage to the interests of the Fund and/or its sub-fund(s) and/or of its investors are prevented?
	// 2.2.1.1.3.1.1. If the answer to Q16.1.3.1. is NO, explain
	ProceduresInPlaceToProtectFund *RT000D034_YesNoExplain `protobuf:"bytes,35,opt,name=procedures_in_place_to_protect_fund,json=proceduresInPlaceToProtectFund,proto3" json:"procedures_in_place_to_protect_fund,omitempty"`
	// 16.1.3.1. If the answer to Q 16.1.3. is NO, did the Management of the Fund or its IFM (if any) take the necessary decisions to act in the best interests of the Fund and/or its investors?
	IfNoProceduresDidManagementActInInterestOfInvestors *RT000D034_YesNoExplain `protobuf:"bytes,36,opt,name=if_no_procedures_did_management_act_in_interest_of_investors,json=ifNoProceduresDidManagementActInInterestOfInvestors,proto3" json:"if_no_procedures_did_management_act_in_interest_of_investors,omitempty"`
	// 16.1.3.2. If the answer to Q16.1.3. is NO, did the Management of the Fund ensure that such material conflicts of interest situations are reported to investors?
	// 16.1.3.2.1. If the answer to Q16.1.3.2. is NO, explain
	IfNoProcedureWereConflictsReportedToInvestors *RT000D034_YesNoExplain `protobuf:"bytes,37,opt,name=if_no_procedure_were_conflicts_reported_to_investors,json=ifNoProcedureWereConflictsReportedToInvestors,proto3" json:"if_no_procedure_were_conflicts_reported_to_investors,omitempty"`
	// 17. Was the share/unit class of any (sub-)fund sold to retail investors (on a look-through basis) at year-end?
	SoldToRetailInvestorsOnLookthroughBasis bool `protobuf:"varint,38,opt,name=sold_to_retail_investors_on_lookthrough_basis,json=soldToRetailInvestorsOnLookthroughBasis,proto3" json:"sold_to_retail_investors_on_lookthrough_basis,omitempty"`
	// 17.1. If the answer to Q17. is YES, mention the number of sub-funds
	NumberFundsSoldToRetailInvestorsOnLookthroughBasis int32 `protobuf:"varint,39,opt,name=number_funds_sold_to_retail_investors_on_lookthrough_basis,json=numberFundsSoldToRetailInvestorsOnLookthroughBasis,proto3" json:"number_funds_sold_to_retail_investors_on_lookthrough_basis,omitempty"`
	// 2.3.2. WELL-INFORMED INVESTORS -SIF/ SICAR.
	// 18. Did the investors in the Fund at year-end belong to one or more of the following categories?
	InvestorCategories []RT000D034_Organisation_InformedInvestorCategories `protobuf:"varint,40,rep,packed,name=investor_categories,json=investorCategories,proto3,enum=standards.open.v1.RT000D034_Organisation_InformedInvestorCategories" json:"investor_categories,omitempty"`
	// 19. Are procedures in place for the Fund to ensure that all investors are well-informed investors in accordance with article 2 of the SIF Law or with article 2 of the SICAR Law?
	ProceduresInPlaceToEnsureInvestorsWellInformed *RT000D034_YesNoExplain `protobuf:"bytes,41,opt,name=procedures_in_place_to_ensure_investors_well_informed,json=proceduresInPlaceToEnsureInvestorsWellInformed,proto3" json:"procedures_in_place_to_ensure_investors_well_informed,omitempty"`
	// 20. Are procedures in place for the Fund to ensure that
	// a. the audited annual report complies with the legal/regulatory provisions?.
	// 20.1. If one of the answers to Q.20. [a. to d.] is NO, explain.
	ProceduresInPlaceToEnsureAuditedAnnualReportCompliesWithRegulation *RT000D034_YesNoExplain `protobuf:"bytes,42,opt,name=procedures_in_place_to_ensure_audited_annual_report_complies_with_regulation,json=proceduresInPlaceToEnsureAuditedAnnualReportCompliesWithRegulation,proto3" json:"procedures_in_place_to_ensure_audited_annual_report_complies_with_regulation,omitempty"`
	// b. the audited annual report complies with the constitutive documents? 20.1. If one of the answers to Q.20. [a. to d.] is NO, explain .
	ProceduresInPlaceToEnsureAuditedAnnualReportCompliesWithConstitutiveDocuments *RT000D034_YesNoExplain `protobuf:"bytes,43,opt,name=procedures_in_place_to_ensure_audited_annual_report_complies_with_constitutive_documents,json=proceduresInPlaceToEnsureAuditedAnnualReportCompliesWithConstitutiveDocuments,proto3" json:"procedures_in_place_to_ensure_audited_annual_report_complies_with_constitutive_documents,omitempty"`
	// c. the audited annual report complies with the accounting standard adopted by the Fund? 20.1. If one of the answers to Q.20. [a. to d.] is NO, explain
	ProceduresInPlaceToEnsureAuditedAnnualReportCompliesWithFundAccountingStandard *RT000D034_YesNoExplain `protobuf:"bytes,44,opt,name=procedures_in_place_to_ensure_audited_annual_report_complies_with_fund_accounting_standard,json=proceduresInPlaceToEnsureAuditedAnnualReportCompliesWithFundAccountingStandard,proto3" json:"procedures_in_place_to_ensure_audited_annual_report_complies_with_fund_accounting_standard,omitempty"`
	// d. the "report on the activities" included in the audited annual report provides a complete, consistent and fair description of the activity of the Fund for the year? 20.1. If one of the answers to Q.20. [a. to d.] is NO, explain.
	ReportOnActivitiesIncludedInAnnualReportAndAccurate *RT000D034_YesNoExplain `protobuf:"bytes,45,opt,name=report_on_activities_included_in_annual_report_and_accurate,json=reportOnActivitiesIncludedInAnnualReportAndAccurate,proto3" json:"report_on_activities_included_in_annual_report_and_accurate,omitempty"`
}

func (x *RT000D034_Organisation) Reset() {
	*x = RT000D034_Organisation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Organisation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Organisation) ProtoMessage() {}

func (x *RT000D034_Organisation) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Organisation.ProtoReflect.Descriptor instead.
func (*RT000D034_Organisation) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RT000D034_Organisation) GetExtraordinaryGeneralMeetings() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ExtraordinaryGeneralMeetings
	}
	return nil
}

func (x *RT000D034_Organisation) GetNumberFormalManagementMeetings() int32 {
	if x != nil {
		return x.NumberFormalManagementMeetings
	}
	return 0
}

func (x *RT000D034_Organisation) GetDocumentedMinutes() *RT000D034_YesNoExplain {
	if x != nil {
		return x.DocumentedMinutes
	}
	return nil
}

func (x *RT000D034_Organisation) GetNumberOfManagementResignations() int32 {
	if x != nil {
		return x.NumberOfManagementResignations
	}
	return 0
}

func (x *RT000D034_Organisation) GetManagementMeetingSubjects() []RT000D034_Organisation_ManagementMeetingSubjects {
	if x != nil {
		return x.ManagementMeetingSubjects
	}
	return nil
}

func (x *RT000D034_Organisation) GetOtherManagementMeetingSubjects() string {
	if x != nil {
		return x.OtherManagementMeetingSubjects
	}
	return ""
}

func (x *RT000D034_Organisation) GetManagementAttendTrainingProfessional() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementAttendTrainingProfessional
	}
	return nil
}

func (x *RT000D034_Organisation) GetManagementAttendTrainingAml() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementAttendTrainingAml
	}
	return nil
}

func (x *RT000D034_Organisation) GetMaterialDeficiencyIfm() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialDeficiencyIfm
	}
	return nil
}

func (x *RT000D034_Organisation) GetMaterialDeficiencyCentralAdministration() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialDeficiencyCentralAdministration
	}
	return nil
}

func (x *RT000D034_Organisation) GetMaterialDeficiencyTransferOrRegistrarAgent() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialDeficiencyTransferOrRegistrarAgent
	}
	return nil
}

func (x *RT000D034_Organisation) GetMaterialDeficiencyDistributor() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialDeficiencyDistributor
	}
	return nil
}

func (x *RT000D034_Organisation) GetMaterialDeficiencyPortfolioManager() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialDeficiencyPortfolioManager
	}
	return nil
}

func (x *RT000D034_Organisation) GetMaterialDeficiencyInvestmentAdvisor() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialDeficiencyInvestmentAdvisor
	}
	return nil
}

func (x *RT000D034_Organisation) GetMaterialDeficiencyDepository() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialDeficiencyDepository
	}
	return nil
}

func (x *RT000D034_Organisation) GetMaterialDeficiencyOtherDelegate() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialDeficiencyOtherDelegate
	}
	return nil
}

func (x *RT000D034_Organisation) GetMeetMinimumCapitalRequirements() bool {
	if x != nil {
		return x.MeetMinimumCapitalRequirements
	}
	return false
}

func (x *RT000D034_Organisation) GetIfNotMeetingCapReqsDidBoardConveneExtraordinaryGeneralMeetingAndInformCssf() bool {
	if x != nil {
		return x.IfNotMeetingCapReqsDidBoardConveneExtraordinaryGeneralMeetingAndInformCssf
	}
	return false
}

func (x *RT000D034_Organisation) GetReceivedRequestFromForeignCompetentAuthorityConcerningPotentialIssue() bool {
	if x != nil {
		return x.ReceivedRequestFromForeignCompetentAuthorityConcerningPotentialIssue
	}
	return false
}

func (x *RT000D034_Organisation) GetReceivedRequestFromForeignCompetentAuthorityConcerningWrongdoings() bool {
	if x != nil {
		return x.ReceivedRequestFromForeignCompetentAuthorityConcerningWrongdoings
	}
	return false
}

func (x *RT000D034_Organisation) GetFundReceivedInvestorComplaintDuringYear() bool {
	if x != nil {
		return x.FundReceivedInvestorComplaintDuringYear
	}
	return false
}

func (x *RT000D034_Organisation) GetNumberOfInvestorComplaintsReceivedDuringYear() int32 {
	if x != nil {
		return x.NumberOfInvestorComplaintsReceivedDuringYear
	}
	return 0
}

func (x *RT000D034_Organisation) GetCouldAnyComplaintHaveMaterialImpactOnFund() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CouldAnyComplaintHaveMaterialImpactOnFund
	}
	return nil
}

func (x *RT000D034_Organisation) GetFundInvolvedInLitigationDuringYear() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FundInvolvedInLitigationDuringYear
	}
	return nil
}

func (x *RT000D034_Organisation) GetAnyCasesOfSuspectedOrActualFraud() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AnyCasesOfSuspectedOrActualFraud
	}
	return nil
}

func (x *RT000D034_Organisation) GetNotificationOfSuspectedFraud() bool {
	if x != nil {
		return x.NotificationOfSuspectedFraud
	}
	return false
}

func (x *RT000D034_Organisation) GetNumberOfNotificationsOfSuspectedFraud() int32 {
	if x != nil {
		return x.NumberOfNotificationsOfSuspectedFraud
	}
	return 0
}

func (x *RT000D034_Organisation) GetNotificationsOfSuspectedFraudSharedWithCssf() *RT000D034_YesNoExplain {
	if x != nil {
		return x.NotificationsOfSuspectedFraudSharedWithCssf
	}
	return nil
}

func (x *RT000D034_Organisation) GetAdoptedRiskManagementSystemOfSif() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AdoptedRiskManagementSystemOfSif
	}
	return nil
}

func (x *RT000D034_Organisation) GetRiskManagementSystemOfSifDateOfLastReview() *date.Date {
	if x != nil {
		return x.RiskManagementSystemOfSifDateOfLastReview
	}
	return nil
}

func (x *RT000D034_Organisation) GetEffectiveConflictsOfInterestPolicyInPlace() bool {
	if x != nil {
		return x.EffectiveConflictsOfInterestPolicyInPlace
	}
	return false
}

func (x *RT000D034_Organisation) GetAnyConflictsOfInterestIdentified() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AnyConflictsOfInterestIdentified
	}
	return nil
}

func (x *RT000D034_Organisation) GetRegisterOfConflictsMaintained() *RT000D034_YesNoExplain {
	if x != nil {
		return x.RegisterOfConflictsMaintained
	}
	return nil
}

func (x *RT000D034_Organisation) GetNumberOfConflictsRecorded() int32 {
	if x != nil {
		return x.NumberOfConflictsRecorded
	}
	return 0
}

func (x *RT000D034_Organisation) GetProceduresInPlaceToProtectFund() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProceduresInPlaceToProtectFund
	}
	return nil
}

func (x *RT000D034_Organisation) GetIfNoProceduresDidManagementActInInterestOfInvestors() *RT000D034_YesNoExplain {
	if x != nil {
		return x.IfNoProceduresDidManagementActInInterestOfInvestors
	}
	return nil
}

func (x *RT000D034_Organisation) GetIfNoProcedureWereConflictsReportedToInvestors() *RT000D034_YesNoExplain {
	if x != nil {
		return x.IfNoProcedureWereConflictsReportedToInvestors
	}
	return nil
}

func (x *RT000D034_Organisation) GetSoldToRetailInvestorsOnLookthroughBasis() bool {
	if x != nil {
		return x.SoldToRetailInvestorsOnLookthroughBasis
	}
	return false
}

func (x *RT000D034_Organisation) GetNumberFundsSoldToRetailInvestorsOnLookthroughBasis() int32 {
	if x != nil {
		return x.NumberFundsSoldToRetailInvestorsOnLookthroughBasis
	}
	return 0
}

func (x *RT000D034_Organisation) GetInvestorCategories() []RT000D034_Organisation_InformedInvestorCategories {
	if x != nil {
		return x.InvestorCategories
	}
	return nil
}

func (x *RT000D034_Organisation) GetProceduresInPlaceToEnsureInvestorsWellInformed() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProceduresInPlaceToEnsureInvestorsWellInformed
	}
	return nil
}

func (x *RT000D034_Organisation) GetProceduresInPlaceToEnsureAuditedAnnualReportCompliesWithRegulation() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProceduresInPlaceToEnsureAuditedAnnualReportCompliesWithRegulation
	}
	return nil
}

func (x *RT000D034_Organisation) GetProceduresInPlaceToEnsureAuditedAnnualReportCompliesWithConstitutiveDocuments() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProceduresInPlaceToEnsureAuditedAnnualReportCompliesWithConstitutiveDocuments
	}
	return nil
}

func (x *RT000D034_Organisation) GetProceduresInPlaceToEnsureAuditedAnnualReportCompliesWithFundAccountingStandard() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProceduresInPlaceToEnsureAuditedAnnualReportCompliesWithFundAccountingStandard
	}
	return nil
}

func (x *RT000D034_Organisation) GetReportOnActivitiesIncludedInAnnualReportAndAccurate() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ReportOnActivitiesIncludedInAnnualReportAndAccurate
	}
	return nil
}

// Definition of questions relating to the investment compliance of the fund
type RT000D034_InvestmentCompliance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1. Does the investment compliance control framework in place for the Fund provide for materialized, standardized and/or automated pre-trade investment compliance controls (including controls at portfolio manager level)? 1.1. If the answer to Q1. is NO, explain.
	PreTradeInvestmentComplianceAtPortfolioManagerLevel *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=pre_trade_investment_compliance_at_portfolio_manager_level,json=preTradeInvestmentComplianceAtPortfolioManagerLevel,proto3" json:"pre_trade_investment_compliance_at_portfolio_manager_level,omitempty"`
	// 2. Does the investment compliance control framework in place for the Fund provide for materialized, standardized and/or automated post-trade (ex post) investment compliance controls (i.e. controls realized by the IFM or specialized service provider independent from the portfolio manager)? 2.1. If the answer to Q2. is NO, explain.
	PostTradeInvestmentComplianceAtPortfolioManagerLevel *RT000D034_YesNoExplain `protobuf:"bytes,2,opt,name=post_trade_investment_compliance_at_portfolio_manager_level,json=postTradeInvestmentComplianceAtPortfolioManagerLevel,proto3" json:"post_trade_investment_compliance_at_portfolio_manager_level,omitempty"`
	// 3. Does the investment compliance control framework in place for the Fund provide for a delegation of the ongoing ex post investment compliance controls to a specialized service provider? 3.1. If the answer to Q3. is YES, provide the name of the specialized service provider
	DelegationOfOngoingExPostInvestmentCompliance *RT000D034_YesNoExplain `protobuf:"bytes,3,opt,name=delegation_of_ongoing_ex_post_investment_compliance,json=delegationOfOngoingExPostInvestmentCompliance,proto3" json:"delegation_of_ongoing_ex_post_investment_compliance,omitempty"`
	// 4. Does the ex post investment compliance control framework in place for the Fund cover all legal and regulatory investment restrictions (eligibility and investment restrictions limits) applicable to the Fund?
	ExPostInvestmentComplianceCoversAllLegalAndRegulatoryInvestmentRestrictions bool `protobuf:"varint,4,opt,name=ex_post_investment_compliance_covers_all_legal_and_regulatory_investment_restrictions,json=exPostInvestmentComplianceCoversAllLegalAndRegulatoryInvestmentRestrictions,proto3" json:"ex_post_investment_compliance_covers_all_legal_and_regulatory_investment_restrictions,omitempty"`
	// 4.1.1. If the answer to Q4.1. is YES, mention the concerned investment restrictions
	LegalAndRegulatoryInvestmentRestrictions []string `protobuf:"bytes,5,rep,name=legal_and_regulatory_investment_restrictions,json=legalAndRegulatoryInvestmentRestrictions,proto3" json:"legal_and_regulatory_investment_restrictions,omitempty"`
	// 4.2. If the answer to Q4. is NO, are there any investment restrictions that are not verified for only certain sub-funds?
	NotVerifiedLegalAndRegulatoryInvestmentRestrictionsByFund []*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund `protobuf:"bytes,6,rep,name=not_verified_legal_and_regulatory_investment_restrictions_by_fund,json=notVerifiedLegalAndRegulatoryInvestmentRestrictionsByFund,proto3" json:"not_verified_legal_and_regulatory_investment_restrictions_by_fund,omitempty"`
	// 5. Does the ex post investment compliance control framework in place for the Fund cover all contractual investment restrictions applicable to the Fund as laid down in the prospectus of the Fund (i.e. investment policy, etc.)?
	ExPostInvestmentComplianceCoversAllInvestmentRestrictionsInProspectus bool `protobuf:"varint,7,opt,name=ex_post_investment_compliance_covers_all_investment_restrictions_in_prospectus,json=exPostInvestmentComplianceCoversAllInvestmentRestrictionsInProspectus,proto3" json:"ex_post_investment_compliance_covers_all_investment_restrictions_in_prospectus,omitempty"`
	// 5.1.1. If the answer to Q5.1. is YES, mention the concerned investment restrictions
	InvestmentRestrictionsInProspectus []string `protobuf:"bytes,8,rep,name=investment_restrictions_in_prospectus,json=investmentRestrictionsInProspectus,proto3" json:"investment_restrictions_in_prospectus,omitempty"`
	// 5.2. If the answer to Q5. is NO, are there any investment restrictions that are not verified for only certain sub-funds?
	NotVerifiedProspectusInvestmentRestrictionsByFund []*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund `protobuf:"bytes,9,rep,name=not_verified_prospectus_investment_restrictions_by_fund,json=notVerifiedProspectusInvestmentRestrictionsByFund,proto3" json:"not_verified_prospectus_investment_restrictions_by_fund,omitempty"`
	// 6. Does the ex post investment compliance control framework in place for the Fund ensure, for each sub-fund, that all legal, regulatory and contractual investment restrictions are complied with at each NAV calculation?
	ExPostInvestmentComplianceCoversAllLegalAndRegulatoryInvestmentRestrictionsAtNavCalc bool `protobuf:"varint,10,opt,name=ex_post_investment_compliance_covers_all_legal_and_regulatory_investment_restrictions_at_nav_calc,json=exPostInvestmentComplianceCoversAllLegalAndRegulatoryInvestmentRestrictionsAtNavCalc,proto3" json:"ex_post_investment_compliance_covers_all_legal_and_regulatory_investment_restrictions_at_nav_calc,omitempty"`
	// 6.1.1. If the answer to Q6.1. is YES, mention the concerned investment restrictions
	LegalAndRegulatoryInvestmentRestrictionsAtNavCalc []string `protobuf:"bytes,11,rep,name=legal_and_regulatory_investment_restrictions_at_nav_calc,json=legalAndRegulatoryInvestmentRestrictionsAtNavCalc,proto3" json:"legal_and_regulatory_investment_restrictions_at_nav_calc,omitempty"`
	// 6.2. If the answer to Q6. is NO, are there any investment restrictions that are not verified for only certain sub-funds?
	NotVerifiedLegalAndRegulatoryInvestmentRestrictionsAtNavTimeByFund []*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund `protobuf:"bytes,12,rep,name=not_verified_legal_and_regulatory_investment_restrictions_at_nav_time_by_fund,json=notVerifiedLegalAndRegulatoryInvestmentRestrictionsAtNavTimeByFund,proto3" json:"not_verified_legal_and_regulatory_investment_restrictions_at_nav_time_by_fund,omitempty"`
	// Self assessment of compliance with UCITS legal and regulatory investment restrictions
	LegalAndRegulatoryInvestmentComplianceUcits *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS `protobuf:"bytes,13,opt,name=legal_and_regulatory_investment_compliance_ucits,json=legalAndRegulatoryInvestmentComplianceUcits,proto3" json:"legal_and_regulatory_investment_compliance_ucits,omitempty"`
	// Self assessment of compliance with SIF legal and regulatory investment restrictions
	LegalAndRegulatoryInvestmentComplianceSif *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF `protobuf:"bytes,14,opt,name=legal_and_regulatory_investment_compliance_sif,json=legalAndRegulatoryInvestmentComplianceSif,proto3" json:"legal_and_regulatory_investment_compliance_sif,omitempty"`
	// Self assessment of compliance with MMF legal and regulatory investment restrictions
	LegalAndRegulatoryInvestmentComplianceMmf *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF `protobuf:"bytes,15,opt,name=legal_and_regulatory_investment_compliance_mmf,json=legalAndRegulatoryInvestmentComplianceMmf,proto3" json:"legal_and_regulatory_investment_compliance_mmf,omitempty"`
	// 25. Did the (sub-)fund(s) hold during the year investments in securitizations that are in the scope of the Securitization Regulation?
	HeldInvestmentsInSecuritizations bool `protobuf:"varint,16,opt,name=held_investments_in_securitizations,json=heldInvestmentsInSecuritizations,proto3" json:"held_investments_in_securitizations,omitempty"`
	// 25.1. If the answer to Q25. is YES, did the (sub-)fund(s) comply on an ongoing basis during the year with the Securitization Regulation? 25.1.1. If the answer to Q25.1. is NO, explain
	CompliedWithSecuritizationRegulation *RT000D034_YesNoExplain `protobuf:"bytes,17,opt,name=complied_with_securitization_regulation,json=compliedWithSecuritizationRegulation,proto3" json:"complied_with_securitization_regulation,omitempty"`
	// 26. Did the (sub-)fund(s) comply on an ongoing basis during the year with the contractual investment restrictions laid down in the prospectus?
	CompliedWithInvestmentRestrictionsInProspectus *RT000D034_YesNoExplain `protobuf:"bytes,18,opt,name=complied_with_investment_restrictions_in_prospectus,json=compliedWithInvestmentRestrictionsInProspectus,proto3" json:"complied_with_investment_restrictions_in_prospectus,omitempty"`
	// 27. Does the organizational set up in place for the Fund (incl. at IFM level if applicable) provide for a formalized policy that covers the treatment of active and passive investment breaches that occur at the level of the (sub-)fund(s)? 27.1. If the answer to Q27. is NO, explain
	FormalizedPolicyInPlaceToHandleActiveAndPassiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,19,opt,name=formalized_policy_in_place_to_handle_active_and_passive_breaches,json=formalizedPolicyInPlaceToHandleActiveAndPassiveBreaches,proto3" json:"formalized_policy_in_place_to_handle_active_and_passive_breaches,omitempty"`
	// 28. How many passive investment breaches of legal / regulatory restrictions AND contractual investment restrictions did occur at the level of the (sub-)fund(s) during the year?
	NumberOfPassiveBreaches int32 `protobuf:"varint,20,opt,name=number_of_passive_breaches,json=numberOfPassiveBreaches,proto3" json:"number_of_passive_breaches,omitempty"`
	// 29. How many active investment breaches of legal / regulatory restrictions AND contractual investment restrictions did occur at the level of the (sub-)fund(s) during the year and were reported to the CSSF in accordance with Circular 02/77?
	NumberOfActiveInvestmentBreaches int32 `protobuf:"varint,21,opt,name=number_of_active_investment_breaches,json=numberOfActiveInvestmentBreaches,proto3" json:"number_of_active_investment_breaches,omitempty"`
	// 30. Did the Fund notify to the CSSF, prior to the issuance of the present SAQ, all detected active breaches of legal / regulatory restrictions AND contractual investment restrictions?
	CssfNotifiedOfAllPriorActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,22,opt,name=cssf_notified_of_all_prior_active_breaches,json=cssfNotifiedOfAllPriorActiveBreaches,proto3" json:"cssf_notified_of_all_prior_active_breaches,omitempty"`
}

func (x *RT000D034_InvestmentCompliance) Reset() {
	*x = RT000D034_InvestmentCompliance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_InvestmentCompliance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_InvestmentCompliance) ProtoMessage() {}

func (x *RT000D034_InvestmentCompliance) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_InvestmentCompliance.ProtoReflect.Descriptor instead.
func (*RT000D034_InvestmentCompliance) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RT000D034_InvestmentCompliance) GetPreTradeInvestmentComplianceAtPortfolioManagerLevel() *RT000D034_YesNoExplain {
	if x != nil {
		return x.PreTradeInvestmentComplianceAtPortfolioManagerLevel
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetPostTradeInvestmentComplianceAtPortfolioManagerLevel() *RT000D034_YesNoExplain {
	if x != nil {
		return x.PostTradeInvestmentComplianceAtPortfolioManagerLevel
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetDelegationOfOngoingExPostInvestmentCompliance() *RT000D034_YesNoExplain {
	if x != nil {
		return x.DelegationOfOngoingExPostInvestmentCompliance
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetExPostInvestmentComplianceCoversAllLegalAndRegulatoryInvestmentRestrictions() bool {
	if x != nil {
		return x.ExPostInvestmentComplianceCoversAllLegalAndRegulatoryInvestmentRestrictions
	}
	return false
}

func (x *RT000D034_InvestmentCompliance) GetLegalAndRegulatoryInvestmentRestrictions() []string {
	if x != nil {
		return x.LegalAndRegulatoryInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetNotVerifiedLegalAndRegulatoryInvestmentRestrictionsByFund() []*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund {
	if x != nil {
		return x.NotVerifiedLegalAndRegulatoryInvestmentRestrictionsByFund
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetExPostInvestmentComplianceCoversAllInvestmentRestrictionsInProspectus() bool {
	if x != nil {
		return x.ExPostInvestmentComplianceCoversAllInvestmentRestrictionsInProspectus
	}
	return false
}

func (x *RT000D034_InvestmentCompliance) GetInvestmentRestrictionsInProspectus() []string {
	if x != nil {
		return x.InvestmentRestrictionsInProspectus
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetNotVerifiedProspectusInvestmentRestrictionsByFund() []*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund {
	if x != nil {
		return x.NotVerifiedProspectusInvestmentRestrictionsByFund
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetExPostInvestmentComplianceCoversAllLegalAndRegulatoryInvestmentRestrictionsAtNavCalc() bool {
	if x != nil {
		return x.ExPostInvestmentComplianceCoversAllLegalAndRegulatoryInvestmentRestrictionsAtNavCalc
	}
	return false
}

func (x *RT000D034_InvestmentCompliance) GetLegalAndRegulatoryInvestmentRestrictionsAtNavCalc() []string {
	if x != nil {
		return x.LegalAndRegulatoryInvestmentRestrictionsAtNavCalc
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetNotVerifiedLegalAndRegulatoryInvestmentRestrictionsAtNavTimeByFund() []*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund {
	if x != nil {
		return x.NotVerifiedLegalAndRegulatoryInvestmentRestrictionsAtNavTimeByFund
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetLegalAndRegulatoryInvestmentComplianceUcits() *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS {
	if x != nil {
		return x.LegalAndRegulatoryInvestmentComplianceUcits
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetLegalAndRegulatoryInvestmentComplianceSif() *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF {
	if x != nil {
		return x.LegalAndRegulatoryInvestmentComplianceSif
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetLegalAndRegulatoryInvestmentComplianceMmf() *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF {
	if x != nil {
		return x.LegalAndRegulatoryInvestmentComplianceMmf
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetHeldInvestmentsInSecuritizations() bool {
	if x != nil {
		return x.HeldInvestmentsInSecuritizations
	}
	return false
}

func (x *RT000D034_InvestmentCompliance) GetCompliedWithSecuritizationRegulation() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithSecuritizationRegulation
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetCompliedWithInvestmentRestrictionsInProspectus() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithInvestmentRestrictionsInProspectus
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetFormalizedPolicyInPlaceToHandleActiveAndPassiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FormalizedPolicyInPlaceToHandleActiveAndPassiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance) GetNumberOfPassiveBreaches() int32 {
	if x != nil {
		return x.NumberOfPassiveBreaches
	}
	return 0
}

func (x *RT000D034_InvestmentCompliance) GetNumberOfActiveInvestmentBreaches() int32 {
	if x != nil {
		return x.NumberOfActiveInvestmentBreaches
	}
	return 0
}

func (x *RT000D034_InvestmentCompliance) GetCssfNotifiedOfAllPriorActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CssfNotifiedOfAllPriorActiveBreaches
	}
	return nil
}

// Definition of questions relating to valuation
type RT000D034_Valuation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1. Are the valuation policies for all types of investment(s) permitted by the prospectus subject to an appropriate description/disclosure in the prospectus? 1.1. If the answer to Q1. is NO, mention the type(s) of investment(s) not covered
	ValuationPoliciesAppropriatelyDisclosedInProspectus *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=valuation_policies_appropriately_disclosed_in_prospectus,json=valuationPoliciesAppropriatelyDisclosedInProspectus,proto3" json:"valuation_policies_appropriately_disclosed_in_prospectus,omitempty"`
	// 2. Are written valuation procedures covering all types of investment(s) held by the Fund during the year in place for the Fund (including at IFM level if applicable)? 2.1. If the answer to Q2. is NO, mention the type(s) of investment(s) not covered.
	WrittenValuationProceduresCoveringAllInvestmentsInPlace *RT000D034_YesNoExplain `protobuf:"bytes,2,opt,name=written_valuation_procedures_covering_all_investments_in_place,json=writtenValuationProceduresCoveringAllInvestmentsInPlace,proto3" json:"written_valuation_procedures_covering_all_investments_in_place,omitempty"`
	// 3. Did the Management of the Fund perform the following actions regarding the oversight of valuation: a. approve formally (e.g. minutes of a meeting, resolution) the valuation policies and procedures applicable for the Fund. If NO, explain.
	ManagementFormallyApprovedValuationPolicies *RT000D034_YesNoExplain `protobuf:"bytes,3,opt,name=management_formally_approved_valuation_policies,json=managementFormallyApprovedValuationPolicies,proto3" json:"management_formally_approved_valuation_policies,omitempty"`
	// 3. Did management of the Fund ensure, in the context of the formal approval of the valuation policies and procedures applicable for the Fund, their compliance with the legal and regulatory requirements and their appropriateness considering the investments held by the Fund? If NO, explain.
	ManagementEnsuredValuationPoliciesCompliant *RT000D034_YesNoExplain `protobuf:"bytes,4,opt,name=management_ensured_valuation_policies_compliant,json=managementEnsuredValuationPoliciesCompliant,proto3" json:"management_ensured_valuation_policies_compliant,omitempty"`
	// 3. Did management of the Fund c. approve formally the use of a model in the context of valuation of investments. If NO, explain.
	ManagementApprovedFormallyUseOfValuationModel *RT000D034_YesNoExplain `protobuf:"bytes,5,opt,name=management_approved_formally_use_of_valuation_model,json=managementApprovedFormallyUseOfValuationModel,proto3" json:"management_approved_formally_use_of_valuation_model,omitempty"`
	// 3. Did management d. approve formally the independence of the external valuer appointed, if any. If NO, explain
	ManagementApprovedFormallyIndependenceOfExternalValuerAppointed *RT000D034_YesNoExplain `protobuf:"bytes,6,opt,name=management_approved_formally_independence_of_external_valuer_appointed,json=managementApprovedFormallyIndependenceOfExternalValuerAppointed,proto3" json:"management_approved_formally_independence_of_external_valuer_appointed,omitempty"`
	// 4. Does the oversight by the Management of the Fund provide for a periodic review of the ongoing adequacy of the written valuation policies and procedures applicable for the Fund? 4.1. If the answer to Q4. is NO, explain
	ManagementConductsPeriodicReviewOfAdequacyOfValuationPoliciesAndProdcedures *RT000D034_YesNoExplain `protobuf:"bytes,7,opt,name=management_conducts_periodic_review_of_adequacy_of_valuation_policies_and_prodcedures,json=managementConductsPeriodicReviewOfAdequacyOfValuationPoliciesAndProdcedures,proto3" json:"management_conducts_periodic_review_of_adequacy_of_valuation_policies_and_prodcedures,omitempty"`
	// 4. Date of the last review of the written valuation policies and procedures applicable for the Fund.
	DateOfLatestPeriodicReviewOfValuationPolicies *date.Date `protobuf:"bytes,8,opt,name=date_of_latest_periodic_review_of_valuation_policies,json=dateOfLatestPeriodicReviewOfValuationPolicies,proto3" json:"date_of_latest_periodic_review_of_valuation_policies,omitempty"`
	// 5. Does the organisation of the Fund provide for an escalation process to the Management of the Fund (e.g. escalation by the IFM if any) in case of valuation issues, if any? 5.1. If the answer to Q5. is NO, explain
	OrganisationOfFundProvidesForEscalationProcessToManagementInCaseOfValuationIssues *RT000D034_YesNoExplain `protobuf:"bytes,9,opt,name=organisation_of_fund_provides_for_escalation_process_to_management_in_case_of_valuation_issues,json=organisationOfFundProvidesForEscalationProcessToManagementInCaseOfValuationIssues,proto3" json:"organisation_of_fund_provides_for_escalation_process_to_management_in_case_of_valuation_issues,omitempty"`
	// Self assessment of adherence to legal and regulatory valuation requirements - UCITS
	LegalAndRegulatoryValuationRequirementsUcits *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS `protobuf:"bytes,10,opt,name=legal_and_regulatory_valuation_requirements_ucits,json=legalAndRegulatoryValuationRequirementsUcits,proto3" json:"legal_and_regulatory_valuation_requirements_ucits,omitempty"`
	// Self assessment of adherence to legal and regulatory valuation requirements - UCI, SIF, SICAR
	LegalAndRegulatoryValuationRequirementsUciSifSicar *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR `protobuf:"bytes,11,opt,name=legal_and_regulatory_valuation_requirements_uci_sif_sicar,json=legalAndRegulatoryValuationRequirementsUciSifSicar,proto3" json:"legal_and_regulatory_valuation_requirements_uci_sif_sicar,omitempty"`
	// Self assessment of adherence to legal and regulatory valuation requirements - MMF
	LegalAndRegulatoryValuationRequirementsMmf *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF `protobuf:"bytes,12,opt,name=legal_and_regulatory_valuation_requirements_mmf,json=legalAndRegulatoryValuationRequirementsMmf,proto3" json:"legal_and_regulatory_valuation_requirements_mmf,omitempty"`
	// 15. Were all the investments held by the (sub-)fund(s) valued on an ongoing basis in accordance with the valuation policies laid down in the prospectus and the written valuation procedures applicable for the Fund? 15.1. If the answer to Q15. is NO, explain.
	AllInvestmentsHeldValuedInAccordanceWithValuationPoliciesInProspectus *RT000D034_YesNoExplain `protobuf:"bytes,13,opt,name=all_investments_held_valued_in_accordance_with_valuation_policies_in_prospectus,json=allInvestmentsHeldValuedInAccordanceWithValuationPoliciesInProspectus,proto3" json:"all_investments_held_valued_in_accordance_with_valuation_policies_in_prospectus,omitempty"`
	// 16. Did any (sub-)fund(s) invest a material portion of the NAV at year-end in assets or FDIs which are valued at a lower frequency than the net asset value determination?
	AnyFundsInvestMaterialPortionOfNavInAssetsOrFdisValuedAtLowerFrequencyThanNav bool `protobuf:"varint,14,opt,name=any_funds_invest_material_portion_of_nav_in_assets_or_fdis_valued_at_lower_frequency_than_nav,json=anyFundsInvestMaterialPortionOfNavInAssetsOrFdisValuedAtLowerFrequencyThanNav,proto3" json:"any_funds_invest_material_portion_of_nav_in_assets_or_fdis_valued_at_lower_frequency_than_nav,omitempty"`
	// Lower than NAV valuation frequency exposure across sub-funds
	InstrumentTypesValuedAtLowerThanNavFrequencyByFund []*RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund `protobuf:"bytes,15,rep,name=instrument_types_valued_at_lower_than_nav_frequency_by_fund,json=instrumentTypesValuedAtLowerThanNavFrequencyByFund,proto3" json:"instrument_types_valued_at_lower_than_nav_frequency_by_fund,omitempty"`
	// 17. Did any (sub-)fund(s) invest a material portion of the NAV in non-standard OTC FDIs at year-end? 32
	AnyFundsInvestedMaterialPortionOfNavInNonStandardOtcFdis bool `protobuf:"varint,16,opt,name=any_funds_invested_material_portion_of_nav_in_non_standard_otc_fdis,json=anyFundsInvestedMaterialPortionOfNavInNonStandardOtcFdis,proto3" json:"any_funds_invested_material_portion_of_nav_in_non_standard_otc_fdis,omitempty"`
	// 17. List any (sub-)fund(s) that invested a material portion of the NAV in non-standard OTC FDIs at year-end
	FundsInvestingMaterialPortionOfNavInNonStandardOtcFdis []*RT000D034_Valuation_MaxMinExposureByFund `protobuf:"bytes,17,rep,name=funds_investing_material_portion_of_nav_in_non_standard_otc_fdis,json=fundsInvestingMaterialPortionOfNavInNonStandardOtcFdis,proto3" json:"funds_investing_material_portion_of_nav_in_non_standard_otc_fdis,omitempty"`
	// 18. Did any (sub-)fund(s) invest a material portion of the NAV in investments for which the Management of the Fund decided to apply a haircut after the application (including at IFM level if applicable) of the valuation policies / procedures as at year-end?
	AnyFundsInvestedMaterialPortionOfNavHaircutInvestments bool `protobuf:"varint,18,opt,name=any_funds_invested_material_portion_of_nav_haircut_investments,json=anyFundsInvestedMaterialPortionOfNavHaircutInvestments,proto3" json:"any_funds_invested_material_portion_of_nav_haircut_investments,omitempty"`
	// 18. List any (sub-)fund(s) invest a material portion of the NAV in investments for which the Management of the Fund decided to apply a haircut after the application (including at IFM level if applicable) of the valuation policies / procedures as at year-end?
	FundsInvestingMaterialPortionOfNavHaircutInvestments []*RT000D034_Valuation_MaxMinExposureByFund `protobuf:"bytes,19,rep,name=funds_investing_material_portion_of_nav_haircut_investments,json=fundsInvestingMaterialPortionOfNavHaircutInvestments,proto3" json:"funds_investing_material_portion_of_nav_haircut_investments,omitempty"`
	// 18.2. If the answer to Q18. is YES, was the haircut decided by the Management of the Fund subject to an appropriate documentation, available to the CSSF upon request, that covers the following elements: (i) the valuation method and related rational (ii) the input (iii) the frequency of review. 18.2.1. If the answer to Q18.2. is NO, explain.
	HaircutDecidedByMangementSubjectToAppropriateDocumentation *RT000D034_YesNoExplain `protobuf:"bytes,20,opt,name=haircut_decided_by_mangement_subject_to_appropriate_documentation,json=haircutDecidedByMangementSubjectToAppropriateDocumentation,proto3" json:"haircut_decided_by_mangement_subject_to_appropriate_documentation,omitempty"`
	// 19. Did any (sub-)fund(s) invest a material portion of NAV in investments (assets and/or FDIs) facing, according to the Management of the Fund and based on the input of the IFM, if any, valuation uncertainties which could lead to an impact above materiality of the NAV of the Fund /concerned subfund(s) as at year-end?
	AnyFundsInvestedMaterialPortionOfNavValuationUncertainInvestments bool `protobuf:"varint,21,opt,name=any_funds_invested_material_portion_of_nav_valuation_uncertain_investments,json=anyFundsInvestedMaterialPortionOfNavValuationUncertainInvestments,proto3" json:"any_funds_invested_material_portion_of_nav_valuation_uncertain_investments,omitempty"`
	// 19. List any (sub-)fund(s) invest a material portion of NAV in investments (assets and/or FDIs) facing, according to the Management of the Fund and based on the input of the IFM, if any, valuation uncertainties which could lead to an impact above materiality of the NAV of the Fund /concerned subfund(s) as at year-end?
	FundsInvestingMaterialPortionOfNavValuationUncertainInvestments []*RT000D034_Valuation_MaxMinExposureByFund `protobuf:"bytes,22,rep,name=funds_investing_material_portion_of_nav_valuation_uncertain_investments,json=fundsInvestingMaterialPortionOfNavValuationUncertainInvestments,proto3" json:"funds_investing_material_portion_of_nav_valuation_uncertain_investments,omitempty"`
	// 20. Did any (sub-)fund(s) experience the materialization of an operational/IT risk (i.e. system outage) that did impact the NAV determination process? If Yes, explain each issue.
	ExperiencedOperationalOrItRiskImpactingNavDeterminationAcrossAllSubfunds *RT000D034_YesNoExplain `protobuf:"bytes,23,opt,name=experienced_operational_or_it_risk_impacting_nav_determination_across_all_subfunds,json=experiencedOperationalOrItRiskImpactingNavDeterminationAcrossAllSubfunds,proto3" json:"experienced_operational_or_it_risk_impacting_nav_determination_across_all_subfunds,omitempty"`
	// 20. Did specific (sub-)fund(s) experience the materialization of an operational/IT risk (i.e. system outage) that did impact the NAV determination process? If Yes, explain each issue.
	FundSpecificOperationalValuationIssues []*RT000D034_Valuation_FundSpecificExplanation `protobuf:"bytes,24,rep,name=fund_specific_operational_valuation_issues,json=fundSpecificOperationalValuationIssues,proto3" json:"fund_specific_operational_valuation_issues,omitempty"`
	// 21. Do the written valuation policies and procedures in place for the Fund in relation to quoted assets and listed FDIs provide for checks ensuring that the fair valuation applied is supported by sufficient market liquidity (i.e. trading volumes) for that asset? 21.1. If the answer to Q21. is NO, explain.
	WrittenValuationPoliciesProvideForLiquidityChecks *RT000D034_YesNoExplain `protobuf:"bytes,25,opt,name=written_valuation_policies_provide_for_liquidity_checks,json=writtenValuationPoliciesProvideForLiquidityChecks,proto3" json:"written_valuation_policies_provide_for_liquidity_checks,omitempty"`
	// 22. Did any (sub-)fund(s) invest a material portion of the NAV in assets or FDIs which are valued on the basis of stale prices as at year-end?
	AnyFundsInvestedMaterialPortionValuedOnStalePrices bool `protobuf:"varint,26,opt,name=any_funds_invested_material_portion_valued_on_stale_prices,json=anyFundsInvestedMaterialPortionValuedOnStalePrices,proto3" json:"any_funds_invested_material_portion_valued_on_stale_prices,omitempty"`
	// 22. List (sub-)fund(s) invest a material portion of the NAV in assets or FDIs which are valued on the basis of stale prices as at year-end
	FundsInvestedMaterialPortionValuedOnStalePrices []*RT000D034_Valuation_MaxMinExposureByFund `protobuf:"bytes,27,rep,name=funds_invested_material_portion_valued_on_stale_prices,json=fundsInvestedMaterialPortionValuedOnStalePrices,proto3" json:"funds_invested_material_portion_valued_on_stale_prices,omitempty"`
	// 23. Did any (sub-)fund(s) invest at year-end a material portion of the NAV in investments (each type of investments : e.g. structured products, OTC FDIs, loans, bonds, unlisted securities, private equity companies) which are valued with prices / valuations coming from a source which is not independent as at year-end (e.g. from the portfolio manager/adviser or from the issuer of the investment)?
	AnyFundsInvestedMaterialPortionValuedByNonIndependentSource bool `protobuf:"varint,28,opt,name=any_funds_invested_material_portion_valued_by_non_independent_source,json=anyFundsInvestedMaterialPortionValuedByNonIndependentSource,proto3" json:"any_funds_invested_material_portion_valued_by_non_independent_source,omitempty"`
	// 23. List any (sub-)fund(s) invest at year-end a material portion of the NAV in investments (each type of investments : e.g. structured products, OTC FDIs, loans, bonds, unlisted securities, private equity companies) which are valued with prices / valuations coming from a source which is not independent as at year-end (e.g. from the portfolio manager/adviser or from the issuer of the investment)
	FundsInvestedMaterialPortionValuedByNonIndependentSource []*RT000D034_Valuation_MaxMinExposureByFund `protobuf:"bytes,29,rep,name=funds_invested_material_portion_valued_by_non_independent_source,json=fundsInvestedMaterialPortionValuedByNonIndependentSource,proto3" json:"funds_invested_material_portion_valued_by_non_independent_source,omitempty"`
	// 23.2. If the answer to Q23. is YES, were any procedures (notably based on independent up-to-date financial data) carried out for any (sub-)fund(s) to ensure that all the prices / values, obtained from a source which is not independent at year-end, correspond to the fair value of the investment?
	IfValuationNotIndependentProceduresCarriedOutToEnsureFairValuation *RT000D034_YesNoExplain `protobuf:"bytes,30,opt,name=if_valuation_not_independent_procedures_carried_out_to_ensure_fair_valuation,json=ifValuationNotIndependentProceduresCarriedOutToEnsureFairValuation,proto3" json:"if_valuation_not_independent_procedures_carried_out_to_ensure_fair_valuation,omitempty"`
	// 24. Did the Management of the Fund refuse to approve a valuation provided by a external valuer?
	ManagementRefusedValuationProvidedByExternalValuer bool `protobuf:"varint,31,opt,name=management_refused_valuation_provided_by_external_valuer,json=managementRefusedValuationProvidedByExternalValuer,proto3" json:"management_refused_valuation_provided_by_external_valuer,omitempty"`
	// 24. List instances where the Management of the Fund refuse to approve a valuation provided by a external valuer
	InstancesManagementRefusedExternalValuation []*RT000D034_Valuation_InvestmentDetailsByFund `protobuf:"bytes,32,rep,name=instances_management_refused_external_valuation,json=instancesManagementRefusedExternalValuation,proto3" json:"instances_management_refused_external_valuation,omitempty"`
	// 25. Did an external valuer apply a disclaimer as a result of uncertainties around the fair valuation provided OR refuse to provide a fair valuation during the year, notably due to uncertainties in valuation or lack of information?
	ExternalValuerRefusedToProvideValuation bool `protobuf:"varint,33,opt,name=external_valuer_refused_to_provide_valuation,json=externalValuerRefusedToProvideValuation,proto3" json:"external_valuer_refused_to_provide_valuation,omitempty"`
	// 25. List instances where an external valuer apply a disclaimer as a result of uncertainties around the fair valuation provided OR refuse to provide a fair valuation during the year, notably due to uncertainties in valuation or lack of information
	InstancesValuerRefusedToProvideValuation []*RT000D034_Valuation_InvestmentDetailsByFund `protobuf:"bytes,34,rep,name=instances_valuer_refused_to_provide_valuation,json=instancesValuerRefusedToProvideValuation,proto3" json:"instances_valuer_refused_to_provide_valuation,omitempty"`
	// 26. Did any (sub-)fund(s) invest a material portion of the NAV in target investment funds (excluding ETF, UCITS, UCITS equivalent and MMFs) as at year-end?
	AnyFundInvestedMaterialPortionOfNavInTargetInvestmentFunds bool `protobuf:"varint,35,opt,name=any_fund_invested_material_portion_of_nav_in_target_investment_funds,json=anyFundInvestedMaterialPortionOfNavInTargetInvestmentFunds,proto3" json:"any_fund_invested_material_portion_of_nav_in_target_investment_funds,omitempty"`
	// 26.1. If any (sub-)fund(s) invest a material portion of the NAV in target investment funds, were all these target investment funds (excluding ETF, UCITS, UCITS equivalent and MMFs) held by (sub-)fund(s) at year-end subject to a documented valuation control based on their latest audited financial statements (i.e. audit opinion, comparison with audited NAV)? If no, explain.
	TargetInvestmentFundsSubjectToDocumentedValuationControls *RT000D034_YesNoExplain `protobuf:"bytes,36,opt,name=target_investment_funds_subject_to_documented_valuation_controls,json=targetInvestmentFundsSubjectToDocumentedValuationControls,proto3" json:"target_investment_funds_subject_to_documented_valuation_controls,omitempty"`
	// 27. Did any (sub-)fund invest at year end a material portion of the NAV in unquoted investments (assets and/or FDIs) which expose the (sub-)fund to a company for which the financial statements are audited?
	AnyFundInvestedMaterialPortionInUnquotedInvestmentsInAuditedCompany bool `protobuf:"varint,37,opt,name=any_fund_invested_material_portion_in_unquoted_investments_in_audited_company,json=anyFundInvestedMaterialPortionInUnquotedInvestmentsInAuditedCompany,proto3" json:"any_fund_invested_material_portion_in_unquoted_investments_in_audited_company,omitempty"`
	// 27.1. If the answer to Q27. is YES, were all such investments held by any (sub-)fund at year-end subject to a documented valuation control based on their latest audited financial statements issued (i.e. audit opinion, NAV)? 27.1.1. If the answer to Q27.1. is NO, explain
	ReliedOnAuditedStatementsForMaterialUnquotedInvestmentsInAuditedCompany *RT000D034_YesNoExplain `protobuf:"bytes,38,opt,name=relied_on_audited_statements_for_material_unquoted_investments_in_audited_company,json=reliedOnAuditedStatementsForMaterialUnquotedInvestmentsInAuditedCompany,proto3" json:"relied_on_audited_statements_for_material_unquoted_investments_in_audited_company,omitempty"`
	// 28. Did any (sub-)fund sell an investment (asset or FDI) with a material discount compared to its last valuation?
	AnyFundSoldInvestmentAtMaterialDiscount bool `protobuf:"varint,39,opt,name=any_fund_sold_investment_at_material_discount,json=anyFundSoldInvestmentAtMaterialDiscount,proto3" json:"any_fund_sold_investment_at_material_discount,omitempty"`
	// 28. List investments (asset or FDI) sold at a material discount compared to its last valuation, by fund
	InstrumentsSoldAtMaterialDiscountByFund []*RT000D034_Valuation_InvestmentDetailsByFund `protobuf:"bytes,40,rep,name=instruments_sold_at_material_discount_by_fund,json=instrumentsSoldAtMaterialDiscountByFund,proto3" json:"instruments_sold_at_material_discount_by_fund,omitempty"`
	// 29. Does the organizational set up in place for the Fund (incl. at IFM level if applicable) provide for a documented procedure whose objective is to ensure that transactions on quoted and unquoted investments (incl. FDIs) concluded with related parties to the Fund are done on an arm’s length basis ? If no, explain.
	DocumentedProcedureInPlaceToEnsureRelatedPartyTransactionsArmsLength *RT000D034_YesNoExplain `protobuf:"bytes,41,opt,name=documented_procedure_in_place_to_ensure_related_party_transactions_arms_length,json=documentedProcedureInPlaceToEnsureRelatedPartyTransactionsArmsLength,proto3" json:"documented_procedure_in_place_to_ensure_related_party_transactions_arms_length,omitempty"`
	// 30. Were all transactions on assets or FDIs (purchases or sales) concluded by any (sub-)fund(s) during the year done on arm’s length basis?
	AllTransactionsOnAssetsAndFdisInYearArmsLength bool `protobuf:"varint,42,opt,name=all_transactions_on_assets_and_fdis_in_year_arms_length,json=allTransactionsOnAssetsAndFdisInYearArmsLength,proto3" json:"all_transactions_on_assets_and_fdis_in_year_arms_length,omitempty"`
	// 30. List all  investment(s) that were not made on arm's length, related conditions and impacts
	NonArmsLengthInvestments []*RT000D034_Valuation_InvestmentDetailsByFund `protobuf:"bytes,43,rep,name=non_arms_length_investments,json=nonArmsLengthInvestments,proto3" json:"non_arms_length_investments,omitempty"`
	// 30. List all concerned transactions concluded with a related party (e.g. of the Fund, the IFM, the depositary, the portfolio manager/adviser)?
	NonArmsLengthInvestmentsRelatedParty []*RT000D034_Valuation_InvestmentDetailsByFund `protobuf:"bytes,44,rep,name=non_arms_length_investments_related_party,json=nonArmsLengthInvestmentsRelatedParty,proto3" json:"non_arms_length_investments_related_party,omitempty"`
	// 30.2.2. If the answer to Q30.2. is YES, will the Management of the Fund ensure that these transactions with a related party are described in the notes to the annual report of the year as required by the article 65 7ter of the Law of 19 December 2002?
	NonArmsLengthRelatedPartyTransactionsDescribedInAnnualReportNotes *RT000D034_YesNoExplain `protobuf:"bytes,45,opt,name=non_arms_length_related_party_transactions_described_in_annual_report_notes,json=nonArmsLengthRelatedPartyTransactionsDescribedInAnnualReportNotes,proto3" json:"non_arms_length_related_party_transactions_described_in_annual_report_notes,omitempty"`
}

func (x *RT000D034_Valuation) Reset() {
	*x = RT000D034_Valuation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation) ProtoMessage() {}

func (x *RT000D034_Valuation) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RT000D034_Valuation) GetValuationPoliciesAppropriatelyDisclosedInProspectus() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ValuationPoliciesAppropriatelyDisclosedInProspectus
	}
	return nil
}

func (x *RT000D034_Valuation) GetWrittenValuationProceduresCoveringAllInvestmentsInPlace() *RT000D034_YesNoExplain {
	if x != nil {
		return x.WrittenValuationProceduresCoveringAllInvestmentsInPlace
	}
	return nil
}

func (x *RT000D034_Valuation) GetManagementFormallyApprovedValuationPolicies() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementFormallyApprovedValuationPolicies
	}
	return nil
}

func (x *RT000D034_Valuation) GetManagementEnsuredValuationPoliciesCompliant() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementEnsuredValuationPoliciesCompliant
	}
	return nil
}

func (x *RT000D034_Valuation) GetManagementApprovedFormallyUseOfValuationModel() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementApprovedFormallyUseOfValuationModel
	}
	return nil
}

func (x *RT000D034_Valuation) GetManagementApprovedFormallyIndependenceOfExternalValuerAppointed() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementApprovedFormallyIndependenceOfExternalValuerAppointed
	}
	return nil
}

func (x *RT000D034_Valuation) GetManagementConductsPeriodicReviewOfAdequacyOfValuationPoliciesAndProdcedures() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementConductsPeriodicReviewOfAdequacyOfValuationPoliciesAndProdcedures
	}
	return nil
}

func (x *RT000D034_Valuation) GetDateOfLatestPeriodicReviewOfValuationPolicies() *date.Date {
	if x != nil {
		return x.DateOfLatestPeriodicReviewOfValuationPolicies
	}
	return nil
}

func (x *RT000D034_Valuation) GetOrganisationOfFundProvidesForEscalationProcessToManagementInCaseOfValuationIssues() *RT000D034_YesNoExplain {
	if x != nil {
		return x.OrganisationOfFundProvidesForEscalationProcessToManagementInCaseOfValuationIssues
	}
	return nil
}

func (x *RT000D034_Valuation) GetLegalAndRegulatoryValuationRequirementsUcits() *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS {
	if x != nil {
		return x.LegalAndRegulatoryValuationRequirementsUcits
	}
	return nil
}

func (x *RT000D034_Valuation) GetLegalAndRegulatoryValuationRequirementsUciSifSicar() *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR {
	if x != nil {
		return x.LegalAndRegulatoryValuationRequirementsUciSifSicar
	}
	return nil
}

func (x *RT000D034_Valuation) GetLegalAndRegulatoryValuationRequirementsMmf() *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF {
	if x != nil {
		return x.LegalAndRegulatoryValuationRequirementsMmf
	}
	return nil
}

func (x *RT000D034_Valuation) GetAllInvestmentsHeldValuedInAccordanceWithValuationPoliciesInProspectus() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllInvestmentsHeldValuedInAccordanceWithValuationPoliciesInProspectus
	}
	return nil
}

func (x *RT000D034_Valuation) GetAnyFundsInvestMaterialPortionOfNavInAssetsOrFdisValuedAtLowerFrequencyThanNav() bool {
	if x != nil {
		return x.AnyFundsInvestMaterialPortionOfNavInAssetsOrFdisValuedAtLowerFrequencyThanNav
	}
	return false
}

func (x *RT000D034_Valuation) GetInstrumentTypesValuedAtLowerThanNavFrequencyByFund() []*RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund {
	if x != nil {
		return x.InstrumentTypesValuedAtLowerThanNavFrequencyByFund
	}
	return nil
}

func (x *RT000D034_Valuation) GetAnyFundsInvestedMaterialPortionOfNavInNonStandardOtcFdis() bool {
	if x != nil {
		return x.AnyFundsInvestedMaterialPortionOfNavInNonStandardOtcFdis
	}
	return false
}

func (x *RT000D034_Valuation) GetFundsInvestingMaterialPortionOfNavInNonStandardOtcFdis() []*RT000D034_Valuation_MaxMinExposureByFund {
	if x != nil {
		return x.FundsInvestingMaterialPortionOfNavInNonStandardOtcFdis
	}
	return nil
}

func (x *RT000D034_Valuation) GetAnyFundsInvestedMaterialPortionOfNavHaircutInvestments() bool {
	if x != nil {
		return x.AnyFundsInvestedMaterialPortionOfNavHaircutInvestments
	}
	return false
}

func (x *RT000D034_Valuation) GetFundsInvestingMaterialPortionOfNavHaircutInvestments() []*RT000D034_Valuation_MaxMinExposureByFund {
	if x != nil {
		return x.FundsInvestingMaterialPortionOfNavHaircutInvestments
	}
	return nil
}

func (x *RT000D034_Valuation) GetHaircutDecidedByMangementSubjectToAppropriateDocumentation() *RT000D034_YesNoExplain {
	if x != nil {
		return x.HaircutDecidedByMangementSubjectToAppropriateDocumentation
	}
	return nil
}

func (x *RT000D034_Valuation) GetAnyFundsInvestedMaterialPortionOfNavValuationUncertainInvestments() bool {
	if x != nil {
		return x.AnyFundsInvestedMaterialPortionOfNavValuationUncertainInvestments
	}
	return false
}

func (x *RT000D034_Valuation) GetFundsInvestingMaterialPortionOfNavValuationUncertainInvestments() []*RT000D034_Valuation_MaxMinExposureByFund {
	if x != nil {
		return x.FundsInvestingMaterialPortionOfNavValuationUncertainInvestments
	}
	return nil
}

func (x *RT000D034_Valuation) GetExperiencedOperationalOrItRiskImpactingNavDeterminationAcrossAllSubfunds() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ExperiencedOperationalOrItRiskImpactingNavDeterminationAcrossAllSubfunds
	}
	return nil
}

func (x *RT000D034_Valuation) GetFundSpecificOperationalValuationIssues() []*RT000D034_Valuation_FundSpecificExplanation {
	if x != nil {
		return x.FundSpecificOperationalValuationIssues
	}
	return nil
}

func (x *RT000D034_Valuation) GetWrittenValuationPoliciesProvideForLiquidityChecks() *RT000D034_YesNoExplain {
	if x != nil {
		return x.WrittenValuationPoliciesProvideForLiquidityChecks
	}
	return nil
}

func (x *RT000D034_Valuation) GetAnyFundsInvestedMaterialPortionValuedOnStalePrices() bool {
	if x != nil {
		return x.AnyFundsInvestedMaterialPortionValuedOnStalePrices
	}
	return false
}

func (x *RT000D034_Valuation) GetFundsInvestedMaterialPortionValuedOnStalePrices() []*RT000D034_Valuation_MaxMinExposureByFund {
	if x != nil {
		return x.FundsInvestedMaterialPortionValuedOnStalePrices
	}
	return nil
}

func (x *RT000D034_Valuation) GetAnyFundsInvestedMaterialPortionValuedByNonIndependentSource() bool {
	if x != nil {
		return x.AnyFundsInvestedMaterialPortionValuedByNonIndependentSource
	}
	return false
}

func (x *RT000D034_Valuation) GetFundsInvestedMaterialPortionValuedByNonIndependentSource() []*RT000D034_Valuation_MaxMinExposureByFund {
	if x != nil {
		return x.FundsInvestedMaterialPortionValuedByNonIndependentSource
	}
	return nil
}

func (x *RT000D034_Valuation) GetIfValuationNotIndependentProceduresCarriedOutToEnsureFairValuation() *RT000D034_YesNoExplain {
	if x != nil {
		return x.IfValuationNotIndependentProceduresCarriedOutToEnsureFairValuation
	}
	return nil
}

func (x *RT000D034_Valuation) GetManagementRefusedValuationProvidedByExternalValuer() bool {
	if x != nil {
		return x.ManagementRefusedValuationProvidedByExternalValuer
	}
	return false
}

func (x *RT000D034_Valuation) GetInstancesManagementRefusedExternalValuation() []*RT000D034_Valuation_InvestmentDetailsByFund {
	if x != nil {
		return x.InstancesManagementRefusedExternalValuation
	}
	return nil
}

func (x *RT000D034_Valuation) GetExternalValuerRefusedToProvideValuation() bool {
	if x != nil {
		return x.ExternalValuerRefusedToProvideValuation
	}
	return false
}

func (x *RT000D034_Valuation) GetInstancesValuerRefusedToProvideValuation() []*RT000D034_Valuation_InvestmentDetailsByFund {
	if x != nil {
		return x.InstancesValuerRefusedToProvideValuation
	}
	return nil
}

func (x *RT000D034_Valuation) GetAnyFundInvestedMaterialPortionOfNavInTargetInvestmentFunds() bool {
	if x != nil {
		return x.AnyFundInvestedMaterialPortionOfNavInTargetInvestmentFunds
	}
	return false
}

func (x *RT000D034_Valuation) GetTargetInvestmentFundsSubjectToDocumentedValuationControls() *RT000D034_YesNoExplain {
	if x != nil {
		return x.TargetInvestmentFundsSubjectToDocumentedValuationControls
	}
	return nil
}

func (x *RT000D034_Valuation) GetAnyFundInvestedMaterialPortionInUnquotedInvestmentsInAuditedCompany() bool {
	if x != nil {
		return x.AnyFundInvestedMaterialPortionInUnquotedInvestmentsInAuditedCompany
	}
	return false
}

func (x *RT000D034_Valuation) GetReliedOnAuditedStatementsForMaterialUnquotedInvestmentsInAuditedCompany() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ReliedOnAuditedStatementsForMaterialUnquotedInvestmentsInAuditedCompany
	}
	return nil
}

func (x *RT000D034_Valuation) GetAnyFundSoldInvestmentAtMaterialDiscount() bool {
	if x != nil {
		return x.AnyFundSoldInvestmentAtMaterialDiscount
	}
	return false
}

func (x *RT000D034_Valuation) GetInstrumentsSoldAtMaterialDiscountByFund() []*RT000D034_Valuation_InvestmentDetailsByFund {
	if x != nil {
		return x.InstrumentsSoldAtMaterialDiscountByFund
	}
	return nil
}

func (x *RT000D034_Valuation) GetDocumentedProcedureInPlaceToEnsureRelatedPartyTransactionsArmsLength() *RT000D034_YesNoExplain {
	if x != nil {
		return x.DocumentedProcedureInPlaceToEnsureRelatedPartyTransactionsArmsLength
	}
	return nil
}

func (x *RT000D034_Valuation) GetAllTransactionsOnAssetsAndFdisInYearArmsLength() bool {
	if x != nil {
		return x.AllTransactionsOnAssetsAndFdisInYearArmsLength
	}
	return false
}

func (x *RT000D034_Valuation) GetNonArmsLengthInvestments() []*RT000D034_Valuation_InvestmentDetailsByFund {
	if x != nil {
		return x.NonArmsLengthInvestments
	}
	return nil
}

func (x *RT000D034_Valuation) GetNonArmsLengthInvestmentsRelatedParty() []*RT000D034_Valuation_InvestmentDetailsByFund {
	if x != nil {
		return x.NonArmsLengthInvestmentsRelatedParty
	}
	return nil
}

func (x *RT000D034_Valuation) GetNonArmsLengthRelatedPartyTransactionsDescribedInAnnualReportNotes() *RT000D034_YesNoExplain {
	if x != nil {
		return x.NonArmsLengthRelatedPartyTransactionsDescribedInAnnualReportNotes
	}
	return nil
}

// Definition of questions relating to NAV determination
type RT000D034_NAVDeterminiation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1. Which accounting standards were adopted by the Fund for the preparation of the annual report?
	AdoptedAccountingStandards string `protobuf:"bytes,1,opt,name=adopted_accounting_standards,json=adoptedAccountingStandards,proto3" json:"adopted_accounting_standards,omitempty"`
	// 2. Has the Fund consistently been applying the accounting standards, policies and principles in the context of the determination of each NAV during the year?
	ConsistentApplicationOfAccountingStandardsToNavDetermination bool `protobuf:"varint,3,opt,name=consistent_application_of_accounting_standards_to_nav_determination,json=consistentApplicationOfAccountingStandardsToNavDetermination,proto3" json:"consistent_application_of_accounting_standards_to_nav_determination,omitempty"`
	// 2. 2.1. If changes, will the material changes in accounting standards, policies and principles implemented during the year be properly disclosed in the audited annual report in compliance with the applicable accounting standard? If no, explain
	MaterialChangesDisclosedInAuditedAnnualReport *RT000D034_YesNoExplain `protobuf:"bytes,4,opt,name=material_changes_disclosed_in_audited_annual_report,json=materialChangesDisclosedInAuditedAnnualReport,proto3" json:"material_changes_disclosed_in_audited_annual_report,omitempty"`
	// 3. Was a documented assessment performed for the Fund regarding the risk of market timing for all the active sub-funds? If no, explain.
	DocumentedAssessmentPerformedRegardingMarketTimingRisk *RT000D034_YesNoExplain `protobuf:"bytes,5,opt,name=documented_assessment_performed_regarding_market_timing_risk,json=documentedAssessmentPerformedRegardingMarketTimingRisk,proto3" json:"documented_assessment_performed_regarding_market_timing_risk,omitempty"`
	// 4. Are there any (sub-)fund(s), due to their structure/set-up, exposed to the risk of market timing?
	AnyFundsExposedToRiskOfMarketTiming bool `protobuf:"varint,6,opt,name=any_funds_exposed_to_risk_of_market_timing,json=anyFundsExposedToRiskOfMarketTiming,proto3" json:"any_funds_exposed_to_risk_of_market_timing,omitempty"`
	// List any sub funds which, due to their structure/set-up, are exposed to the risk of market timing?
	FundsExposedToMarketTiming []*RT000D034_NAVDeterminiation_FundInformation `protobuf:"bytes,7,rep,name=funds_exposed_to_market_timing,json=fundsExposedToMarketTiming,proto3" json:"funds_exposed_to_market_timing,omitempty"`
	// 4.2. If any (sub-)fund(s) exposed to market timing, have adequate measures of protection and/or control been put in placefor the Fund (considering also service provider(s)) to prevent and avoid market timing? If no explain.
	AdequateMeasuresInPlaceToAvoidMarketTiming *RT000D034_YesNoExplain `protobuf:"bytes,8,opt,name=adequate_measures_in_place_to_avoid_market_timing,json=adequateMeasuresInPlaceToAvoidMarketTiming,proto3" json:"adequate_measures_in_place_to_avoid_market_timing,omitempty"`
	// 4.3. If the answer to Q4. is YES, have adequate measures been taken by the Fund (considering also service providers of the Fund) to avoid the risk that any employee of the service providers acting for the Fund or any person who holds or is likely to hold privileged information can take advantage of this information either directly or through another person? If no, explain.
	AdequateMeasuresInPlaceToAvoidMarketTimingByEmployees *RT000D034_YesNoExplain `protobuf:"bytes,9,opt,name=adequate_measures_in_place_to_avoid_market_timing_by_employees,json=adequateMeasuresInPlaceToAvoidMarketTimingByEmployees,proto3" json:"adequate_measures_in_place_to_avoid_market_timing_by_employees,omitempty"`
	// 5. Was any instance of market timing practice identified during the year? If Yes, explain
	AnyInstanceOfMarketTimingIdentified *RT000D034_YesNoExplain `protobuf:"bytes,10,opt,name=any_instance_of_market_timing_identified,json=anyInstanceOfMarketTimingIdentified,proto3" json:"any_instance_of_market_timing_identified,omitempty"`
	// 5. Was an identified instance of market timing executed (not blocked). If Yes, explain.
	AnyInstanceOfMarketTimingExecuted *RT000D034_YesNoExplain `protobuf:"bytes,11,opt,name=any_instance_of_market_timing_executed,json=anyInstanceOfMarketTimingExecuted,proto3" json:"any_instance_of_market_timing_executed,omitempty"`
	// 6. Were appropriate measures put in place for the Fund to ensure an ongoing compliance with the cutoff time disclosed in the prospectus?  If no, explain.
	AppropriateMeasuresInPlaceToEnsureComplianceWithProspectusCutoffTime *RT000D034_YesNoExplain `protobuf:"bytes,12,opt,name=appropriate_measures_in_place_to_ensure_compliance_with_prospectus_cutoff_time,json=appropriateMeasuresInPlaceToEnsureComplianceWithProspectusCutoffTime,proto3" json:"appropriate_measures_in_place_to_ensure_compliance_with_prospectus_cutoff_time,omitempty"`
	// 7. Was an instance of late trading practice identified during the year? If Yes, explain.
	InstanceOfLateTradingIdentifiedDuringYear *RT000D034_YesNoExplain `protobuf:"bytes,13,opt,name=instance_of_late_trading_identified_during_year,json=instanceOfLateTradingIdentifiedDuringYear,proto3" json:"instance_of_late_trading_identified_during_year,omitempty"`
	// 8. Has any intermediary been appointed on behalf of the Fund to be in charge of the marketing of the Fund?
	HasAnyIntermediaryBeenAppointedToMarketFund bool `protobuf:"varint,14,opt,name=has_any_intermediary_been_appointed_to_market_fund,json=hasAnyIntermediaryBeenAppointedToMarketFund,proto3" json:"has_any_intermediary_been_appointed_to_market_fund,omitempty"`
	// 8.1. If the answer to Q8. is YES, did the Fund obtain from each intermediary a written confirmation/signed contract mentioning to not allow transactions which the intermediary knows to be or has reasons to believe to be related to market timing? If no, explain
	WrittenConfirmationProhibitingMarketTimingIfIntermediaryAppointed *RT000D034_YesNoExplain `protobuf:"bytes,15,opt,name=written_confirmation_prohibiting_market_timing_if_intermediary_appointed,json=writtenConfirmationProhibitingMarketTimingIfIntermediaryAppointed,proto3" json:"written_confirmation_prohibiting_market_timing_if_intermediary_appointed,omitempty"`
	// 8.2. If the answer to Q8. is YES, did the Fund obtain from each intermediary a written confirmation/signed contract pursuant to which the intermediary undertakes towards the UCI to transmit to the transfer agent of the UCI, for the processing at the NAV applicable on such day, only such orders which were received before such cut-off time?
	WrittenConfirmationFromIntermediaryToTransmitOrdersSameDay *RT000D034_YesNoExplain `protobuf:"bytes,16,opt,name=written_confirmation_from_intermediary_to_transmit_orders_same_day,json=writtenConfirmationFromIntermediaryToTransmitOrdersSameDay,proto3" json:"written_confirmation_from_intermediary_to_transmit_orders_same_day,omitempty"`
	// 9. Does the prospectus allow the use of an Anti-Dilution Levy (ADL)?
	ProspectusAllowsForUseOfAdl bool `protobuf:"varint,17,opt,name=prospectus_allows_for_use_of_adl,json=prospectusAllowsForUseOfAdl,proto3" json:"prospectus_allows_for_use_of_adl,omitempty"`
	// 9.1. If prospectus allows for ADL, does the prospectus indicate clear circumstances under which an ADL may be used by any (sub-)fund(s)? If NO, explain.
	ProspectusIndicatesCircumstancesWhereAdlMayBeUsed *RT000D034_YesNoExplain `protobuf:"bytes,18,opt,name=prospectus_indicates_circumstances_where_adl_may_be_used,json=prospectusIndicatesCircumstancesWhereAdlMayBeUsed,proto3" json:"prospectus_indicates_circumstances_where_adl_may_be_used,omitempty"`
	// 9.2. If prospectus allows for ADL, does the prospectus disclose the maximum ADL (as a % of NAV per share/unit) authorised under normal circumstances for any (sub-)fund? If NO, explain.
	ProspectusDisclosesMaximumAdlAuthorised *RT000D034_YesNoExplain `protobuf:"bytes,19,opt,name=prospectus_discloses_maximum_adl_authorised,json=prospectusDisclosesMaximumAdlAuthorised,proto3" json:"prospectus_discloses_maximum_adl_authorised,omitempty"`
	// 9.2.2. If prospectus allows for ADL, what is the maximum ADL (as a % of NAV per share/unit) across the (sub-)funds (under normal circumstances)?
	MaximumAdl float64 `protobuf:"fixed64,20,opt,name=maximum_adl,json=maximumAdl,proto3" json:"maximum_adl,omitempty"`
	// 9.2.3. If prospectus allows for ADL, does the prospectus provide for the possibility to temporarily increase under exceptional circumstances the ADL beyond the maximum level?
	ProspectusAllowsTemporaryIncreaseInAdlUnderExceptionalCircumstances bool `protobuf:"varint,21,opt,name=prospectus_allows_temporary_increase_in_adl_under_exceptional_circumstances,json=prospectusAllowsTemporaryIncreaseInAdlUnderExceptionalCircumstances,proto3" json:"prospectus_allows_temporary_increase_in_adl_under_exceptional_circumstances,omitempty"`
	// 9.2.3.1. If prospectus allows temporary increases in adl under exceptional circumstances, does the prospectus disclose the maximum ADL (as a % of NAV per share/unit) that is temporarily authorised under exceptional circumstances for any (sub-)fund? If NO, explain.
	ProspectusDisclosesMaximumAdlAuthorisedUnderExceptionalCircumstances *RT000D034_YesNoExplain `protobuf:"bytes,22,opt,name=prospectus_discloses_maximum_adl_authorised_under_exceptional_circumstances,json=prospectusDisclosesMaximumAdlAuthorisedUnderExceptionalCircumstances,proto3" json:"prospectus_discloses_maximum_adl_authorised_under_exceptional_circumstances,omitempty"`
	// 9.2.3.1.1. If prospectus allows temporary increases in adl under exceptional circumstances, provide the maximum ADL (as a % of NAV per share/unit) authorised for any (sub-)fund by the prospectus under exceptional circumstances
	MaximumAdlUnderExceptionalCircumstances float64 `protobuf:"fixed64,23,opt,name=maximum_adl_under_exceptional_circumstances,json=maximumAdlUnderExceptionalCircumstances,proto3" json:"maximum_adl_under_exceptional_circumstances,omitempty"`
	// 9.3. If the answer to Q9. is YES, have ADL been applied to subscribing and/or redeeming investors for any sub-fund during the year?
	HaveAdlBeenAppliedToAnySubFundDuringYear bool `protobuf:"varint,24,opt,name=have_adl_been_applied_to_any_sub_fund_during_year,json=haveAdlBeenAppliedToAnySubFundDuringYear,proto3" json:"have_adl_been_applied_to_any_sub_fund_during_year,omitempty"`
	// 9.3.1. If ADL have been applied to subscribing and/or redeeming investors for any sub-fund during the year, are ADL covered by a robust internal governance process/formalized methodology (incl. market/transaction data-based analysis) providing for accurate ADL representative of trading costs at prevailing market conditions? If NO explain.
	AreAdlCoveredByRobustInternalGovernance *RT000D034_YesNoExplain `protobuf:"bytes,25,opt,name=are_adl_covered_by_robust_internal_governance,json=areAdlCoveredByRobustInternalGovernance,proto3" json:"are_adl_covered_by_robust_internal_governance,omitempty"`
	// 9.3.2. If ADL have been applied to subscribing and/or redeeming investors for any sub-fund during the year, has the maximum ADL authorised under normal circumstances in the prospectus been increased during the year for any (sub-)fund?
	HasMaximumAdlAuthorisedBeenIncreasedDuringYear bool `protobuf:"varint,26,opt,name=has_maximum_adl_authorised_been_increased_during_year,json=hasMaximumAdlAuthorisedBeenIncreasedDuringYear,proto3" json:"has_maximum_adl_authorised_been_increased_during_year,omitempty"`
	// 9.3.2.1. If maximum ADL authorised been increased during the year, was an appropriate communication made to investors regarding the change to the maximum ADL? If NO, explain.
	IncreaseInMaximumAdlAppropriatelyCommunicatedToInvestors *RT000D034_YesNoExplain `protobuf:"bytes,27,opt,name=increase_in_maximum_adl_appropriately_communicated_to_investors,json=increaseInMaximumAdlAppropriatelyCommunicatedToInvestors,proto3" json:"increase_in_maximum_adl_appropriately_communicated_to_investors,omitempty"`
	// 9.3.3. If ADL have been applied to subscribing and/or redeeming investors for any sub-fund during the year, were all (sub-)funds in compliance with the prospectus regarding the use of ADL during the year? If NO, explain.
	AllFundsInComplianceWithProspectusRegardingUseOfAdl *RT000D034_YesNoExplain `protobuf:"bytes,28,opt,name=all_funds_in_compliance_with_prospectus_regarding_use_of_adl,json=allFundsInComplianceWithProspectusRegardingUseOfAdl,proto3" json:"all_funds_in_compliance_with_prospectus_regarding_use_of_adl,omitempty"`
	// 9.3.4. If ADL have been applied to subscribing and/or redeeming investors for any sub-fund during the year, is the ADL mechanism policy, processes and procedures subject to periodic review by the Management of the Fund? If NO, explain.
	AdlSubjectToPeriodicReviewByManagement *RT000D034_YesNoExplain `protobuf:"bytes,29,opt,name=adl_subject_to_periodic_review_by_management,json=adlSubjectToPeriodicReviewByManagement,proto3" json:"adl_subject_to_periodic_review_by_management,omitempty"`
	// 10. Does the prospectus allow for the use of a Swing Pricing (SWPR) mechanism?
	ProspectusAllowsForUseOfSwpr bool `protobuf:"varint,30,opt,name=prospectus_allows_for_use_of_swpr,json=prospectusAllowsForUseOfSwpr,proto3" json:"prospectus_allows_for_use_of_swpr,omitempty"`
	// 10.1. If the prospectus allows SWPR, does the prospectus indicate clear circumstances under which a SWPR may be used by any (sub-)fund?  If NO, explain.
	ProspectusIndicatesCircumstancesWhereSwprMayBeUsed *RT000D034_YesNoExplain `protobuf:"bytes,31,opt,name=prospectus_indicates_circumstances_where_swpr_may_be_used,json=prospectusIndicatesCircumstancesWhereSwprMayBeUsed,proto3" json:"prospectus_indicates_circumstances_where_swpr_may_be_used,omitempty"`
	// 10.2. If the prospectus allows SWPR, does the prospectus disclose the maximum SWPR (as a % of NAV per share/unit) authorised under normal circumstances for any (sub-)fund? If NO, explain.
	ProspectusDisclosesMaximumSwprAuthorised *RT000D034_YesNoExplain `protobuf:"bytes,32,opt,name=prospectus_discloses_maximum_swpr_authorised,json=prospectusDisclosesMaximumSwprAuthorised,proto3" json:"prospectus_discloses_maximum_swpr_authorised,omitempty"`
	// 10.2.2. If prospectus allows for SWPR, what is the maximum SWPR (as a % of NAV per share/unit) across the (sub-)funds?
	MaximumSwpr float64 `protobuf:"fixed64,33,opt,name=maximum_swpr,json=maximumSwpr,proto3" json:"maximum_swpr,omitempty"`
	// 10.2.3. If prospectus allows for SWPR, does the prospectus provide the possibility to temporarily increase under exceptional circumstances the SWPR beyond the maximum level?
	ProspectusAllowsTemporaryIncreaseInSwprUnderExceptionalCircumstances bool `protobuf:"varint,34,opt,name=prospectus_allows_temporary_increase_in_swpr_under_exceptional_circumstances,json=prospectusAllowsTemporaryIncreaseInSwprUnderExceptionalCircumstances,proto3" json:"prospectus_allows_temporary_increase_in_swpr_under_exceptional_circumstances,omitempty"`
	// 10.2.3.1. If prospectus allows for increasing SWPR under exeptional circumsances beyond max, does the prospectus disclose the maximum SWPR (as a % of NAV per share/unit) that is temporarily authorised under exceptional circumstances for any (sub-)fund?
	ProspectusDisclosesMaxTemporaryIncreaseInSwprUnderExceptionalCircumstances bool `protobuf:"varint,35,opt,name=prospectus_discloses_max_temporary_increase_in_swpr_under_exceptional_circumstances,json=prospectusDisclosesMaxTemporaryIncreaseInSwprUnderExceptionalCircumstances,proto3" json:"prospectus_discloses_max_temporary_increase_in_swpr_under_exceptional_circumstances,omitempty"`
	// 10.2.3.1.1. If prospectus allows for increasing SWPR under exeptional circumsances beyond max, provide the maximum SWPR authorised for any (sub-)fund by the prospectus (as a % of NAV per share/unit) under exceptional circumstances?
	MaximumSwprUnderExceptionalCircumstances float64 `protobuf:"fixed64,36,opt,name=maximum_swpr_under_exceptional_circumstances,json=maximumSwprUnderExceptionalCircumstances,proto3" json:"maximum_swpr_under_exceptional_circumstances,omitempty"`
	// 10.3. If the prospectus allows SWPR, has SWPR been applied to subscribing and/or redeeming investors for any (sub-)fund during the year?
	HasSwprBeenAppliedToAnySubFundDuringYear bool `protobuf:"varint,37,opt,name=has_swpr_been_applied_to_any_sub_fund_during_year,json=hasSwprBeenAppliedToAnySubFundDuringYear,proto3" json:"has_swpr_been_applied_to_any_sub_fund_during_year,omitempty"`
	// 10.3.1. If SWPR has been applied to any (sub-)fund during the year, is SWPR covered by robust internal governance process/formalized methodology (incl. market/transaction data-based analysis) providing for accurate SWPR representative of trading costs at prevailing market conditions? If NO, explain.
	SwprCoveredByRobustInternalGovernanceProcesses *RT000D034_YesNoExplain `protobuf:"bytes,38,opt,name=swpr_covered_by_robust_internal_governance_processes,json=swprCoveredByRobustInternalGovernanceProcesses,proto3" json:"swpr_covered_by_robust_internal_governance_processes,omitempty"`
	// 10.3.2. If SWPR has been applied, has an increase in the maximum SWPR been authorised under normal circumstances in the prospectus been increased during the year for any (sub-)fund?
	SwprMaximumIncreasedDuringYear bool `protobuf:"varint,39,opt,name=swpr_maximum_increased_during_year,json=swprMaximumIncreasedDuringYear,proto3" json:"swpr_maximum_increased_during_year,omitempty"`
	// 10.3.2.1. If SWPR an increase in the maximum SWPR has been authorised, was an appropriate communication made to investors regarding the change to the maximum SWPR? If NO, explain.
	HasMaximumSwprAuthorisedBeenIncreasedDuringYear *RT000D034_YesNoExplain `protobuf:"bytes,40,opt,name=has_maximum_swpr_authorised_been_increased_during_year,json=hasMaximumSwprAuthorisedBeenIncreasedDuringYear,proto3" json:"has_maximum_swpr_authorised_been_increased_during_year,omitempty"`
	// 10.3.3. If SWPR has been applied to any (sub-)fund during the year, were all (sub-)funds in compliance with the prospectus regarding the use of SWPR during the year? If NO, explain.
	IfSwprAppliedWereAllFundsInCompliance *RT000D034_YesNoExplain `protobuf:"bytes,41,opt,name=if_swpr_applied_were_all_funds_in_compliance,json=ifSwprAppliedWereAllFundsInCompliance,proto3" json:"if_swpr_applied_were_all_funds_in_compliance,omitempty"`
	// 10.3.4. If SWPR has been applied to any (sub-)fund during the year, is the SWPR mechanism policy, processes and procedures subject to periodic review by the Management of the Fund? If NO, explain.
	IfSwprAppliedWerePolicySubjectToPeriodicReview *RT000D034_YesNoExplain `protobuf:"bytes,42,opt,name=if_swpr_applied_were_policy_subject_to_periodic_review,json=ifSwprAppliedWerePolicySubjectToPeriodicReview,proto3" json:"if_swpr_applied_were_policy_subject_to_periodic_review,omitempty"`
	// 11. Did all sub-funds comply with the prospectus concerning lock-ups during the year? If NO, explain
	DidAllFundsComplyWithProspectusConcerningLockUps *RT000D034_YesNoExplain `protobuf:"bytes,43,opt,name=did_all_funds_comply_with_prospectus_concerning_lock_ups,json=didAllFundsComplyWithProspectusConcerningLockUps,proto3" json:"did_all_funds_comply_with_prospectus_concerning_lock_ups,omitempty"`
	// 12. Does the prospectus allow for the use of redemption gating? 60
	ProspectusAllowsForRedemptionGating bool `protobuf:"varint,44,opt,name=prospectus_allows_for_redemption_gating,json=prospectusAllowsForRedemptionGating,proto3" json:"prospectus_allows_for_redemption_gating,omitempty"`
	// 12.1. If prospectus allows for redemption gating, does the prospectus indicate clear circumstances under which redemption gating may be used by a (sub-)fund? If NO, explain.
	ProspectusStatesCircumstancesForGating *RT000D034_YesNoExplain `protobuf:"bytes,45,opt,name=prospectus_states_circumstances_for_gating,json=prospectusStatesCircumstancesForGating,proto3" json:"prospectus_states_circumstances_for_gating,omitempty"`
	// 12.2. If prospectus allows for redemption gating, does the prospectus disclose any redemption threshold (as % of NAV per share/unit) that may trigger redemption gating? If NO, explain.
	ProspectusDisclosesRedemptionThresholdForGating bool `protobuf:"varint,46,opt,name=prospectus_discloses_redemption_threshold_for_gating,json=prospectusDisclosesRedemptionThresholdForGating,proto3" json:"prospectus_discloses_redemption_threshold_for_gating,omitempty"`
	// 12.2.1. If prospectus discloses redemption threshold, what is the redemption threshold (as % of NAV per share/unit) laid down in the prospectus that may trigger redemption gating?
	ProspectusDisclosedRedemptionThreshold float64 `protobuf:"fixed64,47,opt,name=prospectus_disclosed_redemption_threshold,json=prospectusDisclosedRedemptionThreshold,proto3" json:"prospectus_disclosed_redemption_threshold,omitempty"`
	// 12.2.2. If prospectus discloses redemption threshold, does the prospectus provide for the possibility for the Management of the Fund to decrease this redemption treshold in exceptional circumstances for any (sub-)fund?
	ProspectusAllowsManagementToDecreaseRedemptionThresholdInExceptionalCircumstances bool `protobuf:"varint,48,opt,name=prospectus_allows_management_to_decrease_redemption_threshold_in_exceptional_circumstances,json=prospectusAllowsManagementToDecreaseRedemptionThresholdInExceptionalCircumstances,proto3" json:"prospectus_allows_management_to_decrease_redemption_threshold_in_exceptional_circumstances,omitempty"`
	// 12.3. If prospectus allows for redemption gating, does the prospectus specify a time limit for redemption gating (e.g. redemption gates are limited for a period up to a given number of working days)? If NO, explain.
	ProspectusSpecifiesTimeLimitForRedemptionGating *RT000D034_YesNoExplain `protobuf:"bytes,49,opt,name=prospectus_specifies_time_limit_for_redemption_gating,json=prospectusSpecifiesTimeLimitForRedemptionGating,proto3" json:"prospectus_specifies_time_limit_for_redemption_gating,omitempty"`
	// 12.4. If the answer to Q12. is YES, has redemption gating been used by any (sub-)fund during the year?
	HasRedemptionGatingBeenUsedDuringYear bool `protobuf:"varint,50,opt,name=has_redemption_gating_been_used_during_year,json=hasRedemptionGatingBeenUsedDuringYear,proto3" json:"has_redemption_gating_been_used_during_year,omitempty"`
	// 12.4.1. If redemption gating has been used during the year, were investors of the Fund informed through appropriate communication of the application of the redemption gating? If NO, explain.
	InvestorsInformedAppropriatelyOfRedemptionGating *RT000D034_YesNoExplain `protobuf:"bytes,51,opt,name=investors_informed_appropriately_of_redemption_gating,json=investorsInformedAppropriatelyOfRedemptionGating,proto3" json:"investors_informed_appropriately_of_redemption_gating,omitempty"`
	// 12.4.2. If redemption gating has been used during the year, were all sub-funds in compliance with the prospectus regarding redemption gating during the year? If NO, explain.
	WereAllFundsInComplianceWithProspectusRegardingRedemptionGatingDuringYear *RT000D034_YesNoExplain `protobuf:"bytes,52,opt,name=were_all_funds_in_compliance_with_prospectus_regarding_redemption_gating_during_year,json=wereAllFundsInComplianceWithProspectusRegardingRedemptionGatingDuringYear,proto3" json:"were_all_funds_in_compliance_with_prospectus_regarding_redemption_gating_during_year,omitempty"`
	// 12.4.3. If redemption gating has been used during the year, how many redemption gatings have been used during the year?
	NumberOfRedemptionGatingsUsedDuringYear int32 `protobuf:"varint,53,opt,name=number_of_redemption_gatings_used_during_year,json=numberOfRedemptionGatingsUsedDuringYear,proto3" json:"number_of_redemption_gatings_used_during_year,omitempty"`
	// 12.4.4. If redemption gating has been used during the year, how many sub-funds were concerned by redemption gatings during the year?
	NumberOfFundsConcernedByRedemptionGatings int32 `protobuf:"varint,54,opt,name=number_of_funds_concerned_by_redemption_gatings,json=numberOfFundsConcernedByRedemptionGatings,proto3" json:"number_of_funds_concerned_by_redemption_gatings,omitempty"`
	// 13. Does the prospectus allow the use of redemption deferral?
	ProspectusAllowsForRedemptionDeferral bool `protobuf:"varint,55,opt,name=prospectus_allows_for_redemption_deferral,json=prospectusAllowsForRedemptionDeferral,proto3" json:"prospectus_allows_for_redemption_deferral,omitempty"`
	// 13.1. If prospectus allows for redemption deferral, does the prospectus indicate clear circumstances under which temporary redemption deferral may be applied by any (sub-)fund? If NO, explain.
	ProspectusDisclosesRedemptionDeferralCircumstances *RT000D034_YesNoExplain `protobuf:"bytes,56,opt,name=prospectus_discloses_redemption_deferral_circumstances,json=prospectusDisclosesRedemptionDeferralCircumstances,proto3" json:"prospectus_discloses_redemption_deferral_circumstances,omitempty"`
	// 13.2. If prospectus allows for redemption deferral does the prospectus specify a concrete maximum time limit (in terms of e.g. days) for the use of redemption deferral? If NO, explain.
	ProspectusSpecifiesTimeLimitRedemptionDeferrals *RT000D034_YesNoExplain `protobuf:"bytes,57,opt,name=prospectus_specifies_time_limit_redemption_deferrals,json=prospectusSpecifiesTimeLimitRedemptionDeferrals,proto3" json:"prospectus_specifies_time_limit_redemption_deferrals,omitempty"`
	// 13.3. If prospectus allows for redemption deferral, have redemption deferrals been used by any (sub-)fund during the year?
	HaveRedemptionDeferralsBeenUsed bool `protobuf:"varint,58,opt,name=have_redemption_deferrals_been_used,json=haveRedemptionDeferralsBeenUsed,proto3" json:"have_redemption_deferrals_been_used,omitempty"`
	// 13.3.1. If redemption deferrals used, were all (sub-)funds in compliance with the prospectus regarding redemption deferral during the year. If NO, explain.
	AllFundsInCompliancesWithProspectusRegardingRedemptionDeferrals *RT000D034_YesNoExplain `protobuf:"bytes,59,opt,name=all_funds_in_compliances_with_prospectus_regarding_redemption_deferrals,json=allFundsInCompliancesWithProspectusRegardingRedemptionDeferrals,proto3" json:"all_funds_in_compliances_with_prospectus_regarding_redemption_deferrals,omitempty"`
	// 13.3.2. If redemption deferrals used, how many redemption deferrals have been used during the year?
	NumberOfFundsConcernedByRedemptionDeferrals int32 `protobuf:"varint,60,opt,name=number_of_funds_concerned_by_redemption_deferrals,json=numberOfFundsConcernedByRedemptionDeferrals,proto3" json:"number_of_funds_concerned_by_redemption_deferrals,omitempty"`
	// 14. Does the prospectus allow for the use of redemption in kind?
	ProspectusAllowsRedemptionInKind bool `protobuf:"varint,61,opt,name=prospectus_allows_redemption_in_kind,json=prospectusAllowsRedemptionInKind,proto3" json:"prospectus_allows_redemption_in_kind,omitempty"`
	// 14.1. If prospectus allows for use of redemption in kind, has redemption in kind been used by any (sub-)fund during the year (EXCEPT for index tracker (sub-)funds)?
	RedemptionInKindHasBeenUsed bool `protobuf:"varint,62,opt,name=redemption_in_kind_has_been_used,json=redemptionInKindHasBeenUsed,proto3" json:"redemption_in_kind_has_been_used,omitempty"`
	// 14.1.1. Mention the corresponding (sub-)fund(s) concerned and the number of redemption in kind transactions
	NumberOfRedemptionInKindTransactionsByFund []*RT000D034_NAVDeterminiation_NumberOfTransactionsByFund `protobuf:"bytes,63,rep,name=number_of_redemption_in_kind_transactions_by_fund,json=numberOfRedemptionInKindTransactionsByFund,proto3" json:"number_of_redemption_in_kind_transactions_by_fund,omitempty"`
	// 14.1.2. If redemption in kind used, did the redemptions in kind applied during the year comply with the prospectus as well as with the legal/regulatory requirements applicable (by analogy) to contributions in kind? If NO, explain.
	RedemptionsInKindCompliedWithProspectus *RT000D034_YesNoExplain `protobuf:"bytes,64,opt,name=redemptions_in_kind_complied_with_prospectus,json=redemptionsInKindCompliedWithProspectus,proto3" json:"redemptions_in_kind_complied_with_prospectus,omitempty"`
	// 14.1.3. If redemption in kind used, have the redemptions in kind applied during the year been subject to a report by an auditor when it is required by the prospectus and/or by analogy of the laws /regulatory requirements applicable for the contributions in kind? If NO, explain.
	RedemptionsInKindSubjectToAuditorReportWhenRequired *RT000D034_YesNoExplain `protobuf:"bytes,65,opt,name=redemptions_in_kind_subject_to_auditor_report_when_required,json=redemptionsInKindSubjectToAuditorReportWhenRequired,proto3" json:"redemptions_in_kind_subject_to_auditor_report_when_required,omitempty"`
	// 15. Have side pockets been created by any (sub-)fund during the year?
	SidePocketsCreatedByAnyFundDuringYear bool `protobuf:"varint,66,opt,name=side_pockets_created_by_any_fund_during_year,json=sidePocketsCreatedByAnyFundDuringYear,proto3" json:"side_pockets_created_by_any_fund_during_year,omitempty"`
	// 15.1. If side pockets created, have these side pocket(s) been communicated to the investors? If NO, explain.
	CreatedSidePocketsCommunicatedToInvestors *RT000D034_YesNoExplain `protobuf:"bytes,67,opt,name=created_side_pockets_communicated_to_investors,json=createdSidePocketsCommunicatedToInvestors,proto3" json:"created_side_pockets_communicated_to_investors,omitempty"`
	// 15.2. If side pockets created, have these side pocket(s) been approved by the CSSF?
	CreatedSidePocketsCommunicatedToCssf *RT000D034_YesNoExplain `protobuf:"bytes,68,opt,name=created_side_pockets_communicated_to_cssf,json=createdSidePocketsCommunicatedToCssf,proto3" json:"created_side_pockets_communicated_to_cssf,omitempty"`
	// 16. Does the prospectus allow for the use of dual pricing?
	ProspectusAllowsForDualPricing bool `protobuf:"varint,69,opt,name=prospectus_allows_for_dual_pricing,json=prospectusAllowsForDualPricing,proto3" json:"prospectus_allows_for_dual_pricing,omitempty"`
	// 16.1. If prospectus allows for dual pricing, does the prospectus indicate clear circumstances under which dual pricing may be used by any (sub-)fund? If NO, explain.
	ProspectusIndicatesCircumstancesUnderWhichDualPricingMayBeUsed *RT000D034_YesNoExplain `protobuf:"bytes,70,opt,name=prospectus_indicates_circumstances_under_which_dual_pricing_may_be_used,json=prospectusIndicatesCircumstancesUnderWhichDualPricingMayBeUsed,proto3" json:"prospectus_indicates_circumstances_under_which_dual_pricing_may_be_used,omitempty"`
	// 16.2. If prospectus allows for dual pricing, has dual pricing been used by any (sub-)fund during the year?
	DualPricingHasBeenUsedDuringYear bool `protobuf:"varint,71,opt,name=dual_pricing_has_been_used_during_year,json=dualPricingHasBeenUsedDuringYear,proto3" json:"dual_pricing_has_been_used_during_year,omitempty"`
	// 16.2.1. If dual pricing used during year, were all the sub-funds in compliance with the prospectus regarding dual pricing during the year?
	AllFundsInComplianceWithProspectusRegardingDualPricing *RT000D034_YesNoExplain `protobuf:"bytes,72,opt,name=all_funds_in_compliance_with_prospectus_regarding_dual_pricing,json=allFundsInComplianceWithProspectusRegardingDualPricing,proto3" json:"all_funds_in_compliance_with_prospectus_regarding_dual_pricing,omitempty"`
	// 17. Does the prospectus allow the use of temporary suspension of redemption?
	ProspectusAllowsForTemporarySuspensionOfRedemption bool `protobuf:"varint,73,opt,name=prospectus_allows_for_temporary_suspension_of_redemption,json=prospectusAllowsForTemporarySuspensionOfRedemption,proto3" json:"prospectus_allows_for_temporary_suspension_of_redemption,omitempty"`
	// 17.1. If temporary suspension allowed, does the prospectus indicate clear circumstances under which temporary suspension of redemption may be used by any (sub-)fund? If NO, explain.
	ProspectusClearlyIndicatesCircumstancesForTemporarySuspensionOfRedemptions *RT000D034_YesNoExplain `protobuf:"bytes,74,opt,name=prospectus_clearly_indicates_circumstances_for_temporary_suspension_of_redemptions,json=prospectusClearlyIndicatesCircumstancesForTemporarySuspensionOfRedemptions,proto3" json:"prospectus_clearly_indicates_circumstances_for_temporary_suspension_of_redemptions,omitempty"`
	// 17.2. If temporary suspension allowed, have any temporary suspensions of redemption been used by any (sub-)fund during the year?
	HaveTemporarySuspensionsOfRedemptionsBeenUsed bool `protobuf:"varint,75,opt,name=have_temporary_suspensions_of_redemptions_been_used,json=haveTemporarySuspensionsOfRedemptionsBeenUsed,proto3" json:"have_temporary_suspensions_of_redemptions_been_used,omitempty"`
	// 17.2.1. If temporary suspensions of redemptions have been used, have all (sub-)funds been in compliance with the prospectus as regards suspension of redemption during the year? If NO, explain.
	AllFundsInComplianceWithProspectusRegardingTemporarySuspensionOfRedemptions *RT000D034_YesNoExplain `protobuf:"bytes,76,opt,name=all_funds_in_compliance_with_prospectus_regarding_temporary_suspension_of_redemptions,json=allFundsInComplianceWithProspectusRegardingTemporarySuspensionOfRedemptions,proto3" json:"all_funds_in_compliance_with_prospectus_regarding_temporary_suspension_of_redemptions,omitempty"`
	// 17.2.2. If temporary suspensions of redemptions have been used, were the temporary suspensions of redemption communicated to the CSSF as soon as decided by the Management of the Fund? If NO, explain.
	AllTemporarySuspensionOfRedemptionsCommunicatedToCssf *RT000D034_YesNoExplain `protobuf:"bytes,77,opt,name=all_temporary_suspension_of_redemptions_communicated_to_cssf,json=allTemporarySuspensionOfRedemptionsCommunicatedToCssf,proto3" json:"all_temporary_suspension_of_redemptions_communicated_to_cssf,omitempty"`
	// 17.2.3. If temporary suspensions of redemptions have been used, has the Fund communicated the temporary suspension of redemption to all the national competent authorities of the countries where sub-fund(s) are marketed?
	AllTemporarySuspensionOfRedemptionsCommunicatedToAllNationalCompetentAuthorities *RT000D034_YesNoExplain `protobuf:"bytes,78,opt,name=all_temporary_suspension_of_redemptions_communicated_to_all_national_competent_authorities,json=allTemporarySuspensionOfRedemptionsCommunicatedToAllNationalCompetentAuthorities,proto3" json:"all_temporary_suspension_of_redemptions_communicated_to_all_national_competent_authorities,omitempty"`
	// 17.2.4. If temporary suspensions of redemptions have been used, how many temporary suspensions of redemption have been used during the year?
	NumberOfTemporarySuspensionOfRedemptions int32 `protobuf:"varint,79,opt,name=number_of_temporary_suspension_of_redemptions,json=numberOfTemporarySuspensionOfRedemptions,proto3" json:"number_of_temporary_suspension_of_redemptions,omitempty"`
	// 17.2.5. If temporary suspensions of redemptions have been used, how many sub-funds were concerned by temporary suspensions of redemption during the year?
	NumberOfFundsConcernedByTemporarySuspensionOfRedemption int32 `protobuf:"varint,80,opt,name=number_of_funds_concerned_by_temporary_suspension_of_redemption,json=numberOfFundsConcernedByTemporarySuspensionOfRedemption,proto3" json:"number_of_funds_concerned_by_temporary_suspension_of_redemption,omitempty"`
	// 18. Does the organizational set up in place for the Fund (incl. an IFM if applicable) provide for a formalized policy that covers the treatment of material NAV calculation errors (as governed by Circular CSSF 02/77)? If NO, explain.
	FormalizedPolicyCoveringTreatmentOfMaterialNavCalculationErrors *RT000D034_YesNoExplain `protobuf:"bytes,81,opt,name=formalized_policy_covering_treatment_of_material_nav_calculation_errors,json=formalizedPolicyCoveringTreatmentOfMaterialNavCalculationErrors,proto3" json:"formalized_policy_covering_treatment_of_material_nav_calculation_errors,omitempty"`
	// 19. How many material NAV calculation errors have been detected during the year for the Fund? 70
	NumberOfMaterialNavCalcualtionErrorsDetectedDuringYear int32 `protobuf:"varint,82,opt,name=number_of_material_nav_calcualtion_errors_detected_during_year,json=numberOfMaterialNavCalcualtionErrorsDetectedDuringYear,proto3" json:"number_of_material_nav_calcualtion_errors_detected_during_year,omitempty"`
	// 20. Did the Fund report to the CSSF, before the validation of the SAQ, all detected material NAV calculation errors which occurred for any (sub-)fund during the year? If NO, explain.
	FundReportedToCssfAllDetectedMaterialNavCalculationErrors *RT000D034_YesNoExplain `protobuf:"bytes,83,opt,name=fund_reported_to_cssf_all_detected_material_nav_calculation_errors,json=fundReportedToCssfAllDetectedMaterialNavCalculationErrors,proto3" json:"fund_reported_to_cssf_all_detected_material_nav_calculation_errors,omitempty"`
	// 21. Does the prospectus allow for contributions in kind?
	ProspectusAllowsForContributionsInKind bool `protobuf:"varint,84,opt,name=prospectus_allows_for_contributions_in_kind,json=prospectusAllowsForContributionsInKind,proto3" json:"prospectus_allows_for_contributions_in_kind,omitempty"`
	// 21.1. If prospectus allows for contributions in kind, did the Fund receive contribution(s) in kind for any (sub-)fund during the year (EXCEPT for index tracker (sub-)funds)?
	FundReceivedContributionsInKindDuringYear bool `protobuf:"varint,85,opt,name=fund_received_contributions_in_kind_during_year,json=fundReceivedContributionsInKindDuringYear,proto3" json:"fund_received_contributions_in_kind_during_year,omitempty"`
	// 21.1.1. If contributions in kind occurred, mention the corresponding (sub-)fund(s) concerned and the
	NumberOfContributionsInKindByFund []*RT000D034_NAVDeterminiation_NumberOfTransactionsByFund `protobuf:"bytes,86,rep,name=number_of_contributions_in_kind_by_fund,json=numberOfContributionsInKindByFund,proto3" json:"number_of_contributions_in_kind_by_fund,omitempty"`
	// 21.1.2. If contributions in kind occurred, did all contributions in kind received during the year comply with the prospectus as well as legal requirements? If NO, explain.
	AllContributionsInKindCompliedWithProspectus *RT000D034_YesNoExplain `protobuf:"bytes,87,opt,name=all_contributions_in_kind_complied_with_prospectus,json=allContributionsInKindCompliedWithProspectus,proto3" json:"all_contributions_in_kind_complied_with_prospectus,omitempty"`
	// 21.1.3. If contributions in kind occurred, were all the contributions in kind received during the year subject to a report issued by an auditor when it is required by the prospectus and/or by laws and regulations? If NO, explain.
	AllContributionsInKindSubjectToReportIssuedByAuditorIfRequired *RT000D034_YesNoExplain `protobuf:"bytes,88,opt,name=all_contributions_in_kind_subject_to_report_issued_by_auditor_if_required,json=allContributionsInKindSubjectToReportIssuedByAuditorIfRequired,proto3" json:"all_contributions_in_kind_subject_to_report_issued_by_auditor_if_required,omitempty"`
}

func (x *RT000D034_NAVDeterminiation) Reset() {
	*x = RT000D034_NAVDeterminiation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_NAVDeterminiation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_NAVDeterminiation) ProtoMessage() {}

func (x *RT000D034_NAVDeterminiation) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_NAVDeterminiation.ProtoReflect.Descriptor instead.
func (*RT000D034_NAVDeterminiation) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 7}
}

func (x *RT000D034_NAVDeterminiation) GetAdoptedAccountingStandards() string {
	if x != nil {
		return x.AdoptedAccountingStandards
	}
	return ""
}

func (x *RT000D034_NAVDeterminiation) GetConsistentApplicationOfAccountingStandardsToNavDetermination() bool {
	if x != nil {
		return x.ConsistentApplicationOfAccountingStandardsToNavDetermination
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetMaterialChangesDisclosedInAuditedAnnualReport() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialChangesDisclosedInAuditedAnnualReport
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetDocumentedAssessmentPerformedRegardingMarketTimingRisk() *RT000D034_YesNoExplain {
	if x != nil {
		return x.DocumentedAssessmentPerformedRegardingMarketTimingRisk
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAnyFundsExposedToRiskOfMarketTiming() bool {
	if x != nil {
		return x.AnyFundsExposedToRiskOfMarketTiming
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetFundsExposedToMarketTiming() []*RT000D034_NAVDeterminiation_FundInformation {
	if x != nil {
		return x.FundsExposedToMarketTiming
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAdequateMeasuresInPlaceToAvoidMarketTiming() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AdequateMeasuresInPlaceToAvoidMarketTiming
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAdequateMeasuresInPlaceToAvoidMarketTimingByEmployees() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AdequateMeasuresInPlaceToAvoidMarketTimingByEmployees
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAnyInstanceOfMarketTimingIdentified() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AnyInstanceOfMarketTimingIdentified
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAnyInstanceOfMarketTimingExecuted() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AnyInstanceOfMarketTimingExecuted
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAppropriateMeasuresInPlaceToEnsureComplianceWithProspectusCutoffTime() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AppropriateMeasuresInPlaceToEnsureComplianceWithProspectusCutoffTime
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetInstanceOfLateTradingIdentifiedDuringYear() *RT000D034_YesNoExplain {
	if x != nil {
		return x.InstanceOfLateTradingIdentifiedDuringYear
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetHasAnyIntermediaryBeenAppointedToMarketFund() bool {
	if x != nil {
		return x.HasAnyIntermediaryBeenAppointedToMarketFund
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetWrittenConfirmationProhibitingMarketTimingIfIntermediaryAppointed() *RT000D034_YesNoExplain {
	if x != nil {
		return x.WrittenConfirmationProhibitingMarketTimingIfIntermediaryAppointed
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetWrittenConfirmationFromIntermediaryToTransmitOrdersSameDay() *RT000D034_YesNoExplain {
	if x != nil {
		return x.WrittenConfirmationFromIntermediaryToTransmitOrdersSameDay
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsForUseOfAdl() bool {
	if x != nil {
		return x.ProspectusAllowsForUseOfAdl
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusIndicatesCircumstancesWhereAdlMayBeUsed() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusIndicatesCircumstancesWhereAdlMayBeUsed
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusDisclosesMaximumAdlAuthorised() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusDisclosesMaximumAdlAuthorised
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetMaximumAdl() float64 {
	if x != nil {
		return x.MaximumAdl
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsTemporaryIncreaseInAdlUnderExceptionalCircumstances() bool {
	if x != nil {
		return x.ProspectusAllowsTemporaryIncreaseInAdlUnderExceptionalCircumstances
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusDisclosesMaximumAdlAuthorisedUnderExceptionalCircumstances() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusDisclosesMaximumAdlAuthorisedUnderExceptionalCircumstances
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetMaximumAdlUnderExceptionalCircumstances() float64 {
	if x != nil {
		return x.MaximumAdlUnderExceptionalCircumstances
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetHaveAdlBeenAppliedToAnySubFundDuringYear() bool {
	if x != nil {
		return x.HaveAdlBeenAppliedToAnySubFundDuringYear
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetAreAdlCoveredByRobustInternalGovernance() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AreAdlCoveredByRobustInternalGovernance
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetHasMaximumAdlAuthorisedBeenIncreasedDuringYear() bool {
	if x != nil {
		return x.HasMaximumAdlAuthorisedBeenIncreasedDuringYear
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetIncreaseInMaximumAdlAppropriatelyCommunicatedToInvestors() *RT000D034_YesNoExplain {
	if x != nil {
		return x.IncreaseInMaximumAdlAppropriatelyCommunicatedToInvestors
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAllFundsInComplianceWithProspectusRegardingUseOfAdl() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllFundsInComplianceWithProspectusRegardingUseOfAdl
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAdlSubjectToPeriodicReviewByManagement() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AdlSubjectToPeriodicReviewByManagement
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsForUseOfSwpr() bool {
	if x != nil {
		return x.ProspectusAllowsForUseOfSwpr
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusIndicatesCircumstancesWhereSwprMayBeUsed() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusIndicatesCircumstancesWhereSwprMayBeUsed
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusDisclosesMaximumSwprAuthorised() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusDisclosesMaximumSwprAuthorised
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetMaximumSwpr() float64 {
	if x != nil {
		return x.MaximumSwpr
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsTemporaryIncreaseInSwprUnderExceptionalCircumstances() bool {
	if x != nil {
		return x.ProspectusAllowsTemporaryIncreaseInSwprUnderExceptionalCircumstances
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusDisclosesMaxTemporaryIncreaseInSwprUnderExceptionalCircumstances() bool {
	if x != nil {
		return x.ProspectusDisclosesMaxTemporaryIncreaseInSwprUnderExceptionalCircumstances
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetMaximumSwprUnderExceptionalCircumstances() float64 {
	if x != nil {
		return x.MaximumSwprUnderExceptionalCircumstances
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetHasSwprBeenAppliedToAnySubFundDuringYear() bool {
	if x != nil {
		return x.HasSwprBeenAppliedToAnySubFundDuringYear
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetSwprCoveredByRobustInternalGovernanceProcesses() *RT000D034_YesNoExplain {
	if x != nil {
		return x.SwprCoveredByRobustInternalGovernanceProcesses
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetSwprMaximumIncreasedDuringYear() bool {
	if x != nil {
		return x.SwprMaximumIncreasedDuringYear
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetHasMaximumSwprAuthorisedBeenIncreasedDuringYear() *RT000D034_YesNoExplain {
	if x != nil {
		return x.HasMaximumSwprAuthorisedBeenIncreasedDuringYear
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetIfSwprAppliedWereAllFundsInCompliance() *RT000D034_YesNoExplain {
	if x != nil {
		return x.IfSwprAppliedWereAllFundsInCompliance
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetIfSwprAppliedWerePolicySubjectToPeriodicReview() *RT000D034_YesNoExplain {
	if x != nil {
		return x.IfSwprAppliedWerePolicySubjectToPeriodicReview
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetDidAllFundsComplyWithProspectusConcerningLockUps() *RT000D034_YesNoExplain {
	if x != nil {
		return x.DidAllFundsComplyWithProspectusConcerningLockUps
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsForRedemptionGating() bool {
	if x != nil {
		return x.ProspectusAllowsForRedemptionGating
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusStatesCircumstancesForGating() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusStatesCircumstancesForGating
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusDisclosesRedemptionThresholdForGating() bool {
	if x != nil {
		return x.ProspectusDisclosesRedemptionThresholdForGating
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusDisclosedRedemptionThreshold() float64 {
	if x != nil {
		return x.ProspectusDisclosedRedemptionThreshold
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsManagementToDecreaseRedemptionThresholdInExceptionalCircumstances() bool {
	if x != nil {
		return x.ProspectusAllowsManagementToDecreaseRedemptionThresholdInExceptionalCircumstances
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusSpecifiesTimeLimitForRedemptionGating() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusSpecifiesTimeLimitForRedemptionGating
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetHasRedemptionGatingBeenUsedDuringYear() bool {
	if x != nil {
		return x.HasRedemptionGatingBeenUsedDuringYear
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetInvestorsInformedAppropriatelyOfRedemptionGating() *RT000D034_YesNoExplain {
	if x != nil {
		return x.InvestorsInformedAppropriatelyOfRedemptionGating
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetWereAllFundsInComplianceWithProspectusRegardingRedemptionGatingDuringYear() *RT000D034_YesNoExplain {
	if x != nil {
		return x.WereAllFundsInComplianceWithProspectusRegardingRedemptionGatingDuringYear
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetNumberOfRedemptionGatingsUsedDuringYear() int32 {
	if x != nil {
		return x.NumberOfRedemptionGatingsUsedDuringYear
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetNumberOfFundsConcernedByRedemptionGatings() int32 {
	if x != nil {
		return x.NumberOfFundsConcernedByRedemptionGatings
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsForRedemptionDeferral() bool {
	if x != nil {
		return x.ProspectusAllowsForRedemptionDeferral
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusDisclosesRedemptionDeferralCircumstances() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusDisclosesRedemptionDeferralCircumstances
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusSpecifiesTimeLimitRedemptionDeferrals() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusSpecifiesTimeLimitRedemptionDeferrals
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetHaveRedemptionDeferralsBeenUsed() bool {
	if x != nil {
		return x.HaveRedemptionDeferralsBeenUsed
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetAllFundsInCompliancesWithProspectusRegardingRedemptionDeferrals() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllFundsInCompliancesWithProspectusRegardingRedemptionDeferrals
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetNumberOfFundsConcernedByRedemptionDeferrals() int32 {
	if x != nil {
		return x.NumberOfFundsConcernedByRedemptionDeferrals
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsRedemptionInKind() bool {
	if x != nil {
		return x.ProspectusAllowsRedemptionInKind
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetRedemptionInKindHasBeenUsed() bool {
	if x != nil {
		return x.RedemptionInKindHasBeenUsed
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetNumberOfRedemptionInKindTransactionsByFund() []*RT000D034_NAVDeterminiation_NumberOfTransactionsByFund {
	if x != nil {
		return x.NumberOfRedemptionInKindTransactionsByFund
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetRedemptionsInKindCompliedWithProspectus() *RT000D034_YesNoExplain {
	if x != nil {
		return x.RedemptionsInKindCompliedWithProspectus
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetRedemptionsInKindSubjectToAuditorReportWhenRequired() *RT000D034_YesNoExplain {
	if x != nil {
		return x.RedemptionsInKindSubjectToAuditorReportWhenRequired
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetSidePocketsCreatedByAnyFundDuringYear() bool {
	if x != nil {
		return x.SidePocketsCreatedByAnyFundDuringYear
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetCreatedSidePocketsCommunicatedToInvestors() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CreatedSidePocketsCommunicatedToInvestors
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetCreatedSidePocketsCommunicatedToCssf() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CreatedSidePocketsCommunicatedToCssf
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsForDualPricing() bool {
	if x != nil {
		return x.ProspectusAllowsForDualPricing
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusIndicatesCircumstancesUnderWhichDualPricingMayBeUsed() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusIndicatesCircumstancesUnderWhichDualPricingMayBeUsed
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetDualPricingHasBeenUsedDuringYear() bool {
	if x != nil {
		return x.DualPricingHasBeenUsedDuringYear
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetAllFundsInComplianceWithProspectusRegardingDualPricing() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllFundsInComplianceWithProspectusRegardingDualPricing
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsForTemporarySuspensionOfRedemption() bool {
	if x != nil {
		return x.ProspectusAllowsForTemporarySuspensionOfRedemption
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetProspectusClearlyIndicatesCircumstancesForTemporarySuspensionOfRedemptions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProspectusClearlyIndicatesCircumstancesForTemporarySuspensionOfRedemptions
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetHaveTemporarySuspensionsOfRedemptionsBeenUsed() bool {
	if x != nil {
		return x.HaveTemporarySuspensionsOfRedemptionsBeenUsed
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetAllFundsInComplianceWithProspectusRegardingTemporarySuspensionOfRedemptions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllFundsInComplianceWithProspectusRegardingTemporarySuspensionOfRedemptions
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAllTemporarySuspensionOfRedemptionsCommunicatedToCssf() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllTemporarySuspensionOfRedemptionsCommunicatedToCssf
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAllTemporarySuspensionOfRedemptionsCommunicatedToAllNationalCompetentAuthorities() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllTemporarySuspensionOfRedemptionsCommunicatedToAllNationalCompetentAuthorities
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetNumberOfTemporarySuspensionOfRedemptions() int32 {
	if x != nil {
		return x.NumberOfTemporarySuspensionOfRedemptions
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetNumberOfFundsConcernedByTemporarySuspensionOfRedemption() int32 {
	if x != nil {
		return x.NumberOfFundsConcernedByTemporarySuspensionOfRedemption
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetFormalizedPolicyCoveringTreatmentOfMaterialNavCalculationErrors() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FormalizedPolicyCoveringTreatmentOfMaterialNavCalculationErrors
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetNumberOfMaterialNavCalcualtionErrorsDetectedDuringYear() int32 {
	if x != nil {
		return x.NumberOfMaterialNavCalcualtionErrorsDetectedDuringYear
	}
	return 0
}

func (x *RT000D034_NAVDeterminiation) GetFundReportedToCssfAllDetectedMaterialNavCalculationErrors() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FundReportedToCssfAllDetectedMaterialNavCalculationErrors
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetProspectusAllowsForContributionsInKind() bool {
	if x != nil {
		return x.ProspectusAllowsForContributionsInKind
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetFundReceivedContributionsInKindDuringYear() bool {
	if x != nil {
		return x.FundReceivedContributionsInKindDuringYear
	}
	return false
}

func (x *RT000D034_NAVDeterminiation) GetNumberOfContributionsInKindByFund() []*RT000D034_NAVDeterminiation_NumberOfTransactionsByFund {
	if x != nil {
		return x.NumberOfContributionsInKindByFund
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAllContributionsInKindCompliedWithProspectus() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllContributionsInKindCompliedWithProspectus
	}
	return nil
}

func (x *RT000D034_NAVDeterminiation) GetAllContributionsInKindSubjectToReportIssuedByAuditorIfRequired() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllContributionsInKindSubjectToReportIssuedByAuditorIfRequired
	}
	return nil
}

// Definition of questions relating to Expenses & Income
type RT000D034_ExpensesAndIncome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1.1. Did the costs/fees correspond to a service which could be charged to the Fund / sub-funds in accordance with the prospectus?
	AllCostsAndFeesChargedCorrespondedToChargeableServiceInAccordanceWithProspectus bool `protobuf:"varint,1,opt,name=all_costs_and_fees_charged_corresponded_to_chargeable_service_in_accordance_with_prospectus,json=allCostsAndFeesChargedCorrespondedToChargeableServiceInAccordanceWithProspectus,proto3" json:"all_costs_and_fees_charged_corresponded_to_chargeable_service_in_accordance_with_prospectus,omitempty"`
	// 1.1.1.1. If not all costs in accordance with prospectus, mention the concerned costs/fees and the monetary amount(s) in the Fund's base currency
	CostsOrFeesNotCorrespondingToChargeableServiceChargedToAllSubfunds []*RT000D034_ExpensesAndIncome_CostOrFee `protobuf:"bytes,2,rep,name=costs_or_fees_not_corresponding_to_chargeable_service_charged_to_all_subfunds,json=costsOrFeesNotCorrespondingToChargeableServiceChargedToAllSubfunds,proto3" json:"costs_or_fees_not_corresponding_to_chargeable_service_charged_to_all_subfunds,omitempty"`
	// 1.1.2. If not all costs in accordance with prospectus, were the concerned costs/fees charged to certain sub-funds?
	CostsOrFeesNotCorrespondingToChargeableServiceChargedToSpecificSubfunds []*RT000D034_ExpensesAndIncome_FundSpecificCostOrFee `protobuf:"bytes,3,rep,name=costs_or_fees_not_corresponding_to_chargeable_service_charged_to_specific_subfunds,json=costsOrFeesNotCorrespondingToChargeableServiceChargedToSpecificSubfunds,proto3" json:"costs_or_fees_not_corresponding_to_chargeable_service_charged_to_specific_subfunds,omitempty"`
	// 1.2. Have the costs/fees calculated and booked in the accounts of the Fund / sub-funds been complying on an ongoing basis with the provisions of the prospectus and contracts (including the respect of caps on fees, if any)?
	AllCostsAndFeesCalculatedAndBookedComplyWithProspectus bool `protobuf:"varint,4,opt,name=all_costs_and_fees_calculated_and_booked_comply_with_prospectus,json=allCostsAndFeesCalculatedAndBookedComplyWithProspectus,proto3" json:"all_costs_and_fees_calculated_and_booked_comply_with_prospectus,omitempty"`
	// 1.2.1 If not all costs and fees complying with the provisions of the prospectus, mention the concerned costs/fees and the monetary amount(s) in the Fund's base currency
	CostsAndFeesCalculatedAndBookedComplyWithProspectusChargedToAllSubfunds []*RT000D034_ExpensesAndIncome_CostOrFee `protobuf:"bytes,5,rep,name=costs_and_fees_calculated_and_booked_comply_with_prospectus_charged_to_all_subfunds,json=costsAndFeesCalculatedAndBookedComplyWithProspectusChargedToAllSubfunds,proto3" json:"costs_and_fees_calculated_and_booked_comply_with_prospectus_charged_to_all_subfunds,omitempty"`
	// 1.2.2 If not all costs and fees complying with the provisions of the prospectus, were the concerned costs/fees charged to certain sub-funds?
	CostsAndFeesCalculatedAndBookedComplyWithProspectusChargedToSpecificSubfunds []*RT000D034_ExpensesAndIncome_FundSpecificCostOrFee `protobuf:"bytes,6,rep,name=costs_and_fees_calculated_and_booked_comply_with_prospectus_charged_to_specific_subfunds,json=costsAndFeesCalculatedAndBookedComplyWithProspectusChargedToSpecificSubfunds,proto3" json:"costs_and_fees_calculated_and_booked_comply_with_prospectus_charged_to_specific_subfunds,omitempty"`
	// 2. Have all costs/fees charged at the level of a special purpose vehicle controlled by the Fund / subfund(s) during the year and thus impacting the Fund / sub-fund(s) been disclosed in an adequate way
	AllCostsAndFeesDisclosedInAdequateWay bool `protobuf:"varint,7,opt,name=all_costs_and_fees_disclosed_in_adequate_way,json=allCostsAndFeesDisclosedInAdequateWay,proto3" json:"all_costs_and_fees_disclosed_in_adequate_way,omitempty"`
	// 2.1 If costs/fees not adequately disclosed, mention the concerned fee(s) and the monetary amount(s) in the Fund's base currency that applied to all sub-funds
	CostsAndFeesNotAdequatelyDisclosedChargedToAllSubfunds []*RT000D034_ExpensesAndIncome_CostOrFee `protobuf:"bytes,8,rep,name=costs_and_fees_not_adequately_disclosed_charged_to_all_subfunds,json=costsAndFeesNotAdequatelyDisclosedChargedToAllSubfunds,proto3" json:"costs_and_fees_not_adequately_disclosed_charged_to_all_subfunds,omitempty"`
	// 2.1 If costs/fees not adequately disclosed, mention the concerned fee(s) and the monetary amount(s) in the Fund's base currency that applied to specific sub-funds
	CostsAndFeesNotAdequatelyDisclosedChargedToSpecificSubfunds []*RT000D034_ExpensesAndIncome_CostOrFee `protobuf:"bytes,9,rep,name=costs_and_fees_not_adequately_disclosed_charged_to_specific_subfunds,json=costsAndFeesNotAdequatelyDisclosedChargedToSpecificSubfunds,proto3" json:"costs_and_fees_not_adequately_disclosed_charged_to_specific_subfunds,omitempty"`
	// 3. Has a formalized assessment, based on reliable and documented data (available to the CSSF uponrequest), been done for the Fund (including at the level of the IFM if applicable) to verify (If NO explain): a. the costs/fees are proportionate compared to market standards and to the type of service provided?.
	FormalAssessmentPerformedToVerifyCostsProportionateComparedToMarketStandards *RT000D034_YesNoExplain `protobuf:"bytes,10,opt,name=formal_assessment_performed_to_verify_costs_proportionate_compared_to_market_standards,json=formalAssessmentPerformedToVerifyCostsProportionateComparedToMarketStandards,proto3" json:"formal_assessment_performed_to_verify_costs_proportionate_compared_to_market_standards,omitempty"`
	// 3. Has a formalized assessment, based on reliable and documented data (available to the CSSF uponrequest), been done for the Fund (including at the level of the IFM if applicable) to verify (If NO explain): b. there is no duplication of costs (e.g. same type of fee not included in two different categories)?
	FormalAssessmentPerformedToVerifyNoDuplicateCosts *RT000D034_YesNoExplain `protobuf:"bytes,11,opt,name=formal_assessment_performed_to_verify_no_duplicate_costs,json=formalAssessmentPerformedToVerifyNoDuplicateCosts,proto3" json:"formal_assessment_performed_to_verify_no_duplicate_costs,omitempty"`
	// 3. Has a formalized assessment, based on reliable and documented data (available to the CSSF uponrequest), been done for the Fund (including at the level of the IFM if applicable) to verify (If NO explain): c. the costs / fees correspond to an effective service in the investor’s best interest?
	FormalAssessmentPerformedToVerifyEffectiveServiceInInvestorsBestInterest *RT000D034_YesNoExplain `protobuf:"bytes,12,opt,name=formal_assessment_performed_to_verify_effective_service_in_investors_best_interest,json=formalAssessmentPerformedToVerifyEffectiveServiceInInvestorsBestInterest,proto3" json:"formal_assessment_performed_to_verify_effective_service_in_investors_best_interest,omitempty"`
	// 4. Provide the OCR/TER related to the year under review for all (sub-)funds 73
	FundExpenseRations []*RT000D034_ExpensesAndIncome_ExpenseRatio `protobuf:"bytes,13,rep,name=fund_expense_rations,json=fundExpenseRations,proto3" json:"fund_expense_rations,omitempty"`
	// 5. Has the TER of any sub-fund calculated for the year under review been subject to a material increase when compared with the previous year? 74
	ExpenseRationOfAnySubfundSubjectToMaterialIncrease bool `protobuf:"varint,14,opt,name=expense_ration_of_any_subfund_subject_to_material_increase,json=expenseRationOfAnySubfundSubjectToMaterialIncrease,proto3" json:"expense_ration_of_any_subfund_subject_to_material_increase,omitempty"`
	// 5.1 If any sub-fund has been subject to a material increase, please list
	FundsSubjectToMaterialExpenseIncrease []*RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses `protobuf:"bytes,15,rep,name=funds_subject_to_material_expense_increase,json=fundsSubjectToMaterialExpenseIncrease,proto3" json:"funds_subject_to_material_expense_increase,omitempty"`
	// 6. Are advisory fees supported by any sub-fund superior to the portfolio management fees supported by the same sub-fund ?
	AdvisoryFeesSupportedSuperiorToPortfolioManagementFees bool `protobuf:"varint,16,opt,name=advisory_fees_supported_superior_to_portfolio_management_fees,json=advisoryFeesSupportedSuperiorToPortfolioManagementFees,proto3" json:"advisory_fees_supported_superior_to_portfolio_management_fees,omitempty"`
	// 6.1. If advisory fees supported are superior, provide an explanation at a fund level
	FundSpecificExplanationForSuperiorAdvisoryFees []*RT000D034_FundSpecificExplanation `protobuf:"bytes,17,rep,name=fund_specific_explanation_for_superior_advisory_fees,json=fundSpecificExplanationForSuperiorAdvisoryFees,proto3" json:"fund_specific_explanation_for_superior_advisory_fees,omitempty"`
	// 7. Has the portion of the performance fee / carried interest received during the year by the investment adviser for any sub-fund been superior to the portion received by the portfolio manager for the same sub-fund?
	CarriedInterestToAdvisersGreaterThanToPortfolioManager bool `protobuf:"varint,18,opt,name=carried_interest_to_advisers_greater_than_to_portfolio_manager,json=carriedInterestToAdvisersGreaterThanToPortfolioManager,proto3" json:"carried_interest_to_advisers_greater_than_to_portfolio_manager,omitempty"`
	// 7.1 If the portion of the performance fee / carried interest received during the year by the investment adviser for any sub-fund been superior to the portion received by the portfolio manager for the same sub-fund, explain per fund
	FundSpecificExplanationForSuperiorAdvisoryCarriedInterest []*RT000D034_FundSpecificExplanation `protobuf:"bytes,19,rep,name=fund_specific_explanation_for_superior_advisory_carried_interest,json=fundSpecificExplanationForSuperiorAdvisoryCarriedInterest,proto3" json:"fund_specific_explanation_for_superior_advisory_carried_interest,omitempty"`
	// 8. Have the total transaction costs (acquisition and disposal costs) on assets and FDIs borne by any sub-fund during the year been above the materiality threshold?
	TotalTransactionCostsAboveMaterialityThresholdForAnyFund bool `protobuf:"varint,20,opt,name=total_transaction_costs_above_materiality_threshold_for_any_fund,json=totalTransactionCostsAboveMaterialityThresholdForAnyFund,proto3" json:"total_transaction_costs_above_materiality_threshold_for_any_fund,omitempty"`
	// 8.1 if the total transaction costs (acquisition and disposal costs) on assets and FDIs borne by any sub-fund during the year been above the materiality threshold, provide the transaction costs for the relavant funds.
	FundSpecificTransactionCosts []*RT000D034_ExpensesAndIncome_FundSpecificTransactionCost `protobuf:"bytes,21,rep,name=fund_specific_transaction_costs,json=fundSpecificTransactionCosts,proto3" json:"fund_specific_transaction_costs,omitempty"`
	// 9. Does the prospectus of the Fund provide for the possibility for any sub-fund to pay a performance fee / carried interest?
	ProspectusProvidesForPerformanceFeeOrCarriedInterest bool `protobuf:"varint,22,opt,name=prospectus_provides_for_performance_fee_or_carried_interest,json=prospectusProvidesForPerformanceFeeOrCarriedInterest,proto3" json:"prospectus_provides_for_performance_fee_or_carried_interest,omitempty"`
	// 9.1 If prospectus provides for th epossibility of performance fee / carried interest, has the performance fee / carried interest been calculated and booked in the accounts of the sub-fund(s) on an ongoing basis during the year in accordance with the methodology described in the prospectus?
	PerformanceFeeOrCarriedInterestProspectusProvisionsCorrectlyApplied bool `protobuf:"varint,23,opt,name=performance_fee_or_carried_interest_prospectus_provisions_correctly_applied,json=performanceFeeOrCarriedInterestProspectusProvisionsCorrectlyApplied,proto3" json:"performance_fee_or_carried_interest_prospectus_provisions_correctly_applied,omitempty"`
	// 9.1.1 If, for any fund, the prospectus provisions for carried interest or performance fees have not been correctly applied, please explain
	IncorrectApplicationsOfPerformanceFeeOrCarriedInterest []*RT000D034_FundSpecificExplanation `protobuf:"bytes,24,rep,name=incorrect_applications_of_performance_fee_or_carried_interest,json=incorrectApplicationsOfPerformanceFeeOrCarriedInterest,proto3" json:"incorrect_applications_of_performance_fee_or_carried_interest,omitempty"`
	// 9.2. If the prospectus of the Fund provide for the possibility for any sub-fund to pay a performance fee / carried interest, have the parameters (e.g. performance fee rate, High-Water Mark, reference indicator, reference period, crystallization period) used during the year in the calculation of the performance fee / carried interest for all concerned sub-funds been on an ongoing basis in line with (i) those stated in the prospectus as well as (ii) accounting and market data?
	PerformanceFeeCalculationParametersInLineWithProspectusAndMarket bool `protobuf:"varint,25,opt,name=performance_fee_calculation_parameters_in_line_with_prospectus_and_market,json=performanceFeeCalculationParametersInLineWithProspectusAndMarket,proto3" json:"performance_fee_calculation_parameters_in_line_with_prospectus_and_market,omitempty"`
	// 9.2.1 If performance fee calculation parameters were not in line with prospectus or market for any fund, please explain
	PerformanceFeeCalculationParametersNotInLineWithProspectusAndMarketByFund []*RT000D034_FundSpecificExplanation `protobuf:"bytes,26,rep,name=performance_fee_calculation_parameters_not_in_line_with_prospectus_and_market_by_fund,json=performanceFeeCalculationParametersNotInLineWithProspectusAndMarketByFund,proto3" json:"performance_fee_calculation_parameters_not_in_line_with_prospectus_and_market_by_fund,omitempty"`
	// 9.3. Provide the amount of performance fee / carried interest charged for the year for each individual concerned sub-fund expressed in the currency of the sub-fund.
	FundSpecificPerformanceCharges []*RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges `protobuf:"bytes,27,rep,name=fund_specific_performance_charges,json=fundSpecificPerformanceCharges,proto3" json:"fund_specific_performance_charges,omitempty"`
	// 9.4. If the answer to Q9. is YES, does the performace fee / carried interest calculation method used during the year ensure that performance fees / carried interest are always proportionate to the actual investment performance and artificial increases from new subscriptions are not taken into account when calculating fund performance? If NO, explain.
	PerformanceChargeCalculationMethodEnsuresAlignmentToInvestmentPerformance *RT000D034_YesNoExplain `protobuf:"bytes,28,opt,name=performance_charge_calculation_method_ensures_alignment_to_investment_performance,json=performanceChargeCalculationMethodEnsuresAlignmentToInvestmentPerformance,proto3" json:"performance_charge_calculation_method_ensures_alignment_to_investment_performance,omitempty"`
	// 9.5. If the answer to Q9. is YES, did any (sub-)fund(s), for which a performance fee / carried interest has been calculated during the year, invest more than 50% of its NAV in non-financial assets or assets with reduced liquidity (e.g. private equity or real estate investment) as at year-end?
	DidAnySubfundInvestMoreThanFiftyPercentOfNavInReducedLiquidityAssets bool `protobuf:"varint,29,opt,name=did_any_subfund_invest_more_than_fifty_percent_of_nav_in_reduced_liquidity_assets,json=didAnySubfundInvestMoreThanFiftyPercentOfNavInReducedLiquidityAssets,proto3" json:"did_any_subfund_invest_more_than_fifty_percent_of_nav_in_reduced_liquidity_assets,omitempty"`
	// If invested in reduced liquidity assets (9.5), 9.5.1. If the answer to Q9.5. is YES, when is the carried interest / performance fee crystallized or paid. a. on the realised result on investments on a deal by deal basis
	//b. on the realised result on investments at the closure of the sub-fund/fund
	//c. on a regular frequency based on the unrealized result on investments with a possibility of claw backwhen the assets are sold and/or when the sub-fund is closed
	//d. on a regular frequency based on the unrealized result on investments without any claw back
	//e. Other
	ForReducedLiquidityFundsWhenDoPerformanceChargesCrystallize string `protobuf:"bytes,30,opt,name=for_reduced_liquidity_funds_when_do_performance_charges_crystallize,json=forReducedLiquidityFundsWhenDoPerformanceChargesCrystallize,proto3" json:"for_reduced_liquidity_funds_when_do_performance_charges_crystallize,omitempty"`
	// 10. Was there any receivable / outstanding payment (in the form of a principal, interest or other receivable) that was above materiality and that was not paid at year-end in accordance with the applicable contractual provisions (If YES, specify): a. material income past due for more than one year (i.e. interest on bonds, interest on loans, etc.)?
	MaterialIncomePastDueInterest *RT000D034_YesNoExplain `protobuf:"bytes,31,opt,name=material_income_past_due_interest,json=materialIncomePastDueInterest,proto3" json:"material_income_past_due_interest,omitempty"`
	// 10. Was there any receivable / outstanding payment (in the form of a principal, interest or other receivable) that was above materiality and that was not paid at year-end in accordance with the applicable contractual provisions (If YES, specify): b. material principal payment past due at year-end (i.e. principal of bond or loan or deposit, other receivable etc.)?
	MaterialIncomePastDuePrincipal *RT000D034_YesNoExplain `protobuf:"bytes,32,opt,name=material_income_past_due_principal,json=materialIncomePastDuePrincipal,proto3" json:"material_income_past_due_principal,omitempty"`
	// 10. Was there any receivable / outstanding payment (in the form of a principal, interest or other receivable) that was above materiality and that was not paid at year-end in accordance with the applicable contractual provisions (If YES, specify): b. other
	MaterialIncomePastDueOther *RT000D034_YesNoExplain `protobuf:"bytes,33,opt,name=material_income_past_due_other,json=materialIncomePastDueOther,proto3" json:"material_income_past_due_other,omitempty"`
	// 11. Has any sub-fund booked a receivable against a service provider which is above materiality at year-end?  If YES, explain.
	BookedReceivableAgainstServiceProvider *RT000D034_YesNoExplain `protobuf:"bytes,34,opt,name=booked_receivable_against_service_provider,json=bookedReceivableAgainstServiceProvider,proto3" json:"booked_receivable_against_service_provider,omitempty"`
	// 12. Did any sub-fund(s) conclude any EPM/SFT transaction during the year?
	AnyEpmSftTransactionsDuringYear bool `protobuf:"varint,35,opt,name=any_epm_sft_transactions_during_year,json=anyEpmSftTransactionsDuringYear,proto3" json:"any_epm_sft_transactions_during_year,omitempty"`
	// 12.1. If any sub-fund(s) conclude any EPM/SFT transaction during the year, has a comprehensive assessment of the adequacy of the operational costs/fees that are deducted from the gross revenues arising from EPM/SFT transactions been in place for the Fund in order to justify the ratio of gross revenues to direct and indirect operational costs/fees arising per EPM/SFT? If NO, explain.
	EpmSftComprehensiveAssessmentOfAdequacyPerformed *RT000D034_YesNoExplain `protobuf:"bytes,36,opt,name=epm_sft_comprehensive_assessment_of_adequacy_performed,json=epmSftComprehensiveAssessmentOfAdequacyPerformed,proto3" json:"epm_sft_comprehensive_assessment_of_adequacy_performed,omitempty"`
	// 12.2 If any sub-fund(s) conclude any EPM/SFT transaction during the year, are the EPM/SFT transactions concluded by any sub-fund covered by the best execution policy in place for the Fund? If NO, explain.
	EpmSftConcludedByBestExecution *RT000D034_YesNoExplain `protobuf:"bytes,37,opt,name=epm_sft_concluded_by_best_execution,json=epmSftConcludedByBestExecution,proto3" json:"epm_sft_concluded_by_best_execution,omitempty"`
}

func (x *RT000D034_ExpensesAndIncome) Reset() {
	*x = RT000D034_ExpensesAndIncome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_ExpensesAndIncome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_ExpensesAndIncome) ProtoMessage() {}

func (x *RT000D034_ExpensesAndIncome) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_ExpensesAndIncome.ProtoReflect.Descriptor instead.
func (*RT000D034_ExpensesAndIncome) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 8}
}

func (x *RT000D034_ExpensesAndIncome) GetAllCostsAndFeesChargedCorrespondedToChargeableServiceInAccordanceWithProspectus() bool {
	if x != nil {
		return x.AllCostsAndFeesChargedCorrespondedToChargeableServiceInAccordanceWithProspectus
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetCostsOrFeesNotCorrespondingToChargeableServiceChargedToAllSubfunds() []*RT000D034_ExpensesAndIncome_CostOrFee {
	if x != nil {
		return x.CostsOrFeesNotCorrespondingToChargeableServiceChargedToAllSubfunds
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetCostsOrFeesNotCorrespondingToChargeableServiceChargedToSpecificSubfunds() []*RT000D034_ExpensesAndIncome_FundSpecificCostOrFee {
	if x != nil {
		return x.CostsOrFeesNotCorrespondingToChargeableServiceChargedToSpecificSubfunds
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetAllCostsAndFeesCalculatedAndBookedComplyWithProspectus() bool {
	if x != nil {
		return x.AllCostsAndFeesCalculatedAndBookedComplyWithProspectus
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetCostsAndFeesCalculatedAndBookedComplyWithProspectusChargedToAllSubfunds() []*RT000D034_ExpensesAndIncome_CostOrFee {
	if x != nil {
		return x.CostsAndFeesCalculatedAndBookedComplyWithProspectusChargedToAllSubfunds
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetCostsAndFeesCalculatedAndBookedComplyWithProspectusChargedToSpecificSubfunds() []*RT000D034_ExpensesAndIncome_FundSpecificCostOrFee {
	if x != nil {
		return x.CostsAndFeesCalculatedAndBookedComplyWithProspectusChargedToSpecificSubfunds
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetAllCostsAndFeesDisclosedInAdequateWay() bool {
	if x != nil {
		return x.AllCostsAndFeesDisclosedInAdequateWay
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetCostsAndFeesNotAdequatelyDisclosedChargedToAllSubfunds() []*RT000D034_ExpensesAndIncome_CostOrFee {
	if x != nil {
		return x.CostsAndFeesNotAdequatelyDisclosedChargedToAllSubfunds
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetCostsAndFeesNotAdequatelyDisclosedChargedToSpecificSubfunds() []*RT000D034_ExpensesAndIncome_CostOrFee {
	if x != nil {
		return x.CostsAndFeesNotAdequatelyDisclosedChargedToSpecificSubfunds
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetFormalAssessmentPerformedToVerifyCostsProportionateComparedToMarketStandards() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FormalAssessmentPerformedToVerifyCostsProportionateComparedToMarketStandards
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetFormalAssessmentPerformedToVerifyNoDuplicateCosts() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FormalAssessmentPerformedToVerifyNoDuplicateCosts
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetFormalAssessmentPerformedToVerifyEffectiveServiceInInvestorsBestInterest() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FormalAssessmentPerformedToVerifyEffectiveServiceInInvestorsBestInterest
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetFundExpenseRations() []*RT000D034_ExpensesAndIncome_ExpenseRatio {
	if x != nil {
		return x.FundExpenseRations
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetExpenseRationOfAnySubfundSubjectToMaterialIncrease() bool {
	if x != nil {
		return x.ExpenseRationOfAnySubfundSubjectToMaterialIncrease
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetFundsSubjectToMaterialExpenseIncrease() []*RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses {
	if x != nil {
		return x.FundsSubjectToMaterialExpenseIncrease
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetAdvisoryFeesSupportedSuperiorToPortfolioManagementFees() bool {
	if x != nil {
		return x.AdvisoryFeesSupportedSuperiorToPortfolioManagementFees
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetFundSpecificExplanationForSuperiorAdvisoryFees() []*RT000D034_FundSpecificExplanation {
	if x != nil {
		return x.FundSpecificExplanationForSuperiorAdvisoryFees
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetCarriedInterestToAdvisersGreaterThanToPortfolioManager() bool {
	if x != nil {
		return x.CarriedInterestToAdvisersGreaterThanToPortfolioManager
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetFundSpecificExplanationForSuperiorAdvisoryCarriedInterest() []*RT000D034_FundSpecificExplanation {
	if x != nil {
		return x.FundSpecificExplanationForSuperiorAdvisoryCarriedInterest
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetTotalTransactionCostsAboveMaterialityThresholdForAnyFund() bool {
	if x != nil {
		return x.TotalTransactionCostsAboveMaterialityThresholdForAnyFund
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetFundSpecificTransactionCosts() []*RT000D034_ExpensesAndIncome_FundSpecificTransactionCost {
	if x != nil {
		return x.FundSpecificTransactionCosts
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetProspectusProvidesForPerformanceFeeOrCarriedInterest() bool {
	if x != nil {
		return x.ProspectusProvidesForPerformanceFeeOrCarriedInterest
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetPerformanceFeeOrCarriedInterestProspectusProvisionsCorrectlyApplied() bool {
	if x != nil {
		return x.PerformanceFeeOrCarriedInterestProspectusProvisionsCorrectlyApplied
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetIncorrectApplicationsOfPerformanceFeeOrCarriedInterest() []*RT000D034_FundSpecificExplanation {
	if x != nil {
		return x.IncorrectApplicationsOfPerformanceFeeOrCarriedInterest
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetPerformanceFeeCalculationParametersInLineWithProspectusAndMarket() bool {
	if x != nil {
		return x.PerformanceFeeCalculationParametersInLineWithProspectusAndMarket
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetPerformanceFeeCalculationParametersNotInLineWithProspectusAndMarketByFund() []*RT000D034_FundSpecificExplanation {
	if x != nil {
		return x.PerformanceFeeCalculationParametersNotInLineWithProspectusAndMarketByFund
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetFundSpecificPerformanceCharges() []*RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges {
	if x != nil {
		return x.FundSpecificPerformanceCharges
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetPerformanceChargeCalculationMethodEnsuresAlignmentToInvestmentPerformance() *RT000D034_YesNoExplain {
	if x != nil {
		return x.PerformanceChargeCalculationMethodEnsuresAlignmentToInvestmentPerformance
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetDidAnySubfundInvestMoreThanFiftyPercentOfNavInReducedLiquidityAssets() bool {
	if x != nil {
		return x.DidAnySubfundInvestMoreThanFiftyPercentOfNavInReducedLiquidityAssets
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetForReducedLiquidityFundsWhenDoPerformanceChargesCrystallize() string {
	if x != nil {
		return x.ForReducedLiquidityFundsWhenDoPerformanceChargesCrystallize
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome) GetMaterialIncomePastDueInterest() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialIncomePastDueInterest
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetMaterialIncomePastDuePrincipal() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialIncomePastDuePrincipal
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetMaterialIncomePastDueOther() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MaterialIncomePastDueOther
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetBookedReceivableAgainstServiceProvider() *RT000D034_YesNoExplain {
	if x != nil {
		return x.BookedReceivableAgainstServiceProvider
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetAnyEpmSftTransactionsDuringYear() bool {
	if x != nil {
		return x.AnyEpmSftTransactionsDuringYear
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome) GetEpmSftComprehensiveAssessmentOfAdequacyPerformed() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EpmSftComprehensiveAssessmentOfAdequacyPerformed
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome) GetEpmSftConcludedByBestExecution() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EpmSftConcludedByBestExecution
	}
	return nil
}

// Definition of questions relating to Relationship with Depositary
type RT000D034_DepositaryRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Self assessment responses related to depositary relationships for 7.1. UCITS /REGULATED AIFs WITH AUTHORISED AIFM
	UcitsAndRegulatedAifsWithAuthorisedAifm *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM `protobuf:"bytes,1,opt,name=ucits_and_regulated_aifs_with_authorised_aifm,json=ucitsAndRegulatedAifsWithAuthorisedAifm,proto3" json:"ucits_and_regulated_aifs_with_authorised_aifm,omitempty"`
	// Self assessment responses related to depositary relationships for 7.2. REGULATED AIFs REGISTERED AIFM/REGULATED NON-AIFs
	RegisteredAifmAndRegulatedAifs *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs `protobuf:"bytes,2,opt,name=registered_aifm_and_regulated_aifs,json=registeredAifmAndRegulatedAifs,proto3" json:"registered_aifm_and_regulated_aifs,omitempty"`
}

func (x *RT000D034_DepositaryRelationship) Reset() {
	*x = RT000D034_DepositaryRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_DepositaryRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_DepositaryRelationship) ProtoMessage() {}

func (x *RT000D034_DepositaryRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_DepositaryRelationship.ProtoReflect.Descriptor instead.
func (*RT000D034_DepositaryRelationship) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 9}
}

func (x *RT000D034_DepositaryRelationship) GetUcitsAndRegulatedAifsWithAuthorisedAifm() *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM {
	if x != nil {
		return x.UcitsAndRegulatedAifsWithAuthorisedAifm
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship) GetRegisteredAifmAndRegulatedAifs() *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs {
	if x != nil {
		return x.RegisteredAifmAndRegulatedAifs
	}
	return nil
}

// Definition of an investment restriction not verified
type RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Is the fund active (false if in liquidation)
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// Concerned Investment Restriction
	NotVerifiedInvestmentRestrictions []string `protobuf:"bytes,5,rep,name=not_verified_investment_restrictions,json=notVerifiedInvestmentRestrictions,proto3" json:"not_verified_investment_restrictions,omitempty"`
}

func (x *RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund) Reset() {
	*x = RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund) ProtoMessage() {}

func (x *RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund.ProtoReflect.Descriptor instead.
func (*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund) GetNotVerifiedInvestmentRestrictions() []string {
	if x != nil {
		return x.NotVerifiedInvestmentRestrictions
	}
	return nil
}

// Questions related to LEGAL/REGULATORY INVESTMENT RESTRICTIONS - UCITS
type RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 7. Did the transferable securities held by the (sub-)fund(s) during the year comply on an ongoing basis with the provisions of article 41(1) (a) to (d) of the UCI Law, article 2 of the EAD GDR 2008 and the CESR/07-044b in the sense that there was NO active breach?. 7.1. If the answer to Q7. is NO -not reported in a 02/77 report, explain
	TransferableSecuritiesNoActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=transferable_securities_no_active_breaches,json=transferableSecuritiesNoActiveBreaches,proto3" json:"transferable_securities_no_active_breaches,omitempty"`
	// 8. Did the money market instruments held by the (sub-)fund(s) during the year comply on an ongoing basis with the provisions of article 41(1) (a) to (d) of the UCI Law, articles 3 and 4 of the EAD GDR 2008 and the CESR/07-044b in the sense that there was NO active breach? 8.1. If the answer to Q8. is NO -not reported in a 02/77 report, explain
	MoneyMarketSecuritiesNoActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,2,opt,name=money_market_securities_no_active_breaches,json=moneyMarketSecuritiesNoActiveBreaches,proto3" json:"money_market_securities_no_active_breaches,omitempty"`
	// 9. Did the shares/units of undertakings for collective investment (UCITS and other UCIs) held by the (sub-)fund(s) during the year comply on an ongoing basis with the provisions of article 41(1)(e) of the UCI Law, the EAD GDR 2008 and the CESR/07-044b in the sense that there was NO active breach? 9.1. If the answer to Q9. is NO -not reported in a 02/77 report, explain
	SharesOrUintsOfUndertakingsNoActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,3,opt,name=shares_or_uints_of_undertakings_no_active_breaches,json=sharesOrUintsOfUndertakingsNoActiveBreaches,proto3" json:"shares_or_uints_of_undertakings_no_active_breaches,omitempty"`
	// 10. Did the deposits held by the (sub-)fund(s) during the year comply on an ongoing basis with the provisions of article 41(1)(f) of the UCI Law, the EAD GDR 2008 and the CESR/07-044b in the sense that there was NO active breach? 10.1. If the answer to Q10. is NO -not reported in a 02/77 report, explain
	DepositsNoActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,4,opt,name=deposits_no_active_breaches,json=depositsNoActiveBreaches,proto3" json:"deposits_no_active_breaches,omitempty"`
	// 11. Did the Financial Derivative Instruments (‘FDIs’) held by the (sub-)fund(s) during the year comply on an ongoing basis with the provisions of article 41(1)(g) of the UCI Law, the EAD GDR 2008, the CESR/07-044b and the Circular CSSF 14/592 in the sense that there was NO active breach? 11.1. If the answer to Q11. is NO -not reported in a 02/77 report, explain
	FinancialDerivativeInvestmentsNoActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,5,opt,name=financial_derivative_investments_no_active_breaches,json=financialDerivativeInvestmentsNoActiveBreaches,proto3" json:"financial_derivative_investments_no_active_breaches,omitempty"`
	// 11.2. If the answer to Q11. is not N/A, did the underlying financial index of any FDI held by the (sub-)fund(s) during the year comply on an ongoing basis with the provisions of article 44(1) of the UCI Law, the EAD GDR 2008, CESR/07-044b and the Circular CSSF 08/339 in the sense that there was NO active breach? 11.2.1. If the answer to Q11.2. is NO -not reported in a 02/77 report, explain
	FinancialDerivativeInvestmentsCompliantUnderlyingIndex *RT000D034_YesNoExplain `protobuf:"bytes,6,opt,name=financial_derivative_investments_compliant_underlying_index,json=financialDerivativeInvestmentsCompliantUnderlyingIndex,proto3" json:"financial_derivative_investments_compliant_underlying_index,omitempty"`
	// 12. Did the money market instruments held by the (sub-)fund(s) during the year comply on an ongoing basis with the provisions of article 41(1)(h) of the UCI Law, article 3 of the EAD GDR 2008 and the CESR/07-044b in the sense that there was NO active breach? 12.1. If the answer to Q12. is NO -not reported in a 02/77 report, explain
	MoneyMarketInvestmentsNoActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,7,opt,name=money_market_investments_no_active_breaches,json=moneyMarketInvestmentsNoActiveBreaches,proto3" json:"money_market_investments_no_active_breaches,omitempty"`
	// 13. Did the techniques and instruments relating to transferable securities and money market instruments concluded by the (sub-)fund(s) during the year for the purpose of EPM comply on an ongoing basis with the provisions of article 42(2) of the UCI Law, the article 11 of the EAD GDR 2008, CESR/07-044b and the Circular CSSF 14/592 in the sense that there was NO active breach? 13.1. If the answer to Q13. is NO -not reported in a 02/77 report, explain
	EfficientPortfolioManagementInstrumentsNoActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,8,opt,name=efficient_portfolio_management_instruments_no_active_breaches,json=efficientPortfolioManagementInstrumentsNoActiveBreaches,proto3" json:"efficient_portfolio_management_instruments_no_active_breaches,omitempty"`
	// 14. Did the financial collateral received by the (sub-)fund(s) during the year in relation with OTC FDI and EPM comply on an ongoing basis with the Circular CSSF 14/592 in the sense that there was NO active breach? 14.1. If the answer to Q14. is NO -not reported in a 02/77 report, explain
	FinancialCollateralNoActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,9,opt,name=financial_collateral_no_active_breaches,json=financialCollateralNoActiveBreaches,proto3" json:"financial_collateral_no_active_breaches,omitempty"`
	// 15. Did the trash ratio in accordance with article 41(2)(a) of the UCI Law in respect to any (sub-)fund of the Fund represent more than 5% of the TNA as at year-end?
	TrashRatioExceededFivePercentAtYearEnd bool `protobuf:"varint,10,opt,name=trash_ratio_exceeded_five_percent_at_year_end,json=trashRatioExceededFivePercentAtYearEnd,proto3" json:"trash_ratio_exceeded_five_percent_at_year_end,omitempty"`
	// 15.1. If the answer to Q15. is YES, mention the corresponding sub-funds concerned and the level of the trash ratio in percentage of the NAV of the sub-fund as at year-end
	TrashRatioByFund []*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund `protobuf:"bytes,11,rep,name=trash_ratio_by_fund,json=trashRatioByFund,proto3" json:"trash_ratio_by_fund,omitempty"`
	// 16. Did the investments held by the (sub-)fund(s) in the trash ratio during the year comply on an ongoing basis with the provisions of article 41(2)(a) of the UCI Law, article 2 of the EAD GDR 2008 and the CESR/07-044b in the sense that there was NO active breach? 16.1. If the answer to Q16. is NO -not reported in a 02/77 report, explain
	TrashRatioInvestmentsNoActiveBreaches *RT000D034_YesNoExplain `protobuf:"bytes,12,opt,name=trash_ratio_investments_no_active_breaches,json=trashRatioInvestmentsNoActiveBreaches,proto3" json:"trash_ratio_investments_no_active_breaches,omitempty"`
	// 17. Do the pre-trade controls in place for the Fund provide for (i) the identification of any investments to be qualified in accordance with Article 41(2) (a) (i.e. trash ratio) of the UCI Law, (ii) the carrying out (in accordance with the CSSF Feedback report dated 22 June 2021 on the ESMA Common Supervisory Action on UCITS Liquidity Risk Management) of adequate and documented liquidity analyses and forecasts at pre-investment level for trash ratio investments and (iii) the verification of compliance with all applicable regulatory requirements for such investments? 17.1. If the answer to Q17. is NO, explain
	PreTradeControlsInPlaceToIdentifyAndMonitorTrashInstruments *RT000D034_YesNoExplain `protobuf:"bytes,13,opt,name=pre_trade_controls_in_place_to_identify_and_monitor_trash_instruments,json=preTradeControlsInPlaceToIdentifyAndMonitorTrashInstruments,proto3" json:"pre_trade_controls_in_place_to_identify_and_monitor_trash_instruments,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): a. the global exposure limit of article 42(3). If NO -not reported in a 02/77 report, explain
	CompliedWithGlobalExposureInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,14,opt,name=complied_with_global_exposure_investment_restrictions,json=compliedWithGlobalExposureInvestmentRestrictions,proto3" json:"complied_with_global_exposure_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): b. the issuer limitations of article 43(1) (10%), 43(3) (35%) and 45(1) (100% / 6-30%). If NO -not reported in a 02/77 report, explain
	CompliedWithIssuerLimitationInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,15,opt,name=complied_with_issuer_limitation_investment_restrictions,json=compliedWithIssuerLimitationInvestmentRestrictions,proto3" json:"complied_with_issuer_limitation_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): c. the 20% deposit limit of article 43(1) . If NO -not reported in a 02/77 report, explain
	CompliedWithTwentyPercentDepositLimitInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,16,opt,name=complied_with_twenty_percent_deposit_limit_investment_restrictions,json=compliedWithTwentyPercentDepositLimitInvestmentRestrictions,proto3" json:"complied_with_twenty_percent_deposit_limit_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): d. the 5%/10% OTC counterparty limit of article 43(1). If NO -not reported in a 02/77 report, explain
	CompliedWithOtcCounterpartyLimitInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,17,opt,name=complied_with_otc_counterparty_limit_investment_restrictions,json=compliedWithOtcCounterpartyLimitInvestmentRestrictions,proto3" json:"complied_with_otc_counterparty_limit_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): e. the 5%/40% issuer limit of article 43(2). If NO -not reported in a 02/77 report, explain
	CompliedWithIssuerLimitLimitInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,18,opt,name=complied_with_issuer_limit_limit_investment_restrictions,json=compliedWithIssuerLimitLimitInvestmentRestrictions,proto3" json:"complied_with_issuer_limit_limit_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): f. the combined 20% limit of article 43(2) . If NO -not reported in a 02/77 report, explain
	CompliedWithCombinedTwentyPercentLimitInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,19,opt,name=complied_with_combined_twenty_percent_limit_investment_restrictions,json=compliedWithCombinedTwentyPercentLimitInvestmentRestrictions,proto3" json:"complied_with_combined_twenty_percent_limit_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): g. the target UCITS / other UCI limits of 20% (per target fund) and 30% (total other UCI) of article 46. If NO -not reported in a 02/77 report, explain
	CompliedWithTargetUciAndUcitsLimitInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,20,opt,name=complied_with_target_uci_and_ucits_limit_investment_restrictions,json=compliedWithTargetUciAndUcitsLimitInvestmentRestrictions,proto3" json:"complied_with_target_uci_and_ucits_limit_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): h. the concentration limits of article 48 . If NO -not reported in a 02/77 report, explain
	CompliedWithConcentrationLimitInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,21,opt,name=complied_with_concentration_limit_investment_restrictions,json=compliedWithConcentrationLimitInvestmentRestrictions,proto3" json:"complied_with_concentration_limit_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): i. the borrowing limit of article 50. If NO -not reported in a 02/77 report, explain
	CompliedWithBorrowingLimitInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,22,opt,name=complied_with_borrowing_limit_investment_restrictions,json=compliedWithBorrowingLimitInvestmentRestrictions,proto3" json:"complied_with_borrowing_limit_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): j. the restriction to carry out uncovered sales of article 52 . If NO -not reported in a 02/77 report, explain
	CompliedWithUncoveredSaleInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,23,opt,name=complied_with_uncovered_sale_investment_restrictions,json=compliedWithUncoveredSaleInvestmentRestrictions,proto3" json:"complied_with_uncovered_sale_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): k. the 10% trash ratio limit of article 41(2) (a) . If NO -not reported in a 02/77 report, explain
	CompliedWithTenPercentTrashInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,24,opt,name=complied_with_ten_percent_trash_investment_restrictions,json=compliedWithTenPercentTrashInvestmentRestrictions,proto3" json:"complied_with_ten_percent_trash_investment_restrictions,omitempty"`
	// 18. Did the (sub-)fund(s) comply on an ongoing basis during the year with all legal investment restrictions of articles 42 to 52 of the UCI Law, including notably the following (non-exhaustive list): l. other. If NO -not reported in a 02/77 report, explain
	CompliedAllOtherInvestmentRestrictions *RT000D034_YesNoExplain `protobuf:"bytes,25,opt,name=complied_all_other_investment_restrictions,json=compliedAllOtherInvestmentRestrictions,proto3" json:"complied_all_other_investment_restrictions,omitempty"`
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) Reset() {
	*x = RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) ProtoMessage() {}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS.ProtoReflect.Descriptor instead.
func (*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetTransferableSecuritiesNoActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.TransferableSecuritiesNoActiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetMoneyMarketSecuritiesNoActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MoneyMarketSecuritiesNoActiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetSharesOrUintsOfUndertakingsNoActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.SharesOrUintsOfUndertakingsNoActiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetDepositsNoActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.DepositsNoActiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetFinancialDerivativeInvestmentsNoActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FinancialDerivativeInvestmentsNoActiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetFinancialDerivativeInvestmentsCompliantUnderlyingIndex() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FinancialDerivativeInvestmentsCompliantUnderlyingIndex
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetMoneyMarketInvestmentsNoActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.MoneyMarketInvestmentsNoActiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetEfficientPortfolioManagementInstrumentsNoActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EfficientPortfolioManagementInstrumentsNoActiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetFinancialCollateralNoActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FinancialCollateralNoActiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetTrashRatioExceededFivePercentAtYearEnd() bool {
	if x != nil {
		return x.TrashRatioExceededFivePercentAtYearEnd
	}
	return false
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetTrashRatioByFund() []*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund {
	if x != nil {
		return x.TrashRatioByFund
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetTrashRatioInvestmentsNoActiveBreaches() *RT000D034_YesNoExplain {
	if x != nil {
		return x.TrashRatioInvestmentsNoActiveBreaches
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetPreTradeControlsInPlaceToIdentifyAndMonitorTrashInstruments() *RT000D034_YesNoExplain {
	if x != nil {
		return x.PreTradeControlsInPlaceToIdentifyAndMonitorTrashInstruments
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithGlobalExposureInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithGlobalExposureInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithIssuerLimitationInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithIssuerLimitationInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithTwentyPercentDepositLimitInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithTwentyPercentDepositLimitInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithOtcCounterpartyLimitInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithOtcCounterpartyLimitInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithIssuerLimitLimitInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithIssuerLimitLimitInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithCombinedTwentyPercentLimitInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithCombinedTwentyPercentLimitInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithTargetUciAndUcitsLimitInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithTargetUciAndUcitsLimitInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithConcentrationLimitInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithConcentrationLimitInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithBorrowingLimitInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithBorrowingLimitInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithUncoveredSaleInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithUncoveredSaleInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedWithTenPercentTrashInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithTenPercentTrashInvestmentRestrictions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS) GetCompliedAllOtherInvestmentRestrictions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedAllOtherInvestmentRestrictions
	}
	return nil
}

// Questions related to LEGAL/REGULATORY INVESTMENT RESTRICTIONS - SIF
type RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 19. Did the (sub-)fund(s) comply on an ongoing basis during the year with the investment restrictions laid down in Circular CSSF 07/309 on the risk-spreading? 20.1. If the answer to Q20. is NO, explain
	CompliedWithScarLawAndCssfCircular *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=complied_with_scar_law_and_cssf_circular,json=compliedWithScarLawAndCssfCircular,proto3" json:"complied_with_scar_law_and_cssf_circular,omitempty"`
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF) Reset() {
	*x = RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF) ProtoMessage() {}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF.ProtoReflect.Descriptor instead.
func (*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 5, 2}
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF) GetCompliedWithScarLawAndCssfCircular() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithScarLawAndCssfCircular
	}
	return nil
}

// Questions related to LEGAL/REGULATORY INVESTMENT RESTRICTIONS - MMF
type RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 21. Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following eligibility requirements of the MMF Regulation If NO -not reported in a 02/77 report, explain: a. article 9 on eligible assets
	CompliedWithArticle9OnEligibleAssets *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=complied_with_article9_on_eligible_assets,json=compliedWithArticle9OnEligibleAssets,proto3" json:"complied_with_article9_on_eligible_assets,omitempty"`
	// 21. Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following eligibility requirements of the MMF Regulation If NO -not reported in a 02/77 report, explain: b. article 10 on eligible MMI
	CompliedWithArticle9OnEligibleMmi *RT000D034_YesNoExplain `protobuf:"bytes,2,opt,name=complied_with_article9_on_eligible_mmi,json=compliedWithArticle9OnEligibleMmi,proto3" json:"complied_with_article9_on_eligible_mmi,omitempty"`
	// 21. Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following eligibility requirements of the MMF Regulation If NO -not reported in a 02/77 report, explain: c. article 11 on eligible securitizations and ABCPs
	CompliedWithArticle11OnEligibleSecuritiesAndAbcps *RT000D034_YesNoExplain `protobuf:"bytes,3,opt,name=complied_with_article11_on_eligible_securities_and_abcps,json=compliedWithArticle11OnEligibleSecuritiesAndAbcps,proto3" json:"complied_with_article11_on_eligible_securities_and_abcps,omitempty"`
	// 21. Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following eligibility requirements of the MMF Regulation If NO -not reported in a 02/77 report, explain: d. article 12 on eligible deposits with credit institutions
	CompliedWithArticle12OnEligibleDepositsWithCreditInstitutions *RT000D034_YesNoExplain `protobuf:"bytes,4,opt,name=complied_with_article12_on_eligible_deposits_with_credit_institutions,json=compliedWithArticle12OnEligibleDepositsWithCreditInstitutions,proto3" json:"complied_with_article12_on_eligible_deposits_with_credit_institutions,omitempty"`
	// 21. Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following eligibility requirements of the MMF Regulation If NO -not reported in a 02/77 report, explain: e. article 13 on financial derivative instruments
	CompliedWithArticle13OnFinancialDerivativeInstruments *RT000D034_YesNoExplain `protobuf:"bytes,5,opt,name=complied_with_article13_on_financial_derivative_instruments,json=compliedWithArticle13OnFinancialDerivativeInstruments,proto3" json:"complied_with_article13_on_financial_derivative_instruments,omitempty"`
	// 21. Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following eligibility requirements of the MMF Regulation If NO -not reported in a 02/77 report, explain: f. article 14 on eligible repurchase agreements
	CompliedWithArticle14OnEligibleRepurchaseAgreements *RT000D034_YesNoExplain `protobuf:"bytes,6,opt,name=complied_with_article14_on_eligible_repurchase_agreements,json=compliedWithArticle14OnEligibleRepurchaseAgreements,proto3" json:"complied_with_article14_on_eligible_repurchase_agreements,omitempty"`
	// 21. Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following eligibility requirements of the MMF Regulation If NO -not reported in a 02/77 report, explain: g. article 15 on eligible reverse repurchase agreements
	CompliedWithArticle15OnReverseRepurchaseAgreements *RT000D034_YesNoExplain `protobuf:"bytes,7,opt,name=complied_with_article15_on_reverse_repurchase_agreements,json=compliedWithArticle15OnReverseRepurchaseAgreements,proto3" json:"complied_with_article15_on_reverse_repurchase_agreements,omitempty"`
	// 21. Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following eligibility requirements of the MMF Regulation If NO -not reported in a 02/77 report, explain: h. article 16 on eligible units or shares of MMFs
	CompliedWithArticle16OnEligibleSharesOrUnitsOfMmfs *RT000D034_YesNoExplain `protobuf:"bytes,8,opt,name=complied_with_article16_on_eligible_shares_or_units_of_mmfs,json=compliedWithArticle16OnEligibleSharesOrUnitsOfMmfs,proto3" json:"complied_with_article16_on_eligible_shares_or_units_of_mmfs,omitempty"`
	// 22.   Did the credit quality of each MMI (except exempted MMIs as per MMF Regulation Article 10 (3)), taking into account the issuer of the instrument and the characteristics of the instrument itself, held by the MMF (sub-)fund(s) during the year have a favorable assessment according to an ICQAP in accordance with article 10 and articles 19 to 23 of the MMF Regulation further supplemented by articles 3 to 6 of CDR 2018/990?
	CreditQualityAssessmentOfEachMmiFavorable *RT000D034_YesNoExplain `protobuf:"bytes,9,opt,name=credit_quality_assessment_of_each_mmi_favorable,json=creditQualityAssessmentOfEachMmiFavorable,proto3" json:"credit_quality_assessment_of_each_mmi_favorable,omitempty"`
	// 23.   Did the credit quality of each securitization and ABCP, taking into account the issuer of the instrument and the characteristics of the instrument itself, held by the MMF (sub-)fund(s) during the year have a favorable assessment in accordance with article 11(1) and articles 19 to 23 of the MMF Regulation further supplemented by articles 3 to 6 of CDR 2018/990?
	CreditQualityAssessmentOfEachSecuritizationAndAbcpFavorable *RT000D034_YesNoExplain `protobuf:"bytes,10,opt,name=credit_quality_assessment_of_each_securitization_and_abcp_favorable,json=creditQualityAssessmentOfEachSecuritizationAndAbcpFavorable,proto3" json:"credit_quality_assessment_of_each_securitization_and_abcp_favorable,omitempty"`
	// 3.2.4.2. Legal Investment Restrictions applicable to MMF
	LegalRestrictionsApplicable []string `protobuf:"bytes,11,rep,name=legal_restrictions_applicable,json=legalRestrictionsApplicable,proto3" json:"legal_restrictions_applicable,omitempty"`
	// 24.   Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following provisions and related investment restrictions of the MMF Regulation (If NO -not reported in a 02/77 report, explain): a. article 17 on diversification
	CompliedOnOngoingBasisWithArticle17OnDiversification *RT000D034_YesNoExplain `protobuf:"bytes,12,opt,name=complied_on_ongoing_basis_with_article17_on_diversification,json=compliedOnOngoingBasisWithArticle17OnDiversification,proto3" json:"complied_on_ongoing_basis_with_article17_on_diversification,omitempty"`
	// 24.   Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following provisions and related investment restrictions of the MMF Regulation (If NO -not reported in a 02/77 report, explain): b. article 18 on concentration
	CompliedOnOngoingBasisWithArticle18OnConcentration *RT000D034_YesNoExplain `protobuf:"bytes,13,opt,name=complied_on_ongoing_basis_with_article18_on_concentration,json=compliedOnOngoingBasisWithArticle18OnConcentration,proto3" json:"complied_on_ongoing_basis_with_article18_on_concentration,omitempty"`
	// 24.   Did the MMF (sub-)fund(s) comply on an ongoing basis during the year with the following provisions and related investment restrictions of the MMF Regulation (If NO -not reported in a 02/77 report, explain): c. articles 24 and 25 on portfolio rules
	CompliedOnOngoingBasisWithArticle24AndArticle25OnPortfolioRules *RT000D034_YesNoExplain `protobuf:"bytes,14,opt,name=complied_on_ongoing_basis_with_article24_and_article25_on_portfolio_rules,json=compliedOnOngoingBasisWithArticle24AndArticle25OnPortfolioRules,proto3" json:"complied_on_ongoing_basis_with_article24_and_article25_on_portfolio_rules,omitempty"`
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) Reset() {
	*x = RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) ProtoMessage() {}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF.ProtoReflect.Descriptor instead.
func (*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 5, 3}
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedWithArticle9OnEligibleAssets() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithArticle9OnEligibleAssets
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedWithArticle9OnEligibleMmi() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithArticle9OnEligibleMmi
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedWithArticle11OnEligibleSecuritiesAndAbcps() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithArticle11OnEligibleSecuritiesAndAbcps
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedWithArticle12OnEligibleDepositsWithCreditInstitutions() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithArticle12OnEligibleDepositsWithCreditInstitutions
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedWithArticle13OnFinancialDerivativeInstruments() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithArticle13OnFinancialDerivativeInstruments
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedWithArticle14OnEligibleRepurchaseAgreements() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithArticle14OnEligibleRepurchaseAgreements
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedWithArticle15OnReverseRepurchaseAgreements() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithArticle15OnReverseRepurchaseAgreements
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedWithArticle16OnEligibleSharesOrUnitsOfMmfs() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedWithArticle16OnEligibleSharesOrUnitsOfMmfs
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCreditQualityAssessmentOfEachMmiFavorable() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CreditQualityAssessmentOfEachMmiFavorable
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCreditQualityAssessmentOfEachSecuritizationAndAbcpFavorable() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CreditQualityAssessmentOfEachSecuritizationAndAbcpFavorable
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetLegalRestrictionsApplicable() []string {
	if x != nil {
		return x.LegalRestrictionsApplicable
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedOnOngoingBasisWithArticle17OnDiversification() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedOnOngoingBasisWithArticle17OnDiversification
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedOnOngoingBasisWithArticle18OnConcentration() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedOnOngoingBasisWithArticle18OnConcentration
	}
	return nil
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF) GetCompliedOnOngoingBasisWithArticle24AndArticle25OnPortfolioRules() *RT000D034_YesNoExplain {
	if x != nil {
		return x.CompliedOnOngoingBasisWithArticle24AndArticle25OnPortfolioRules
	}
	return nil
}

// Definition of an investment restriction not verified
type RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Is the fund active (false if in liquidation)
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// Trash ratio (in % of NAV)
	TrashRatio float64 `protobuf:"fixed64,5,opt,name=trash_ratio,json=trashRatio,proto3" json:"trash_ratio,omitempty"`
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund) Reset() {
	*x = RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund) ProtoMessage() {
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund.ProtoReflect.Descriptor instead.
func (*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 5, 1, 0}
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund) GetTrashRatio() float64 {
	if x != nil {
		return x.TrashRatio
	}
	return 0
}

// Questions related to LEGAL/REGULATORY Valuation Requirements - UCITS
type RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 6. Were all the transferable securities held by the (sub-)fund(s) during the year, under article 41(1) (a) to (d) of the UCI Law, valued on an ongoing basis, with accurate, reliable and regular prices, as required by the article 2(1)(c)(i) of the EAD GDR 2008, which are: (i) either market prices (ii) prices made available by valuation systems independent from issuers. 6.1. If the answer to Q6. is NO, explain
	AllTransferableSecuritiesValuedAtMarketPricesOrIndependentOfIssuers *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=all_transferable_securities_valued_at_market_prices_or_independent_of_issuers,json=allTransferableSecuritiesValuedAtMarketPricesOrIndependentOfIssuers,proto3" json:"all_transferable_securities_valued_at_market_prices_or_independent_of_issuers,omitempty"`
	// 7. Were all the money market instruments held by the (sub-)fund(s) during the year, as defined in article 1 point 23 of the UCI Law, valued on an ongoing basis accurately at any time based on accurate and reliable valuations systems, which fulfil the criteria of article 4(2) of the EAD GDR 2008? 7.1. If the answer to Q7. is NO, explain
	AllMoneyMarketSecuritiesValuedAccuratelyOnAnOngoingBasis *RT000D034_YesNoExplain `protobuf:"bytes,2,opt,name=all_money_market_securities_valued_accurately_on_an_ongoing_basis,json=allMoneyMarketSecuritiesValuedAccuratelyOnAnOngoingBasis,proto3" json:"all_money_market_securities_valued_accurately_on_an_ongoing_basis,omitempty"`
	// 8. Were all the OTC FDI held by the (sub-)fund(s) during the year, as referred to in article 41(1)(g) of the UCI Law, valued on an ongoing basis with reliable and verifiable prices: (i) which are at fair value as referred to in the Article 8(3) of the EAD GDR 2008 (ii) which do not rely only on market quotations by the counterparty and (iii) which fulfil the criteria of the Article 8(4) of the EAD GDR 2008. 8.1. If the answer to Q8. is NO, explain
	AllOtcFdiValuedOnAnOngoingBasisWithReliableAndVerifiablePrices *RT000D034_YesNoExplain `protobuf:"bytes,3,opt,name=all_otc_fdi_valued_on_an_ongoing_basis_with_reliable_and_verifiable_prices,json=allOtcFdiValuedOnAnOngoingBasisWithReliableAndVerifiablePrices,proto3" json:"all_otc_fdi_valued_on_an_ongoing_basis_with_reliable_and_verifiable_prices,omitempty"`
	// 9. Were all the transferable securities / money market instruments held by the (sub-)funds in the trash ratio valued on a periodic basis using information provided by the issuer of the security or using competent investment research as required by the article 2(1)(c)(ii) of the EAD GDR 2008? 9.1. If the answer to Q9. is NO, explain
	AllInstrumentsInTrashRatioValuedOnAnOngoingBasisUsingIssuerInformationOrCompetentResearch *RT000D034_YesNoExplain `protobuf:"bytes,4,opt,name=all_instruments_in_trash_ratio_valued_on_an_ongoing_basis_using_issuer_information_or_competent_research,json=allInstrumentsInTrashRatioValuedOnAnOngoingBasisUsingIssuerInformationOrCompetentResearch,proto3" json:"all_instruments_in_trash_ratio_valued_on_an_ongoing_basis_using_issuer_information_or_competent_research,omitempty"`
	// 10. Did any (sub-)fund(s) invest a material portion of the NAV in investments valued on the basis of valuation model(s) as at year-end?
	MaterialPortionOfNavInInvestmentsValuedByModel bool `protobuf:"varint,5,opt,name=material_portion_of_nav_in_investments_valued_by_model,json=materialPortionOfNavInInvestmentsValuedByModel,proto3" json:"material_portion_of_nav_in_investments_valued_by_model,omitempty"`
	// 10.1 If any (sub-)fund(s) invest a material portion of the NAV in investments valued on the basis of valuation model(s) as at year-end, mention the number of concerned sub-funds AND the min / max % ofNAV over the concerned sub-funds.
	ProportionOfNavValuedByModelByFund []*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund `protobuf:"bytes,6,rep,name=proportion_of_nav_valued_by_model_by_fund,json=proportionOfNavValuedByModelByFund,proto3" json:"proportion_of_nav_valued_by_model_by_fund,omitempty"`
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) Reset() {
	*x = RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) ProtoMessage() {}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) GetAllTransferableSecuritiesValuedAtMarketPricesOrIndependentOfIssuers() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllTransferableSecuritiesValuedAtMarketPricesOrIndependentOfIssuers
	}
	return nil
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) GetAllMoneyMarketSecuritiesValuedAccuratelyOnAnOngoingBasis() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllMoneyMarketSecuritiesValuedAccuratelyOnAnOngoingBasis
	}
	return nil
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) GetAllOtcFdiValuedOnAnOngoingBasisWithReliableAndVerifiablePrices() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllOtcFdiValuedOnAnOngoingBasisWithReliableAndVerifiablePrices
	}
	return nil
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) GetAllInstrumentsInTrashRatioValuedOnAnOngoingBasisUsingIssuerInformationOrCompetentResearch() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllInstrumentsInTrashRatioValuedOnAnOngoingBasisUsingIssuerInformationOrCompetentResearch
	}
	return nil
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) GetMaterialPortionOfNavInInvestmentsValuedByModel() bool {
	if x != nil {
		return x.MaterialPortionOfNavInInvestmentsValuedByModel
	}
	return false
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS) GetProportionOfNavValuedByModelByFund() []*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund {
	if x != nil {
		return x.ProportionOfNavValuedByModelByFund
	}
	return nil
}

// Questions related to LEGAL/REGULATORY Valuation Requirements - UCI, SIF, SICAR
type RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 11. Were all the assets and FDIs held by any (sub-)fund(s) valued on an ongoing basis at fair value during the year?
	AllAssetsAndFdisValuedOnOngoingBasisAtFairValue bool `protobuf:"varint,1,opt,name=all_assets_and_fdis_valued_on_ongoing_basis_at_fair_value,json=allAssetsAndFdisValuedOnOngoingBasisAtFairValue,proto3" json:"all_assets_and_fdis_valued_on_ongoing_basis_at_fair_value,omitempty"`
	// 11.1. If not all the assets and FDIs held by any (sub-)fund(s) valued on an ongoing basis at fair value during the year. is NO, were the assets and FDIs, which are not valued on an ongoing basis at fair value during the year, valued in compliance with the prospectus? 11.1.1. If the answer to Q11.1. is NO, explain.
	AllAssetsAndFdisValuedOnAccordingToProspectus *RT000D034_YesNoExplain `protobuf:"bytes,2,opt,name=all_assets_and_fdis_valued_on_according_to_prospectus,json=allAssetsAndFdisValuedOnAccordingToProspectus,proto3" json:"all_assets_and_fdis_valued_on_according_to_prospectus,omitempty"`
	// 12. Did any (sub-)fund(s) invest a material portion of the NAV in unquoted assets and/or OTC FDIs which are valued by an external valuer as at year-end?
	InvestedMaterialPortionOfNavInUnquotedAssetsOrOtcFdis bool `protobuf:"varint,3,opt,name=invested_material_portion_of_nav_in_unquoted_assets_or_otc_fdis,json=investedMaterialPortionOfNavInUnquotedAssetsOrOtcFdis,proto3" json:"invested_material_portion_of_nav_in_unquoted_assets_or_otc_fdis,omitempty"`
	// 12.1. If the answer to Q12. is YES, mention the number of concerned sub-funds AND the min / max % ofNAV over the concerned sub-funds
	ProportionOfNavUnquotedAssetsOrOtcFdisByFund []*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund `protobuf:"bytes,6,rep,name=proportion_of_nav_unquoted_assets_or_otc_fdis_by_fund,json=proportionOfNavUnquotedAssetsOrOtcFdisByFund,proto3" json:"proportion_of_nav_unquoted_assets_or_otc_fdis_by_fund,omitempty"`
	// 13. Did any (sub-)fund(s) invest a material portion of the NAV in investments valued on the basis of model(s) developed by the Fund and/or its IFM, if any, as at year-end?
	InvestedMaterialPortionOfNavInvestmentsValuedByModel bool `protobuf:"varint,7,opt,name=invested_material_portion_of_nav_investments_valued_by_model,json=investedMaterialPortionOfNavInvestmentsValuedByModel,proto3" json:"invested_material_portion_of_nav_investments_valued_by_model,omitempty"`
	// 13.1. If the answer to Q13. is YES, mention the number of concerned sub-funds AND the min / max % ofNAV over the concerned sub-funds
	ProportionOfNavValuedByModelByFund []*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund `protobuf:"bytes,8,rep,name=proportion_of_nav_valued_by_model_by_fund,json=proportionOfNavValuedByModelByFund,proto3" json:"proportion_of_nav_valued_by_model_by_fund,omitempty"`
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) Reset() {
	*x = RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) ProtoMessage() {}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6, 1}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) GetAllAssetsAndFdisValuedOnOngoingBasisAtFairValue() bool {
	if x != nil {
		return x.AllAssetsAndFdisValuedOnOngoingBasisAtFairValue
	}
	return false
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) GetAllAssetsAndFdisValuedOnAccordingToProspectus() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllAssetsAndFdisValuedOnAccordingToProspectus
	}
	return nil
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) GetInvestedMaterialPortionOfNavInUnquotedAssetsOrOtcFdis() bool {
	if x != nil {
		return x.InvestedMaterialPortionOfNavInUnquotedAssetsOrOtcFdis
	}
	return false
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) GetProportionOfNavUnquotedAssetsOrOtcFdisByFund() []*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund {
	if x != nil {
		return x.ProportionOfNavUnquotedAssetsOrOtcFdisByFund
	}
	return nil
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) GetInvestedMaterialPortionOfNavInvestmentsValuedByModel() bool {
	if x != nil {
		return x.InvestedMaterialPortionOfNavInvestmentsValuedByModel
	}
	return false
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR) GetProportionOfNavValuedByModelByFund() []*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund {
	if x != nil {
		return x.ProportionOfNavValuedByModelByFund
	}
	return nil
}

// Questions related to LEGAL/REGULATORY Valuation Requirements - UCI, SIF, SICAR
type RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 14. Were all the assets held by the MMF valued on an ongoing basis during the year in compliance with the chapter IV (articles 29-33) of the MMF Regulation? 14.1. If the answer to Q14. is NO, explain.
	AllAssetsInCompliance *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=all_assets_in_compliance,json=allAssetsInCompliance,proto3" json:"all_assets_in_compliance,omitempty"`
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF) Reset() {
	*x = RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF) ProtoMessage() {}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6, 2}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF) GetAllAssetsInCompliance() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllAssetsInCompliance
	}
	return nil
}

// Definition of types of instruments valued at lower frequency
type RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Minimum % NAV valued by model
	Minimum float64 `protobuf:"fixed64,3,opt,name=minimum,proto3" json:"minimum,omitempty"`
	// Maximum % NAV valued by model
	Maximum float64 `protobuf:"fixed64,4,opt,name=maximum,proto3" json:"maximum,omitempty"`
	// Types of investments
	InvestmentTypes []string `protobuf:"bytes,5,rep,name=investment_types,json=investmentTypes,proto3" json:"investment_types,omitempty"`
}

func (x *RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) Reset() {
	*x = RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) ProtoMessage() {}

func (x *RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6, 3}
}

func (x *RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund) GetInvestmentTypes() []string {
	if x != nil {
		return x.InvestmentTypes
	}
	return nil
}

// Definition of valuation exposure by fund
type RT000D034_Valuation_MaxMinExposureByFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Minimum % NAV valued by model
	Minimum float64 `protobuf:"fixed64,3,opt,name=minimum,proto3" json:"minimum,omitempty"`
	// Maximum % NAV valued by model
	Maximum float64 `protobuf:"fixed64,4,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *RT000D034_Valuation_MaxMinExposureByFund) Reset() {
	*x = RT000D034_Valuation_MaxMinExposureByFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation_MaxMinExposureByFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation_MaxMinExposureByFund) ProtoMessage() {}

func (x *RT000D034_Valuation_MaxMinExposureByFund) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation_MaxMinExposureByFund.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation_MaxMinExposureByFund) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6, 4}
}

func (x *RT000D034_Valuation_MaxMinExposureByFund) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_Valuation_MaxMinExposureByFund) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_Valuation_MaxMinExposureByFund) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *RT000D034_Valuation_MaxMinExposureByFund) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

// Definition of data provided on an issue only impacting a specific sub-fund
type RT000D034_Valuation_FundSpecificExplanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Is the sub-fund active or in liquidation?
	Active bool `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	// Explanation of issue & impact
	ExplanationOfIssuesAndImpact []string `protobuf:"bytes,4,rep,name=explanation_of_issues_and_impact,json=explanationOfIssuesAndImpact,proto3" json:"explanation_of_issues_and_impact,omitempty"`
}

func (x *RT000D034_Valuation_FundSpecificExplanation) Reset() {
	*x = RT000D034_Valuation_FundSpecificExplanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation_FundSpecificExplanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation_FundSpecificExplanation) ProtoMessage() {}

func (x *RT000D034_Valuation_FundSpecificExplanation) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation_FundSpecificExplanation.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation_FundSpecificExplanation) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6, 5}
}

func (x *RT000D034_Valuation_FundSpecificExplanation) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_Valuation_FundSpecificExplanation) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_Valuation_FundSpecificExplanation) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *RT000D034_Valuation_FundSpecificExplanation) GetExplanationOfIssuesAndImpact() []string {
	if x != nil {
		return x.ExplanationOfIssuesAndImpact
	}
	return nil
}

// Definition of details on management refused external valuation
type RT000D034_Valuation_InvestmentDetailsByFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// The investment concerned
	Investment string `protobuf:"bytes,3,opt,name=investment,proto3" json:"investment,omitempty"`
	// Explanation
	Explanation string `protobuf:"bytes,4,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT000D034_Valuation_InvestmentDetailsByFund) Reset() {
	*x = RT000D034_Valuation_InvestmentDetailsByFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation_InvestmentDetailsByFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation_InvestmentDetailsByFund) ProtoMessage() {}

func (x *RT000D034_Valuation_InvestmentDetailsByFund) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation_InvestmentDetailsByFund.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation_InvestmentDetailsByFund) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6, 6}
}

func (x *RT000D034_Valuation_InvestmentDetailsByFund) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_Valuation_InvestmentDetailsByFund) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_Valuation_InvestmentDetailsByFund) GetInvestment() string {
	if x != nil {
		return x.Investment
	}
	return ""
}

func (x *RT000D034_Valuation_InvestmentDetailsByFund) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Definition of an valuation exposure by fund
type RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Minimum % NAV valued by model
	Minimum float64 `protobuf:"fixed64,3,opt,name=minimum,proto3" json:"minimum,omitempty"`
	// Maximum % NAV valued by model
	Maximum float64 `protobuf:"fixed64,4,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund) Reset() {
	*x = RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund) ProtoMessage() {
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

// Definition of max / min exposure by fund
type RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Minimum % NAV valued by model
	Minimum float64 `protobuf:"fixed64,3,opt,name=minimum,proto3" json:"minimum,omitempty"`
	// Maximum % NAV valued by model
	Maximum float64 `protobuf:"fixed64,4,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund) Reset() {
	*x = RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund) ProtoMessage() {
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund.ProtoReflect.Descriptor instead.
func (*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 6, 1, 0}
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

// FundInformation
type RT000D034_NAVDeterminiation_FundInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
}

func (x *RT000D034_NAVDeterminiation_FundInformation) Reset() {
	*x = RT000D034_NAVDeterminiation_FundInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_NAVDeterminiation_FundInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_NAVDeterminiation_FundInformation) ProtoMessage() {}

func (x *RT000D034_NAVDeterminiation_FundInformation) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_NAVDeterminiation_FundInformation.ProtoReflect.Descriptor instead.
func (*RT000D034_NAVDeterminiation_FundInformation) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *RT000D034_NAVDeterminiation_FundInformation) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_NAVDeterminiation_FundInformation) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

// Details number of transactions per fund
type RT000D034_NAVDeterminiation_NumberOfTransactionsByFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// The number of redemption in kind transactions by fund
	NumberOfTransactions int32 `protobuf:"varint,3,opt,name=number_of_transactions,json=numberOfTransactions,proto3" json:"number_of_transactions,omitempty"`
}

func (x *RT000D034_NAVDeterminiation_NumberOfTransactionsByFund) Reset() {
	*x = RT000D034_NAVDeterminiation_NumberOfTransactionsByFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_NAVDeterminiation_NumberOfTransactionsByFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_NAVDeterminiation_NumberOfTransactionsByFund) ProtoMessage() {}

func (x *RT000D034_NAVDeterminiation_NumberOfTransactionsByFund) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_NAVDeterminiation_NumberOfTransactionsByFund.ProtoReflect.Descriptor instead.
func (*RT000D034_NAVDeterminiation_NumberOfTransactionsByFund) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 7, 1}
}

func (x *RT000D034_NAVDeterminiation_NumberOfTransactionsByFund) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_NAVDeterminiation_NumberOfTransactionsByFund) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_NAVDeterminiation_NumberOfTransactionsByFund) GetNumberOfTransactions() int32 {
	if x != nil {
		return x.NumberOfTransactions
	}
	return 0
}

// Definition of questions related to a fund specific cost
type RT000D034_ExpensesAndIncome_FundSpecificCostOrFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Description of the cost
	CostDescription string `protobuf:"bytes,3,opt,name=cost_description,json=costDescription,proto3" json:"cost_description,omitempty"`
	// The monetary amount of the cost in the fund's base currency
	Amount *money.Money `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificCostOrFee) Reset() {
	*x = RT000D034_ExpensesAndIncome_FundSpecificCostOrFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificCostOrFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_ExpensesAndIncome_FundSpecificCostOrFee) ProtoMessage() {}

func (x *RT000D034_ExpensesAndIncome_FundSpecificCostOrFee) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_ExpensesAndIncome_FundSpecificCostOrFee.ProtoReflect.Descriptor instead.
func (*RT000D034_ExpensesAndIncome_FundSpecificCostOrFee) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificCostOrFee) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificCostOrFee) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificCostOrFee) GetCostDescription() string {
	if x != nil {
		return x.CostDescription
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificCostOrFee) GetAmount() *money.Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Questions related to a cost applied to all funds
type RT000D034_ExpensesAndIncome_CostOrFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the cost
	CostDescription string `protobuf:"bytes,1,opt,name=cost_description,json=costDescription,proto3" json:"cost_description,omitempty"`
	// The monetary amount of the cost in the fund's base currency
	Amount *money.Money `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RT000D034_ExpensesAndIncome_CostOrFee) Reset() {
	*x = RT000D034_ExpensesAndIncome_CostOrFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_ExpensesAndIncome_CostOrFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_ExpensesAndIncome_CostOrFee) ProtoMessage() {}

func (x *RT000D034_ExpensesAndIncome_CostOrFee) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_ExpensesAndIncome_CostOrFee.ProtoReflect.Descriptor instead.
func (*RT000D034_ExpensesAndIncome_CostOrFee) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 8, 1}
}

func (x *RT000D034_ExpensesAndIncome_CostOrFee) GetCostDescription() string {
	if x != nil {
		return x.CostDescription
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_CostOrFee) GetAmount() *money.Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Definition of a Total Expense Ratio
type RT000D034_ExpensesAndIncome_ExpenseRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// The global identifier of the most representative share class
	ShareClassId string `protobuf:"bytes,3,opt,name=share_class_id,json=shareClassId,proto3" json:"share_class_id,omitempty"`
	// Codification chosen to identify the share class
	ShareClassIdType RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes `protobuf:"varint,4,opt,name=share_class_id_type,json=shareClassIdType,proto3,enum=standards.open.v1.RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes" json:"share_class_id_type,omitempty"`
	// Extension that identifies the share class.
	// Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
	ShareClassExtension string `protobuf:"bytes,5,opt,name=share_class_extension,json=shareClassExtension,proto3" json:"share_class_extension,omitempty"`
	// OCR/TER for the year (% of NAV)
	AnnualTerOrOcr float64 `protobuf:"fixed64,6,opt,name=annual_ter_or_ocr,json=annualTerOrOcr,proto3" json:"annual_ter_or_ocr,omitempty"`
	// Average Total NAV of the sub-fund or the most representative share/unit class (amount in (sub-)fund base CCY)
	AverageTotalNavOfRepresentativeShareClass *money.Money `protobuf:"bytes,7,opt,name=average_total_nav_of_representative_share_class,json=averageTotalNavOfRepresentativeShareClass,proto3" json:"average_total_nav_of_representative_share_class,omitempty"`
	// Comments on the expense ratio
	Comments []string `protobuf:"bytes,8,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) Reset() {
	*x = RT000D034_ExpensesAndIncome_ExpenseRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_ExpensesAndIncome_ExpenseRatio) ProtoMessage() {}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_ExpensesAndIncome_ExpenseRatio.ProtoReflect.Descriptor instead.
func (*RT000D034_ExpensesAndIncome_ExpenseRatio) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 8, 2}
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) GetShareClassId() string {
	if x != nil {
		return x.ShareClassId
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) GetShareClassIdType() RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes {
	if x != nil {
		return x.ShareClassIdType
	}
	return RT000D034_ExpensesAndIncome_ExpenseRatio_IDENTIFIER_UNSPECIFIED
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) GetShareClassExtension() string {
	if x != nil {
		return x.ShareClassExtension
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) GetAnnualTerOrOcr() float64 {
	if x != nil {
		return x.AnnualTerOrOcr
	}
	return 0
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) GetAverageTotalNavOfRepresentativeShareClass() *money.Money {
	if x != nil {
		return x.AverageTotalNavOfRepresentativeShareClass
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome_ExpenseRatio) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

// Identifying information of a fund subject to a material increase
type RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// reason for material increase
	CostIncreaseReasons []RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason `protobuf:"varint,3,rep,packed,name=cost_increase_reasons,json=costIncreaseReasons,proto3,enum=standards.open.v1.RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason" json:"cost_increase_reasons,omitempty"`
	// additional comments
	Comments string `protobuf:"bytes,4,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses) Reset() {
	*x = RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses) ProtoMessage() {}

func (x *RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses.ProtoReflect.Descriptor instead.
func (*RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 8, 3}
}

func (x *RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses) GetCostIncreaseReasons() []RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason {
	if x != nil {
		return x.CostIncreaseReasons
	}
	return nil
}

func (x *RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

// Transaction cost per fund
type RT000D034_ExpensesAndIncome_FundSpecificTransactionCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// Actual ratio (% of transaction costs/average NAV) as decimal. e.g. 3% 0.003
	TransactionCost float64 `protobuf:"fixed64,3,opt,name=transaction_cost,json=transactionCost,proto3" json:"transaction_cost,omitempty"`
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificTransactionCost) Reset() {
	*x = RT000D034_ExpensesAndIncome_FundSpecificTransactionCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificTransactionCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_ExpensesAndIncome_FundSpecificTransactionCost) ProtoMessage() {}

func (x *RT000D034_ExpensesAndIncome_FundSpecificTransactionCost) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_ExpensesAndIncome_FundSpecificTransactionCost.ProtoReflect.Descriptor instead.
func (*RT000D034_ExpensesAndIncome_FundSpecificTransactionCost) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 8, 4}
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificTransactionCost) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificTransactionCost) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificTransactionCost) GetTransactionCost() float64 {
	if x != nil {
		return x.TransactionCost
	}
	return 0
}

// Performance fee / carried intrest charged for a fund in a year
type RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CSSF of the fund / sub-fund
	CssfCode string `protobuf:"bytes,1,opt,name=cssf_code,json=cssfCode,proto3" json:"cssf_code,omitempty"`
	// The name of the fund to which the financial instrument belongs. // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information.
	FundName string `protobuf:"bytes,2,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	// ISO code of base currency of (sub-)fund
	BaseCurrency string `protobuf:"bytes,3,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
	// 9.3.1. Active at any time during the year
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// 9.3.2. Possibility in the prospectus to pay a performance fee / carried interest ?
	PerformanceFeeOrCarriedInterestPossible bool `protobuf:"varint,5,opt,name=performance_fee_or_carried_interest_possible,json=performanceFeeOrCarriedInterestPossible,proto3" json:"performance_fee_or_carried_interest_possible,omitempty"`
	// 9.3.3. Performance fee / carried interest charged for the year (amount in (sub-)fund base CCY)
	PerformanceFeeOrCarriedInterestCharged float64 `protobuf:"fixed64,6,opt,name=performance_fee_or_carried_interest_charged,json=performanceFeeOrCarriedInterestCharged,proto3" json:"performance_fee_or_carried_interest_charged,omitempty"`
	// 9.3.4. Average Total NAV of (sub-)fund for the year (amount in (sub-)fund base CCY)
	AverageTotalNavForYear float64 `protobuf:"fixed64,7,opt,name=average_total_nav_for_year,json=averageTotalNavForYear,proto3" json:"average_total_nav_for_year,omitempty"`
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) Reset() {
	*x = RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) ProtoMessage() {}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges.ProtoReflect.Descriptor instead.
func (*RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 8, 5}
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) GetCssfCode() string {
	if x != nil {
		return x.CssfCode
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) GetPerformanceFeeOrCarriedInterestPossible() bool {
	if x != nil {
		return x.PerformanceFeeOrCarriedInterestPossible
	}
	return false
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) GetPerformanceFeeOrCarriedInterestCharged() float64 {
	if x != nil {
		return x.PerformanceFeeOrCarriedInterestCharged
	}
	return 0
}

func (x *RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges) GetAverageTotalNavForYear() float64 {
	if x != nil {
		return x.AverageTotalNavForYear
	}
	return 0
}

// Questions relevant for 7.1. UCITS /REGULATED AIFs WITH AUTHORISED AIFM
type RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1. Has a reconciliation process against the depositary's records been in place for the Fund /(sub-)fund(s) during the year concerning the assets that can be held in custody? If NO, explain
	ReconciliationProcessAgainstDepositaryRecordsInPlace *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=reconciliation_process_against_depositary_records_in_place,json=reconciliationProcessAgainstDepositaryRecordsInPlace,proto3" json:"reconciliation_process_against_depositary_records_in_place,omitempty"`
	// 1.2. If the answer to Q1. is YES, what has been the frequency of these reconciliations ?
	FrequencyOfReconciliations RT000D034_Frequency `protobuf:"varint,2,opt,name=frequency_of_reconciliations,json=frequencyOfReconciliations,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_reconciliations,omitempty"`
	// 1.3. If the answer to Q1. is YES, is the frequency of these reconciliations consistent with the frequency of the NAV calculation for all sub-funds of the Fund ?  If NO, explain.
	FrequencyOfReconciliationsConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,3,opt,name=frequency_of_reconciliations_consistent_with_nav_frequency,json=frequencyOfReconciliationsConsistentWithNavFrequency,proto3" json:"frequency_of_reconciliations_consistent_with_nav_frequency,omitempty"`
	// 1.4. If the answer to Q1. is YES, have these reconciliations been performed on an ongoing basis during the year at the frequency mentioned above? If NO, explain.
	ReconciliationsPerformedConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,4,opt,name=reconciliations_performed_consistent_with_nav_frequency,json=reconciliationsPerformedConsistentWithNavFrequency,proto3" json:"reconciliations_performed_consistent_with_nav_frequency,omitempty"`
	// 1.5. If the answer to Q1. is YES, could all differences identified by these reconciliations during the year be explained, documented and resolved in a reasonable delay considering the NAV calculation frequency? If NO, explain.
	AllReconciliationDifferencesResolved *RT000D034_YesNoExplain `protobuf:"bytes,5,opt,name=all_reconciliation_differences_resolved,json=allReconciliationDifferencesResolved,proto3" json:"all_reconciliation_differences_resolved,omitempty"`
	// 2. Did the depositary confirm all the assets of the Fund / (sub-)fund(s) that can be held in custody at year-end, including assets held through respective agent(s) (collateral agent, specialized intermediary or by a prime broker)?
	DepositaryConfirmedAllAssetsOfFundThatCanBeHeldInCustody bool `protobuf:"varint,6,opt,name=depositary_confirmed_all_assets_of_fund_that_can_be_held_in_custody,json=depositaryConfirmedAllAssetsOfFundThatCanBeHeldInCustody,proto3" json:"depositary_confirmed_all_assets_of_fund_that_can_be_held_in_custody,omitempty"`
	// 2.1. If the answer to Q2. is NO, mention the type of assets and explain (including impact on sub-funds)
	AssetsNoHeldInCustody *RT000D034_FundSpecificExplanation `protobuf:"bytes,7,opt,name=assets_no_held_in_custody,json=assetsNoHeldInCustody,proto3" json:"assets_no_held_in_custody,omitempty"`
	// 3. Did the Fund / (sub-) funds invest in assets qualifying as "other assets" during the year?
	FundInvestedInOtherAssetsDuringYear bool `protobuf:"varint,8,opt,name=fund_invested_in_other_assets_during_year,json=fundInvestedInOtherAssetsDuringYear,proto3" json:"fund_invested_in_other_assets_during_year,omitempty"`
	// 3.1. If the answer to Q3. is YES, have the 3 following asset registration processes been in place for the Fund concerning the other assets (If NO,explain)?
	//a) an asset ownership registration process at each transaction for the assets acquired by the Fund, based on information or documents maintained by the IFM and, where available, on external evidence;
	//b) a process ensuring that the depositary or third party is informed of any transaction on registered assets in a timely fashion; c) a process ensuring that all instructions and other relevant information related to the Fund's assets, including from relevant third parties (certificates or other documentary evidence), are sent to the depositary in order for the depositary to perform its own verification or reconciliation procedure : -every time there is a sale or acquisition of assets or a corporate action; -on a periodical basis and at least once a year.
	AppropriateAssetRegistrationProcessInPlace *RT000D034_YesNoExplain `protobuf:"bytes,9,opt,name=appropriate_asset_registration_process_in_place,json=appropriateAssetRegistrationProcessInPlace,proto3" json:"appropriate_asset_registration_process_in_place,omitempty"`
	// 3.1.2. If the answer to Q3.1. is YES, have periodical ownership verifications or reconciliations, based on reliable and independent sources, been performed for the other assets in the Fund / (sub-)fund records qualifying as “financial assets”?
	PeriodicalOwnershipVerifications *RT000D034_YesNoExplain `protobuf:"bytes,10,opt,name=periodical_ownership_verifications,json=periodicalOwnershipVerifications,proto3" json:"periodical_ownership_verifications,omitempty"`
	// 3.1.2.2. If the answer to Q3.1.2. is YES, what has been the frequency of these periodical ownership verifications or reconciliations?
	FrequencyOfPeriodicalOwnershipVerifications RT000D034_Frequency `protobuf:"varint,11,opt,name=frequency_of_periodical_ownership_verifications,json=frequencyOfPeriodicalOwnershipVerifications,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_periodical_ownership_verifications,omitempty"`
	// 3.1.2.3. If the answer to Q3.1.2. is YES, is the frequency of these periodical ownership verifications or reconciliations consistent with the frequency of the NAV calculation for all sub-funds of the Fund? If NO, explain.
	FrequencyOfPeriodicalOwnershipVerificationsConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,12,opt,name=frequency_of_periodical_ownership_verifications_consistent_with_nav_frequency,json=frequencyOfPeriodicalOwnershipVerificationsConsistentWithNavFrequency,proto3" json:"frequency_of_periodical_ownership_verifications_consistent_with_nav_frequency,omitempty"`
	// 3.1.3. If the answer to Q3.1. is YES, have periodical ownership verifications or reconciliations, based on reliable and independent sources, been performed for the other assets in the Fund / (sub-)fund records qualifying as “non-financial assets”? If no, explain.
	PeriodicalOwnershipVerificationsForNonFinancialAssets *RT000D034_YesNoExplain `protobuf:"bytes,13,opt,name=periodical_ownership_verifications_for_non_financial_assets,json=periodicalOwnershipVerificationsForNonFinancialAssets,proto3" json:"periodical_ownership_verifications_for_non_financial_assets,omitempty"`
	// 3.1.3.2. If the answer to Q3.1.3. is YES, what has been the frequency of these periodical ownership verifications or reconciliations?
	FrequencyOfPeriodicalOwnershipVerificationsForNonFinancialAssets RT000D034_Frequency `protobuf:"varint,14,opt,name=frequency_of_periodical_ownership_verifications_for_non_financial_assets,json=frequencyOfPeriodicalOwnershipVerificationsForNonFinancialAssets,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_periodical_ownership_verifications_for_non_financial_assets,omitempty"`
	// 3.1.3.3. If the answer to Q3.1.3. is YES, is the frequency of these periodical ownership verifications or reconciliations consistent with the frequency of the NAV calculation for all sub-funds of the Fund? If NO, explain.
	FrequencyOfPeriodicalOwnershipVerificationsNonFinancialConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,15,opt,name=frequency_of_periodical_ownership_verifications_non_financial_consistent_with_nav_frequency,json=frequencyOfPeriodicalOwnershipVerificationsNonFinancialConsistentWithNavFrequency,proto3" json:"frequency_of_periodical_ownership_verifications_non_financial_consistent_with_nav_frequency,omitempty"`
	// 3.1.4. If the answer to Q3.1. is YES, could all differences identified by these periodical ownership verifications or reconciliations during the year be explained, documented and resolved in a reasonable delay considering the NAV calculation frequency? If NO, explain.
	AllDifferencesIdentifiedByOwnershipVerificationsExplained *RT000D034_YesNoExplain `protobuf:"bytes,16,opt,name=all_differences_identified_by_ownership_verifications_explained,json=allDifferencesIdentifiedByOwnershipVerificationsExplained,proto3" json:"all_differences_identified_by_ownership_verifications_explained,omitempty"`
	// 3.2. If the answer to Q3. is YES, is a process in place for the Fund in order to ensure the consistency of the Fund / (sub-)fund records with the depositary records for the other assets held by the Fund? If No, explain.
	ProcessInPlaceToEnsureFundAndDepositaryConsistencyForOtherAssets *RT000D034_YesNoExplain `protobuf:"bytes,17,opt,name=process_in_place_to_ensure_fund_and_depositary_consistency_for_other_assets,json=processInPlaceToEnsureFundAndDepositaryConsistencyForOtherAssets,proto3" json:"process_in_place_to_ensure_fund_and_depositary_consistency_for_other_assets,omitempty"`
	// 3.2.2. If the answer to Q3.2. is YES, what has been the frequency of the consistency controls of the Fund / (sub-)fund records with the depositary records for the other assets qualified as financial assets?
	FrequencyOfConsistencyControlsOtherAssets RT000D034_Frequency `protobuf:"varint,18,opt,name=frequency_of_consistency_controls_other_assets,json=frequencyOfConsistencyControlsOtherAssets,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_consistency_controls_other_assets,omitempty"`
	// 3.2.3. If the answer to Q3.2. is YES, is the frequency of these consistency controls for the other assets qualified as financial assets consistent with the frequency of the NAV calculation for all sub-funds of the Fund? If NO, explain.
	FrequencyOfConsistencyControlsOtherAssetsConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,19,opt,name=frequency_of_consistency_controls_other_assets_consistent_with_nav_frequency,json=frequencyOfConsistencyControlsOtherAssetsConsistentWithNavFrequency,proto3" json:"frequency_of_consistency_controls_other_assets_consistent_with_nav_frequency,omitempty"`
	// 3.2.4. If the answer to Q3.2. is YES, what has been the frequency of the consistency controls of the Fund records with the depositary records for the other assets qualified as non-financial assets?
	FrequencyOfConsistencyControlsOtherNonFinancialAssets RT000D034_Frequency `protobuf:"varint,20,opt,name=frequency_of_consistency_controls_other_non_financial_assets,json=frequencyOfConsistencyControlsOtherNonFinancialAssets,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_consistency_controls_other_non_financial_assets,omitempty"`
	// 3.2.5. If the answer to Q3.2. is YES, is the frequency of these consistency controls for the other assets qualified as non-financial assets consistent with the frequency of the NAV calculation for all sub-funds of the Fund? If No, explain
	FrequencyOfConsistencyControlsOtherNonFinancialAssetsConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,21,opt,name=frequency_of_consistency_controls_other_non_financial_assets_consistent_with_nav_frequency,json=frequencyOfConsistencyControlsOtherNonFinancialAssetsConsistentWithNavFrequency,proto3" json:"frequency_of_consistency_controls_other_non_financial_assets_consistent_with_nav_frequency,omitempty"`
	// 3.2.6. If the answer to Q3.2. is YES, could all differences identified during the year through these consistency controls between the Fund / (sub-)fund records and the depositary records be explained, documented and resolved in a reasonable delay? If NO, explain.
	AllDifferencesIdentifiedByConsistencyControlsExplained *RT000D034_YesNoExplain `protobuf:"bytes,22,opt,name=all_differences_identified_by_consistency_controls_explained,json=allDifferencesIdentifiedByConsistencyControlsExplained,proto3" json:"all_differences_identified_by_consistency_controls_explained,omitempty"`
	// 3.3. If the answer to Q3. is YES, did the depositary provide an inventory of assets, including all the other assets, held by the Fund / (sub-)funds at year-end?  If NO, mention the missing asset(s) and explain.
	DepositaryProvidedInventoryOfAssetsHeldByFund *RT000D034_YesNoExplain `protobuf:"bytes,23,opt,name=depositary_provided_inventory_of_assets_held_by_fund,json=depositaryProvidedInventoryOfAssetsHeldByFund,proto3" json:"depositary_provided_inventory_of_assets_held_by_fund,omitempty"`
	// 3.4. If the answer to Q3. is YES, has the Management of the Fund been notified during the year about any escalation from the depositary to the IFM/Fund of a situation of discrepancy detected in the context of the execution of its safekeeping duties for other assets (missing ownership verification documentation to be provided by the fund, discrepancies identified, etc.)? If YES, explain.
	ManagementNotifiedOfAnyOtherAssetDiscrepancies *RT000D034_YesNoExplain `protobuf:"bytes,24,opt,name=management_notified_of_any_other_asset_discrepancies,json=managementNotifiedOfAnyOtherAssetDiscrepancies,proto3" json:"management_notified_of_any_other_asset_discrepancies,omitempty"`
	// 4. Has the Management of the Fund been notified during the year of any escalation from the depositary to the IFM / Fund of a situation of discrepancy not corrected in due time in the context of the cash flow monitoring of the Fund?
	ManagementNotifiedOfAnyEscalationFromDepositaryToIfmOfDiscrepancyNotCorrectedInDueTime bool `protobuf:"varint,25,opt,name=management_notified_of_any_escalation_from_depositary_to_ifm_of_discrepancy_not_corrected_in_due_time,json=managementNotifiedOfAnyEscalationFromDepositaryToIfmOfDiscrepancyNotCorrectedInDueTime,proto3" json:"management_notified_of_any_escalation_from_depositary_to_ifm_of_discrepancy_not_corrected_in_due_time,omitempty"`
	// 4.1. If the answer to Q4. is YES, has the escalation in the context of the cash flow monitoring been related to [reply to items listed hereunder] (if YES, explain): a. eligibility of third-party banks 92
	EscalationOfDiscrepancyNotCorrectedInDueTimeRelatedToEligibilityOfThirdPartyBanks *RT000D034_YesNoExplain `protobuf:"bytes,26,opt,name=escalation_of_discrepancy_not_corrected_in_due_time_related_to_eligibility_of_third_party_banks,json=escalationOfDiscrepancyNotCorrectedInDueTimeRelatedToEligibilityOfThirdPartyBanks,proto3" json:"escalation_of_discrepancy_not_corrected_in_due_time_related_to_eligibility_of_third_party_banks,omitempty"`
	// 4.1. If the answer to Q4. is YES, has the escalation in the context of the cash flow monitoring been related to [reply to items listed hereunder] (if YES, explain): b. cash reconciliation process and results of cash reconciliation 93
	EscalationOfDiscrepancyNotCorrectedInDueTimeRelatedToCashReconciliationProcess *RT000D034_YesNoExplain `protobuf:"bytes,27,opt,name=escalation_of_discrepancy_not_corrected_in_due_time_related_to_cash_reconciliation_process,json=escalationOfDiscrepancyNotCorrectedInDueTimeRelatedToCashReconciliationProcess,proto3" json:"escalation_of_discrepancy_not_corrected_in_due_time_related_to_cash_reconciliation_process,omitempty"`
	// 4.1. If the answer to Q4. is YES, has the escalation in the context of the cash flow monitoring been related to [reply to items listed hereunder] (if YES, explain): c. inconsistent and significant cash flow monitoring 94
	EscalationOfDiscrepancyNotCorrectedInDueTimeRelatedToCashMonitoringProcess *RT000D034_YesNoExplain `protobuf:"bytes,28,opt,name=escalation_of_discrepancy_not_corrected_in_due_time_related_to_cash_monitoring_process,json=escalationOfDiscrepancyNotCorrectedInDueTimeRelatedToCashMonitoringProcess,proto3" json:"escalation_of_discrepancy_not_corrected_in_due_time_related_to_cash_monitoring_process,omitempty"`
	// 5. Has the Management of the Fund been notified during the year of any escalation from the depositaryto the IFM/Fund regarding other oversight duties?
	ManagementNotifiedOfAnyEscalationFromDepositaryRegardingOtherOversightDuties bool `protobuf:"varint,29,opt,name=management_notified_of_any_escalation_from_depositary_regarding_other_oversight_duties,json=managementNotifiedOfAnyEscalationFromDepositaryRegardingOtherOversightDuties,proto3" json:"management_notified_of_any_escalation_from_depositary_regarding_other_oversight_duties,omitempty"`
	// 5.1. If the answer to Q5. is YES, has the escalation concerned the oversight on valuation of shares/units?
	ManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToValuationOversightDuties bool `protobuf:"varint,30,opt,name=management_notified_of_any_escalation_from_depositary_to_ifm_related_to_valuation_oversight_duties,json=managementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToValuationOversightDuties,proto3" json:"management_notified_of_any_escalation_from_depositary_to_ifm_related_to_valuation_oversight_duties,omitempty"`
	// 5.1.1. If the answer to Q5.1. is YES, was the escalation on the oversight on valuation of shares/units due to the following elements [reply to items listed hereunder] (if YES, explain)? a. Lack of evidence for assets valued in accordance with prospectus and valuation policies
	EscalationOnOversightOfValuationEvidenceForAssets *RT000D034_YesNoExplain `protobuf:"bytes,31,opt,name=escalation_on_oversight_of_valuation_evidence_for_assets,json=escalationOnOversightOfValuationEvidenceForAssets,proto3" json:"escalation_on_oversight_of_valuation_evidence_for_assets,omitempty"`
	// 5.1.1. If the answer to Q5.1. is YES, was the escalation on the oversight on valuation of shares/units due to the following elements [reply to items listed hereunder] (if YES, explain)? b. NAV calculation process inconsistent with legal and prospectus rules
	EscalationOnOversightOfValuationNavCalculationProcess *RT000D034_YesNoExplain `protobuf:"bytes,32,opt,name=escalation_on_oversight_of_valuation_nav_calculation_process,json=escalationOnOversightOfValuationNavCalculationProcess,proto3" json:"escalation_on_oversight_of_valuation_nav_calculation_process,omitempty"`
	// 5.1.1. If the answer to Q5.1. is YES, was the escalation on the oversight on valuation of shares/units due to the following elements [reply to items listed hereunder] (if YES, explain)? c. NAV calculation error not subject to the Circular CSSF 02/77 notification and remediation process
	EscalationOnOversightOfValuationNavCalculationError *RT000D034_YesNoExplain `protobuf:"bytes,33,opt,name=escalation_on_oversight_of_valuation_nav_calculation_error,json=escalationOnOversightOfValuationNavCalculationError,proto3" json:"escalation_on_oversight_of_valuation_nav_calculation_error,omitempty"`
	// 5.1.1. If the answer to Q5.1. is YES, was the escalation on the oversight on valuation of shares/units due to the following elements [reply to items listed hereunder] (if YES, explain)? d. Any other reason
	EscalationOnOversightOfValuationOtherReason *RT000D034_YesNoExplain `protobuf:"bytes,34,opt,name=escalation_on_oversight_of_valuation_other_reason,json=escalationOnOversightOfValuationOtherReason,proto3" json:"escalation_on_oversight_of_valuation_other_reason,omitempty"`
	// 5.2. If the answer to Q5. is YES, has the escalation concerned the oversight on subscriptions and redemptions?
	ManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToSubscriptionAndRedemptionOversightDuties bool `protobuf:"varint,35,opt,name=management_notified_of_any_escalation_from_depositary_to_ifm_related_to_subscription_and_redemption_oversight_duties,json=managementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToSubscriptionAndRedemptionOversightDuties,proto3" json:"management_notified_of_any_escalation_from_depositary_to_ifm_related_to_subscription_and_redemption_oversight_duties,omitempty"`
	// 5.2.1. If the answer to Q5.2. is YES, was the escalation on the oversight of subscriptions and redemptions due to the following elements (if YES, explain): a. unprocessed trades in accordance with legal and prospectus rules (cut off time for NAV/share application, investor equalization for illiquid funds)
	EscalationOnOversightOfSubscriptionsAndRedemptionsUnprocessedTrades *RT000D034_YesNoExplain `protobuf:"bytes,36,opt,name=escalation_on_oversight_of_subscriptions_and_redemptions_unprocessed_trades,json=escalationOnOversightOfSubscriptionsAndRedemptionsUnprocessedTrades,proto3" json:"escalation_on_oversight_of_subscriptions_and_redemptions_unprocessed_trades,omitempty"`
	// 5.2.1. If the answer to Q5.2. is YES, was the escalation on the oversight of subscriptions and redemptions due to the following elements (if YES, explain): b. subscriptions / redemptions related cash reconciliation issues
	EscalationOnOversightOfSubscriptionsAndRedemptionsCashReconciliationIssues *RT000D034_YesNoExplain `protobuf:"bytes,37,opt,name=escalation_on_oversight_of_subscriptions_and_redemptions_cash_reconciliation_issues,json=escalationOnOversightOfSubscriptionsAndRedemptionsCashReconciliationIssues,proto3" json:"escalation_on_oversight_of_subscriptions_and_redemptions_cash_reconciliation_issues,omitempty"`
	// 5.2.1. If the answer to Q5.2. is YES, was the escalation on the oversight of subscriptions and redemptions due to the following elements (if YES, explain): c. outstanding reconciliation breaks on shares/units
	EscalationOnOversightOfSubscriptionsAndRedemptionsBreaksOnSharesOrUnits *RT000D034_YesNoExplain `protobuf:"bytes,38,opt,name=escalation_on_oversight_of_subscriptions_and_redemptions_breaks_on_shares_or_units,json=escalationOnOversightOfSubscriptionsAndRedemptionsBreaksOnSharesOrUnits,proto3" json:"escalation_on_oversight_of_subscriptions_and_redemptions_breaks_on_shares_or_units,omitempty"`
	// 5.2.1. If the answer to Q5.2. is YES, was the escalation on the oversight of subscriptions and redemptions due to the following elements (if YES, explain): d. any other reason
	EscalationOnOversightOfSubscriptionsAndRedemptionsOther *RT000D034_YesNoExplain `protobuf:"bytes,39,opt,name=escalation_on_oversight_of_subscriptions_and_redemptions_other,json=escalationOnOversightOfSubscriptionsAndRedemptionsOther,proto3" json:"escalation_on_oversight_of_subscriptions_and_redemptions_other,omitempty"`
	// 5.3. If the answer to Q5. is YES, has the escalation concerned the oversight on investment restriction monitoring?
	ManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToInvestmentRestrictionMonitoring bool `protobuf:"varint,40,opt,name=management_notified_of_any_escalation_from_depositary_to_ifm_related_to_investment_restriction_monitoring,json=managementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToInvestmentRestrictionMonitoring,proto3" json:"management_notified_of_any_escalation_from_depositary_to_ifm_related_to_investment_restriction_monitoring,omitempty"`
	// 5.3.1. If the answer to Q5.3. is YES, was the escalation on the oversight on investment restriction monitoring due to following elements (if YES, explain): a. active breaches of legal and prospectus rules identified that were not subject to the CSSF 02/77 notification and remediation process
	EscalationOnOversightOfInvestmentRestrictionsBreachesOfLegalAndProspectusRules *RT000D034_YesNoExplain `protobuf:"bytes,41,opt,name=escalation_on_oversight_of_investment_restrictions_breaches_of_legal_and_prospectus_rules,json=escalationOnOversightOfInvestmentRestrictionsBreachesOfLegalAndProspectusRules,proto3" json:"escalation_on_oversight_of_investment_restrictions_breaches_of_legal_and_prospectus_rules,omitempty"`
	// 5.3.1. If the answer to Q5.3. is YES, was the escalation on the oversight on investment restriction monitoring due to following elements (if YES, explain): b. Any other reason
	EscalationOnOversightOfInvestmentRestrictionsOther *RT000D034_YesNoExplain `protobuf:"bytes,42,opt,name=escalation_on_oversight_of_investment_restrictions_other,json=escalationOnOversightOfInvestmentRestrictionsOther,proto3" json:"escalation_on_oversight_of_investment_restrictions_other,omitempty"`
	// 5.4. If the answer to Q5. is YES, has the escalation concerned the oversight on income calculation and distribution?
	ManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToIncomeCalculationAndDistribution bool `protobuf:"varint,43,opt,name=management_notified_of_any_escalation_from_depositary_to_ifm_related_to_income_calculation_and_distribution,json=managementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToIncomeCalculationAndDistribution,proto3" json:"management_notified_of_any_escalation_from_depositary_to_ifm_related_to_income_calculation_and_distribution,omitempty"`
	// 5.4.1. If the answer to Q5.4. is YES, was the escalation on the oversight of the income calculation and distribution due to following elements (if YES, explain): a. income calculation for distribution purposes was not processed in accordance with Fund’s prospectus (including eligibility of the income category for distribution)
	EscalationOnOversightOfIncomeCalculationAndDistributionNotProcessedAccordingToProspectus *RT000D034_YesNoExplain `protobuf:"bytes,44,opt,name=escalation_on_oversight_of_income_calculation_and_distribution_not_processed_according_to_prospectus,json=escalationOnOversightOfIncomeCalculationAndDistributionNotProcessedAccordingToProspectus,proto3" json:"escalation_on_oversight_of_income_calculation_and_distribution_not_processed_according_to_prospectus,omitempty"`
	// 5.4.1. If the answer to Q5.4. is YES, was the escalation on the oversight of the income calculation and distribution due to following elements (if YES, explain): b. income distribution processed pertaining to a period for which the opinion on the financial statements provided by the auditor was qualified
	EscalationOnOversightOfIncomeCalculationAndDistributionQualifiedAuditOpinion *RT000D034_YesNoExplain `protobuf:"bytes,45,opt,name=escalation_on_oversight_of_income_calculation_and_distribution_qualified_audit_opinion,json=escalationOnOversightOfIncomeCalculationAndDistributionQualifiedAuditOpinion,proto3" json:"escalation_on_oversight_of_income_calculation_and_distribution_qualified_audit_opinion,omitempty"`
	// 5.4.1. If the answer to Q5.4. is YES, was the escalation on the oversight of the income calculation and distribution due to following elements (if YES, explain): c. any other reason
	EscalationOnOversightOfIncomeCalculationAndDistributionOther *RT000D034_YesNoExplain `protobuf:"bytes,46,opt,name=escalation_on_oversight_of_income_calculation_and_distribution_other,json=escalationOnOversightOfIncomeCalculationAndDistributionOther,proto3" json:"escalation_on_oversight_of_income_calculation_and_distribution_other,omitempty"`
	// 5.5. If the answer to Q5. is YES, has the escalation concerned any other irregularities? If Yes, explain.
	ManagementNotifiedOfAnyEscalationFromDepositaryToIfmAnyOtherIrregularities *RT000D034_YesNoExplain `protobuf:"bytes,47,opt,name=management_notified_of_any_escalation_from_depositary_to_ifm_any_other_irregularities,json=managementNotifiedOfAnyEscalationFromDepositaryToIfmAnyOtherIrregularities,proto3" json:"management_notified_of_any_escalation_from_depositary_to_ifm_any_other_irregularities,omitempty"` // 6. Has a reconciliation process against the depositary's records been in place for the Fund /(sub-)fund(s) during the year concerning the assets safekept at depositary? If NO, explain.
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) Reset() {
	*x = RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) ProtoMessage() {
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.ProtoReflect.Descriptor instead.
func (*RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 9, 0}
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetReconciliationProcessAgainstDepositaryRecordsInPlace() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ReconciliationProcessAgainstDepositaryRecordsInPlace
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfReconciliations() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfReconciliations
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfReconciliationsConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfReconciliationsConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetReconciliationsPerformedConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ReconciliationsPerformedConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetAllReconciliationDifferencesResolved() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllReconciliationDifferencesResolved
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetDepositaryConfirmedAllAssetsOfFundThatCanBeHeldInCustody() bool {
	if x != nil {
		return x.DepositaryConfirmedAllAssetsOfFundThatCanBeHeldInCustody
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetAssetsNoHeldInCustody() *RT000D034_FundSpecificExplanation {
	if x != nil {
		return x.AssetsNoHeldInCustody
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFundInvestedInOtherAssetsDuringYear() bool {
	if x != nil {
		return x.FundInvestedInOtherAssetsDuringYear
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetAppropriateAssetRegistrationProcessInPlace() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AppropriateAssetRegistrationProcessInPlace
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetPeriodicalOwnershipVerifications() *RT000D034_YesNoExplain {
	if x != nil {
		return x.PeriodicalOwnershipVerifications
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfPeriodicalOwnershipVerifications() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfPeriodicalOwnershipVerifications
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfPeriodicalOwnershipVerificationsConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfPeriodicalOwnershipVerificationsConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetPeriodicalOwnershipVerificationsForNonFinancialAssets() *RT000D034_YesNoExplain {
	if x != nil {
		return x.PeriodicalOwnershipVerificationsForNonFinancialAssets
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfPeriodicalOwnershipVerificationsForNonFinancialAssets() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfPeriodicalOwnershipVerificationsForNonFinancialAssets
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfPeriodicalOwnershipVerificationsNonFinancialConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfPeriodicalOwnershipVerificationsNonFinancialConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetAllDifferencesIdentifiedByOwnershipVerificationsExplained() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllDifferencesIdentifiedByOwnershipVerificationsExplained
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetProcessInPlaceToEnsureFundAndDepositaryConsistencyForOtherAssets() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProcessInPlaceToEnsureFundAndDepositaryConsistencyForOtherAssets
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfConsistencyControlsOtherAssets() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfConsistencyControlsOtherAssets
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfConsistencyControlsOtherAssetsConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfConsistencyControlsOtherAssetsConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfConsistencyControlsOtherNonFinancialAssets() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfConsistencyControlsOtherNonFinancialAssets
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetFrequencyOfConsistencyControlsOtherNonFinancialAssetsConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfConsistencyControlsOtherNonFinancialAssetsConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetAllDifferencesIdentifiedByConsistencyControlsExplained() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllDifferencesIdentifiedByConsistencyControlsExplained
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetDepositaryProvidedInventoryOfAssetsHeldByFund() *RT000D034_YesNoExplain {
	if x != nil {
		return x.DepositaryProvidedInventoryOfAssetsHeldByFund
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetManagementNotifiedOfAnyOtherAssetDiscrepancies() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementNotifiedOfAnyOtherAssetDiscrepancies
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetManagementNotifiedOfAnyEscalationFromDepositaryToIfmOfDiscrepancyNotCorrectedInDueTime() bool {
	if x != nil {
		return x.ManagementNotifiedOfAnyEscalationFromDepositaryToIfmOfDiscrepancyNotCorrectedInDueTime
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOfDiscrepancyNotCorrectedInDueTimeRelatedToEligibilityOfThirdPartyBanks() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOfDiscrepancyNotCorrectedInDueTimeRelatedToEligibilityOfThirdPartyBanks
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOfDiscrepancyNotCorrectedInDueTimeRelatedToCashReconciliationProcess() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOfDiscrepancyNotCorrectedInDueTimeRelatedToCashReconciliationProcess
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOfDiscrepancyNotCorrectedInDueTimeRelatedToCashMonitoringProcess() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOfDiscrepancyNotCorrectedInDueTimeRelatedToCashMonitoringProcess
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetManagementNotifiedOfAnyEscalationFromDepositaryRegardingOtherOversightDuties() bool {
	if x != nil {
		return x.ManagementNotifiedOfAnyEscalationFromDepositaryRegardingOtherOversightDuties
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToValuationOversightDuties() bool {
	if x != nil {
		return x.ManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToValuationOversightDuties
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfValuationEvidenceForAssets() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfValuationEvidenceForAssets
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfValuationNavCalculationProcess() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfValuationNavCalculationProcess
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfValuationNavCalculationError() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfValuationNavCalculationError
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfValuationOtherReason() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfValuationOtherReason
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToSubscriptionAndRedemptionOversightDuties() bool {
	if x != nil {
		return x.ManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToSubscriptionAndRedemptionOversightDuties
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfSubscriptionsAndRedemptionsUnprocessedTrades() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfSubscriptionsAndRedemptionsUnprocessedTrades
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfSubscriptionsAndRedemptionsCashReconciliationIssues() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfSubscriptionsAndRedemptionsCashReconciliationIssues
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfSubscriptionsAndRedemptionsBreaksOnSharesOrUnits() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfSubscriptionsAndRedemptionsBreaksOnSharesOrUnits
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfSubscriptionsAndRedemptionsOther() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfSubscriptionsAndRedemptionsOther
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToInvestmentRestrictionMonitoring() bool {
	if x != nil {
		return x.ManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToInvestmentRestrictionMonitoring
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfInvestmentRestrictionsBreachesOfLegalAndProspectusRules() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfInvestmentRestrictionsBreachesOfLegalAndProspectusRules
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfInvestmentRestrictionsOther() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfInvestmentRestrictionsOther
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToIncomeCalculationAndDistribution() bool {
	if x != nil {
		return x.ManagementNotifiedOfAnyEscalationFromDepositaryToIfmRelatedToIncomeCalculationAndDistribution
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfIncomeCalculationAndDistributionNotProcessedAccordingToProspectus() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfIncomeCalculationAndDistributionNotProcessedAccordingToProspectus
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfIncomeCalculationAndDistributionQualifiedAuditOpinion() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfIncomeCalculationAndDistributionQualifiedAuditOpinion
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetEscalationOnOversightOfIncomeCalculationAndDistributionOther() *RT000D034_YesNoExplain {
	if x != nil {
		return x.EscalationOnOversightOfIncomeCalculationAndDistributionOther
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM) GetManagementNotifiedOfAnyEscalationFromDepositaryToIfmAnyOtherIrregularities() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementNotifiedOfAnyEscalationFromDepositaryToIfmAnyOtherIrregularities
	}
	return nil
}

// Questions relevant for 7.2. REGULATED AIFs REGISTERED AIFM/REGULATED NON-AIFs
type RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 6. Has a reconciliation process against the depositary's records been in place for the Fund /(sub-)fund(s) during the year concerning the assets safekept at depositary? If NO, explain.
	ReconciliationProcessAgainstDepositaryRecordsInPlace *RT000D034_YesNoExplain `protobuf:"bytes,1,opt,name=reconciliation_process_against_depositary_records_in_place,json=reconciliationProcessAgainstDepositaryRecordsInPlace,proto3" json:"reconciliation_process_against_depositary_records_in_place,omitempty"`
	// 6.2. If the answer to Q6. is YES, what has been the frequency of these reconciliations?
	FrequencyOfReconciliations RT000D034_Frequency `protobuf:"varint,2,opt,name=frequency_of_reconciliations,json=frequencyOfReconciliations,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_reconciliations,omitempty"`
	// 6.3. If the answer to Q6. is YES, is the frequency of these reconciliations consistent with the frequency of the NAV calculation for all sub-funds of the Fund? If NO, explain.
	FrequencyOfReconciliationsConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,3,opt,name=frequency_of_reconciliations_consistent_with_nav_frequency,json=frequencyOfReconciliationsConsistentWithNavFrequency,proto3" json:"frequency_of_reconciliations_consistent_with_nav_frequency,omitempty"`
	// 6.4. If the answer to Q6. is YES, have these reconciliations for the assets safekept at depositary been performed on an ongoing basis during the year at the frequency mentioned above? If NO, explain.
	ReconciliationsPerformedOnOngoingBasisConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,4,opt,name=reconciliations_performed_on_ongoing_basis_consistent_with_nav_frequency,json=reconciliationsPerformedOnOngoingBasisConsistentWithNavFrequency,proto3" json:"reconciliations_performed_on_ongoing_basis_consistent_with_nav_frequency,omitempty"`
	// 6.5. If the answer to Q6. is YES, could all identified differences by these reconciliation during the year be explained, documented and resolved in a reasonable delay? If NO, explain
	AllReconciliationDifferencesResolved *RT000D034_YesNoExplain `protobuf:"bytes,5,opt,name=all_reconciliation_differences_resolved,json=allReconciliationDifferencesResolved,proto3" json:"all_reconciliation_differences_resolved,omitempty"`
	// 7. Did the depositary confirm all the assets safekept at depositary as at year-end?
	DepositaryConfirmedAllAssetsOfFundThatCanBeHeldInCustody bool `protobuf:"varint,6,opt,name=depositary_confirmed_all_assets_of_fund_that_can_be_held_in_custody,json=depositaryConfirmedAllAssetsOfFundThatCanBeHeldInCustody,proto3" json:"depositary_confirmed_all_assets_of_fund_that_can_be_held_in_custody,omitempty"`
	// 7.1. If the answer to Q7. is NO, mention the type of assets and explain (including impact on sub-funds)
	AssetsNoHeldInCustody *RT000D034_FundSpecificExplanation `protobuf:"bytes,7,opt,name=assets_no_held_in_custody,json=assetsNoHeldInCustody,proto3" json:"assets_no_held_in_custody,omitempty"`
	// 8. Has a reconciliation process against the depositary's records been in place for the Fund /(sub-)fund(s) during the year concerning the assets that are held at a third party custodian on behalf of funds? If NO, explain.
	ReconciliationProcessAgainstDepositaryRecordsInPlaceForAssetsHeldWithThirdPartyCustodian *RT000D034_YesNoExplain `protobuf:"bytes,8,opt,name=reconciliation_process_against_depositary_records_in_place_for_assets_held_with_third_party_custodian,json=reconciliationProcessAgainstDepositaryRecordsInPlaceForAssetsHeldWithThirdPartyCustodian,proto3" json:"reconciliation_process_against_depositary_records_in_place_for_assets_held_with_third_party_custodian,omitempty"`
	// 8.2. If the answer to Q8. is YES, what has been the frequency of these reconciliations?
	FrequencyOfThirdPartyCustodianReconciliations RT000D034_Frequency `protobuf:"varint,9,opt,name=frequency_of_third_party_custodian_reconciliations,json=frequencyOfThirdPartyCustodianReconciliations,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_third_party_custodian_reconciliations,omitempty"`
	// 8.3. If the answer to Q8. is YES, is the frequency of these reconciliations consistent with the frequency of the NAV calculation for all sub-funds of the Fund ? If NO, explain.
	FrequencyOfThirdPartyCustodianReconciliationsConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,10,opt,name=frequency_of_third_party_custodian_reconciliations_consistent_with_nav_frequency,json=frequencyOfThirdPartyCustodianReconciliationsConsistentWithNavFrequency,proto3" json:"frequency_of_third_party_custodian_reconciliations_consistent_with_nav_frequency,omitempty"`
	// 8.4. If the answer to Q8. is YES, have these reconciliations for the assets that are held at a third party custodian on behalf of the Fund been performed on an ongoing basis during the year at the frequency mentioned above? If NO, explain.
	ThirdPartyCustodianReconciliationsPerformedOnOngoingBasisConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,11,opt,name=third_party_custodian_reconciliations_performed_on_ongoing_basis_consistent_with_nav_frequency,json=thirdPartyCustodianReconciliationsPerformedOnOngoingBasisConsistentWithNavFrequency,proto3" json:"third_party_custodian_reconciliations_performed_on_ongoing_basis_consistent_with_nav_frequency,omitempty"`
	// 8.5. If the answer to Q8. is YES, could all identified differences by these reconciliations during the year be explained, documented and resolved in a reasonable delay? If NO, explain.
	AllIdentifiedDifferencesInThirdPartyCustodianReconciliationsResolved *RT000D034_YesNoExplain `protobuf:"bytes,12,opt,name=all_identified_differences_in_third_party_custodian_reconciliations_resolved,json=allIdentifiedDifferencesInThirdPartyCustodianReconciliationsResolved,proto3" json:"all_identified_differences_in_third_party_custodian_reconciliations_resolved,omitempty"`
	// 9. Did the depositary confirm all assets that are held at a third party custodian on behalf of the Fund as at year-end?
	DepositaryConfirmedAllAssetsHeldAtThirdPartyCustodian bool `protobuf:"varint,13,opt,name=depositary_confirmed_all_assets_held_at_third_party_custodian,json=depositaryConfirmedAllAssetsHeldAtThirdPartyCustodian,proto3" json:"depositary_confirmed_all_assets_held_at_third_party_custodian,omitempty"`
	// 9.1. If the answer to Q9. is NO, mention the type of assets and explain (including impact on sub-funds)
	AssetTypesNotHeldWithThirdPartyCustodian []*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails `protobuf:"bytes,14,rep,name=asset_types_not_held_with_third_party_custodian,json=assetTypesNotHeldWithThirdPartyCustodian,proto3" json:"asset_types_not_held_with_third_party_custodian,omitempty"`
	// 10. Did the Fund invest in assets qualifying as "other assets registered in the AIFM name on behalf of the Fund or in the Fund name" ("other assets") during the year?
	FundInvestedInAssetsQualifyingAsOtherAssets bool `protobuf:"varint,15,opt,name=fund_invested_in_assets_qualifying_as_other_assets,json=fundInvestedInAssetsQualifyingAsOtherAssets,proto3" json:"fund_invested_in_assets_qualifying_as_other_assets,omitempty"`
	// 10.1. If the answer to Q10. is YES, have the 3 following asset registration processes been in place for the Fund concerning the other assets. "a) an asset ownership registration process at each transaction for the assets acquired by the Fund, based on information or documents maintained by the IFM and, where available, on external evidence;
	// b) a process ensuring that the depositary or the third party is informed of any transaction on registered assets in a timely fashion;
	//c) a process ensuring that all instructions and other relevant information related to the Fund's assets, including from relevant third parties (certificates or other documentary evidence), are provided to the depositary in order for the depositary to perform its own verification or reconciliation procedure :
	// -every time there is a sale or acquisition of assets or a corporate action;
	// -on a periodical basis and at least once a year. If NO, explain.
	AppropriateOtherAssetRegistrationProcessInPlace *RT000D034_YesNoExplain `protobuf:"bytes,16,opt,name=appropriate_other_asset_registration_process_in_place,json=appropriateOtherAssetRegistrationProcessInPlace,proto3" json:"appropriate_other_asset_registration_process_in_place,omitempty"`
	// 10.1.2. If the answer to Q10.1. is YES, have periodical ownership verifications or reconciliations, based on reliable and independent sources, been performed for the other assets in the Fund / (sub-)fund records qualifying as “financial assets”? If NO, explain.
	PeriodicalOwnershipVerificationBasedOnReliableIndependentSourcesHasBeenPerformedForOtherAssets *RT000D034_YesNoExplain `protobuf:"bytes,17,opt,name=periodical_ownership_verification_based_on_reliable_independent_sources_has_been_performed_for_other_assets,json=periodicalOwnershipVerificationBasedOnReliableIndependentSourcesHasBeenPerformedForOtherAssets,proto3" json:"periodical_ownership_verification_based_on_reliable_independent_sources_has_been_performed_for_other_assets,omitempty"`
	// 10.1.2.2. If the answer to Q10.1.2. is YES, what has been the frequency of these periodical ownership verifications or reconciliations?
	FrequencyOfPeriodicalOwnershipVerifications RT000D034_Frequency `protobuf:"varint,18,opt,name=frequency_of_periodical_ownership_verifications,json=frequencyOfPeriodicalOwnershipVerifications,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_periodical_ownership_verifications,omitempty"`
	// 10.1.2.3. If the answer to Q10.1.2. is YES, is the frequency of these periodical ownership verifications or reconciliations consistent with the frequency of the NAV calculation for all sub-funds of the Fund ?  If NO, explain.
	FrequencyOfPeriodicalOwnershipVerificationsConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,19,opt,name=frequency_of_periodical_ownership_verifications_consistent_with_nav_frequency,json=frequencyOfPeriodicalOwnershipVerificationsConsistentWithNavFrequency,proto3" json:"frequency_of_periodical_ownership_verifications_consistent_with_nav_frequency,omitempty"`
	// 10.1.3. If the answer to Q10.1. is YES, have periodical ownership verifications or reconciliations, based on reliable and independent sources, been performed for the other assets in the Fund / (sub-)fund records qualifying as “non-financial assets”?
	PeriodicalOwnershipVerificationBasedOnReliableIndependentSourcesHasBeenPerformedForNonFinancialOtherAssets *RT000D034_YesNoExplain `protobuf:"bytes,20,opt,name=periodical_ownership_verification_based_on_reliable_independent_sources_has_been_performed_for_non_financial_other_assets,json=periodicalOwnershipVerificationBasedOnReliableIndependentSourcesHasBeenPerformedForNonFinancialOtherAssets,proto3" json:"periodical_ownership_verification_based_on_reliable_independent_sources_has_been_performed_for_non_financial_other_assets,omitempty"`
	// 10.1.3.2. If the answer to Q10.1.3. is YES, what has been the frequency of these periodical ownership verifications or reconciliations?
	FrequencyOfPeriodicalOwnershipVerificationsForNonFinancialOtherAssets RT000D034_Frequency `protobuf:"varint,21,opt,name=frequency_of_periodical_ownership_verifications_for_non_financial_other_assets,json=frequencyOfPeriodicalOwnershipVerificationsForNonFinancialOtherAssets,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_periodical_ownership_verifications_for_non_financial_other_assets,omitempty"`
	// 10.1.3.3. If the answer to Q10.1.3. is YES, is the frequency of these periodical ownership verifications or reconciliations consistent with the frequency of the NAV calculation for all sub-funds of the Fund? If NO, explain
	FrequencyOfPeriodicalOwnershipVerificationsForNonFinancialOtherAssetsConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,22,opt,name=frequency_of_periodical_ownership_verifications_for_non_financial_other_assets_consistent_with_nav_frequency,json=frequencyOfPeriodicalOwnershipVerificationsForNonFinancialOtherAssetsConsistentWithNavFrequency,proto3" json:"frequency_of_periodical_ownership_verifications_for_non_financial_other_assets_consistent_with_nav_frequency,omitempty"`
	// 10.1.4. If the answer to Q10.1. is YES, could all differences identified by these periodical ownership verifications or reconciliations during the year be explained, documented and resolved in a reasonable delay considering the NAV calculation frequency?
	AllDifferencesIdentifiedByPeriodicalOwnershipVerificationsExplained *RT000D034_YesNoExplain `protobuf:"bytes,23,opt,name=all_differences_identified_by_periodical_ownership_verifications_explained,json=allDifferencesIdentifiedByPeriodicalOwnershipVerificationsExplained,proto3" json:"all_differences_identified_by_periodical_ownership_verifications_explained,omitempty"`
	// 10.2. If the answer to Q10. is YES, is a process in place for the Fund in order to ensure the consistency of the Fund / (sub-)funds records with the depositary records for the other assets held by the Fund? If NO, explain
	ProcessInPlaceToEnsureConsistencyOfFundAndDepositoryRecords *RT000D034_YesNoExplain `protobuf:"bytes,24,opt,name=process_in_place_to_ensure_consistency_of_fund_and_depository_records,json=processInPlaceToEnsureConsistencyOfFundAndDepositoryRecords,proto3" json:"process_in_place_to_ensure_consistency_of_fund_and_depository_records,omitempty"`
	// 10.2.2. If the answer to Q10.2. is YES, what has been the frequency of the consistency controls of the Fund records with the depositary records for the other assets qualified as financial assets?
	FrequencyOfConsistencyControlsForOtherFinancialAssets RT000D034_Frequency `protobuf:"varint,25,opt,name=frequency_of_consistency_controls_for_other_financial_assets,json=frequencyOfConsistencyControlsForOtherFinancialAssets,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_consistency_controls_for_other_financial_assets,omitempty"`
	// 10.2.3. If the answer to Q10.2. is YES, is the frequency of these consistency controls for the other assets qualified as financial assets consistent with the frequency of the NAV calculation for all sub-funds of the Fund ? If NO, explain
	FrequencyOfConsistencyControlsConsistentWithNavFrequency *RT000D034_YesNoExplain `protobuf:"bytes,26,opt,name=frequency_of_consistency_controls_consistent_with_nav_frequency,json=frequencyOfConsistencyControlsConsistentWithNavFrequency,proto3" json:"frequency_of_consistency_controls_consistent_with_nav_frequency,omitempty"`
	// 10.2.4. If the answer to Q10.2. is YES, what has been the frequency of the consistency controls of the Fund records with the depositary records for the other assets qualified as non-financial assets?
	FrequencyOfConsistencyControlsForOtherNonFinancialAssets RT000D034_Frequency `protobuf:"varint,27,opt,name=frequency_of_consistency_controls_for_other_non_financial_assets,json=frequencyOfConsistencyControlsForOtherNonFinancialAssets,proto3,enum=standards.open.v1.RT000D034_Frequency" json:"frequency_of_consistency_controls_for_other_non_financial_assets,omitempty"`
	// 10.2.6. If the answer to Q10.2. is YES, could all differences identified during the year through these consistency controls between the Fund records and the depositary records be explained, documented and resolved in a reasonable delay ? If NO, explain
	AllDifferencesIdentifiedConsistencyControlsExplained *RT000D034_YesNoExplain `protobuf:"bytes,28,opt,name=all_differences_identified_consistency_controls_explained,json=allDifferencesIdentifiedConsistencyControlsExplained,proto3" json:"all_differences_identified_consistency_controls_explained,omitempty"`
	// 10.3. If the answer to Q10. is YES, did the depositary confirm all other assets as at year-end?
	DepositoryConfirmedAllOtherAssets *RT000D034_YesNoExplain `protobuf:"bytes,29,opt,name=depository_confirmed_all_other_assets,json=depositoryConfirmedAllOtherAssets,proto3" json:"depository_confirmed_all_other_assets,omitempty"`
	// 10.4. If the answer to Q10. is YES, has the Management of the Fund been notified during the year about any escalation from the depositary to the IFM/Fund of a situation of discrepancy detected in the context of the execution of its safekeeping duties for other assets (missing ownership verification documentation to be provided by the fund, discrepancies identified, etc.)? If YES, explain.
	ManagementNotifiedAboutAnyEscalationFromDepositoryToIfmOrFund *RT000D034_YesNoExplain `protobuf:"bytes,30,opt,name=management_notified_about_any_escalation_from_depository_to_ifm_or_fund,json=managementNotifiedAboutAnyEscalationFromDepositoryToIfmOrFund,proto3" json:"management_notified_about_any_escalation_from_depository_to_ifm_or_fund,omitempty"`
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) Reset() {
	*x = RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) ProtoMessage() {
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.ProtoReflect.Descriptor instead.
func (*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 9, 1}
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetReconciliationProcessAgainstDepositaryRecordsInPlace() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ReconciliationProcessAgainstDepositaryRecordsInPlace
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfReconciliations() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfReconciliations
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfReconciliationsConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfReconciliationsConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetReconciliationsPerformedOnOngoingBasisConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ReconciliationsPerformedOnOngoingBasisConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetAllReconciliationDifferencesResolved() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllReconciliationDifferencesResolved
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetDepositaryConfirmedAllAssetsOfFundThatCanBeHeldInCustody() bool {
	if x != nil {
		return x.DepositaryConfirmedAllAssetsOfFundThatCanBeHeldInCustody
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetAssetsNoHeldInCustody() *RT000D034_FundSpecificExplanation {
	if x != nil {
		return x.AssetsNoHeldInCustody
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetReconciliationProcessAgainstDepositaryRecordsInPlaceForAssetsHeldWithThirdPartyCustodian() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ReconciliationProcessAgainstDepositaryRecordsInPlaceForAssetsHeldWithThirdPartyCustodian
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfThirdPartyCustodianReconciliations() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfThirdPartyCustodianReconciliations
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfThirdPartyCustodianReconciliationsConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfThirdPartyCustodianReconciliationsConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetThirdPartyCustodianReconciliationsPerformedOnOngoingBasisConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ThirdPartyCustodianReconciliationsPerformedOnOngoingBasisConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetAllIdentifiedDifferencesInThirdPartyCustodianReconciliationsResolved() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllIdentifiedDifferencesInThirdPartyCustodianReconciliationsResolved
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetDepositaryConfirmedAllAssetsHeldAtThirdPartyCustodian() bool {
	if x != nil {
		return x.DepositaryConfirmedAllAssetsHeldAtThirdPartyCustodian
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetAssetTypesNotHeldWithThirdPartyCustodian() []*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails {
	if x != nil {
		return x.AssetTypesNotHeldWithThirdPartyCustodian
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFundInvestedInAssetsQualifyingAsOtherAssets() bool {
	if x != nil {
		return x.FundInvestedInAssetsQualifyingAsOtherAssets
	}
	return false
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetAppropriateOtherAssetRegistrationProcessInPlace() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AppropriateOtherAssetRegistrationProcessInPlace
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetPeriodicalOwnershipVerificationBasedOnReliableIndependentSourcesHasBeenPerformedForOtherAssets() *RT000D034_YesNoExplain {
	if x != nil {
		return x.PeriodicalOwnershipVerificationBasedOnReliableIndependentSourcesHasBeenPerformedForOtherAssets
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfPeriodicalOwnershipVerifications() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfPeriodicalOwnershipVerifications
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfPeriodicalOwnershipVerificationsConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfPeriodicalOwnershipVerificationsConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetPeriodicalOwnershipVerificationBasedOnReliableIndependentSourcesHasBeenPerformedForNonFinancialOtherAssets() *RT000D034_YesNoExplain {
	if x != nil {
		return x.PeriodicalOwnershipVerificationBasedOnReliableIndependentSourcesHasBeenPerformedForNonFinancialOtherAssets
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfPeriodicalOwnershipVerificationsForNonFinancialOtherAssets() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfPeriodicalOwnershipVerificationsForNonFinancialOtherAssets
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfPeriodicalOwnershipVerificationsForNonFinancialOtherAssetsConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfPeriodicalOwnershipVerificationsForNonFinancialOtherAssetsConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetAllDifferencesIdentifiedByPeriodicalOwnershipVerificationsExplained() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllDifferencesIdentifiedByPeriodicalOwnershipVerificationsExplained
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetProcessInPlaceToEnsureConsistencyOfFundAndDepositoryRecords() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ProcessInPlaceToEnsureConsistencyOfFundAndDepositoryRecords
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfConsistencyControlsForOtherFinancialAssets() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfConsistencyControlsForOtherFinancialAssets
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfConsistencyControlsConsistentWithNavFrequency() *RT000D034_YesNoExplain {
	if x != nil {
		return x.FrequencyOfConsistencyControlsConsistentWithNavFrequency
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetFrequencyOfConsistencyControlsForOtherNonFinancialAssets() RT000D034_Frequency {
	if x != nil {
		return x.FrequencyOfConsistencyControlsForOtherNonFinancialAssets
	}
	return RT000D034_FREQUENCY_UNSPECIFIED
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetAllDifferencesIdentifiedConsistencyControlsExplained() *RT000D034_YesNoExplain {
	if x != nil {
		return x.AllDifferencesIdentifiedConsistencyControlsExplained
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetDepositoryConfirmedAllOtherAssets() *RT000D034_YesNoExplain {
	if x != nil {
		return x.DepositoryConfirmedAllOtherAssets
	}
	return nil
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs) GetManagementNotifiedAboutAnyEscalationFromDepositoryToIfmOrFund() *RT000D034_YesNoExplain {
	if x != nil {
		return x.ManagementNotifiedAboutAnyEscalationFromDepositoryToIfmOrFund
	}
	return nil
}

// Details of assets not held with third party custodian
type RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeOfAsset string `protobuf:"bytes,1,opt,name=type_of_asset,json=typeOfAsset,proto3" json:"type_of_asset,omitempty"`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails) Reset() {
	*x = RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT000D034_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails) ProtoMessage() {
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails) ProtoReflect() protoreflect.Message {
	mi := &file_RT000D034_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails.ProtoReflect.Descriptor instead.
func (*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails) Descriptor() ([]byte, []int) {
	return file_RT000D034_proto_rawDescGZIP(), []int{0, 9, 1, 0}
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails) GetTypeOfAsset() string {
	if x != nil {
		return x.TypeOfAsset
	}
	return ""
}

func (x *RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

var File_RT000D034_proto protoreflect.FileDescriptor

var file_RT000D034_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0xff, 0x03, 0x0a, 0x09, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72,
	0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x41,
	0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x24, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x66, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6d,
	0x6c, 0x43, 0x66, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e,
	0x64, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x13, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f,
	0x0a, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x10, 0x72,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x6c, 0x0a, 0x1c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x4a, 0x0a,
	0x22, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x76, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x70,
	0x76, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x70, 0x76, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x53, 0x70, 0x76, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x11, 0x6e, 0x61, 0x76, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x4e, 0x41,
	0x56, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x6e, 0x61, 0x76, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x11,
	0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x6c, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x16, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x1a,
	0x75, 0x0a, 0x17, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73,
	0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb7, 0x01, 0x0a, 0x0c, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02,
	0x1a, 0xbf, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x1a, 0xf8, 0x03, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0x33,
	0x0a, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x48, 0x0a, 0x21, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x72, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xe0, 0x33,
	0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f,
	0x0a, 0x1e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x1c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x49, 0x0a, 0x21, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x83, 0x01, 0x0a, 0x1b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x19, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x80, 0x01, 0x0a, 0x27, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x6e, 0x0a, 0x1e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6d, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x6d, 0x6c, 0x12, 0x61, 0x0a, 0x17, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x66, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x66, 0x6d, 0x12, 0x86, 0x01, 0x0a, 0x2a, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x27, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x8e, 0x01, 0x0a, 0x2f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x71, 0x0a, 0x1f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x7c, 0x0a, 0x25, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x22, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x7e, 0x0a, 0x26, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x23, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x12, 0x6f, 0x0a, 0x1e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x76, 0x0a, 0x22, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1f, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x6d, 0x65,
	0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6d, 0x65, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x57, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71,
	0x73, 0x5f, 0x64, 0x69, 0x64, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x73, 0x73,
	0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x4a, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x73, 0x44, 0x69, 0x64, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x73, 0x73, 0x66, 0x12, 0x9a, 0x01, 0x0a, 0x4c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x44, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x12, 0x93, 0x01, 0x0a, 0x48, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x41, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x6f, 0x6e, 0x67,
	0x64, 0x6f, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5d, 0x0a, 0x2c, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0x68, 0x0a, 0x32, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x2c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x8e, 0x01, 0x0a, 0x30, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x6f, 0x6e, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x29, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x6e, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4f, 0x6e, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x7e, 0x0a, 0x27, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x22, 0x66, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x4c, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x7b, 0x0a, 0x26, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x75, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x20, 0x61, 0x6e, 0x79,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x4f, 0x66, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4f, 0x72, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x61, 0x75, 0x64, 0x12, 0x45, 0x0a,
	0x1f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x75, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46,
	0x72, 0x61, 0x75, 0x64, 0x12, 0x59, 0x0a, 0x2a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x61,
	0x75, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f,
	0x66, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72, 0x61, 0x75, 0x64, 0x12,
	0x91, 0x01, 0x0a, 0x31, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x72, 0x61, 0x75, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x63, 0x73, 0x73, 0x66, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x66, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x46, 0x72, 0x61, 0x75, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x73, 0x73, 0x66, 0x12, 0x7a, 0x0a, 0x25, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x66, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x20, 0x61,
	0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x53, 0x69, 0x66, 0x12,
	0x77, 0x0a, 0x31, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x66,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x29, 0x72,
	0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4f, 0x66, 0x53, 0x69, 0x66, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x62, 0x0a, 0x2f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x29, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x73, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x24,
	0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x20, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x73, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x76, 0x0a, 0x23,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x46, 0x75, 0x6e, 0x64, 0x12, 0xa4, 0x01, 0x0a, 0x3c, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x64, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x69, 0x66, 0x4e, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x44, 0x69, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x49, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x4f, 0x66, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x34,
	0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f,
	0x77, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x69, 0x66, 0x4e, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x57, 0x65, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x2d, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x73, 0x6f, 0x6c,
	0x64, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x73, 0x4f, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x42,
	0x61, 0x73, 0x69, 0x73, 0x12, 0x76, 0x0a, 0x3a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x62, 0x61, 0x73,
	0x69, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x32, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x75, 0x0a, 0x13,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x12, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x35, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65,
	0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x6f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x73, 0x57, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0xc3,
	0x01, 0x0a, 0x4c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x42, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xda, 0x01, 0x0a, 0x58, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x4d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0xdd, 0x01, 0x0a, 0x5a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x4e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x12, 0xa3, 0x01, 0x0a, 0x3b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x33, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e,
	0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x64, 0x41,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x22, 0xe9, 0x05, 0x0a, 0x19, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x49, 0x46, 0x4d, 0x10, 0x01, 0x12, 0x2d, 0x0a,
	0x29, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e,
	0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x4f, 0x52, 0x53, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x53, 0x10, 0x05,
	0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x53, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x4f, 0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x53,
	0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x59, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x49, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x53, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x55,
	0x4e, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0a,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x56,
	0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x56,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x50,
	0x45, 0x4e, 0x53, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x50, 0x49, 0x54,
	0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x0e, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x53, 0x5f, 0x4f,
	0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x4d, 0x4c, 0x5f, 0x43, 0x46, 0x54, 0x10, 0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x45, 0x4e,
	0x54, 0x52, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x53, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f,
	0x50, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x15, 0x22, 0xda, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x27, 0x49, 0x4e, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4c,
	0x41, 0x52, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x10, 0x03,
	0x1a, 0xf0, 0x4d, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x3a, 0x70, 0x72,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x70, 0x72, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0xa4,
	0x01, 0x0a, 0x3b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x34, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x95, 0x01, 0x0a, 0x33, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4f, 0x6e, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xaa, 0x01,
	0x0a, 0x55, 0x65, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x4b, 0x65,
	0x78, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x41,
	0x6c, 0x6c, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x2c, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x28, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xdf, 0x01, 0x0a, 0x41, 0x6e,
	0x6f, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e,
	0x64, 0x52, 0x39, 0x6e, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x9d, 0x01, 0x0a,
	0x4e, 0x65, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x45, 0x65, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x25,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x22, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x12,
	0xcd, 0x01, 0x0a, 0x37, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x59, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x31, 0x6e, 0x6f,
	0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12,
	0xbf, 0x01, 0x0a, 0x61, 0x65, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x76,
	0x5f, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x54, 0x65, 0x78, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x4e, 0x61, 0x76, 0x43, 0x61, 0x6c,
	0x63, 0x12, 0x73, 0x0a, 0x38, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x31, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x4e,
	0x61, 0x76, 0x43, 0x61, 0x6c, 0x63, 0x12, 0xf4, 0x01, 0x0a, 0x4d, 0x6e, 0x6f, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x42, 0x6e, 0x6f, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74,
	0x4e, 0x61, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0xbc, 0x01,
	0x0a, 0x30, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x63, 0x69,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x43, 0x49, 0x54, 0x53, 0x52,
	0x2b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x63, 0x69, 0x74, 0x73, 0x12, 0xb6, 0x01, 0x0a,
	0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x66, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x49, 0x46, 0x52, 0x29, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x69, 0x66, 0x12, 0xb6, 0x01, 0x0a, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6d, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4d, 0x4d, 0x46, 0x52, 0x29, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6d, 0x66, 0x12, 0x4d,
	0x0a, 0x23, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x68, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x01,
	0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x96, 0x01, 0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x40, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x37, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x42, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x2a, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x63, 0x73, 0x73, 0x66, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x1a, 0xcc, 0x01, 0x0a, 0x27,
	0x4e, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4f, 0x0a, 0x24, 0x6e, 0x6f, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x6e, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x94, 0x1f, 0x0a, 0x23, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x43, 0x49,
	0x54, 0x53, 0x12, 0x85, 0x01, 0x0a, 0x2a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6e,
	0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x26, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x2a, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x25, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x32, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2b, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x4f, 0x72, 0x55, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x66, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73,
	0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x96, 0x01, 0x0a, 0x33, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x3b, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x86, 0x01, 0x0a, 0x2b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6e, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x26, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x3d,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x27, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x23, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x2d, 0x74, 0x72, 0x61, 0x73,
	0x68, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x26, 0x74, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x46, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x73,
	0x68, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x43, 0x49, 0x54, 0x53, 0x2e, 0x54, 0x72, 0x61,
	0x73, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12,
	0x84, 0x01, 0x0a, 0x2a, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x25, 0x74, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x45, 0x70, 0x72, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x3b, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x72,
	0x61, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x9a,
	0x01, 0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x30, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x37,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb2, 0x01, 0x0a,
	0x42, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74,
	0x77, 0x65, 0x6e, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x77, 0x65, 0x6e, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0xa7, 0x01, 0x0a, 0x3c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x6f, 0x74, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x36, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x74, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x38,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb4, 0x01,
	0x0a, 0x43, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x77, 0x65, 0x6e, 0x74, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x77, 0x65, 0x6e,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x40, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x63,
	0x69, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x63, 0x69, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x38, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x63,
	0x69, 0x41, 0x6e, 0x64, 0x55, 0x63, 0x69, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x39, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x34, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x35, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6f, 0x72, 0x72,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x30, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x34, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x6e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x9d, 0x01, 0x0a, 0x37, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x85, 0x01, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x26, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x1a, 0xa4, 0x01, 0x0a, 0x21, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x49, 0x46, 0x12, 0x7f, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x61, 0x72, 0x5f, 0x6c, 0x61,
	0x77, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x63, 0x61, 0x72, 0x4c, 0x61, 0x77, 0x41, 0x6e, 0x64, 0x43, 0x73, 0x73, 0x66,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x1a, 0xa8, 0x11, 0x0a, 0x21, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x4d, 0x46, 0x12, 0x82,
	0x01, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x39, 0x4f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x7c, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x39, 0x5f, 0x6f, 0x6e,
	0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6d, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x21,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x39, 0x4f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x6d,
	0x69, 0x12, 0x9e, 0x01, 0x0a, 0x38, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x31, 0x31, 0x5f, 0x6f, 0x6e,
	0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x62, 0x63, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x31, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x31, 0x31, 0x4f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x62, 0x63,
	0x70, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x45, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x31, 0x32, 0x5f, 0x6f,
	0x6e, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3d, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x31, 0x32, 0x4f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa5, 0x01, 0x0a,
	0x3b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x31, 0x33, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x35, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x31, 0x33, 0x4f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x39, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x31, 0x34,
	0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x33, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x31, 0x34, 0x4f, 0x6e, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x38, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x31, 0x35, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x31, 0x35, 0x4f, 0x6e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x3b, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x31, 0x36, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6d, 0x66, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x31, 0x36, 0x4f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x4f, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x4f, 0x66, 0x4d, 0x6d, 0x66, 0x73, 0x12,
	0x8d, 0x01, 0x0a, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x6d, 0x6d, 0x69, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x29, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x45,
	0x61, 0x63, 0x68, 0x4d, 0x6d, 0x69, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0xb3, 0x01, 0x0a, 0x43, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x62, 0x63, 0x70, 0x5f, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x66, 0x45, 0x61, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x62, 0x63, 0x70, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x3b, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x31, 0x37, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x34, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x4f, 0x6e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73,
	0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x31, 0x37, 0x4f,
	0x6e, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xa0, 0x01, 0x0a, 0x39, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x31, 0x38, 0x5f, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x32, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4f, 0x6e, 0x4f, 0x6e, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x73, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x31, 0x38, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xbd, 0x01, 0x0a, 0x49, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x69,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0x34,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0x35, 0x5f, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x3f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4f, 0x6e, 0x4f, 0x6e,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0x34, 0x41, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x32, 0x35, 0x4f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x1a, 0xe8, 0x54, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xa0, 0x01, 0x0a, 0x38, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x33, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x44,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x75, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x3e, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x8f, 0x01, 0x0a, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x33, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x4f, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0xba, 0x01,
	0x0a, 0x46, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x4f, 0x66, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0xd5, 0x01, 0x0a, 0x55, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x65, 0x71, 0x75, 0x61, 0x63, 0x79, 0x5f, 0x6f,
	0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x41, 0x64, 0x65, 0x71, 0x75, 0x61, 0x63,
	0x79, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x7e, 0x0a, 0x34, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f,
	0x66, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0xe4, 0x01, 0x0a, 0x5e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x51, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x31, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x63, 0x69, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x43, 0x49, 0x54, 0x53, 0x52, 0x2c, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x55, 0x63, 0x69, 0x74, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x39, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x63, 0x69, 0x5f, 0x73, 0x69, 0x66,
	0x5f, 0x73, 0x69, 0x63, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x55, 0x43, 0x49,
	0x5f, 0x53, 0x49, 0x46, 0x5f, 0x53, 0x49, 0x43, 0x41, 0x52, 0x52, 0x32, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x55, 0x63, 0x69, 0x53, 0x69, 0x66, 0x53, 0x69, 0x63, 0x61, 0x72, 0x12, 0xb7,
	0x01, 0x0a, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6d,
	0x6d, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x4d, 0x4d, 0x46, 0x52, 0x2a, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x6d, 0x66, 0x12, 0xc9, 0x01, 0x0a, 0x4f, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x68, 0x65, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x45, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x75, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x5d, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61,
	0x76, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x66,
	0x64, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x68,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x4d, 0x61, 0x6e,
	0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76,
	0x49, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x72, 0x46, 0x64, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x64, 0x41, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x68, 0x61, 0x6e, 0x4e, 0x61, 0x76, 0x12, 0xd2, 0x01, 0x0a, 0x3b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x59, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x41,
	0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x32, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x64, 0x41, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4e, 0x61,
	0x76, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x85, 0x01, 0x0a, 0x43, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x76, 0x5f,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f,
	0x6f, 0x74, 0x63, 0x5f, 0x66, 0x64, 0x69, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x38,
	0x61, 0x6e, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x66, 0x4e, 0x61, 0x76, 0x49, 0x6e, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x4f, 0x74, 0x63, 0x46, 0x64, 0x69, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x40, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x64, 0x69, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x4d,
	0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64,
	0x52, 0x36, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x66, 0x4e, 0x61, 0x76, 0x49, 0x6e, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x4f, 0x74, 0x63, 0x46, 0x64, 0x69, 0x73, 0x12, 0x7e, 0x0a, 0x3e, 0x61, 0x6e, 0x79, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x68, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x36, 0x61, 0x6e, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x48, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x3b, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x68, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x34, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x48,
	0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0xb0, 0x01, 0x0a, 0x41, 0x68, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3a, 0x68, 0x61, 0x69, 0x72, 0x63, 0x75,
	0x74, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x95, 0x01, 0x0a, 0x4a, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f,
	0x6e, 0x61, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e,
	0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x41, 0x61, 0x6e, 0x79, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x56,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xcd, 0x01, 0x0a,
	0x47, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x3f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x56,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xcf, 0x01, 0x0a,
	0x52, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x74, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61,
	0x76, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x48, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x49, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76,
	0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x9a,
	0x01, 0x0a, 0x2a, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x26, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x37,
	0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x76, 0x0a, 0x3a, 0x61,
	0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x32, 0x61, 0x6e, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x36, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x78,
	0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x6e,
	0x64, 0x52, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x64, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x44, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x3b, 0x61, 0x6e, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xbf,
	0x01, 0x0a, 0x40, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x38, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0xc3, 0x01, 0x0a, 0x4c, 0x69, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x73, 0x75,
	0x72, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x42, 0x69, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x54, 0x6f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x69, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x38, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x32, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x42, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x72, 0x12, 0xa4, 0x01, 0x0a,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x2b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x2c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64,
	0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x28, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x44, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6e,
	0x61, 0x76, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x3a, 0x61, 0x6e, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x49, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0xae, 0x01, 0x0a, 0x40, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x39, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x12, 0x9a, 0x01, 0x0a, 0x4d, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x43, 0x61, 0x6e, 0x79, 0x46, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x55, 0x6e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0xcd, 0x01,
	0x0a, 0x51, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x47, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x64, 0x4f, 0x6e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x5e, 0x0a,
	0x2d, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x61, 0x6e, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x6c,
	0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x9e, 0x01,
	0x0a, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x6f,
	0x6c, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42,
	0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x27, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0xc7,
	0x01, 0x0a, 0x4e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x72, 0x6d, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x44, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f,
	0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x72,
	0x6d, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x6f, 0x0a, 0x37, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x64, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x72, 0x6d, 0x73, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2e, 0x61, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x64, 0x69, 0x73, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x41,
	0x72, 0x6d, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x7d, 0x0a, 0x1b, 0x6e, 0x6f, 0x6e,
	0x5f, 0x61, 0x72, 0x6d, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x18,
	0x6e, 0x6f, 0x6e, 0x41, 0x72, 0x6d, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x29, 0x6e, 0x6f, 0x6e,
	0x5f, 0x61, 0x72, 0x6d, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x24, 0x6e, 0x6f,
	0x6e, 0x41, 0x72, 0x6d, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x12, 0xc1, 0x01, 0x0a, 0x4b, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x6d, 0x73, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x41, 0x6e, 0x6f, 0x6e, 0x41, 0x72, 0x6d, 0x73, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x49, 0x6e, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0xb5, 0x0a, 0x0a, 0x2c, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x55, 0x43, 0x49, 0x54, 0x53, 0x12, 0xc5, 0x01, 0x0a, 0x4d, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x61, 0x6c, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x12,
	0xae, 0x01, 0x0a, 0x41, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x38, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x4f, 0x6e, 0x41, 0x6e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x69, 0x73,
	0x12, 0xbd, 0x01, 0x0a, 0x4a, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x64, 0x69,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x5f, 0x6f, 0x6e,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x3e, 0x61, 0x6c, 0x6c, 0x4f, 0x74, 0x63, 0x46, 0x64, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x64, 0x4f, 0x6e, 0x41, 0x6e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x12, 0xf6, 0x01, 0x0a, 0x68, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x6e,
	0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x59,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64,
	0x4f, 0x6e, 0x41, 0x6e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x69, 0x73,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x6e, 0x0a, 0x36, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2e, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x49,
	0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x64, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0xcd, 0x01, 0x0a, 0x29, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x76, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x43, 0x49,
	0x54, 0x53, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e,
	0x61, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42,
	0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x22, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x22, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x1a, 0xf4,
	0x08, 0x0a, 0x35, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x55, 0x43, 0x49, 0x5f, 0x53,
	0x49, 0x46, 0x5f, 0x53, 0x49, 0x43, 0x41, 0x52, 0x12, 0x72, 0x0a, 0x39, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x64, 0x69, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2f, 0x61, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x64, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x64, 0x4f, 0x6e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x41, 0x74, 0x46, 0x61, 0x69, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x97, 0x01, 0x0a,
	0x35, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x66, 0x64, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x61, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x64, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x4f,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x12, 0x7e, 0x0a, 0x3f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x6e,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x72,
	0x5f, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x64, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x35, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x49, 0x6e, 0x55,
	0x6e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x72, 0x4f,
	0x74, 0x63, 0x46, 0x64, 0x69, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x35, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x75, 0x6e, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f,
	0x6f, 0x74, 0x63, 0x5f, 0x66, 0x64, 0x69, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x55, 0x43, 0x49, 0x5f, 0x53, 0x49, 0x46, 0x5f, 0x53,
	0x49, 0x43, 0x41, 0x52, 0x2e, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x55, 0x6e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x72, 0x4f, 0x74, 0x63, 0x46, 0x64, 0x69,
	0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x7a, 0x0a, 0x3c, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x34, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0xc8, 0x01, 0x0a, 0x29, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x55, 0x43, 0x49, 0x5f, 0x53, 0x49, 0x46, 0x5f,
	0x53, 0x49, 0x43, 0x41, 0x52, 0x2e, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x22, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x64, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x1a, 0x84,
	0x01, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x1a, 0x91, 0x01, 0x0a, 0x2b, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41,
	0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x4d, 0x4d, 0x46, 0x12, 0x62, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xcd, 0x01, 0x0a, 0x32, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x64, 0x41, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4e, 0x61,
	0x76, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x14, 0x4d, 0x61,
	0x78, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x1a, 0xb3, 0x01, 0x0a, 0x17, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x46,
	0x0a, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x41, 0x6e, 0x64,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x1a, 0x95, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x75,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x84,
	0x5e, 0x0a, 0x11, 0x4e, 0x41, 0x56, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x64, 0x6f, 0x70,
	0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x43, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x76,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x3c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x54, 0x6f, 0x4e, 0x61, 0x76, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x95, 0x01, 0x0a, 0x33, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x44, 0x69, 0x73, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x6e,
	0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x3c, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x67, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x69, 0x73, 0x6b, 0x12, 0x57, 0x0a, 0x2a, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x61, 0x6e, 0x79, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x4f,
	0x66, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x82, 0x01,
	0x0a, 0x1e, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x4e, 0x41, 0x56, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x90, 0x01, 0x0a, 0x31, 0x61, 0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2a, 0x61, 0x64, 0x65, 0x71, 0x75,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x54, 0x6f, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0xa8, 0x01, 0x0a, 0x3e, 0x61, 0x64, 0x65, 0x71, 0x75, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x35, 0x61, 0x64, 0x65, 0x71, 0x75,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x54, 0x6f, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73,
	0x12, 0x80, 0x01, 0x0a, 0x28, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x23,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x26, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x21,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x12, 0xc7, 0x01, 0x0a, 0x4e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x44, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x6f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75,
	0x73, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x29, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x4c, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0x67, 0x0a, 0x32, 0x68,
	0x61, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x72, 0x79, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x68, 0x61, 0x73, 0x41, 0x6e, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x42, 0x65, 0x65, 0x6e, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x46, 0x75, 0x6e, 0x64, 0x12, 0xbe, 0x01, 0x0a, 0x48, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x41, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x66,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0xb1, 0x01, 0x0a, 0x42, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x72, 0x79, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x20, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x4f, 0x66, 0x41, 0x64, 0x6c,
	0x12, 0x9e, 0x01, 0x0a, 0x38, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x61, 0x64,
	0x6c, 0x5f, 0x6d, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x57, 0x68, 0x65, 0x72, 0x65, 0x41, 0x64, 0x6c, 0x4d, 0x61, 0x79, 0x42, 0x65, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x87, 0x01, 0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x61, 0x64, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x27, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x44, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64, 0x6c, 0x12, 0x98, 0x01, 0x0a,
	0x4b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x6c, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x43, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x41, 0x64, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73,
	0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x6c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x44, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65,
	0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x2b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x6c, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x27, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64, 0x6c, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x31,
	0x68, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x6c, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x68, 0x61, 0x76, 0x65, 0x41, 0x64, 0x6c,
	0x42, 0x65, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x6e, 0x79,
	0x53, 0x75, 0x62, 0x46, 0x75, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x89, 0x01, 0x0a, 0x2d, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6c, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x27, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6c, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x42, 0x79, 0x52, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6d, 0x0a,
	0x35, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x6c,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x65, 0x6e,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2e, 0x68, 0x61,
	0x73, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x73, 0x65, 0x64, 0x42, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0xac, 0x01, 0x0a,
	0x3f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x38, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x3c,
	0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x6c, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x61,
	0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x4f, 0x66, 0x41,
	0x64, 0x6c, 0x12, 0x87, 0x01, 0x0a, 0x2c, 0x61, 0x64, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x26, 0x61, 0x64, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x6f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x21,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x77, 0x70,
	0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x4f,
	0x66, 0x53, 0x77, 0x70, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x39, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x5f, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x6d, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x57, 0x68, 0x65, 0x72, 0x65, 0x53, 0x77, 0x70, 0x72, 0x4d,
	0x61, 0x79, 0x42, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x2c, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x28, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x77, 0x70, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x73, 0x77, 0x70, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x53, 0x77, 0x70, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x4c, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x44,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x53, 0x77, 0x70, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x53, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x4a, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x44, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x53, 0x77, 0x70,
	0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5e,
	0x0a, 0x2c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x28, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x77, 0x70,
	0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x63,
	0x0a, 0x31, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x68, 0x61, 0x73, 0x53, 0x77,
	0x70, 0x72, 0x42, 0x65, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x6f, 0x41,
	0x6e, 0x79, 0x53, 0x75, 0x62, 0x46, 0x75, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x34, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x73,
	0x77, 0x70, 0x72, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x52, 0x6f, 0x62, 0x75,
	0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4a, 0x0a,
	0x22, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x73, 0x77, 0x70, 0x72, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x44,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x36, 0x68, 0x61,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2f, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x53, 0x77, 0x70, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x42,
	0x65, 0x65, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x2c, 0x69, 0x66, 0x5f, 0x73, 0x77,
	0x70, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x72, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x25, 0x69, 0x66, 0x53, 0x77, 0x70, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x65, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x99, 0x01, 0x0a, 0x36, 0x69, 0x66, 0x5f, 0x73, 0x77, 0x70, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x69, 0x66, 0x53,
	0x77, 0x70, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x65, 0x72, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x9d, 0x01, 0x0a, 0x38,
	0x64, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x30, 0x64, 0x69, 0x64, 0x41, 0x6c,
	0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x70,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x70, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x85, 0x01, 0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x26, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x47, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x34, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x52, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46,
	0x6f, 0x72, 0x47, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x29, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x26, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0xb5, 0x01, 0x0a, 0x5a, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x51, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x35,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x2b, 0x68, 0x61, 0x73, 0x5f, 0x72,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x68, 0x61,
	0x73, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x65, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x35, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x30,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x4f, 0x66,
	0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0xd2, 0x01, 0x0a, 0x54, 0x77, 0x65, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x49, 0x77, 0x65, 0x72, 0x65,
	0x41, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0x5e, 0x0a, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x73, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0x62, 0x0a, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x29, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x70, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x12, 0x9d, 0x01, 0x0a, 0x36, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x32, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x73, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x34, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2f, 0x70,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x4c,
	0x0a, 0x23, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x68, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x12, 0xbb, 0x01, 0x0a,
	0x47, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3f, 0x61, 0x6c, 0x6c, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x66, 0x0a, 0x31, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x20, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x45, 0x0a, 0x20, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x72, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x61,
	0x73, 0x42, 0x65, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x31, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x4e, 0x41, 0x56, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64,
	0x52, 0x2a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x88, 0x01, 0x0a,
	0x2c, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x27,
	0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x3b, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x5b, 0x0a,
	0x2c, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x25, 0x73, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x6e, 0x79, 0x46, 0x75, 0x6e, 0x64,
	0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x2e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x29,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x29, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x73, 0x73, 0x66, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x73, 0x73, 0x66, 0x12, 0x4a,
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x44,
	0x75, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0xba, 0x01, 0x0a, 0x47, 0x70,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x68, 0x69, 0x63, 0x68, 0x5f, 0x64, 0x75,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x79, 0x5f, 0x62,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3e, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x68,
	0x69, 0x63, 0x68, 0x44, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x79, 0x42, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x26, 0x64, 0x75, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x44,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72, 0x12, 0xa9, 0x01, 0x0a, 0x3e, 0x61, 0x6c,
	0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x61,
	0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x38, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x32, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x66, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd1, 0x01, 0x0a, 0x52,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x4a, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x6a, 0x0a, 0x33, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x65, 0x65,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x68, 0x61,
	0x76, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x66, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x12, 0xd5, 0x01, 0x0a, 0x55,
	0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4b, 0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73,
	0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x52, 0x65, 0x67, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x3c, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x73, 0x73, 0x66, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x35, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x73, 0x73, 0x66, 0x12, 0xdf, 0x01, 0x0a,
	0x5a, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x50, 0x61, 0x6c,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x41,
	0x6c, 0x6c, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5f,
	0x0a, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x80, 0x01, 0x0a, 0x3f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x37, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xbb, 0x01, 0x0a, 0x47, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x3f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x66, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x7e, 0x0a, 0x3e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x61, 0x6c, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x36, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x61, 0x6c, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72,
	0x12, 0xb0, 0x01, 0x0a, 0x42, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x39, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x73, 0x73, 0x66, 0x41, 0x6c, 0x6c, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x61, 0x76, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75,
	0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x62, 0x0a, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x9d, 0x01, 0x0a, 0x27, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x56, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x4e, 0x41, 0x56, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x75, 0x6e,
	0x64, 0x52, 0x21, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x79,
	0x46, 0x75, 0x6e, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x32, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x57, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2c, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x49, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x66, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3e, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x42, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x4b, 0x0a, 0x0f, 0x46, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x8c, 0x01, 0x0a, 0x1a, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x9c, 0x3d, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x5b,
	0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x4f, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x65,
	0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x4d, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4f,
	0x72, 0x46, 0x65, 0x65, 0x52, 0x42, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x4f, 0x72, 0x46, 0x65, 0x65,
	0x73, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c,
	0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0xe9, 0x01, 0x0a, 0x52, 0x63, 0x6f, 0x73,
	0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x47, 0x63, 0x6f, 0x73,
	0x74, 0x73, 0x4f, 0x72, 0x46, 0x65, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x64, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x75, 0x62, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x7f, 0x0a, 0x3f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x36, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x75, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x53, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x47, 0x63,
	0x6f, 0x73, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x53, 0x75,
	0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0xf4, 0x01, 0x0a, 0x58, 0x63, 0x6f, 0x73, 0x74, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x46, 0x65, 0x65, 0x52,
	0x4c, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x5b, 0x0a,
	0x2c, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x5f, 0x61, 0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x25, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x6e, 0x64,
	0x46, 0x65, 0x65, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x41,
	0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x12, 0xb9, 0x01, 0x0a, 0x3f, 0x63,
	0x6f, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x36,
	0x63, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x41,
	0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x53, 0x75,
	0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0xc3, 0x01, 0x0a, 0x44, 0x63, 0x6f, 0x73, 0x74, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x64,
	0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x46, 0x65, 0x65, 0x52,
	0x3b, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x4e, 0x6f, 0x74,
	0x41, 0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0xd7, 0x01, 0x0a,
	0x56, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x38, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x6e, 0x6f, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54,
	0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x52, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73,
	0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x48, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x14, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x3a, 0x65, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e,
	0x79, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x32, 0x65, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x41, 0x6e, 0x79,
	0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x12, 0xa8, 0x01, 0x0a, 0x2a, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x52, 0x25, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x3d, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x36, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x46, 0x65, 0x65, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x72, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x34, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x2e, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x46, 0x65, 0x65, 0x73, 0x12,
	0x7e, 0x0a, 0x3e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x72, 0x73, 0x5f,
	0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x36, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x76, 0x69, 0x73, 0x65,
	0x72, 0x73, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x54, 0x6f, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0xb9, 0x01, 0x0a, 0x40, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x39, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x72, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x40,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x38, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x62, 0x6f,
	0x76, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x6e, 0x79, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x91, 0x01, 0x0a, 0x1f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x1c, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x3b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x34, 0x70, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x98, 0x01, 0x0a, 0x4b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x43, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0xb3, 0x01, 0x0a, 0x3d, 0x69,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x36, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f,
	0x66, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x4f,
	0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x93, 0x01, 0x0a, 0x49, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x40, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0xde, 0x01, 0x0a, 0x55, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x49, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x98, 0x01, 0x0a, 0x21, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x52, 0x1e, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x51, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x49, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x45, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x51, 0x64, 0x69, 0x64, 0x5f, 0x61, 0x6e, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x66, 0x74, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x44, 0x64, 0x69, 0x64, 0x41, 0x6e, 0x79, 0x53, 0x75, 0x62, 0x66, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x46, 0x69, 0x66,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x4e, 0x61, 0x76, 0x49, 0x6e,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x43, 0x66, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x5f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x5f, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x3b, 0x66, 0x6f, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x57, 0x68,
	0x65, 0x6e, 0x44, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x7a,
	0x65, 0x12, 0x73, 0x0a, 0x21, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x22, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x75, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1e, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x73,
	0x74, 0x44, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x6d, 0x0a,
	0x1e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x1a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x85, 0x01, 0x0a,
	0x2a, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x26, 0x62, 0x6f,
	0x6f, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x24, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x70, 0x6d, 0x5f,
	0x73, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x61, 0x6e, 0x79, 0x45, 0x70, 0x6d, 0x53, 0x66, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x9b, 0x01, 0x0a, 0x36, 0x65, 0x70, 0x6d, 0x5f, 0x73, 0x66, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x65, 0x71,
	0x75, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x30, 0x65, 0x70, 0x6d, 0x53, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e,
	0x73, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66,
	0x41, 0x64, 0x65, 0x71, 0x75, 0x61, 0x63, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x12, 0x76, 0x0a, 0x23, 0x65, 0x70, 0x6d, 0x5f, 0x73, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1e, 0x65, 0x70, 0x6d, 0x53, 0x66,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x42, 0x79, 0x42, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa8, 0x01, 0x0a, 0x15, 0x46, 0x75,
	0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x62, 0x0a, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x46, 0x65,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x73,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x8f, 0x05, 0x0a, 0x0c, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73,
	0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73,
	0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x74,
	0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x6f, 0x63, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x4f, 0x72, 0x4f, 0x63, 0x72, 0x12,
	0x76, 0x0a, 0x2f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x29, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x4f, 0x66, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x53, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x53, 0x49, 0x50,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x44, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x57, 0x4b, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x42, 0x47, 0x5f, 0x54, 0x49,
	0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x42, 0x47, 0x49, 0x44, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x49, 0x43, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49,
	0x47, 0x49, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x1a, 0xa0, 0x03, 0x0a, 0x1e, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x46, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x43,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x53, 0x50, 0x45, 0x43,
	0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53,
	0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x41, 0x56, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x53,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x82, 0x01,
	0x0a, 0x1b, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x73, 0x74, 0x1a, 0x8f, 0x03, 0x0a, 0x1e, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x66, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x66, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5d, 0x0a, 0x2c,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x27, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x65, 0x65, 0x4f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x2b, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f,
	0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x26, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65,
	0x4f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x46, 0x6f, 0x72,
	0x59, 0x65, 0x61, 0x72, 0x1a, 0xf6, 0x70, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12,
	0xc7, 0x01, 0x0a, 0x2d, 0x75, 0x63, 0x69, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x69, 0x66, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x69, 0x66,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x55, 0x43, 0x49, 0x54, 0x53, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x49, 0x46, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x49, 0x46, 0x4d,
	0x52, 0x27, 0x75, 0x63, 0x69, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x69, 0x66, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x73, 0x65, 0x64, 0x41, 0x69, 0x66, 0x6d, 0x12, 0xc4, 0x01, 0x0a, 0x22, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x69, 0x66, 0x6d, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x69, 0x66, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x49, 0x46, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x49, 0x46, 0x4d, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x41, 0x49, 0x46, 0x73,
	0x52, 0x1e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x69, 0x66, 0x6d,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x69, 0x66, 0x73,
	0x1a, 0x97, 0x42, 0x0a, 0x33, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x55, 0x43, 0x49, 0x54, 0x53,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x49, 0x46, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x49, 0x46, 0x4d, 0x12, 0xa3, 0x01, 0x0a, 0x3a, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x34, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41,
	0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x68,
	0x0a, 0x1c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x1a, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x3a, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x34, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x9e,
	0x01, 0x0a, 0x37, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x80, 0x01, 0x0a, 0x27, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x43, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x68, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x38, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x66,
	0x46, 0x75, 0x6e, 0x64, 0x54, 0x68, 0x61, 0x74, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x48, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x12, 0x6e, 0x0a, 0x19, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x75, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4e, 0x6f, 0x48, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x12, 0x56, 0x0a, 0x29, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x66,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x22, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x20, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8c, 0x01, 0x0a,
	0x2f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x2b,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x4d,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x45,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xa5, 0x01, 0x0a, 0x3b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x35, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0xba, 0x01,
	0x0a, 0x48, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x40, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0xe1, 0x01, 0x0a, 0x5b, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x51, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xad,
	0x01, 0x0a, 0x3f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x39, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0xc0,
	0x01, 0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x40, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x6f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x89, 0x01, 0x0a, 0x2e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x29, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0xc4, 0x01,
	0x0a, 0x4c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x43, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0xa3, 0x01, 0x0a, 0x3c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x35, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x5a, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4e,
	0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x61, 0x76, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xa7, 0x01, 0x0a, 0x3c,
	0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x61,
	0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x34, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x5f, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x2d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x48, 0x65, 0x6c, 0x64, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x97,
	0x01, 0x0a, 0x34, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x70, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e,
	0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x65, 0x70, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61,
	0x72, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x56, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e,
	0x79, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x49, 0x66, 0x6d, 0x4f, 0x66,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4e, 0x6f, 0x74, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x44, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0xe5, 0x01, 0x0a, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x64, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x51, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4e, 0x6f,
	0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x44, 0x75, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0xdd, 0x01, 0x0a, 0x5a, 0x65, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72,
	0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x73, 0x68,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4e, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x44,
	0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0xd5, 0x01, 0x0a, 0x56, 0x65, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72,
	0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x73, 0x68,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4a, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4e, 0x6f, 0x74,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x44, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x61, 0x73, 0x68, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0xac, 0x01, 0x0a, 0x56, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x75, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x4c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x74, 0x69, 0x65, 0x73, 0x12,
	0xc1, 0x01, 0x0a, 0x62, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x66, 0x6d,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x64, 0x75, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x55, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4f, 0x66, 0x41, 0x6e, 0x79, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x49,
	0x66, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x38, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x31, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x3c, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x76, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x35, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x76, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0xa2, 0x01,
	0x0a, 0x3a, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x33, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x76, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x91, 0x01, 0x0a, 0x31, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2b, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xe3, 0x01, 0x0a, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f,
	0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x75, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x45, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x49, 0x66, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x74, 0x69, 0x65, 0x73, 0x12, 0xc3, 0x01, 0x0a,
	0x4b, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x53, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x63, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4a, 0x65, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0xce, 0x01, 0x0a, 0x52, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x47, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x4f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x4f, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x3e, 0x65, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x65, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0xcf, 0x01, 0x0a, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x66,
	0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x5c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x66, 0x41,
	0x6e, 0x79, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x49, 0x66, 0x6d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xdc, 0x01, 0x0a, 0x59, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4e, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x4f, 0x66, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x38, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x32, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0xd2, 0x01, 0x0a, 0x6b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61,
	0x72, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x5d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x54,
	0x6f, 0x49, 0x66, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf1, 0x01,
	0x0a, 0x64, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x75, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x58, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x75,
	0x73, 0x12, 0xd7, 0x01, 0x0a, 0x56, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4c, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xb5, 0x01, 0x0a, 0x44,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3c, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x12, 0xd4, 0x01, 0x0a, 0x55, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61,
	0x6e, 0x79, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f,
	0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69,
	0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33,
	0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4a,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x54,
	0x6f, 0x49, 0x66, 0x6d, 0x41, 0x6e, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x72, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xb0, 0x2b, 0x0a, 0x44, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x49,
	0x46, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x49, 0x46, 0x4d,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x41,
	0x49, 0x46, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x3a, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x34, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x1c, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x1a, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x3a, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x34, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x76,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xbd, 0x01, 0x0a, 0x48, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x40, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x4f, 0x6e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x76,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x27, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a,
	0x43, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x61,
	0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x38, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41,
	0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x68,
	0x61, 0x74, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x48, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x64, 0x79, 0x12, 0x6e, 0x0a, 0x19, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6e,
	0x6f, 0x5f, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x4e, 0x6f, 0x48, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x64, 0x79, 0x12, 0xf2, 0x01, 0x0a, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x68,
	0x65, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30,
	0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x58, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x6e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x48, 0x65,
	0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x32, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x2d,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xcc, 0x01,
	0x0a, 0x50, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x47, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64,
	0x69, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xe6, 0x01, 0x0a,
	0x5e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44,
	0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x53, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x4f, 0x6e, 0x4f,
	0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xc5, 0x01, 0x0a, 0x4c, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x44, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x49, 0x6e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x7c, 0x0a,
	0x3d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x35, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x48, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x12, 0xf0, 0x01, 0x0a, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x68, 0x65, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x8c, 0x01, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x49, 0x46, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x49, 0x46, 0x4d, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x41, 0x49, 0x46, 0x73,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x28, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4e, 0x6f, 0x74, 0x48, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x67,
	0x0a, 0x32, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x66, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x35, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0xfe, 0x01, 0x0a, 0x6b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x5e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x2f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x2b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x4d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x45, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x98, 0x02,
	0x0a, 0x79, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65,
	0x65, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x6a, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x61,
	0x73, 0x42, 0x65, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x4e, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x45, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x80, 0x02, 0x0a, 0x6c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f,
	0x66, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0xc2, 0x01, 0x0a, 0x4a, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0xb5, 0x01, 0x0a, 0x45, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x3b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0xa3, 0x01, 0x0a, 0x3c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x35, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x3f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x38, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x76, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xaa, 0x01, 0x0a, 0x40, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x2e, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x38, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x39, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x34, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x7b, 0x0a, 0x25, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x21, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x47, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x44, 0x30, 0x33, 0x34, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x3d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x41, 0x6e, 0x79, 0x45, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x49, 0x66, 0x6d, 0x4f, 0x72, 0x46, 0x75, 0x6e, 0x64,
	0x1a, 0x5b, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01,
	0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x55,
	0x41, 0x52, 0x54, 0x45, 0x52, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49, 0x5f,
	0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e,
	0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x5f, 0x48,
	0x4f, 0x43, 0x10, 0x07, 0x22, 0x48, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x43, 0x49, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x49, 0x46, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x22, 0xd2,
	0x07, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x53, 0x5f, 0x54, 0x45, 0x52,
	0x4d, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x52,
	0x45, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x4c, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x06, 0x12,
	0x21, 0x0a, 0x1d, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52,
	0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x53,
	0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x55,
	0x53, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x49, 0x54, 0x53, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x53,
	0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x41, 0x4e, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x10, 0x0a,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x4f,
	0x52, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x53, 0x10, 0x0c,
	0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x58, 0x5f, 0x44, 0x45, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x53, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44,
	0x45, 0x52, 0x49, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x53, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e,
	0x48, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x48, 0x46, 0x10, 0x12,
	0x12, 0x42, 0x0a, 0x3e, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x14, 0x12, 0x28, 0x0a, 0x24, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f,
	0x45, 0x58, 0x43, 0x4c, 0x5f, 0x48, 0x46, 0x5f, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x5f, 0x4f, 0x52,
	0x5f, 0x50, 0x45, 0x10, 0x15, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x5f,
	0x48, 0x46, 0x5f, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x10, 0x16,
	0x12, 0x69, 0x0a, 0x65, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x54, 0x53, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x4f,
	0x52, 0x5f, 0x54, 0x41, 0x4e, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54,
	0x53, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x5f, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x46,
	0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x4e, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x17, 0x12, 0x6b, 0x0a, 0x67, 0x50,
	0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x49,
	0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x54,
	0x41, 0x4e, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x45,
	0x58, 0x43, 0x4c, 0x5f, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x45,
	0x57, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x19, 0x22, 0x4b, 0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x34,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x44, 0x30, 0x33, 0x34, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x32, 0x5a, 0x30, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RT000D034_proto_rawDescOnce sync.Once
	file_RT000D034_proto_rawDescData = file_RT000D034_proto_rawDesc
)

func file_RT000D034_proto_rawDescGZIP() []byte {
	file_RT000D034_proto_rawDescOnce.Do(func() {
		file_RT000D034_proto_rawDescData = protoimpl.X.CompressGZIP(file_RT000D034_proto_rawDescData)
	})
	return file_RT000D034_proto_rawDescData
}

var file_RT000D034_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_RT000D034_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_RT000D034_proto_goTypes = []interface{}{
	(RT000D034_Frequency)(0),                                                                                      // 0: standards.open.v1.RT000D034.Frequency
	(RT000D034_License)(0),                                                                                        // 1: standards.open.v1.RT000D034.License
	(RT000D034_InstrumentType)(0),                                                                                 // 2: standards.open.v1.RT000D034.InstrumentType
	(RT000D034_YesNoExplain_Response)(0),                                                                          // 3: standards.open.v1.RT000D034.YesNoExplain.Response
	(RT000D034_Organisation_ManagementMeetingSubjects)(0),                                                         // 4: standards.open.v1.RT000D034.Organisation.ManagementMeetingSubjects
	(RT000D034_Organisation_InformedInvestorCategories)(0),                                                        // 5: standards.open.v1.RT000D034.Organisation.InformedInvestorCategories
	(RT000D034_ExpensesAndIncome_ExpenseRatio_ShareClassIdentifierTypes)(0),                                       // 6: standards.open.v1.RT000D034.ExpensesAndIncome.ExpenseRatio.ShareClassIdentifierTypes
	(RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses_CostIncreaseReason)(0),                            // 7: standards.open.v1.RT000D034.ExpensesAndIncome.MaterialIncreaseInFundExpenses.CostIncreaseReason
	(*RT000D034)(nil),                                                                                             // 8: standards.open.v1.RT000D034
	(*RT000D034Batch)(nil),                                                                                        // 9: standards.open.v1.RT000D034_batch
	(*RT000D034_FundSpecificExplanation)(nil),                                                                     // 10: standards.open.v1.RT000D034.FundSpecificExplanation
	(*RT000D034_YesNoExplain)(nil),                                                                                // 11: standards.open.v1.RT000D034.YesNoExplain
	(*RT000D034_Manager)(nil),                                                                                     // 12: standards.open.v1.RT000D034.Manager
	(*RT000D034_DescriptiveFundInformation)(nil),                                                                  // 13: standards.open.v1.RT000D034.DescriptiveFundInformation
	(*RT000D034_Organisation)(nil),                                                                                // 14: standards.open.v1.RT000D034.Organisation
	(*RT000D034_InvestmentCompliance)(nil),                                                                        // 15: standards.open.v1.RT000D034.InvestmentCompliance
	(*RT000D034_Valuation)(nil),                                                                                   // 16: standards.open.v1.RT000D034.Valuation
	(*RT000D034_NAVDeterminiation)(nil),                                                                           // 17: standards.open.v1.RT000D034.NAVDeterminiation
	(*RT000D034_ExpensesAndIncome)(nil),                                                                           // 18: standards.open.v1.RT000D034.ExpensesAndIncome
	(*RT000D034_DepositaryRelationship)(nil),                                                                      // 19: standards.open.v1.RT000D034.DepositaryRelationship
	(*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund)(nil),                                // 20: standards.open.v1.RT000D034.InvestmentCompliance.NotVerifiedInvestmentRestrictionsByFund
	(*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS)(nil),                                    // 21: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS
	(*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF)(nil),                                      // 22: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsSIF
	(*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF)(nil),                                      // 23: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF
	(*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund)(nil),                   // 24: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.TrashRatioByFund
	(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS)(nil),                                      // 25: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirementsUCITS
	(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR)(nil),                             // 26: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR
	(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF)(nil),                                       // 27: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_MMF
	(*RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund)(nil),                                // 28: standards.open.v1.RT000D034.Valuation.InstrumentTypesValuedAtLowerThanNavFrequencyByFund
	(*RT000D034_Valuation_MaxMinExposureByFund)(nil),                                                              // 29: standards.open.v1.RT000D034.Valuation.MaxMinExposureByFund
	(*RT000D034_Valuation_FundSpecificExplanation)(nil),                                                           // 30: standards.open.v1.RT000D034.Valuation.FundSpecificExplanation
	(*RT000D034_Valuation_InvestmentDetailsByFund)(nil),                                                           // 31: standards.open.v1.RT000D034.Valuation.InvestmentDetailsByFund
	(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund)(nil),   // 32: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirementsUCITS.ProportionOfNavValuedByModelByFund
	(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund)(nil),        // 33: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR.MaxMinExposureByFund
	(*RT000D034_NAVDeterminiation_FundInformation)(nil),                                                           // 34: standards.open.v1.RT000D034.NAVDeterminiation.FundInformation
	(*RT000D034_NAVDeterminiation_NumberOfTransactionsByFund)(nil),                                                // 35: standards.open.v1.RT000D034.NAVDeterminiation.NumberOfTransactionsByFund
	(*RT000D034_ExpensesAndIncome_FundSpecificCostOrFee)(nil),                                                     // 36: standards.open.v1.RT000D034.ExpensesAndIncome.FundSpecificCostOrFee
	(*RT000D034_ExpensesAndIncome_CostOrFee)(nil),                                                                 // 37: standards.open.v1.RT000D034.ExpensesAndIncome.CostOrFee
	(*RT000D034_ExpensesAndIncome_ExpenseRatio)(nil),                                                              // 38: standards.open.v1.RT000D034.ExpensesAndIncome.ExpenseRatio
	(*RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses)(nil),                                            // 39: standards.open.v1.RT000D034.ExpensesAndIncome.MaterialIncreaseInFundExpenses
	(*RT000D034_ExpensesAndIncome_FundSpecificTransactionCost)(nil),                                               // 40: standards.open.v1.RT000D034.ExpensesAndIncome.FundSpecificTransactionCost
	(*RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges)(nil),                                            // 41: standards.open.v1.RT000D034.ExpensesAndIncome.FundSpecificPerformanceCharges
	(*RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM)(nil),                  // 42: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM
	(*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs)(nil), // 43: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs
	(*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails)(nil), // 44: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.AssetTypeAndDetails
	(*date.Date)(nil),   // 45: google.type.Date
	(*money.Money)(nil), // 46: google.type.Money
}
var file_RT000D034_proto_depIdxs = []int32{
	1,   // 0: standards.open.v1.RT000D034.licenses:type_name -> standards.open.v1.RT000D034.License
	45,  // 1: standards.open.v1.RT000D034.entity_year_end:type_name -> google.type.Date
	12,  // 2: standards.open.v1.RT000D034.managers:type_name -> standards.open.v1.RT000D034.Manager
	13,  // 3: standards.open.v1.RT000D034.fund_descriptions:type_name -> standards.open.v1.RT000D034.DescriptiveFundInformation
	46,  // 4: standards.open.v1.RT000D034.subscriptions_value:type_name -> google.type.Money
	46,  // 5: standards.open.v1.RT000D034.redemptions_value:type_name -> google.type.Money
	2,   // 6: standards.open.v1.RT000D034.instrument_types_invested_in:type_name -> standards.open.v1.RT000D034.InstrumentType
	14,  // 7: standards.open.v1.RT000D034.organisation:type_name -> standards.open.v1.RT000D034.Organisation
	15,  // 8: standards.open.v1.RT000D034.investment_compliance:type_name -> standards.open.v1.RT000D034.InvestmentCompliance
	16,  // 9: standards.open.v1.RT000D034.valuation:type_name -> standards.open.v1.RT000D034.Valuation
	17,  // 10: standards.open.v1.RT000D034.nav_determination:type_name -> standards.open.v1.RT000D034.NAVDeterminiation
	18,  // 11: standards.open.v1.RT000D034.expenses_and_income:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome
	19,  // 12: standards.open.v1.RT000D034.depositary_relationship:type_name -> standards.open.v1.RT000D034.DepositaryRelationship
	8,   // 13: standards.open.v1.RT000D034_batch.response:type_name -> standards.open.v1.RT000D034
	3,   // 14: standards.open.v1.RT000D034.YesNoExplain.response:type_name -> standards.open.v1.RT000D034.YesNoExplain.Response
	11,  // 15: standards.open.v1.RT000D034.Organisation.extraordinary_general_meetings:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 16: standards.open.v1.RT000D034.Organisation.documented_minutes:type_name -> standards.open.v1.RT000D034.YesNoExplain
	4,   // 17: standards.open.v1.RT000D034.Organisation.management_meeting_subjects:type_name -> standards.open.v1.RT000D034.Organisation.ManagementMeetingSubjects
	11,  // 18: standards.open.v1.RT000D034.Organisation.management_attend_training_professional:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 19: standards.open.v1.RT000D034.Organisation.management_attend_training_aml:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 20: standards.open.v1.RT000D034.Organisation.material_deficiency_ifm:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 21: standards.open.v1.RT000D034.Organisation.material_deficiency_central_administration:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 22: standards.open.v1.RT000D034.Organisation.material_deficiency_transfer_or_registrar_agent:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 23: standards.open.v1.RT000D034.Organisation.material_deficiency_distributor:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 24: standards.open.v1.RT000D034.Organisation.material_deficiency_portfolio_manager:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 25: standards.open.v1.RT000D034.Organisation.material_deficiency_investment_advisor:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 26: standards.open.v1.RT000D034.Organisation.material_deficiency_depository:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 27: standards.open.v1.RT000D034.Organisation.material_deficiency_other_delegate:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 28: standards.open.v1.RT000D034.Organisation.could_any_complaint_have_material_impact_on_fund:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 29: standards.open.v1.RT000D034.Organisation.fund_involved_in_litigation_during_year:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 30: standards.open.v1.RT000D034.Organisation.any_cases_of_suspected_or_actual_fraud:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 31: standards.open.v1.RT000D034.Organisation.notifications_of_suspected_fraud_shared_with_cssf:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 32: standards.open.v1.RT000D034.Organisation.adopted_risk_management_system_of_sif:type_name -> standards.open.v1.RT000D034.YesNoExplain
	45,  // 33: standards.open.v1.RT000D034.Organisation.risk_management_system_of_sif_date_of_last_review:type_name -> google.type.Date
	11,  // 34: standards.open.v1.RT000D034.Organisation.any_conflicts_of_interest_identified:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 35: standards.open.v1.RT000D034.Organisation.register_of_conflicts_maintained:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 36: standards.open.v1.RT000D034.Organisation.procedures_in_place_to_protect_fund:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 37: standards.open.v1.RT000D034.Organisation.if_no_procedures_did_management_act_in_interest_of_investors:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 38: standards.open.v1.RT000D034.Organisation.if_no_procedure_were_conflicts_reported_to_investors:type_name -> standards.open.v1.RT000D034.YesNoExplain
	5,   // 39: standards.open.v1.RT000D034.Organisation.investor_categories:type_name -> standards.open.v1.RT000D034.Organisation.InformedInvestorCategories
	11,  // 40: standards.open.v1.RT000D034.Organisation.procedures_in_place_to_ensure_investors_well_informed:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 41: standards.open.v1.RT000D034.Organisation.procedures_in_place_to_ensure_audited_annual_report_complies_with_regulation:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 42: standards.open.v1.RT000D034.Organisation.procedures_in_place_to_ensure_audited_annual_report_complies_with_constitutive_documents:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 43: standards.open.v1.RT000D034.Organisation.procedures_in_place_to_ensure_audited_annual_report_complies_with_fund_accounting_standard:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 44: standards.open.v1.RT000D034.Organisation.report_on_activities_included_in_annual_report_and_accurate:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 45: standards.open.v1.RT000D034.InvestmentCompliance.pre_trade_investment_compliance_at_portfolio_manager_level:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 46: standards.open.v1.RT000D034.InvestmentCompliance.post_trade_investment_compliance_at_portfolio_manager_level:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 47: standards.open.v1.RT000D034.InvestmentCompliance.delegation_of_ongoing_ex_post_investment_compliance:type_name -> standards.open.v1.RT000D034.YesNoExplain
	20,  // 48: standards.open.v1.RT000D034.InvestmentCompliance.not_verified_legal_and_regulatory_investment_restrictions_by_fund:type_name -> standards.open.v1.RT000D034.InvestmentCompliance.NotVerifiedInvestmentRestrictionsByFund
	20,  // 49: standards.open.v1.RT000D034.InvestmentCompliance.not_verified_prospectus_investment_restrictions_by_fund:type_name -> standards.open.v1.RT000D034.InvestmentCompliance.NotVerifiedInvestmentRestrictionsByFund
	20,  // 50: standards.open.v1.RT000D034.InvestmentCompliance.not_verified_legal_and_regulatory_investment_restrictions_at_nav_time_by_fund:type_name -> standards.open.v1.RT000D034.InvestmentCompliance.NotVerifiedInvestmentRestrictionsByFund
	21,  // 51: standards.open.v1.RT000D034.InvestmentCompliance.legal_and_regulatory_investment_compliance_ucits:type_name -> standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS
	22,  // 52: standards.open.v1.RT000D034.InvestmentCompliance.legal_and_regulatory_investment_compliance_sif:type_name -> standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsSIF
	23,  // 53: standards.open.v1.RT000D034.InvestmentCompliance.legal_and_regulatory_investment_compliance_mmf:type_name -> standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF
	11,  // 54: standards.open.v1.RT000D034.InvestmentCompliance.complied_with_securitization_regulation:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 55: standards.open.v1.RT000D034.InvestmentCompliance.complied_with_investment_restrictions_in_prospectus:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 56: standards.open.v1.RT000D034.InvestmentCompliance.formalized_policy_in_place_to_handle_active_and_passive_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 57: standards.open.v1.RT000D034.InvestmentCompliance.cssf_notified_of_all_prior_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 58: standards.open.v1.RT000D034.Valuation.valuation_policies_appropriately_disclosed_in_prospectus:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 59: standards.open.v1.RT000D034.Valuation.written_valuation_procedures_covering_all_investments_in_place:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 60: standards.open.v1.RT000D034.Valuation.management_formally_approved_valuation_policies:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 61: standards.open.v1.RT000D034.Valuation.management_ensured_valuation_policies_compliant:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 62: standards.open.v1.RT000D034.Valuation.management_approved_formally_use_of_valuation_model:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 63: standards.open.v1.RT000D034.Valuation.management_approved_formally_independence_of_external_valuer_appointed:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 64: standards.open.v1.RT000D034.Valuation.management_conducts_periodic_review_of_adequacy_of_valuation_policies_and_prodcedures:type_name -> standards.open.v1.RT000D034.YesNoExplain
	45,  // 65: standards.open.v1.RT000D034.Valuation.date_of_latest_periodic_review_of_valuation_policies:type_name -> google.type.Date
	11,  // 66: standards.open.v1.RT000D034.Valuation.organisation_of_fund_provides_for_escalation_process_to_management_in_case_of_valuation_issues:type_name -> standards.open.v1.RT000D034.YesNoExplain
	25,  // 67: standards.open.v1.RT000D034.Valuation.legal_and_regulatory_valuation_requirements_ucits:type_name -> standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirementsUCITS
	26,  // 68: standards.open.v1.RT000D034.Valuation.legal_and_regulatory_valuation_requirements_uci_sif_sicar:type_name -> standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR
	27,  // 69: standards.open.v1.RT000D034.Valuation.legal_and_regulatory_valuation_requirements_mmf:type_name -> standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_MMF
	11,  // 70: standards.open.v1.RT000D034.Valuation.all_investments_held_valued_in_accordance_with_valuation_policies_in_prospectus:type_name -> standards.open.v1.RT000D034.YesNoExplain
	28,  // 71: standards.open.v1.RT000D034.Valuation.instrument_types_valued_at_lower_than_nav_frequency_by_fund:type_name -> standards.open.v1.RT000D034.Valuation.InstrumentTypesValuedAtLowerThanNavFrequencyByFund
	29,  // 72: standards.open.v1.RT000D034.Valuation.funds_investing_material_portion_of_nav_in_non_standard_otc_fdis:type_name -> standards.open.v1.RT000D034.Valuation.MaxMinExposureByFund
	29,  // 73: standards.open.v1.RT000D034.Valuation.funds_investing_material_portion_of_nav_haircut_investments:type_name -> standards.open.v1.RT000D034.Valuation.MaxMinExposureByFund
	11,  // 74: standards.open.v1.RT000D034.Valuation.haircut_decided_by_mangement_subject_to_appropriate_documentation:type_name -> standards.open.v1.RT000D034.YesNoExplain
	29,  // 75: standards.open.v1.RT000D034.Valuation.funds_investing_material_portion_of_nav_valuation_uncertain_investments:type_name -> standards.open.v1.RT000D034.Valuation.MaxMinExposureByFund
	11,  // 76: standards.open.v1.RT000D034.Valuation.experienced_operational_or_it_risk_impacting_nav_determination_across_all_subfunds:type_name -> standards.open.v1.RT000D034.YesNoExplain
	30,  // 77: standards.open.v1.RT000D034.Valuation.fund_specific_operational_valuation_issues:type_name -> standards.open.v1.RT000D034.Valuation.FundSpecificExplanation
	11,  // 78: standards.open.v1.RT000D034.Valuation.written_valuation_policies_provide_for_liquidity_checks:type_name -> standards.open.v1.RT000D034.YesNoExplain
	29,  // 79: standards.open.v1.RT000D034.Valuation.funds_invested_material_portion_valued_on_stale_prices:type_name -> standards.open.v1.RT000D034.Valuation.MaxMinExposureByFund
	29,  // 80: standards.open.v1.RT000D034.Valuation.funds_invested_material_portion_valued_by_non_independent_source:type_name -> standards.open.v1.RT000D034.Valuation.MaxMinExposureByFund
	11,  // 81: standards.open.v1.RT000D034.Valuation.if_valuation_not_independent_procedures_carried_out_to_ensure_fair_valuation:type_name -> standards.open.v1.RT000D034.YesNoExplain
	31,  // 82: standards.open.v1.RT000D034.Valuation.instances_management_refused_external_valuation:type_name -> standards.open.v1.RT000D034.Valuation.InvestmentDetailsByFund
	31,  // 83: standards.open.v1.RT000D034.Valuation.instances_valuer_refused_to_provide_valuation:type_name -> standards.open.v1.RT000D034.Valuation.InvestmentDetailsByFund
	11,  // 84: standards.open.v1.RT000D034.Valuation.target_investment_funds_subject_to_documented_valuation_controls:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 85: standards.open.v1.RT000D034.Valuation.relied_on_audited_statements_for_material_unquoted_investments_in_audited_company:type_name -> standards.open.v1.RT000D034.YesNoExplain
	31,  // 86: standards.open.v1.RT000D034.Valuation.instruments_sold_at_material_discount_by_fund:type_name -> standards.open.v1.RT000D034.Valuation.InvestmentDetailsByFund
	11,  // 87: standards.open.v1.RT000D034.Valuation.documented_procedure_in_place_to_ensure_related_party_transactions_arms_length:type_name -> standards.open.v1.RT000D034.YesNoExplain
	31,  // 88: standards.open.v1.RT000D034.Valuation.non_arms_length_investments:type_name -> standards.open.v1.RT000D034.Valuation.InvestmentDetailsByFund
	31,  // 89: standards.open.v1.RT000D034.Valuation.non_arms_length_investments_related_party:type_name -> standards.open.v1.RT000D034.Valuation.InvestmentDetailsByFund
	11,  // 90: standards.open.v1.RT000D034.Valuation.non_arms_length_related_party_transactions_described_in_annual_report_notes:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 91: standards.open.v1.RT000D034.NAVDeterminiation.material_changes_disclosed_in_audited_annual_report:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 92: standards.open.v1.RT000D034.NAVDeterminiation.documented_assessment_performed_regarding_market_timing_risk:type_name -> standards.open.v1.RT000D034.YesNoExplain
	34,  // 93: standards.open.v1.RT000D034.NAVDeterminiation.funds_exposed_to_market_timing:type_name -> standards.open.v1.RT000D034.NAVDeterminiation.FundInformation
	11,  // 94: standards.open.v1.RT000D034.NAVDeterminiation.adequate_measures_in_place_to_avoid_market_timing:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 95: standards.open.v1.RT000D034.NAVDeterminiation.adequate_measures_in_place_to_avoid_market_timing_by_employees:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 96: standards.open.v1.RT000D034.NAVDeterminiation.any_instance_of_market_timing_identified:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 97: standards.open.v1.RT000D034.NAVDeterminiation.any_instance_of_market_timing_executed:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 98: standards.open.v1.RT000D034.NAVDeterminiation.appropriate_measures_in_place_to_ensure_compliance_with_prospectus_cutoff_time:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 99: standards.open.v1.RT000D034.NAVDeterminiation.instance_of_late_trading_identified_during_year:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 100: standards.open.v1.RT000D034.NAVDeterminiation.written_confirmation_prohibiting_market_timing_if_intermediary_appointed:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 101: standards.open.v1.RT000D034.NAVDeterminiation.written_confirmation_from_intermediary_to_transmit_orders_same_day:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 102: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_indicates_circumstances_where_adl_may_be_used:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 103: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_discloses_maximum_adl_authorised:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 104: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_discloses_maximum_adl_authorised_under_exceptional_circumstances:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 105: standards.open.v1.RT000D034.NAVDeterminiation.are_adl_covered_by_robust_internal_governance:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 106: standards.open.v1.RT000D034.NAVDeterminiation.increase_in_maximum_adl_appropriately_communicated_to_investors:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 107: standards.open.v1.RT000D034.NAVDeterminiation.all_funds_in_compliance_with_prospectus_regarding_use_of_adl:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 108: standards.open.v1.RT000D034.NAVDeterminiation.adl_subject_to_periodic_review_by_management:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 109: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_indicates_circumstances_where_swpr_may_be_used:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 110: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_discloses_maximum_swpr_authorised:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 111: standards.open.v1.RT000D034.NAVDeterminiation.swpr_covered_by_robust_internal_governance_processes:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 112: standards.open.v1.RT000D034.NAVDeterminiation.has_maximum_swpr_authorised_been_increased_during_year:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 113: standards.open.v1.RT000D034.NAVDeterminiation.if_swpr_applied_were_all_funds_in_compliance:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 114: standards.open.v1.RT000D034.NAVDeterminiation.if_swpr_applied_were_policy_subject_to_periodic_review:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 115: standards.open.v1.RT000D034.NAVDeterminiation.did_all_funds_comply_with_prospectus_concerning_lock_ups:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 116: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_states_circumstances_for_gating:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 117: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_specifies_time_limit_for_redemption_gating:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 118: standards.open.v1.RT000D034.NAVDeterminiation.investors_informed_appropriately_of_redemption_gating:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 119: standards.open.v1.RT000D034.NAVDeterminiation.were_all_funds_in_compliance_with_prospectus_regarding_redemption_gating_during_year:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 120: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_discloses_redemption_deferral_circumstances:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 121: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_specifies_time_limit_redemption_deferrals:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 122: standards.open.v1.RT000D034.NAVDeterminiation.all_funds_in_compliances_with_prospectus_regarding_redemption_deferrals:type_name -> standards.open.v1.RT000D034.YesNoExplain
	35,  // 123: standards.open.v1.RT000D034.NAVDeterminiation.number_of_redemption_in_kind_transactions_by_fund:type_name -> standards.open.v1.RT000D034.NAVDeterminiation.NumberOfTransactionsByFund
	11,  // 124: standards.open.v1.RT000D034.NAVDeterminiation.redemptions_in_kind_complied_with_prospectus:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 125: standards.open.v1.RT000D034.NAVDeterminiation.redemptions_in_kind_subject_to_auditor_report_when_required:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 126: standards.open.v1.RT000D034.NAVDeterminiation.created_side_pockets_communicated_to_investors:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 127: standards.open.v1.RT000D034.NAVDeterminiation.created_side_pockets_communicated_to_cssf:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 128: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_indicates_circumstances_under_which_dual_pricing_may_be_used:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 129: standards.open.v1.RT000D034.NAVDeterminiation.all_funds_in_compliance_with_prospectus_regarding_dual_pricing:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 130: standards.open.v1.RT000D034.NAVDeterminiation.prospectus_clearly_indicates_circumstances_for_temporary_suspension_of_redemptions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 131: standards.open.v1.RT000D034.NAVDeterminiation.all_funds_in_compliance_with_prospectus_regarding_temporary_suspension_of_redemptions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 132: standards.open.v1.RT000D034.NAVDeterminiation.all_temporary_suspension_of_redemptions_communicated_to_cssf:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 133: standards.open.v1.RT000D034.NAVDeterminiation.all_temporary_suspension_of_redemptions_communicated_to_all_national_competent_authorities:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 134: standards.open.v1.RT000D034.NAVDeterminiation.formalized_policy_covering_treatment_of_material_nav_calculation_errors:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 135: standards.open.v1.RT000D034.NAVDeterminiation.fund_reported_to_cssf_all_detected_material_nav_calculation_errors:type_name -> standards.open.v1.RT000D034.YesNoExplain
	35,  // 136: standards.open.v1.RT000D034.NAVDeterminiation.number_of_contributions_in_kind_by_fund:type_name -> standards.open.v1.RT000D034.NAVDeterminiation.NumberOfTransactionsByFund
	11,  // 137: standards.open.v1.RT000D034.NAVDeterminiation.all_contributions_in_kind_complied_with_prospectus:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 138: standards.open.v1.RT000D034.NAVDeterminiation.all_contributions_in_kind_subject_to_report_issued_by_auditor_if_required:type_name -> standards.open.v1.RT000D034.YesNoExplain
	37,  // 139: standards.open.v1.RT000D034.ExpensesAndIncome.costs_or_fees_not_corresponding_to_chargeable_service_charged_to_all_subfunds:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.CostOrFee
	36,  // 140: standards.open.v1.RT000D034.ExpensesAndIncome.costs_or_fees_not_corresponding_to_chargeable_service_charged_to_specific_subfunds:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.FundSpecificCostOrFee
	37,  // 141: standards.open.v1.RT000D034.ExpensesAndIncome.costs_and_fees_calculated_and_booked_comply_with_prospectus_charged_to_all_subfunds:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.CostOrFee
	36,  // 142: standards.open.v1.RT000D034.ExpensesAndIncome.costs_and_fees_calculated_and_booked_comply_with_prospectus_charged_to_specific_subfunds:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.FundSpecificCostOrFee
	37,  // 143: standards.open.v1.RT000D034.ExpensesAndIncome.costs_and_fees_not_adequately_disclosed_charged_to_all_subfunds:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.CostOrFee
	37,  // 144: standards.open.v1.RT000D034.ExpensesAndIncome.costs_and_fees_not_adequately_disclosed_charged_to_specific_subfunds:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.CostOrFee
	11,  // 145: standards.open.v1.RT000D034.ExpensesAndIncome.formal_assessment_performed_to_verify_costs_proportionate_compared_to_market_standards:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 146: standards.open.v1.RT000D034.ExpensesAndIncome.formal_assessment_performed_to_verify_no_duplicate_costs:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 147: standards.open.v1.RT000D034.ExpensesAndIncome.formal_assessment_performed_to_verify_effective_service_in_investors_best_interest:type_name -> standards.open.v1.RT000D034.YesNoExplain
	38,  // 148: standards.open.v1.RT000D034.ExpensesAndIncome.fund_expense_rations:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.ExpenseRatio
	39,  // 149: standards.open.v1.RT000D034.ExpensesAndIncome.funds_subject_to_material_expense_increase:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.MaterialIncreaseInFundExpenses
	10,  // 150: standards.open.v1.RT000D034.ExpensesAndIncome.fund_specific_explanation_for_superior_advisory_fees:type_name -> standards.open.v1.RT000D034.FundSpecificExplanation
	10,  // 151: standards.open.v1.RT000D034.ExpensesAndIncome.fund_specific_explanation_for_superior_advisory_carried_interest:type_name -> standards.open.v1.RT000D034.FundSpecificExplanation
	40,  // 152: standards.open.v1.RT000D034.ExpensesAndIncome.fund_specific_transaction_costs:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.FundSpecificTransactionCost
	10,  // 153: standards.open.v1.RT000D034.ExpensesAndIncome.incorrect_applications_of_performance_fee_or_carried_interest:type_name -> standards.open.v1.RT000D034.FundSpecificExplanation
	10,  // 154: standards.open.v1.RT000D034.ExpensesAndIncome.performance_fee_calculation_parameters_not_in_line_with_prospectus_and_market_by_fund:type_name -> standards.open.v1.RT000D034.FundSpecificExplanation
	41,  // 155: standards.open.v1.RT000D034.ExpensesAndIncome.fund_specific_performance_charges:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.FundSpecificPerformanceCharges
	11,  // 156: standards.open.v1.RT000D034.ExpensesAndIncome.performance_charge_calculation_method_ensures_alignment_to_investment_performance:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 157: standards.open.v1.RT000D034.ExpensesAndIncome.material_income_past_due_interest:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 158: standards.open.v1.RT000D034.ExpensesAndIncome.material_income_past_due_principal:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 159: standards.open.v1.RT000D034.ExpensesAndIncome.material_income_past_due_other:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 160: standards.open.v1.RT000D034.ExpensesAndIncome.booked_receivable_against_service_provider:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 161: standards.open.v1.RT000D034.ExpensesAndIncome.epm_sft_comprehensive_assessment_of_adequacy_performed:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 162: standards.open.v1.RT000D034.ExpensesAndIncome.epm_sft_concluded_by_best_execution:type_name -> standards.open.v1.RT000D034.YesNoExplain
	42,  // 163: standards.open.v1.RT000D034.DepositaryRelationship.ucits_and_regulated_aifs_with_authorised_aifm:type_name -> standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM
	43,  // 164: standards.open.v1.RT000D034.DepositaryRelationship.registered_aifm_and_regulated_aifs:type_name -> standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs
	11,  // 165: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.transferable_securities_no_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 166: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.money_market_securities_no_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 167: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.shares_or_uints_of_undertakings_no_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 168: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.deposits_no_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 169: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.financial_derivative_investments_no_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 170: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.financial_derivative_investments_compliant_underlying_index:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 171: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.money_market_investments_no_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 172: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.efficient_portfolio_management_instruments_no_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 173: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.financial_collateral_no_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	24,  // 174: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.trash_ratio_by_fund:type_name -> standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.TrashRatioByFund
	11,  // 175: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.trash_ratio_investments_no_active_breaches:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 176: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.pre_trade_controls_in_place_to_identify_and_monitor_trash_instruments:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 177: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_global_exposure_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 178: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_issuer_limitation_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 179: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_twenty_percent_deposit_limit_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 180: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_otc_counterparty_limit_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 181: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_issuer_limit_limit_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 182: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_combined_twenty_percent_limit_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 183: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_target_uci_and_ucits_limit_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 184: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_concentration_limit_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 185: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_borrowing_limit_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 186: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_uncovered_sale_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 187: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_with_ten_percent_trash_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 188: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsUCITS.complied_all_other_investment_restrictions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 189: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsSIF.complied_with_scar_law_and_cssf_circular:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 190: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_with_article9_on_eligible_assets:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 191: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_with_article9_on_eligible_mmi:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 192: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_with_article11_on_eligible_securities_and_abcps:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 193: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_with_article12_on_eligible_deposits_with_credit_institutions:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 194: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_with_article13_on_financial_derivative_instruments:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 195: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_with_article14_on_eligible_repurchase_agreements:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 196: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_with_article15_on_reverse_repurchase_agreements:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 197: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_with_article16_on_eligible_shares_or_units_of_mmfs:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 198: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.credit_quality_assessment_of_each_mmi_favorable:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 199: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.credit_quality_assessment_of_each_securitization_and_abcp_favorable:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 200: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_on_ongoing_basis_with_article17_on_diversification:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 201: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_on_ongoing_basis_with_article18_on_concentration:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 202: standards.open.v1.RT000D034.InvestmentCompliance.LegalAndRegulatoryRestrictionsMMF.complied_on_ongoing_basis_with_article24_and_article25_on_portfolio_rules:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 203: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirementsUCITS.all_transferable_securities_valued_at_market_prices_or_independent_of_issuers:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 204: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirementsUCITS.all_money_market_securities_valued_accurately_on_an_ongoing_basis:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 205: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirementsUCITS.all_otc_fdi_valued_on_an_ongoing_basis_with_reliable_and_verifiable_prices:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 206: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirementsUCITS.all_instruments_in_trash_ratio_valued_on_an_ongoing_basis_using_issuer_information_or_competent_research:type_name -> standards.open.v1.RT000D034.YesNoExplain
	32,  // 207: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirementsUCITS.proportion_of_nav_valued_by_model_by_fund:type_name -> standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirementsUCITS.ProportionOfNavValuedByModelByFund
	11,  // 208: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR.all_assets_and_fdis_valued_on_according_to_prospectus:type_name -> standards.open.v1.RT000D034.YesNoExplain
	33,  // 209: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR.proportion_of_nav_unquoted_assets_or_otc_fdis_by_fund:type_name -> standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR.MaxMinExposureByFund
	33,  // 210: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR.proportion_of_nav_valued_by_model_by_fund:type_name -> standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR.MaxMinExposureByFund
	11,  // 211: standards.open.v1.RT000D034.Valuation.LegalAndRegulatoryValuationRequirements_MMF.all_assets_in_compliance:type_name -> standards.open.v1.RT000D034.YesNoExplain
	46,  // 212: standards.open.v1.RT000D034.ExpensesAndIncome.FundSpecificCostOrFee.amount:type_name -> google.type.Money
	46,  // 213: standards.open.v1.RT000D034.ExpensesAndIncome.CostOrFee.amount:type_name -> google.type.Money
	6,   // 214: standards.open.v1.RT000D034.ExpensesAndIncome.ExpenseRatio.share_class_id_type:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.ExpenseRatio.ShareClassIdentifierTypes
	46,  // 215: standards.open.v1.RT000D034.ExpensesAndIncome.ExpenseRatio.average_total_nav_of_representative_share_class:type_name -> google.type.Money
	7,   // 216: standards.open.v1.RT000D034.ExpensesAndIncome.MaterialIncreaseInFundExpenses.cost_increase_reasons:type_name -> standards.open.v1.RT000D034.ExpensesAndIncome.MaterialIncreaseInFundExpenses.CostIncreaseReason
	11,  // 217: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.reconciliation_process_against_depositary_records_in_place:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 218: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_reconciliations:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 219: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_reconciliations_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 220: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.reconciliations_performed_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 221: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.all_reconciliation_differences_resolved:type_name -> standards.open.v1.RT000D034.YesNoExplain
	10,  // 222: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.assets_no_held_in_custody:type_name -> standards.open.v1.RT000D034.FundSpecificExplanation
	11,  // 223: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.appropriate_asset_registration_process_in_place:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 224: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.periodical_ownership_verifications:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 225: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_periodical_ownership_verifications:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 226: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_periodical_ownership_verifications_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 227: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.periodical_ownership_verifications_for_non_financial_assets:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 228: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_periodical_ownership_verifications_for_non_financial_assets:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 229: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_periodical_ownership_verifications_non_financial_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 230: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.all_differences_identified_by_ownership_verifications_explained:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 231: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.process_in_place_to_ensure_fund_and_depositary_consistency_for_other_assets:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 232: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_consistency_controls_other_assets:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 233: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_consistency_controls_other_assets_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 234: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_consistency_controls_other_non_financial_assets:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 235: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.frequency_of_consistency_controls_other_non_financial_assets_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 236: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.all_differences_identified_by_consistency_controls_explained:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 237: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.depositary_provided_inventory_of_assets_held_by_fund:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 238: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.management_notified_of_any_other_asset_discrepancies:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 239: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_of_discrepancy_not_corrected_in_due_time_related_to_eligibility_of_third_party_banks:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 240: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_of_discrepancy_not_corrected_in_due_time_related_to_cash_reconciliation_process:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 241: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_of_discrepancy_not_corrected_in_due_time_related_to_cash_monitoring_process:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 242: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_valuation_evidence_for_assets:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 243: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_valuation_nav_calculation_process:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 244: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_valuation_nav_calculation_error:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 245: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_valuation_other_reason:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 246: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_subscriptions_and_redemptions_unprocessed_trades:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 247: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_subscriptions_and_redemptions_cash_reconciliation_issues:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 248: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_subscriptions_and_redemptions_breaks_on_shares_or_units:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 249: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_subscriptions_and_redemptions_other:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 250: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_investment_restrictions_breaches_of_legal_and_prospectus_rules:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 251: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_investment_restrictions_other:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 252: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_income_calculation_and_distribution_not_processed_according_to_prospectus:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 253: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_income_calculation_and_distribution_qualified_audit_opinion:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 254: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.escalation_on_oversight_of_income_calculation_and_distribution_other:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 255: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM.management_notified_of_any_escalation_from_depositary_to_ifm_any_other_irregularities:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 256: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.reconciliation_process_against_depositary_records_in_place:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 257: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_reconciliations:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 258: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_reconciliations_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 259: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.reconciliations_performed_on_ongoing_basis_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 260: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.all_reconciliation_differences_resolved:type_name -> standards.open.v1.RT000D034.YesNoExplain
	10,  // 261: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.assets_no_held_in_custody:type_name -> standards.open.v1.RT000D034.FundSpecificExplanation
	11,  // 262: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.reconciliation_process_against_depositary_records_in_place_for_assets_held_with_third_party_custodian:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 263: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_third_party_custodian_reconciliations:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 264: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_third_party_custodian_reconciliations_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 265: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.third_party_custodian_reconciliations_performed_on_ongoing_basis_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 266: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.all_identified_differences_in_third_party_custodian_reconciliations_resolved:type_name -> standards.open.v1.RT000D034.YesNoExplain
	44,  // 267: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.asset_types_not_held_with_third_party_custodian:type_name -> standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.AssetTypeAndDetails
	11,  // 268: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.appropriate_other_asset_registration_process_in_place:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 269: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.periodical_ownership_verification_based_on_reliable_independent_sources_has_been_performed_for_other_assets:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 270: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_periodical_ownership_verifications:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 271: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_periodical_ownership_verifications_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 272: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.periodical_ownership_verification_based_on_reliable_independent_sources_has_been_performed_for_non_financial_other_assets:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 273: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_periodical_ownership_verifications_for_non_financial_other_assets:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 274: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_periodical_ownership_verifications_for_non_financial_other_assets_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 275: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.all_differences_identified_by_periodical_ownership_verifications_explained:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 276: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.process_in_place_to_ensure_consistency_of_fund_and_depository_records:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 277: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_consistency_controls_for_other_financial_assets:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 278: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_consistency_controls_consistent_with_nav_frequency:type_name -> standards.open.v1.RT000D034.YesNoExplain
	0,   // 279: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.frequency_of_consistency_controls_for_other_non_financial_assets:type_name -> standards.open.v1.RT000D034.Frequency
	11,  // 280: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.all_differences_identified_consistency_controls_explained:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 281: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.depository_confirmed_all_other_assets:type_name -> standards.open.v1.RT000D034.YesNoExplain
	11,  // 282: standards.open.v1.RT000D034.DepositaryRelationship.DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs.management_notified_about_any_escalation_from_depository_to_ifm_or_fund:type_name -> standards.open.v1.RT000D034.YesNoExplain
	283, // [283:283] is the sub-list for method output_type
	283, // [283:283] is the sub-list for method input_type
	283, // [283:283] is the sub-list for extension type_name
	283, // [283:283] is the sub-list for extension extendee
	0,   // [0:283] is the sub-list for field type_name
}

func init() { file_RT000D034_proto_init() }
func file_RT000D034_proto_init() {
	if File_RT000D034_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RT000D034_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_FundSpecificExplanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_YesNoExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Manager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_DescriptiveFundInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Organisation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_InvestmentCompliance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_NAVDeterminiation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_ExpensesAndIncome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_DepositaryRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_InvestmentCompliance_NotVerifiedInvestmentRestrictionsByFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsSIF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsMMF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_InvestmentCompliance_LegalAndRegulatoryRestrictionsUCITS_TrashRatioByFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_MMF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation_InstrumentTypesValuedAtLowerThanNavFrequencyByFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation_MaxMinExposureByFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation_FundSpecificExplanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation_InvestmentDetailsByFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirementsUCITS_ProportionOfNavValuedByModelByFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_Valuation_LegalAndRegulatoryValuationRequirements_UCI_SIF_SICAR_MaxMinExposureByFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_NAVDeterminiation_FundInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_NAVDeterminiation_NumberOfTransactionsByFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_ExpensesAndIncome_FundSpecificCostOrFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_ExpensesAndIncome_CostOrFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_ExpensesAndIncome_ExpenseRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_ExpensesAndIncome_MaterialIncreaseInFundExpenses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_ExpensesAndIncome_FundSpecificTransactionCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_ExpensesAndIncome_FundSpecificPerformanceCharges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_DepositaryRelationship_DepositaryRelationshipUCITSandRegulatedAIFsWithAIFM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT000D034_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000D034_DepositaryRelationship_DepositaryRelationshipRegulatedAIFsRegisteredAIFMAndRegulatedNonAIFs_AssetTypeAndDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RT000D034_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RT000D034_proto_goTypes,
		DependencyIndexes: file_RT000D034_proto_depIdxs,
		EnumInfos:         file_RT000D034_proto_enumTypes,
		MessageInfos:      file_RT000D034_proto_msgTypes,
	}.Build()
	File_RT000D034_proto = out.File
	file_RT000D034_proto_rawDesc = nil
	file_RT000D034_proto_goTypes = nil
	file_RT000D034_proto_depIdxs = nil
}
