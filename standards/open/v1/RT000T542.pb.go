// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/RT000T542.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	_ "google.golang.org/genproto/googleapis/type/month"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of metricIDs
type RT000T542_Metric_MetricID int32

const (
	// The enumeration of the metrics measured
	RT000T542_Metric_METRIC_ID_UNSPECIFIED RT000T542_Metric_MetricID = 0
	// Total number of transactions settled during the month (core + corporate action + other)
	RT000T542_Metric_TRANSACTIONS_PROCESSED RT000T542_Metric_MetricID = 1
	// The number of financial transactions processed (e.g. subscriptions, redemptions, switches in/out, dividend- and trailer fees reinvestments)
	RT000T542_Metric_CORE_TRANSACTIONS_PROCESSED RT000T542_Metric_MetricID = 2
	// The number of corporate action transactions processed (e.g. cash dividends)
	RT000T542_Metric_CORPORATE_ACTION_FINANCIAL_TRANSACTIONS_PROCESSED RT000T542_Metric_MetricID = 3
	// Other transactions (e.g stock transfers)
	RT000T542_Metric_OTHER_TRANSACTIONS_PROCESSED RT000T542_Metric_MetricID = 4
	// The aggregate STP rate across all transactions
	RT000T542_Metric_AGGREGATE_TRANSACTIONS_STP_RATE RT000T542_Metric_MetricID = 5
	// The number of STP transactions processed (transactions that came across via an automated method versus manual
	// for example fax/post..etc)
	RT000T542_Metric_CORE_TRANSACTIONS_STP_RATE RT000T542_Metric_MetricID = 6
	// The STP transaction rate (stp_transactions_processed / transactions_processed)
	RT000T542_Metric_CORPORATE_ACTION_TRANSACTIONS_STP_RATE RT000T542_Metric_MetricID = 7
	// The total value of net in/outflows in the currency units of the metric subject
	RT000T542_Metric_NET_FLOWS RT000T542_Metric_MetricID = 8
	// Number of transactions processed correctly as a percentage of total number of TA transactions settled during the reporting month.
	RT000T542_Metric_TRANSACTION_PROCESSING_ACCURACY RT000T542_Metric_MetricID = 9
	// The total number of transactional errors
	RT000T542_Metric_TRANSACTIONAL_ERRORS RT000T542_Metric_MetricID = 10
	// The total number of operational errors
	RT000T542_Metric_OPERATIONAL_ERRORS RT000T542_Metric_MetricID = 11
	// Value of errors in the reporting currency
	RT000T542_Metric_VALUE_OF_ERRORS_REPORTING_CURRENCY RT000T542_Metric_MetricID = 12
	// The number of complaints in the reporting period
	RT000T542_Metric_NUMBER_OF_COMPLAINTS RT000T542_Metric_MetricID = 13
	// The number of complaints upheld
	RT000T542_Metric_NUMBER_OF_UPHELD_COMPLAINTS RT000T542_Metric_MetricID = 14
	// The total number of accounts
	RT000T542_Metric_NUMBER_OF_ACCOUNTS RT000T542_Metric_MetricID = 15
	// Total percentage of accounts with balances
	RT000T542_Metric_PERCENTAGE_ACCOUNTS_WITH_BALANCES RT000T542_Metric_MetricID = 16
	// The percentage of accounts in good order at the end of the reporting period
	RT000T542_Metric_PERCENTAGE_ACCOUNTS_IN_GOOD_ORDER RT000T542_Metric_MetricID = 17
	// The percentage of large trade reports sent within the agreed timeframe
	RT000T542_Metric_INVESTOR_REPORTS_TIMELINESS RT000T542_Metric_MetricID = 18
	// Number of phone calls processed
	RT000T542_Metric_NUMBER_OF_PHONE_CALLS_PROCESSED RT000T542_Metric_MetricID = 19
	// Number of email queries processed
	RT000T542_Metric_NUMBER_OF_EMAIL_QUERIES_PROCESSED RT000T542_Metric_MetricID = 20
	// The percentage of calls that were abandoned
	RT000T542_Metric_ABANDON_RATE RT000T542_Metric_MetricID = 21
	// The average amount of time (seconds) taken to respond to an email query
	RT000T542_Metric_AVERAGE_EMAIL_QUERY_TIME RT000T542_Metric_MetricID = 22
	// The average amount of time (seconds) taken to respond to an phone query
	RT000T542_Metric_AVERAGE_PHONE_QUERY_TIME RT000T542_Metric_MetricID = 23
	// The rate at which email response timeliness met agreed service level thresholds
	RT000T542_Metric_EMAIL_QUERY_TIMELINESS_RATE RT000T542_Metric_MetricID = 24
	// The rate at which email response timeliness met agreed service level thresholds
	RT000T542_Metric_PHONE_QUERY_TIMELINESS_RATE RT000T542_Metric_MetricID = 25
	// Number of system issues that occurred during the month.
	RT000T542_Metric_SYSTEM_ISSUES RT000T542_Metric_MetricID = 26
	// The self-assessment rating of the provider (typically on a scale of 1 - below expectations to 9 - well above expectations)
	RT000T542_Metric_PROVIDER_SELF_ASSESSMENT RT000T542_Metric_MetricID = 27
	// The service assessment rating of the customer (typically on a scale of 1 - below expectations to 9 - well above expectations)
	RT000T542_Metric_CUSTOMER_SERVICE_ASSESSMENT RT000T542_Metric_MetricID = 28
	// The net asset value at the end of the period in reporting currency
	RT000T542_Metric_NET_ASSET_VALUE_REPORTING_CURRENCY RT000T542_Metric_MetricID = 29
	// The net asset value at the end of the period in subject currency
	RT000T542_Metric_NET_ASSET_VALUE_SUBJECT_CURRENCY RT000T542_Metric_MetricID = 30
	// Number of new investor accounts registered during the reporting period
	RT000T542_Metric_NEW_INVESTOR_ACCOUNTS RT000T542_Metric_MetricID = 31
	// Number of new investor accounts registered classifying as high risk
	RT000T542_Metric_NEW_HIGH_RISK_INVESTOR_ACCOUNTS RT000T542_Metric_MetricID = 32
	// Total number of investor accounts classified as high risk
	RT000T542_Metric_HIGH_RISK_ACCOUNTS RT000T542_Metric_MetricID = 33
	// Total number of PEP accounts
	RT000T542_Metric_PEP_ACCOUNTS RT000T542_Metric_MetricID = 34
	// Total number of dormant accounts
	RT000T542_Metric_DORMANT_ACCOUNTS RT000T542_Metric_MetricID = 35
	// Number of unusual or suspicious activity exceptions raised to Manco
	RT000T542_Metric_SUSPICIOUS_ACTIVITY_EXCEPTIONS_RAISED RT000T542_Metric_MetricID = 36
	// Number of sanctions screening exceptions raised to Manco
	RT000T542_Metric_SANCTIONS_SCREENING_EXCEPTIONS_RAISED RT000T542_Metric_MetricID = 37
	// Number of negative media screening exceptions raised to Manco
	RT000T542_Metric_NEGATIVE_MEDIA_SCREENING_EXCEPTIONS_RAISED RT000T542_Metric_MetricID = 38
	// Number of AML or financial crime exceptions
	RT000T542_Metric_AML_OR_FINANCIAL_CRIME_EXCEPTIONS_RAISED RT000T542_Metric_MetricID = 39
	// Total number of blocked accounts
	RT000T542_Metric_BLOCKED_ACCOUNTS RT000T542_Metric_MetricID = 40
	// Total number of accounts blocked for AML reasons
	RT000T542_Metric_BLOCKED_ACCOUNTS_AML RT000T542_Metric_MetricID = 41
	// Total number of accounts restricted for sanctions reasons (Cuba/Iran/Syria etc)
	RT000T542_Metric_RESTRICTED_ACCOUNTS_SANCTIONS RT000T542_Metric_MetricID = 42
	// The number of investor payments made
	RT000T542_Metric_INVESTOR_PAYMENTS RT000T542_Metric_MetricID = 43
	// The accuracy of investor payments
	RT000T542_Metric_INVESTOR_PAYMENTS_ACCURACY RT000T542_Metric_MetricID = 44
	// The timeliness of investor payments
	RT000T542_Metric_INVESTOR_PAYMENTS_TIMELINESS RT000T542_Metric_MetricID = 45
	// The number of dividend payouts
	RT000T542_Metric_DIVIDEND_PAYOUTS RT000T542_Metric_MetricID = 46
	// The accuracy of dividend payouts
	RT000T542_Metric_DIVIDEND_PAYOUT_ACCURACY RT000T542_Metric_MetricID = 47
	// The timeliness of dividend payouts
	RT000T542_Metric_DIVIDEND_PAYOUT_TIMELINESS RT000T542_Metric_MetricID = 48
	// The number of commission and trailer fee payments
	RT000T542_Metric_COMMISSION_AND_TRAILER_FEE_PAYMENTS RT000T542_Metric_MetricID = 49
	// The accuracy of commission and trailer fee payments
	RT000T542_Metric_COMMISSION_AND_TRAILER_FEE_PAYMENTS_ACCURACY RT000T542_Metric_MetricID = 50
	// The timeliness of commission and trailer fee payments
	RT000T542_Metric_COMMISSION_AND_TRAILER_FEE_PAYMENTS_TIMELINESS RT000T542_Metric_MetricID = 51
	// The percentage of new account openings completed without error
	RT000T542_Metric_NEW_ACCOUNT_OPENING_ACCURACY RT000T542_Metric_MetricID = 52
	// The percentage of new account openings within SLA
	RT000T542_Metric_NEW_ACCOUNT_OPENING_TIMELINESS RT000T542_Metric_MetricID = 53
	// The number of new agent / distributor onboardings that occurred in the period
	RT000T542_Metric_NEW_AGENTS_OR_DISTRIBUTORS RT000T542_Metric_MetricID = 54
	// The percentage of new agent / distributor onboardings that occurred without error
	RT000T542_Metric_NEW_AGENTS_OR_DISTRIBUTOR_ACCURACY RT000T542_Metric_MetricID = 55
	// The percentage of new agent / distributor onboardings that occurred within the SLA
	RT000T542_Metric_NEW_AGENTS_OR_DISTRIBUTOR_TIMELINESS RT000T542_Metric_MetricID = 56
	// The total number of reportable data breaches that occurred
	RT000T542_Metric_REPORTABLE_DATA_BREACHES RT000T542_Metric_MetricID = 57
	// The total number of non-reportable data breaches
	RT000T542_Metric_NON_REPORTABLE_DATA_BREACHES RT000T542_Metric_MetricID = 58
	// The total number of reports provided in the reporting period
	RT000T542_Metric_REPORTS_SENT RT000T542_Metric_MetricID = 101
	// The percentage of all reports delivered without error
	RT000T542_Metric_REPORTS_ACCURACY RT000T542_Metric_MetricID = 102
	// The percentage of all reports within the agreed timeframe
	RT000T542_Metric_REPORTS_TIMELINESS RT000T542_Metric_MetricID = 103
	// The number of estimate reports provided in the reporting period
	RT000T542_Metric_ESTIMATE_REPORTS RT000T542_Metric_MetricID = 104
	// The percentage of estimate reports delivered without error
	RT000T542_Metric_ESTIMATE_REPORTS_ACCURACY RT000T542_Metric_MetricID = 105
	// The percentage of estimate reports within the agreed timeframe
	RT000T542_Metric_ESTIMATE_REPORTS_TIMELINESS RT000T542_Metric_MetricID = 106
	// The number of confirmed reports provided in the reporting period
	RT000T542_Metric_CONFIRMED_REPORTS RT000T542_Metric_MetricID = 107
	// The percentage of confirmed reports delivered without error
	RT000T542_Metric_CONFIRMED_REPORTS_ACCURACY RT000T542_Metric_MetricID = 108
	// The percentage of confirmed reports within the agreed timeframe
	RT000T542_Metric_CONFIRMED_REPORTS_TIMELINESS RT000T542_Metric_MetricID = 109
	// The number of large trade reports sent
	RT000T542_Metric_LARGE_TRADE_REPORTS RT000T542_Metric_MetricID = 110
	// The number of large trade reports sent without error
	RT000T542_Metric_LARGE_TRADE_REPORTS_ACCURACY RT000T542_Metric_MetricID = 111
	// The number of large trade reports sent within the agreed timeframe
	RT000T542_Metric_LARGE_TRADE_REPORTS_TIMELINESS RT000T542_Metric_MetricID = 112
	// The number of investor reports sent
	RT000T542_Metric_INVESTOR_REPORTS RT000T542_Metric_MetricID = 113
	// The number of large trade reports sent without error
	RT000T542_Metric_INVESTOR_REPORTS_ACCURACY RT000T542_Metric_MetricID = 114
	// The number of contract notes
	RT000T542_Metric_CONTRACT_NOTES_SENT RT000T542_Metric_MetricID = 115
	// The accuracy of contract notes sent
	RT000T542_Metric_CONTRACT_NOTE_ACCURACY RT000T542_Metric_MetricID = 116
	// The timeliness of contract notes sent
	RT000T542_Metric_CONTRACT_NOTE_TIMELINESS RT000T542_Metric_MetricID = 117
	// The number of monthly statements sent
	RT000T542_Metric_MONTHLY_STATEMENTS_SENT RT000T542_Metric_MetricID = 118
	// The accuracy of monthly statements sent
	RT000T542_Metric_MONTHLY_STATEMENTS_ACCURACY RT000T542_Metric_MetricID = 119
	// The timeliness of monthly statements sent
	RT000T542_Metric_MONTHLY_STATEMENTS_TIMELINESS RT000T542_Metric_MetricID = 120
	// The number of estimate cash reports provided in the reporting period
	RT000T542_Metric_ESTIMATE_CASH_REPORTS RT000T542_Metric_MetricID = 121
	// The percentage of estimate cash reports provided in the reporting period without error
	RT000T542_Metric_ESTIMATE_CASH_REPORTS_ACCURACY RT000T542_Metric_MetricID = 122
	// The percentage of timeliness of estimate cash reports provided in the reporting period
	RT000T542_Metric_ESTIMATE_CASH_REPORTS_TIMELINESS RT000T542_Metric_MetricID = 123
	// The number of accounts with balances
	RT000T542_Metric_NUMBER_OF_ACCOUNTS_WITH_BALANCES RT000T542_Metric_MetricID = 124
)

// Enum value maps for RT000T542_Metric_MetricID.
var (
	RT000T542_Metric_MetricID_name = map[int32]string{
		0:   "METRIC_ID_UNSPECIFIED",
		1:   "TRANSACTIONS_PROCESSED",
		2:   "CORE_TRANSACTIONS_PROCESSED",
		3:   "CORPORATE_ACTION_FINANCIAL_TRANSACTIONS_PROCESSED",
		4:   "OTHER_TRANSACTIONS_PROCESSED",
		5:   "AGGREGATE_TRANSACTIONS_STP_RATE",
		6:   "CORE_TRANSACTIONS_STP_RATE",
		7:   "CORPORATE_ACTION_TRANSACTIONS_STP_RATE",
		8:   "NET_FLOWS",
		9:   "TRANSACTION_PROCESSING_ACCURACY",
		10:  "TRANSACTIONAL_ERRORS",
		11:  "OPERATIONAL_ERRORS",
		12:  "VALUE_OF_ERRORS_REPORTING_CURRENCY",
		13:  "NUMBER_OF_COMPLAINTS",
		14:  "NUMBER_OF_UPHELD_COMPLAINTS",
		15:  "NUMBER_OF_ACCOUNTS",
		16:  "PERCENTAGE_ACCOUNTS_WITH_BALANCES",
		17:  "PERCENTAGE_ACCOUNTS_IN_GOOD_ORDER",
		18:  "INVESTOR_REPORTS_TIMELINESS",
		19:  "NUMBER_OF_PHONE_CALLS_PROCESSED",
		20:  "NUMBER_OF_EMAIL_QUERIES_PROCESSED",
		21:  "ABANDON_RATE",
		22:  "AVERAGE_EMAIL_QUERY_TIME",
		23:  "AVERAGE_PHONE_QUERY_TIME",
		24:  "EMAIL_QUERY_TIMELINESS_RATE",
		25:  "PHONE_QUERY_TIMELINESS_RATE",
		26:  "SYSTEM_ISSUES",
		27:  "PROVIDER_SELF_ASSESSMENT",
		28:  "CUSTOMER_SERVICE_ASSESSMENT",
		29:  "NET_ASSET_VALUE_REPORTING_CURRENCY",
		30:  "NET_ASSET_VALUE_SUBJECT_CURRENCY",
		31:  "NEW_INVESTOR_ACCOUNTS",
		32:  "NEW_HIGH_RISK_INVESTOR_ACCOUNTS",
		33:  "HIGH_RISK_ACCOUNTS",
		34:  "PEP_ACCOUNTS",
		35:  "DORMANT_ACCOUNTS",
		36:  "SUSPICIOUS_ACTIVITY_EXCEPTIONS_RAISED",
		37:  "SANCTIONS_SCREENING_EXCEPTIONS_RAISED",
		38:  "NEGATIVE_MEDIA_SCREENING_EXCEPTIONS_RAISED",
		39:  "AML_OR_FINANCIAL_CRIME_EXCEPTIONS_RAISED",
		40:  "BLOCKED_ACCOUNTS",
		41:  "BLOCKED_ACCOUNTS_AML",
		42:  "RESTRICTED_ACCOUNTS_SANCTIONS",
		43:  "INVESTOR_PAYMENTS",
		44:  "INVESTOR_PAYMENTS_ACCURACY",
		45:  "INVESTOR_PAYMENTS_TIMELINESS",
		46:  "DIVIDEND_PAYOUTS",
		47:  "DIVIDEND_PAYOUT_ACCURACY",
		48:  "DIVIDEND_PAYOUT_TIMELINESS",
		49:  "COMMISSION_AND_TRAILER_FEE_PAYMENTS",
		50:  "COMMISSION_AND_TRAILER_FEE_PAYMENTS_ACCURACY",
		51:  "COMMISSION_AND_TRAILER_FEE_PAYMENTS_TIMELINESS",
		52:  "NEW_ACCOUNT_OPENING_ACCURACY",
		53:  "NEW_ACCOUNT_OPENING_TIMELINESS",
		54:  "NEW_AGENTS_OR_DISTRIBUTORS",
		55:  "NEW_AGENTS_OR_DISTRIBUTOR_ACCURACY",
		56:  "NEW_AGENTS_OR_DISTRIBUTOR_TIMELINESS",
		57:  "REPORTABLE_DATA_BREACHES",
		58:  "NON_REPORTABLE_DATA_BREACHES",
		101: "REPORTS_SENT",
		102: "REPORTS_ACCURACY",
		103: "REPORTS_TIMELINESS",
		104: "ESTIMATE_REPORTS",
		105: "ESTIMATE_REPORTS_ACCURACY",
		106: "ESTIMATE_REPORTS_TIMELINESS",
		107: "CONFIRMED_REPORTS",
		108: "CONFIRMED_REPORTS_ACCURACY",
		109: "CONFIRMED_REPORTS_TIMELINESS",
		110: "LARGE_TRADE_REPORTS",
		111: "LARGE_TRADE_REPORTS_ACCURACY",
		112: "LARGE_TRADE_REPORTS_TIMELINESS",
		113: "INVESTOR_REPORTS",
		114: "INVESTOR_REPORTS_ACCURACY",
		115: "CONTRACT_NOTES_SENT",
		116: "CONTRACT_NOTE_ACCURACY",
		117: "CONTRACT_NOTE_TIMELINESS",
		118: "MONTHLY_STATEMENTS_SENT",
		119: "MONTHLY_STATEMENTS_ACCURACY",
		120: "MONTHLY_STATEMENTS_TIMELINESS",
		121: "ESTIMATE_CASH_REPORTS",
		122: "ESTIMATE_CASH_REPORTS_ACCURACY",
		123: "ESTIMATE_CASH_REPORTS_TIMELINESS",
		124: "NUMBER_OF_ACCOUNTS_WITH_BALANCES",
	}
	RT000T542_Metric_MetricID_value = map[string]int32{
		"METRIC_ID_UNSPECIFIED":                             0,
		"TRANSACTIONS_PROCESSED":                            1,
		"CORE_TRANSACTIONS_PROCESSED":                       2,
		"CORPORATE_ACTION_FINANCIAL_TRANSACTIONS_PROCESSED": 3,
		"OTHER_TRANSACTIONS_PROCESSED":                      4,
		"AGGREGATE_TRANSACTIONS_STP_RATE":                   5,
		"CORE_TRANSACTIONS_STP_RATE":                        6,
		"CORPORATE_ACTION_TRANSACTIONS_STP_RATE":            7,
		"NET_FLOWS":                                         8,
		"TRANSACTION_PROCESSING_ACCURACY":                   9,
		"TRANSACTIONAL_ERRORS":                              10,
		"OPERATIONAL_ERRORS":                                11,
		"VALUE_OF_ERRORS_REPORTING_CURRENCY":                12,
		"NUMBER_OF_COMPLAINTS":                              13,
		"NUMBER_OF_UPHELD_COMPLAINTS":                       14,
		"NUMBER_OF_ACCOUNTS":                                15,
		"PERCENTAGE_ACCOUNTS_WITH_BALANCES":                 16,
		"PERCENTAGE_ACCOUNTS_IN_GOOD_ORDER":                 17,
		"INVESTOR_REPORTS_TIMELINESS":                       18,
		"NUMBER_OF_PHONE_CALLS_PROCESSED":                   19,
		"NUMBER_OF_EMAIL_QUERIES_PROCESSED":                 20,
		"ABANDON_RATE":                                      21,
		"AVERAGE_EMAIL_QUERY_TIME":                          22,
		"AVERAGE_PHONE_QUERY_TIME":                          23,
		"EMAIL_QUERY_TIMELINESS_RATE":                       24,
		"PHONE_QUERY_TIMELINESS_RATE":                       25,
		"SYSTEM_ISSUES":                                     26,
		"PROVIDER_SELF_ASSESSMENT":                          27,
		"CUSTOMER_SERVICE_ASSESSMENT":                       28,
		"NET_ASSET_VALUE_REPORTING_CURRENCY":                29,
		"NET_ASSET_VALUE_SUBJECT_CURRENCY":                  30,
		"NEW_INVESTOR_ACCOUNTS":                             31,
		"NEW_HIGH_RISK_INVESTOR_ACCOUNTS":                   32,
		"HIGH_RISK_ACCOUNTS":                                33,
		"PEP_ACCOUNTS":                                      34,
		"DORMANT_ACCOUNTS":                                  35,
		"SUSPICIOUS_ACTIVITY_EXCEPTIONS_RAISED":             36,
		"SANCTIONS_SCREENING_EXCEPTIONS_RAISED":             37,
		"NEGATIVE_MEDIA_SCREENING_EXCEPTIONS_RAISED":        38,
		"AML_OR_FINANCIAL_CRIME_EXCEPTIONS_RAISED":          39,
		"BLOCKED_ACCOUNTS":                                  40,
		"BLOCKED_ACCOUNTS_AML":                              41,
		"RESTRICTED_ACCOUNTS_SANCTIONS":                     42,
		"INVESTOR_PAYMENTS":                                 43,
		"INVESTOR_PAYMENTS_ACCURACY":                        44,
		"INVESTOR_PAYMENTS_TIMELINESS":                      45,
		"DIVIDEND_PAYOUTS":                                  46,
		"DIVIDEND_PAYOUT_ACCURACY":                          47,
		"DIVIDEND_PAYOUT_TIMELINESS":                        48,
		"COMMISSION_AND_TRAILER_FEE_PAYMENTS":               49,
		"COMMISSION_AND_TRAILER_FEE_PAYMENTS_ACCURACY":      50,
		"COMMISSION_AND_TRAILER_FEE_PAYMENTS_TIMELINESS":    51,
		"NEW_ACCOUNT_OPENING_ACCURACY":                      52,
		"NEW_ACCOUNT_OPENING_TIMELINESS":                    53,
		"NEW_AGENTS_OR_DISTRIBUTORS":                        54,
		"NEW_AGENTS_OR_DISTRIBUTOR_ACCURACY":                55,
		"NEW_AGENTS_OR_DISTRIBUTOR_TIMELINESS":              56,
		"REPORTABLE_DATA_BREACHES":                          57,
		"NON_REPORTABLE_DATA_BREACHES":                      58,
		"REPORTS_SENT":                                      101,
		"REPORTS_ACCURACY":                                  102,
		"REPORTS_TIMELINESS":                                103,
		"ESTIMATE_REPORTS":                                  104,
		"ESTIMATE_REPORTS_ACCURACY":                         105,
		"ESTIMATE_REPORTS_TIMELINESS":                       106,
		"CONFIRMED_REPORTS":                                 107,
		"CONFIRMED_REPORTS_ACCURACY":                        108,
		"CONFIRMED_REPORTS_TIMELINESS":                      109,
		"LARGE_TRADE_REPORTS":                               110,
		"LARGE_TRADE_REPORTS_ACCURACY":                      111,
		"LARGE_TRADE_REPORTS_TIMELINESS":                    112,
		"INVESTOR_REPORTS":                                  113,
		"INVESTOR_REPORTS_ACCURACY":                         114,
		"CONTRACT_NOTES_SENT":                               115,
		"CONTRACT_NOTE_ACCURACY":                            116,
		"CONTRACT_NOTE_TIMELINESS":                          117,
		"MONTHLY_STATEMENTS_SENT":                           118,
		"MONTHLY_STATEMENTS_ACCURACY":                       119,
		"MONTHLY_STATEMENTS_TIMELINESS":                     120,
		"ESTIMATE_CASH_REPORTS":                             121,
		"ESTIMATE_CASH_REPORTS_ACCURACY":                    122,
		"ESTIMATE_CASH_REPORTS_TIMELINESS":                  123,
		"NUMBER_OF_ACCOUNTS_WITH_BALANCES":                  124,
	}
)

func (x RT000T542_Metric_MetricID) Enum() *RT000T542_Metric_MetricID {
	p := new(RT000T542_Metric_MetricID)
	*p = x
	return p
}

func (x RT000T542_Metric_MetricID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000T542_Metric_MetricID) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000T542_proto_enumTypes[0].Descriptor()
}

func (RT000T542_Metric_MetricID) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000T542_proto_enumTypes[0]
}

func (x RT000T542_Metric_MetricID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000T542_Metric_MetricID.Descriptor instead.
func (RT000T542_Metric_MetricID) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000T542_proto_rawDescGZIP(), []int{0, 0, 0}
}

// The type of value used to measure the metric
type RT000T542_Metric_ValueType int32

const (
	RT000T542_Metric_METRIC_TYPE_UNSPECIFIED RT000T542_Metric_ValueType = 0
	RT000T542_Metric_NUMBER                  RT000T542_Metric_ValueType = 1
	RT000T542_Metric_PERCENTAGE              RT000T542_Metric_ValueType = 2
	RT000T542_Metric_CURRENCY                RT000T542_Metric_ValueType = 3
)

// Enum value maps for RT000T542_Metric_ValueType.
var (
	RT000T542_Metric_ValueType_name = map[int32]string{
		0: "METRIC_TYPE_UNSPECIFIED",
		1: "NUMBER",
		2: "PERCENTAGE",
		3: "CURRENCY",
	}
	RT000T542_Metric_ValueType_value = map[string]int32{
		"METRIC_TYPE_UNSPECIFIED": 0,
		"NUMBER":                  1,
		"PERCENTAGE":              2,
		"CURRENCY":                3,
	}
)

func (x RT000T542_Metric_ValueType) Enum() *RT000T542_Metric_ValueType {
	p := new(RT000T542_Metric_ValueType)
	*p = x
	return p
}

func (x RT000T542_Metric_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000T542_Metric_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000T542_proto_enumTypes[1].Descriptor()
}

func (RT000T542_Metric_ValueType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000T542_proto_enumTypes[1]
}

func (x RT000T542_Metric_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000T542_Metric_ValueType.Descriptor instead.
func (RT000T542_Metric_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000T542_proto_rawDescGZIP(), []int{0, 0, 1}
}

// Options for how to evaluate the metric
type RT000T542_Metric_EvaluationType int32

const (
	RT000T542_Metric_EVALUATION_TYPE_UNSPECIFIED RT000T542_Metric_EvaluationType = 0
	// A higher result is more favorable
	RT000T542_Metric_MAXIMISE RT000T542_Metric_EvaluationType = 1
	// A lower result is more favorable
	RT000T542_Metric_MINIMISE RT000T542_Metric_EvaluationType = 2
)

// Enum value maps for RT000T542_Metric_EvaluationType.
var (
	RT000T542_Metric_EvaluationType_name = map[int32]string{
		0: "EVALUATION_TYPE_UNSPECIFIED",
		1: "MAXIMISE",
		2: "MINIMISE",
	}
	RT000T542_Metric_EvaluationType_value = map[string]int32{
		"EVALUATION_TYPE_UNSPECIFIED": 0,
		"MAXIMISE":                    1,
		"MINIMISE":                    2,
	}
)

func (x RT000T542_Metric_EvaluationType) Enum() *RT000T542_Metric_EvaluationType {
	p := new(RT000T542_Metric_EvaluationType)
	*p = x
	return p
}

func (x RT000T542_Metric_EvaluationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000T542_Metric_EvaluationType) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000T542_proto_enumTypes[2].Descriptor()
}

func (RT000T542_Metric_EvaluationType) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000T542_proto_enumTypes[2]
}

func (x RT000T542_Metric_EvaluationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000T542_Metric_EvaluationType.Descriptor instead.
func (RT000T542_Metric_EvaluationType) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000T542_proto_rawDescGZIP(), []int{0, 0, 2}
}

// UCITS Transfer Agency KPI and MI Data Exchange Template
type RT000T542 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KPIs & other key quantitative metrics
	Metrics []*RT000T542_Metric `protobuf:"bytes,20,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *RT000T542) Reset() {
	*x = RT000T542{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000T542_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000T542) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000T542) ProtoMessage() {}

func (x *RT000T542) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000T542_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000T542.ProtoReflect.Descriptor instead.
func (*RT000T542) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000T542_proto_rawDescGZIP(), []int{0}
}

func (x *RT000T542) GetMetrics() []*RT000T542_Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Definition of a metric
type RT000T542_Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date the metric was produced
	ProductionDate *date.Date `protobuf:"bytes,1,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
	// The start date of the reporting period of the metric (inclusive)
	// For example, if the metric measures data for the month of December 2022, 2022-12-01
	ReportingPeriodStart *date.Date `protobuf:"bytes,2,opt,name=reporting_period_start,json=reportingPeriodStart,proto3" json:"reporting_period_start,omitempty"`
	// The end date of the reporting period of the metric (inclusive)
	// For example, if the metric measures data for the month of December 2022, 2022-12-01
	ReportingPeriodEnd *date.Date `protobuf:"bytes,3,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
	// The relevant identifier of the umbrella
	UmbrellaFundIdentifier string `protobuf:"bytes,4,opt,name=umbrella_fund_identifier,json=umbrellaFundIdentifier,proto3" json:"umbrella_fund_identifier,omitempty"`
	// The name of the umbrella
	// Should conform to: https://openfunds.org/OFST005010 (Umbrella)
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	UmbrellaFund string `protobuf:"bytes,5,opt,name=umbrella_fund,json=umbrellaFund,proto3" json:"umbrella_fund,omitempty"`
	// The relevant identifier of the fund
	FundIdentifier string `protobuf:"bytes,6,opt,name=fund_identifier,json=fundIdentifier,proto3" json:"fund_identifier,omitempty"`
	// The name of the fund (typically the sub-fund fund or standalone fund) that holds the security
	// Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
	// Refers to the Sub-Fund in the case of an umbrella structure
	// or Fund in the case of a standalone structure
	// See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
	Fund string `protobuf:"bytes,7,opt,name=fund,proto3" json:"fund,omitempty"`
	// The identifier of what the metric measures
	MetricId RT000T542_Metric_MetricID `protobuf:"varint,8,opt,name=metric_id,json=metricId,proto3,enum=standards.open.v1.RT000T542_Metric_MetricID" json:"metric_id,omitempty"`
	// Enumeration for how to interpret the metric value
	ValueType RT000T542_Metric_ValueType `protobuf:"varint,9,opt,name=value_type,json=valueType,proto3,enum=standards.open.v1.RT000T542_Metric_ValueType" json:"value_type,omitempty"`
	// If the metric type is "CURRENCY" then a 3-letter currency code defined in ISO 4217 must be provided.
	// The country code is required to comply with the 3-letter ISO 3166-1 alpha-3 standard.
	// The ISO 3166-1 alpha-3 is a set of 3-letter country codes to represent countries and dependent areas.
	// Make sure the provided country code is in uppercase.
	// Example: 'USA' for the United States, 'GBR' for Great Britain, 'DEU' for Germany, etc.
	CurrencyCode string `protobuf:"bytes,10,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// The value of the metric
	Metric float64 `protobuf:"fixed64,11,opt,name=metric,proto3" json:"metric,omitempty"`
	// How to evaluate the metric (i.e. is a higher or lower value more favorable)
	EvaluationType RT000T542_Metric_EvaluationType `protobuf:"varint,12,opt,name=evaluation_type,json=evaluationType,proto3,enum=standards.open.v1.RT000T542_Metric_EvaluationType" json:"evaluation_type,omitempty"`
	// The "RED/AMBER/GREEN" designation if applicable
	Rag RedAmberGreen `protobuf:"varint,13,opt,name=rag,proto3,enum=standards.open.v1.RedAmberGreen" json:"rag,omitempty"`
	// The amber cutoff (i.e. the value above which the metric is no longer classified as "RED") if applicable
	AmberCutoff float64 `protobuf:"fixed64,14,opt,name=amber_cutoff,json=amberCutoff,proto3" json:"amber_cutoff,omitempty"`
	// The green cutoff (i.e. the value above which the metric is no longer classified as "AMBER")  if applicable
	GreenCutoff float64 `protobuf:"fixed64,15,opt,name=green_cutoff,json=greenCutoff,proto3" json:"green_cutoff,omitempty"`
	// Optional. The name of the provider
	Provider string `protobuf:"bytes,20,opt,name=provider,proto3" json:"provider,omitempty"`
	// Optional. The metric ID used by the provider
	ProviderMetricId string `protobuf:"bytes,21,opt,name=provider_metric_id,json=providerMetricId,proto3" json:"provider_metric_id,omitempty"`
	// Optional. The KPI name used by the provider
	ProviderMetricName string `protobuf:"bytes,22,opt,name=provider_metric_name,json=providerMetricName,proto3" json:"provider_metric_name,omitempty"`
	// Optional. General comments related to the metric
	GeneralCommentary string `protobuf:"bytes,81,opt,name=general_commentary,json=generalCommentary,proto3" json:"general_commentary,omitempty"`
	// Optional. Comments on the root cause of any issue
	RootCauseCommentary string `protobuf:"bytes,82,opt,name=root_cause_commentary,json=rootCauseCommentary,proto3" json:"root_cause_commentary,omitempty"`
	// Optional. Comments on the actions taken to remediate the root cause
	RemediationsCommentary string `protobuf:"bytes,83,opt,name=remediations_commentary,json=remediationsCommentary,proto3" json:"remediations_commentary,omitempty"`
}

func (x *RT000T542_Metric) Reset() {
	*x = RT000T542_Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000T542_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000T542_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000T542_Metric) ProtoMessage() {}

func (x *RT000T542_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000T542_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000T542_Metric.ProtoReflect.Descriptor instead.
func (*RT000T542_Metric) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000T542_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000T542_Metric) GetProductionDate() *date.Date {
	if x != nil {
		return x.ProductionDate
	}
	return nil
}

func (x *RT000T542_Metric) GetReportingPeriodStart() *date.Date {
	if x != nil {
		return x.ReportingPeriodStart
	}
	return nil
}

func (x *RT000T542_Metric) GetReportingPeriodEnd() *date.Date {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return nil
}

func (x *RT000T542_Metric) GetUmbrellaFundIdentifier() string {
	if x != nil {
		return x.UmbrellaFundIdentifier
	}
	return ""
}

func (x *RT000T542_Metric) GetUmbrellaFund() string {
	if x != nil {
		return x.UmbrellaFund
	}
	return ""
}

func (x *RT000T542_Metric) GetFundIdentifier() string {
	if x != nil {
		return x.FundIdentifier
	}
	return ""
}

func (x *RT000T542_Metric) GetFund() string {
	if x != nil {
		return x.Fund
	}
	return ""
}

func (x *RT000T542_Metric) GetMetricId() RT000T542_Metric_MetricID {
	if x != nil {
		return x.MetricId
	}
	return RT000T542_Metric_METRIC_ID_UNSPECIFIED
}

func (x *RT000T542_Metric) GetValueType() RT000T542_Metric_ValueType {
	if x != nil {
		return x.ValueType
	}
	return RT000T542_Metric_METRIC_TYPE_UNSPECIFIED
}

func (x *RT000T542_Metric) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *RT000T542_Metric) GetMetric() float64 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *RT000T542_Metric) GetEvaluationType() RT000T542_Metric_EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return RT000T542_Metric_EVALUATION_TYPE_UNSPECIFIED
}

func (x *RT000T542_Metric) GetRag() RedAmberGreen {
	if x != nil {
		return x.Rag
	}
	return RedAmberGreen_RAG_UNSPECIFIED
}

func (x *RT000T542_Metric) GetAmberCutoff() float64 {
	if x != nil {
		return x.AmberCutoff
	}
	return 0
}

func (x *RT000T542_Metric) GetGreenCutoff() float64 {
	if x != nil {
		return x.GreenCutoff
	}
	return 0
}

func (x *RT000T542_Metric) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RT000T542_Metric) GetProviderMetricId() string {
	if x != nil {
		return x.ProviderMetricId
	}
	return ""
}

func (x *RT000T542_Metric) GetProviderMetricName() string {
	if x != nil {
		return x.ProviderMetricName
	}
	return ""
}

func (x *RT000T542_Metric) GetGeneralCommentary() string {
	if x != nil {
		return x.GeneralCommentary
	}
	return ""
}

func (x *RT000T542_Metric) GetRootCauseCommentary() string {
	if x != nil {
		return x.RootCauseCommentary
	}
	return ""
}

func (x *RT000T542_Metric) GetRemediationsCommentary() string {
	if x != nil {
		return x.RemediationsCommentary
	}
	return ""
}

var File_standards_open_v1_RT000T542_proto protoreflect.FileDescriptor

var file_standards_open_v1_RT000T542_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x54, 0x35, 0x34, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x1f, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x54, 0x35, 0x34, 0x32, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x54,
	0x35, 0x34, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x1a, 0xce, 0x1e, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3a,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x16, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x14, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6d, 0x62, 0x72,
	0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6d, 0x62, 0x72,
	0x65, 0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6d, 0x62, 0x72, 0x65,
	0x6c, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x75, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x54, 0x35, 0x34, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x49, 0x44, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x54, 0x35, 0x34,
	0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x5b, 0x0a, 0x0f, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x54, 0x35, 0x34,
	0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x72, 0x61, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x41, 0x6d, 0x62, 0x65,
	0x72, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x03, 0x72, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x12, 0x37, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x22, 0xf5, 0x14, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x35,
	0x0a, 0x31, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26,
	0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x54,
	0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x54, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x53, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x53, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x0b, 0x12, 0x26,
	0x0a, 0x22, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x0d,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x55, 0x50,
	0x48, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x10,
	0x0e, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x10,
	0x12, 0x25, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x12, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x13, 0x12, 0x25, 0x0a,
	0x21, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x45, 0x44, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x53, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x1b, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x1d, 0x12, 0x24,
	0x0a, 0x20, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x1f, 0x12,
	0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x57, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x53, 0x10, 0x20, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x45, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x22, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x53, 0x10, 0x23, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f,
	0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x44, 0x10, 0x24, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x41, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x43, 0x52,
	0x45, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x44, 0x10, 0x25, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x43, 0x52,
	0x45, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x44, 0x10, 0x26, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x4d,
	0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x43,
	0x52, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x52, 0x41, 0x49, 0x53, 0x45, 0x44, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x28, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x53, 0x5f, 0x41, 0x4d, 0x4c, 0x10, 0x29, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f,
	0x53, 0x41, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53,
	0x10, 0x2b, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59,
	0x10, 0x2c, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44,
	0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x53, 0x10, 0x2e, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x2f, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x56, 0x49,
	0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x30, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c,
	0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10,
	0x31, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43,
	0x59, 0x10, 0x32, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x46, 0x45,
	0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c,
	0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x33, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x57, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x34, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x57,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x35, 0x12, 0x1e, 0x0a,
	0x1a, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x36, 0x12, 0x26, 0x0a,
	0x22, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52,
	0x41, 0x43, 0x59, 0x10, 0x37, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x38, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x53, 0x10, 0x39, 0x12, 0x20, 0x0a,
	0x1c, 0x4e, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x53, 0x10, 0x3a, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43,
	0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x66, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x67, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x53, 0x10, 0x68, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41,
	0x43, 0x59, 0x10, 0x69, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x6a, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x6b, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x6c, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x6d, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41,
	0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x6f, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x70, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x10, 0x71, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59,
	0x10, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x55, 0x52, 0x41, 0x43, 0x59, 0x10, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x75, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0x76, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43,
	0x59, 0x10, 0x77, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49,
	0x4e, 0x45, 0x53, 0x53, 0x10, 0x78, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10,
	0x79, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52,
	0x41, 0x43, 0x59, 0x10, 0x7a, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x7b, 0x12, 0x24, 0x0a, 0x20, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10,
	0x7c, 0x22, 0x52, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x03, 0x22, 0x4d, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x41, 0x4c, 0x55,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x49,
	0x4d, 0x49, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49,
	0x53, 0x45, 0x10, 0x02, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67,
	0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_standards_open_v1_RT000T542_proto_rawDescOnce sync.Once
	file_standards_open_v1_RT000T542_proto_rawDescData = file_standards_open_v1_RT000T542_proto_rawDesc
)

func file_standards_open_v1_RT000T542_proto_rawDescGZIP() []byte {
	file_standards_open_v1_RT000T542_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_RT000T542_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_RT000T542_proto_rawDescData)
	})
	return file_standards_open_v1_RT000T542_proto_rawDescData
}

var file_standards_open_v1_RT000T542_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_standards_open_v1_RT000T542_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_standards_open_v1_RT000T542_proto_goTypes = []interface{}{
	(RT000T542_Metric_MetricID)(0),       // 0: standards.open.v1.RT000T542.Metric.MetricID
	(RT000T542_Metric_ValueType)(0),      // 1: standards.open.v1.RT000T542.Metric.ValueType
	(RT000T542_Metric_EvaluationType)(0), // 2: standards.open.v1.RT000T542.Metric.EvaluationType
	(*RT000T542)(nil),                    // 3: standards.open.v1.RT000T542
	(*RT000T542_Metric)(nil),             // 4: standards.open.v1.RT000T542.Metric
	(*date.Date)(nil),                    // 5: google.type.Date
	(RedAmberGreen)(0),                   // 6: standards.open.v1.RedAmberGreen
}
var file_standards_open_v1_RT000T542_proto_depIdxs = []int32{
	4, // 0: standards.open.v1.RT000T542.metrics:type_name -> standards.open.v1.RT000T542.Metric
	5, // 1: standards.open.v1.RT000T542.Metric.production_date:type_name -> google.type.Date
	5, // 2: standards.open.v1.RT000T542.Metric.reporting_period_start:type_name -> google.type.Date
	5, // 3: standards.open.v1.RT000T542.Metric.reporting_period_end:type_name -> google.type.Date
	0, // 4: standards.open.v1.RT000T542.Metric.metric_id:type_name -> standards.open.v1.RT000T542.Metric.MetricID
	1, // 5: standards.open.v1.RT000T542.Metric.value_type:type_name -> standards.open.v1.RT000T542.Metric.ValueType
	2, // 6: standards.open.v1.RT000T542.Metric.evaluation_type:type_name -> standards.open.v1.RT000T542.Metric.EvaluationType
	6, // 7: standards.open.v1.RT000T542.Metric.rag:type_name -> standards.open.v1.RedAmberGreen
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_standards_open_v1_RT000T542_proto_init() }
func file_standards_open_v1_RT000T542_proto_init() {
	if File_standards_open_v1_RT000T542_proto != nil {
		return
	}
	file_standards_open_v1_rag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_RT000T542_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000T542); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000T542_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000T542_Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_RT000T542_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_RT000T542_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_RT000T542_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_RT000T542_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_RT000T542_proto_msgTypes,
	}.Build()
	File_standards_open_v1_RT000T542_proto = out.File
	file_standards_open_v1_RT000T542_proto_rawDesc = nil
	file_standards_open_v1_RT000T542_proto_goTypes = nil
	file_standards_open_v1_RT000T542_proto_depIdxs = nil
}
