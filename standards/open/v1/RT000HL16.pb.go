// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: standards/open/v1/RT000HL16.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Y / N requiring no further explanation
type RT000HL16_YesNo int32

const (
	// Not Applicable
	RT000HL16_YES_NO_NA_UNSPECIFIED RT000HL16_YesNo = 0
	// Yes
	RT000HL16_Y RT000HL16_YesNo = 1
	// No
	RT000HL16_N RT000HL16_YesNo = 2
	// Not Applicable
	RT000HL16_NA RT000HL16_YesNo = 3
)

// Enum value maps for RT000HL16_YesNo.
var (
	RT000HL16_YesNo_name = map[int32]string{
		0: "YES_NO_NA_UNSPECIFIED",
		1: "Y",
		2: "N",
		3: "NA",
	}
	RT000HL16_YesNo_value = map[string]int32{
		"YES_NO_NA_UNSPECIFIED": 0,
		"Y":                     1,
		"N":                     2,
		"NA":                    3,
	}
)

func (x RT000HL16_YesNo) Enum() *RT000HL16_YesNo {
	p := new(RT000HL16_YesNo)
	*p = x
	return p
}

func (x RT000HL16_YesNo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000HL16_YesNo) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000HL16_proto_enumTypes[0].Descriptor()
}

func (RT000HL16_YesNo) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000HL16_proto_enumTypes[0]
}

func (x RT000HL16_YesNo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000HL16_YesNo.Descriptor instead.
func (RT000HL16_YesNo) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000HL16_proto_rawDescGZIP(), []int{0, 0}
}

type RT000HL16_GeneralInformation_FundRelatedActivities int32

const (
	RT000HL16_GeneralInformation_FUND_RELATED_ACTIVITY_UNSPECIFIED RT000HL16_GeneralInformation_FundRelatedActivities = 0
	// Advisory services (investment advice)
	RT000HL16_GeneralInformation_ADVISORY_SERVICES RT000HL16_GeneralInformation_FundRelatedActivities = 1
	// Execution only (direct fund investment)
	RT000HL16_GeneralInformation_EXECUTION_ONLY RT000HL16_GeneralInformation_FundRelatedActivities = 2
	// Non-advisory services
	RT000HL16_GeneralInformation_NON_ADVISORY_SERVICES RT000HL16_GeneralInformation_FundRelatedActivities = 3
	// Reception and transmission of orders
	RT000HL16_GeneralInformation_RECEPTION_AND_TRANSMISSION_OF_ORDERS RT000HL16_GeneralInformation_FundRelatedActivities = 4
	// Execution of orders on behalf of clients
	RT000HL16_GeneralInformation_EXECUTION_OF_ORDERS_ON_BEHALF_OF_CLIENTS RT000HL16_GeneralInformation_FundRelatedActivities = 5
	// Public distribution
	RT000HL16_GeneralInformation_PUBLIC_DISTRIBUTION RT000HL16_GeneralInformation_FundRelatedActivities = 6
	// Other (please specify)
	RT000HL16_GeneralInformation_OTHER_ACTIVITIES RT000HL16_GeneralInformation_FundRelatedActivities = 99
)

// Enum value maps for RT000HL16_GeneralInformation_FundRelatedActivities.
var (
	RT000HL16_GeneralInformation_FundRelatedActivities_name = map[int32]string{
		0:  "FUND_RELATED_ACTIVITY_UNSPECIFIED",
		1:  "ADVISORY_SERVICES",
		2:  "EXECUTION_ONLY",
		3:  "NON_ADVISORY_SERVICES",
		4:  "RECEPTION_AND_TRANSMISSION_OF_ORDERS",
		5:  "EXECUTION_OF_ORDERS_ON_BEHALF_OF_CLIENTS",
		6:  "PUBLIC_DISTRIBUTION",
		99: "OTHER_ACTIVITIES",
	}
	RT000HL16_GeneralInformation_FundRelatedActivities_value = map[string]int32{
		"FUND_RELATED_ACTIVITY_UNSPECIFIED":        0,
		"ADVISORY_SERVICES":                        1,
		"EXECUTION_ONLY":                           2,
		"NON_ADVISORY_SERVICES":                    3,
		"RECEPTION_AND_TRANSMISSION_OF_ORDERS":     4,
		"EXECUTION_OF_ORDERS_ON_BEHALF_OF_CLIENTS": 5,
		"PUBLIC_DISTRIBUTION":                      6,
		"OTHER_ACTIVITIES":                         99,
	}
)

func (x RT000HL16_GeneralInformation_FundRelatedActivities) Enum() *RT000HL16_GeneralInformation_FundRelatedActivities {
	p := new(RT000HL16_GeneralInformation_FundRelatedActivities)
	*p = x
	return p
}

func (x RT000HL16_GeneralInformation_FundRelatedActivities) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000HL16_GeneralInformation_FundRelatedActivities) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000HL16_proto_enumTypes[1].Descriptor()
}

func (RT000HL16_GeneralInformation_FundRelatedActivities) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000HL16_proto_enumTypes[1]
}

func (x RT000HL16_GeneralInformation_FundRelatedActivities) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000HL16_GeneralInformation_FundRelatedActivities.Descriptor instead.
func (RT000HL16_GeneralInformation_FundRelatedActivities) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000HL16_proto_rawDescGZIP(), []int{0, 0, 0}
}

type RT000HL16_GeneralInformation_FundBusinessDescriptions int32

const (
	RT000HL16_GeneralInformation_FUND_BUSINESS_DESCRIPTION_UNSPECIFIED RT000HL16_GeneralInformation_FundBusinessDescriptions = 0
	// Retail bank
	RT000HL16_GeneralInformation_RETAIL_BANK RT000HL16_GeneralInformation_FundBusinessDescriptions = 1
	// Private bank
	RT000HL16_GeneralInformation_PRIVATE_BANK RT000HL16_GeneralInformation_FundBusinessDescriptions = 2
	// Investment fund manager (management company)
	RT000HL16_GeneralInformation_INVESTMENT_FUND_MANAGER_MANAGEMENT_COMPANY RT000HL16_GeneralInformation_FundBusinessDescriptions = 3
	// Investment fund manager (global distributor)
	RT000HL16_GeneralInformation_INVESTMENT_FUND_MANAGER_MANAGEMENT_GLOBAL_DISTRIBUTOR RT000HL16_GeneralInformation_FundBusinessDescriptions = 4
	// Private placement agent
	RT000HL16_GeneralInformation_PRIVATE_PLACEMENT_AGENT RT000HL16_GeneralInformation_FundBusinessDescriptions = 5
	// U.S. financial advisor (IFA)
	RT000HL16_GeneralInformation_US_FINANCIAL_ADVISOR RT000HL16_GeneralInformation_FundBusinessDescriptions = 6
	// Financial advisor (IFA)
	RT000HL16_GeneralInformation_FINANCIAL_ADVISOR RT000HL16_GeneralInformation_FundBusinessDescriptions = 7
	// Discretionary portfolio management
	RT000HL16_GeneralInformation_DISCRETIONARY_PORTFOLIO_MANAGER RT000HL16_GeneralInformation_FundBusinessDescriptions = 8
	// Wealth manager
	RT000HL16_GeneralInformation_WEALTH_MANAGER RT000HL16_GeneralInformation_FundBusinessDescriptions = 9
	// Fund platform
	RT000HL16_GeneralInformation_FUND_PLATFORM RT000HL16_GeneralInformation_FundBusinessDescriptions = 10
	// Family office
	RT000HL16_GeneralInformation_FAMILY_OFFICE RT000HL16_GeneralInformation_FundBusinessDescriptions = 11
	// Pension scheme or provider
	RT000HL16_GeneralInformation_PENSION_SCHEME_OR_PROVIDER RT000HL16_GeneralInformation_FundBusinessDescriptions = 12
	// Multi manager
	RT000HL16_GeneralInformation_MULTI_MANAGER RT000HL16_GeneralInformation_FundBusinessDescriptions = 13
	// Insurance on your own behalf
	RT000HL16_GeneralInformation_INSURANCE_ON_OWN_BEHALF RT000HL16_GeneralInformation_FundBusinessDescriptions = 14
	// Insurance on behalf of your clients
	RT000HL16_GeneralInformation_INSURANCE_ON_BEHALF_OF_CLIENTS RT000HL16_GeneralInformation_FundBusinessDescriptions = 15
	// Custodian
	RT000HL16_GeneralInformation_CUSTODIAN RT000HL16_GeneralInformation_FundBusinessDescriptions = 16
	// Nominee
	RT000HL16_GeneralInformation_NOMINEE RT000HL16_GeneralInformation_FundBusinessDescriptions = 17
	// Broker (fund)
	RT000HL16_GeneralInformation_BROKER_FUND RT000HL16_GeneralInformation_FundBusinessDescriptions = 18
	// Broker (insurance)
	RT000HL16_GeneralInformation_BROKER_INSURANCE RT000HL16_GeneralInformation_FundBusinessDescriptions = 19
	// Broker (stock)
	RT000HL16_GeneralInformation_BROKER_STOCK RT000HL16_GeneralInformation_FundBusinessDescriptions = 20
	// Marketer
	RT000HL16_GeneralInformation_MARKETER RT000HL16_GeneralInformation_FundBusinessDescriptions = 21
	// Business Introducer
	RT000HL16_GeneralInformation_BUSINESS_INTRODUCER RT000HL16_GeneralInformation_FundBusinessDescriptions = 22
	// Fund of Funds
	RT000HL16_GeneralInformation_FUND_OF_FUNDS RT000HL16_GeneralInformation_FundBusinessDescriptions = 23
	// Other
	RT000HL16_GeneralInformation_OTHER_DESCRIPTIONS RT000HL16_GeneralInformation_FundBusinessDescriptions = 99
)

// Enum value maps for RT000HL16_GeneralInformation_FundBusinessDescriptions.
var (
	RT000HL16_GeneralInformation_FundBusinessDescriptions_name = map[int32]string{
		0:  "FUND_BUSINESS_DESCRIPTION_UNSPECIFIED",
		1:  "RETAIL_BANK",
		2:  "PRIVATE_BANK",
		3:  "INVESTMENT_FUND_MANAGER_MANAGEMENT_COMPANY",
		4:  "INVESTMENT_FUND_MANAGER_MANAGEMENT_GLOBAL_DISTRIBUTOR",
		5:  "PRIVATE_PLACEMENT_AGENT",
		6:  "US_FINANCIAL_ADVISOR",
		7:  "FINANCIAL_ADVISOR",
		8:  "DISCRETIONARY_PORTFOLIO_MANAGER",
		9:  "WEALTH_MANAGER",
		10: "FUND_PLATFORM",
		11: "FAMILY_OFFICE",
		12: "PENSION_SCHEME_OR_PROVIDER",
		13: "MULTI_MANAGER",
		14: "INSURANCE_ON_OWN_BEHALF",
		15: "INSURANCE_ON_BEHALF_OF_CLIENTS",
		16: "CUSTODIAN",
		17: "NOMINEE",
		18: "BROKER_FUND",
		19: "BROKER_INSURANCE",
		20: "BROKER_STOCK",
		21: "MARKETER",
		22: "BUSINESS_INTRODUCER",
		23: "FUND_OF_FUNDS",
		99: "OTHER_DESCRIPTIONS",
	}
	RT000HL16_GeneralInformation_FundBusinessDescriptions_value = map[string]int32{
		"FUND_BUSINESS_DESCRIPTION_UNSPECIFIED":                 0,
		"RETAIL_BANK":                                           1,
		"PRIVATE_BANK":                                          2,
		"INVESTMENT_FUND_MANAGER_MANAGEMENT_COMPANY":            3,
		"INVESTMENT_FUND_MANAGER_MANAGEMENT_GLOBAL_DISTRIBUTOR": 4,
		"PRIVATE_PLACEMENT_AGENT":                               5,
		"US_FINANCIAL_ADVISOR":                                  6,
		"FINANCIAL_ADVISOR":                                     7,
		"DISCRETIONARY_PORTFOLIO_MANAGER":                       8,
		"WEALTH_MANAGER":                                        9,
		"FUND_PLATFORM":                                         10,
		"FAMILY_OFFICE":                                         11,
		"PENSION_SCHEME_OR_PROVIDER":                            12,
		"MULTI_MANAGER":                                         13,
		"INSURANCE_ON_OWN_BEHALF":                               14,
		"INSURANCE_ON_BEHALF_OF_CLIENTS":                        15,
		"CUSTODIAN":                                             16,
		"NOMINEE":                                               17,
		"BROKER_FUND":                                           18,
		"BROKER_INSURANCE":                                      19,
		"BROKER_STOCK":                                          20,
		"MARKETER":                                              21,
		"BUSINESS_INTRODUCER":                                   22,
		"FUND_OF_FUNDS":                                         23,
		"OTHER_DESCRIPTIONS":                                    99,
	}
)

func (x RT000HL16_GeneralInformation_FundBusinessDescriptions) Enum() *RT000HL16_GeneralInformation_FundBusinessDescriptions {
	p := new(RT000HL16_GeneralInformation_FundBusinessDescriptions)
	*p = x
	return p
}

func (x RT000HL16_GeneralInformation_FundBusinessDescriptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000HL16_GeneralInformation_FundBusinessDescriptions) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000HL16_proto_enumTypes[2].Descriptor()
}

func (RT000HL16_GeneralInformation_FundBusinessDescriptions) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000HL16_proto_enumTypes[2]
}

func (x RT000HL16_GeneralInformation_FundBusinessDescriptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000HL16_GeneralInformation_FundBusinessDescriptions.Descriptor instead.
func (RT000HL16_GeneralInformation_FundBusinessDescriptions) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000HL16_proto_rawDescGZIP(), []int{0, 0, 1}
}

type RT000HL16_GeneralInformation_Headcount int32

const (
	RT000HL16_GeneralInformation_HEADCOUNT_UNSPECIFIED RT000HL16_GeneralInformation_Headcount = 0
	// 1-3
	RT000HL16_GeneralInformation_HEADCOUNT_1_TO_3 RT000HL16_GeneralInformation_Headcount = 1
	// 4-10
	RT000HL16_GeneralInformation_HEADCOUNT_4_TO_10 RT000HL16_GeneralInformation_Headcount = 2
	// 11-20
	RT000HL16_GeneralInformation_HEADCOUNT_11_TO_20 RT000HL16_GeneralInformation_Headcount = 3
	// 21-50
	RT000HL16_GeneralInformation_HEADCOUNT_21_TO_50 RT000HL16_GeneralInformation_Headcount = 4
	// 51-250
	RT000HL16_GeneralInformation_HEADCOUNT_51_TO_250 RT000HL16_GeneralInformation_Headcount = 5
	// 251-500
	RT000HL16_GeneralInformation_HEADCOUNT_251_TO_500 RT000HL16_GeneralInformation_Headcount = 6
	// >500
	RT000HL16_GeneralInformation_HEADCOUNT_GREATER_THAN_500 RT000HL16_GeneralInformation_Headcount = 7
)

// Enum value maps for RT000HL16_GeneralInformation_Headcount.
var (
	RT000HL16_GeneralInformation_Headcount_name = map[int32]string{
		0: "HEADCOUNT_UNSPECIFIED",
		1: "HEADCOUNT_1_TO_3",
		2: "HEADCOUNT_4_TO_10",
		3: "HEADCOUNT_11_TO_20",
		4: "HEADCOUNT_21_TO_50",
		5: "HEADCOUNT_51_TO_250",
		6: "HEADCOUNT_251_TO_500",
		7: "HEADCOUNT_GREATER_THAN_500",
	}
	RT000HL16_GeneralInformation_Headcount_value = map[string]int32{
		"HEADCOUNT_UNSPECIFIED":      0,
		"HEADCOUNT_1_TO_3":           1,
		"HEADCOUNT_4_TO_10":          2,
		"HEADCOUNT_11_TO_20":         3,
		"HEADCOUNT_21_TO_50":         4,
		"HEADCOUNT_51_TO_250":        5,
		"HEADCOUNT_251_TO_500":       6,
		"HEADCOUNT_GREATER_THAN_500": 7,
	}
)

func (x RT000HL16_GeneralInformation_Headcount) Enum() *RT000HL16_GeneralInformation_Headcount {
	p := new(RT000HL16_GeneralInformation_Headcount)
	*p = x
	return p
}

func (x RT000HL16_GeneralInformation_Headcount) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT000HL16_GeneralInformation_Headcount) Descriptor() protoreflect.EnumDescriptor {
	return file_standards_open_v1_RT000HL16_proto_enumTypes[3].Descriptor()
}

func (RT000HL16_GeneralInformation_Headcount) Type() protoreflect.EnumType {
	return &file_standards_open_v1_RT000HL16_proto_enumTypes[3]
}

func (x RT000HL16_GeneralInformation_Headcount) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT000HL16_GeneralInformation_Headcount.Descriptor instead.
func (RT000HL16_GeneralInformation_Headcount) EnumDescriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000HL16_proto_rawDescGZIP(), []int{0, 0, 2}
}

// UME Delegate Due Diligence Questionnaire
type RT000HL16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// General Information
	GeneralInformation *RT000HL16_GeneralInformation `protobuf:"bytes,1,opt,name=general_information,json=generalInformation,proto3" json:"general_information,omitempty"`
}

func (x *RT000HL16) Reset() {
	*x = RT000HL16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000HL16_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000HL16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000HL16) ProtoMessage() {}

func (x *RT000HL16) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000HL16_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000HL16.ProtoReflect.Descriptor instead.
func (*RT000HL16) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000HL16_proto_rawDescGZIP(), []int{0}
}

func (x *RT000HL16) GetGeneralInformation() *RT000HL16_GeneralInformation {
	if x != nil {
		return x.GeneralInformation
	}
	return nil
}

type RT000HL16_GeneralInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegalEntityName                       string                                                `protobuf:"bytes,1,opt,name=legal_entity_name,json=legalEntityName,proto3" json:"legal_entity_name,omitempty"`
	CountryOfIncorporation                string                                                `protobuf:"bytes,2,opt,name=country_of_incorporation,json=countryOfIncorporation,proto3" json:"country_of_incorporation,omitempty"`
	Address                               string                                                `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	CompanyWebsite                        string                                                `protobuf:"bytes,4,opt,name=company_website,json=companyWebsite,proto3" json:"company_website,omitempty"`
	LegalForm                             string                                                `protobuf:"bytes,5,opt,name=legal_form,json=legalForm,proto3" json:"legal_form,omitempty"`
	LegalEntityIdentifier                 string                                                `protobuf:"bytes,6,opt,name=legal_entity_identifier,json=legalEntityIdentifier,proto3" json:"legal_entity_identifier,omitempty"`
	DateOfIncorporation                   string                                                `protobuf:"bytes,7,opt,name=date_of_incorporation,json=dateOfIncorporation,proto3" json:"date_of_incorporation,omitempty"`
	UltimateParentCompanyOrHoldingCompany string                                                `protobuf:"bytes,8,opt,name=ultimate_parent_company_or_holding_company,json=ultimateParentCompanyOrHoldingCompany,proto3" json:"ultimate_parent_company_or_holding_company,omitempty"`
	FactaCompliant                        RT000HL16_YesNo                                       `protobuf:"varint,9,opt,name=facta_compliant,json=factaCompliant,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"facta_compliant,omitempty"`
	AeoiOrCrsCompliant                    RT000HL16_YesNo                                       `protobuf:"varint,10,opt,name=aeoi_or_crs_compliant,json=aeoiOrCrsCompliant,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"aeoi_or_crs_compliant,omitempty"`
	TypeOfFundRelatedActivity             RT000HL16_GeneralInformation_FundRelatedActivities    `protobuf:"varint,12,opt,name=type_of_fund_related_activity,json=typeOfFundRelatedActivity,proto3,enum=standards.open.v1.RT000HL16_GeneralInformation_FundRelatedActivities" json:"type_of_fund_related_activity,omitempty"`
	TypeOfFundRelatedActivitySpecify      string                                                `protobuf:"bytes,13,opt,name=type_of_fund_related_activity_specify,json=typeOfFundRelatedActivitySpecify,proto3" json:"type_of_fund_related_activity_specify,omitempty"`
	FundBusinessDescription               RT000HL16_GeneralInformation_FundBusinessDescriptions `protobuf:"varint,14,opt,name=fund_business_description,json=fundBusinessDescription,proto3,enum=standards.open.v1.RT000HL16_GeneralInformation_FundBusinessDescriptions" json:"fund_business_description,omitempty"`
	FundBusinessDescriptionSpecify        string                                                `protobuf:"bytes,15,opt,name=fund_business_description_specify,json=fundBusinessDescriptionSpecify,proto3" json:"fund_business_description_specify,omitempty"`
	LegalEntityStaffHeadcount             RT000HL16_GeneralInformation_Headcount                `protobuf:"varint,16,opt,name=legal_entity_staff_headcount,json=legalEntityStaffHeadcount,proto3,enum=standards.open.v1.RT000HL16_GeneralInformation_Headcount" json:"legal_entity_staff_headcount,omitempty"`
}

func (x *RT000HL16_GeneralInformation) Reset() {
	*x = RT000HL16_GeneralInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000HL16_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000HL16_GeneralInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000HL16_GeneralInformation) ProtoMessage() {}

func (x *RT000HL16_GeneralInformation) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000HL16_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000HL16_GeneralInformation.ProtoReflect.Descriptor instead.
func (*RT000HL16_GeneralInformation) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000HL16_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT000HL16_GeneralInformation) GetLegalEntityName() string {
	if x != nil {
		return x.LegalEntityName
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetCountryOfIncorporation() string {
	if x != nil {
		return x.CountryOfIncorporation
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetCompanyWebsite() string {
	if x != nil {
		return x.CompanyWebsite
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetLegalForm() string {
	if x != nil {
		return x.LegalForm
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetLegalEntityIdentifier() string {
	if x != nil {
		return x.LegalEntityIdentifier
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetDateOfIncorporation() string {
	if x != nil {
		return x.DateOfIncorporation
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetUltimateParentCompanyOrHoldingCompany() string {
	if x != nil {
		return x.UltimateParentCompanyOrHoldingCompany
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetFactaCompliant() RT000HL16_YesNo {
	if x != nil {
		return x.FactaCompliant
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_GeneralInformation) GetAeoiOrCrsCompliant() RT000HL16_YesNo {
	if x != nil {
		return x.AeoiOrCrsCompliant
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_GeneralInformation) GetTypeOfFundRelatedActivity() RT000HL16_GeneralInformation_FundRelatedActivities {
	if x != nil {
		return x.TypeOfFundRelatedActivity
	}
	return RT000HL16_GeneralInformation_FUND_RELATED_ACTIVITY_UNSPECIFIED
}

func (x *RT000HL16_GeneralInformation) GetTypeOfFundRelatedActivitySpecify() string {
	if x != nil {
		return x.TypeOfFundRelatedActivitySpecify
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetFundBusinessDescription() RT000HL16_GeneralInformation_FundBusinessDescriptions {
	if x != nil {
		return x.FundBusinessDescription
	}
	return RT000HL16_GeneralInformation_FUND_BUSINESS_DESCRIPTION_UNSPECIFIED
}

func (x *RT000HL16_GeneralInformation) GetFundBusinessDescriptionSpecify() string {
	if x != nil {
		return x.FundBusinessDescriptionSpecify
	}
	return ""
}

func (x *RT000HL16_GeneralInformation) GetLegalEntityStaffHeadcount() RT000HL16_GeneralInformation_Headcount {
	if x != nil {
		return x.LegalEntityStaffHeadcount
	}
	return RT000HL16_GeneralInformation_HEADCOUNT_UNSPECIFIED
}

type RT000HL16_OperatingModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncorporationAlignedWithTaxResidence       RT000HL16_YesNo `protobuf:"varint,1,opt,name=incorporation_aligned_with_tax_residence,json=incorporationAlignedWithTaxResidence,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"incorporation_aligned_with_tax_residence,omitempty"`
	RegulatedByFinancialSupervisoryAuthority   RT000HL16_YesNo `protobuf:"varint,2,opt,name=regulated_by_financial_supervisory_authority,json=regulatedByFinancialSupervisoryAuthority,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"regulated_by_financial_supervisory_authority,omitempty"`
	SpecifyFinancialSupervisoryAuthority       string          `protobuf:"bytes,3,opt,name=specify_financial_supervisory_authority,json=specifyFinancialSupervisoryAuthority,proto3" json:"specify_financial_supervisory_authority,omitempty"`
	FinancialSupervisoryAuthority              RT000HL16_YesNo `protobuf:"varint,4,opt,name=financial_supervisory_authority,json=financialSupervisoryAuthority,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"financial_supervisory_authority,omitempty"`
	LicensesInPlaceInsuranceCompany            RT000HL16_YesNo `protobuf:"varint,5,opt,name=licenses_in_place_insurance_company,json=licensesInPlaceInsuranceCompany,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"licenses_in_place_insurance_company,omitempty"`
	LicensesInPlaceInvestmentManagementCompany RT000HL16_YesNo `protobuf:"varint,6,opt,name=licenses_in_place_investment_management_company,json=licensesInPlaceInvestmentManagementCompany,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"licenses_in_place_investment_management_company,omitempty"`
	LicensesInPlaceFinancialAdvisoryIfa        RT000HL16_YesNo `protobuf:"varint,7,opt,name=licenses_in_place_financial_advisory_ifa,json=licensesInPlaceFinancialAdvisoryIfa,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"licenses_in_place_financial_advisory_ifa,omitempty"`
	LicensesInPlaceBrokerTrading               RT000HL16_YesNo `protobuf:"varint,8,opt,name=licenses_in_place_broker_trading,json=licensesInPlaceBrokerTrading,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"licenses_in_place_broker_trading,omitempty"`
	LicensesInPlaceBrokerOther                 RT000HL16_YesNo `protobuf:"varint,9,opt,name=licenses_in_place_broker_other,json=licensesInPlaceBrokerOther,proto3,enum=standards.open.v1.RT000HL16_YesNo" json:"licenses_in_place_broker_other,omitempty"`
	LicensesInPlaceBrokerOtherSpecify          string          `protobuf:"bytes,10,opt,name=licenses_in_place_broker_other_specify,json=licensesInPlaceBrokerOtherSpecify,proto3" json:"licenses_in_place_broker_other_specify,omitempty"`
	LicenseNumber                              string          `protobuf:"bytes,11,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	RegulatorWebsite                           string          `protobuf:"bytes,12,opt,name=regulator_website,json=regulatorWebsite,proto3" json:"regulator_website,omitempty"`
}

func (x *RT000HL16_OperatingModel) Reset() {
	*x = RT000HL16_OperatingModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_standards_open_v1_RT000HL16_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT000HL16_OperatingModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT000HL16_OperatingModel) ProtoMessage() {}

func (x *RT000HL16_OperatingModel) ProtoReflect() protoreflect.Message {
	mi := &file_standards_open_v1_RT000HL16_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT000HL16_OperatingModel.ProtoReflect.Descriptor instead.
func (*RT000HL16_OperatingModel) Descriptor() ([]byte, []int) {
	return file_standards_open_v1_RT000HL16_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT000HL16_OperatingModel) GetIncorporationAlignedWithTaxResidence() RT000HL16_YesNo {
	if x != nil {
		return x.IncorporationAlignedWithTaxResidence
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_OperatingModel) GetRegulatedByFinancialSupervisoryAuthority() RT000HL16_YesNo {
	if x != nil {
		return x.RegulatedByFinancialSupervisoryAuthority
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_OperatingModel) GetSpecifyFinancialSupervisoryAuthority() string {
	if x != nil {
		return x.SpecifyFinancialSupervisoryAuthority
	}
	return ""
}

func (x *RT000HL16_OperatingModel) GetFinancialSupervisoryAuthority() RT000HL16_YesNo {
	if x != nil {
		return x.FinancialSupervisoryAuthority
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_OperatingModel) GetLicensesInPlaceInsuranceCompany() RT000HL16_YesNo {
	if x != nil {
		return x.LicensesInPlaceInsuranceCompany
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_OperatingModel) GetLicensesInPlaceInvestmentManagementCompany() RT000HL16_YesNo {
	if x != nil {
		return x.LicensesInPlaceInvestmentManagementCompany
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_OperatingModel) GetLicensesInPlaceFinancialAdvisoryIfa() RT000HL16_YesNo {
	if x != nil {
		return x.LicensesInPlaceFinancialAdvisoryIfa
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_OperatingModel) GetLicensesInPlaceBrokerTrading() RT000HL16_YesNo {
	if x != nil {
		return x.LicensesInPlaceBrokerTrading
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_OperatingModel) GetLicensesInPlaceBrokerOther() RT000HL16_YesNo {
	if x != nil {
		return x.LicensesInPlaceBrokerOther
	}
	return RT000HL16_YES_NO_NA_UNSPECIFIED
}

func (x *RT000HL16_OperatingModel) GetLicensesInPlaceBrokerOtherSpecify() string {
	if x != nil {
		return x.LicensesInPlaceBrokerOtherSpecify
	}
	return ""
}

func (x *RT000HL16_OperatingModel) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *RT000HL16_OperatingModel) GetRegulatorWebsite() string {
	if x != nil {
		return x.RegulatorWebsite
	}
	return ""
}

var File_standards_open_v1_RT000HL16_proto protoreflect.FileDescriptor

var file_standards_open_v1_RT000HL16_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd,
	0x3c, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31, 0x36, 0x12, 0x60, 0x0a, 0x13,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe6,
	0x20, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3c, 0x8a, 0x97, 0x22, 0x38, 0x0a, 0x11, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x05, 0x47, 0x45, 0x4e, 0x2e, 0x31,
	0x1a, 0x03, 0x30, 0x2e, 0x31, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0f,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x76, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3c, 0x8a, 0x97, 0x22, 0x38, 0x0a, 0x11, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x05, 0x47, 0x45, 0x4e, 0x2e,
	0x32, 0x1a, 0x03, 0x30, 0x2e, 0x32, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x70,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x8a, 0x97, 0x22, 0x2e, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x05, 0x47, 0x45, 0x4e, 0x2e, 0x33, 0x1a, 0x03,
	0x30, 0x2e, 0x33, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x63, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0x8a, 0x97, 0x22, 0x36, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x05, 0x47, 0x45, 0x4e, 0x2e, 0x34, 0x1a, 0x03, 0x30, 0x2e,
	0x34, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0x8a, 0x97, 0x22, 0x31, 0x0a, 0x0a, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x46, 0x6f, 0x72, 0x6d,
	0x12, 0x05, 0x47, 0x45, 0x4e, 0x2e, 0x35, 0x1a, 0x03, 0x30, 0x2e, 0x35, 0x2a, 0x17, 0x47, 0x49,
	0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d,
	0x12, 0x80, 0x01, 0x0a, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x48, 0x8a, 0x97, 0x22, 0x44, 0x0a, 0x1d, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x20,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x20, 0x28, 0x4c, 0x45, 0x49, 0x29, 0x12, 0x05, 0x47, 0x45, 0x4e, 0x2e, 0x36, 0x1a, 0x03,
	0x30, 0x2e, 0x36, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x15, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4d, 0x8a, 0x97, 0x22, 0x49, 0x0a, 0x22, 0x44, 0x61, 0x74, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x28, 0x59, 0x59, 0x59, 0x59, 0x2d, 0x4d, 0x4d, 0x2d, 0x44, 0x44, 0x29, 0x12, 0x05, 0x47,
	0x45, 0x4e, 0x2e, 0x37, 0x1a, 0x03, 0x30, 0x2e, 0x37, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x52, 0x13, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x70,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa6, 0x03, 0x0a, 0x2a, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xca, 0x02, 0x8a,
	0x97, 0x22, 0xc5, 0x02, 0x0a, 0x2a, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x20, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x72,
	0x20, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0xf8, 0x01, 0x47, 0x45, 0x4e, 0x2e, 0x38, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x32, 0x35,
	0x25, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x20, 0x77,
	0x68, 0x6f, 0x20, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x77,
	0x6e, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x20, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x28, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x62, 0x79, 0x20, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x29, 0x20, 0x61, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x32, 0x35, 0x25,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x79, 0x20,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x1a, 0x03, 0x30, 0x2e, 0x38,
	0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x25, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4f, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0xda, 0x01, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x8c,
	0x01, 0x8a, 0x97, 0x22, 0x87, 0x01, 0x0a, 0x60, 0x41, 0x72, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x46, 0x41, 0x54, 0x43, 0x41, 0x20, 0x6c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3f, 0x12, 0x05, 0x47, 0x45, 0x4e, 0x2e, 0x39, 0x1a,
	0x03, 0x30, 0x2e, 0x39, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0e, 0x66,
	0x61, 0x63, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0xaf, 0x02,
	0x0a, 0x15, 0x61, 0x65, 0x6f, 0x69, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x42, 0xd7, 0x01, 0x8a, 0x97, 0x22, 0xd2, 0x01, 0x0a, 0x67, 0x41, 0x72, 0x65, 0x20, 0x79,
	0x6f, 0x75, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x45, 0x4f, 0x49, 0x20, 0x6f, 0x72, 0x20, 0x43, 0x52,
	0x53, 0x20, 0x6c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x69, 0x74, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3f, 0x20, 0x12, 0x48, 0x47, 0x45, 0x4e, 0x2e, 0x31, 0x30, 0x20, 0x2d, 0x20, 0x50, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x20, 0x74, 0x61, 0x78, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x20, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x29, 0x1a, 0x04, 0x30, 0x2e,
	0x31, 0x30, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x12, 0x61, 0x65, 0x6f,
	0x69, 0x4f, 0x72, 0x43, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12,
	0xee, 0x01, 0x0a, 0x1d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x65,
	0x8a, 0x97, 0x22, 0x61, 0x0a, 0x1d, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x75,
	0x6e, 0x64, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x21, 0x47, 0x45, 0x4e, 0x2e, 0x31, 0x31, 0x20, 0x2d, 0x20, 0x49, 0x66,
	0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x1a, 0x04, 0x30, 0x2e, 0x31, 0x31, 0x2a, 0x17, 0x47, 0x49,
	0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x19, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x46, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x84, 0x02, 0x0a, 0x25, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xb2, 0x01, 0x8a, 0x97, 0x22, 0xad, 0x01, 0x0a, 0x2e, 0x49, 0x66, 0x20, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x27, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x27, 0x20, 0x74,
	0x6f, 0x20, 0x47, 0x45, 0x4e, 0x2e, 0x31, 0x31, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x12, 0x21, 0x47, 0x45, 0x4e, 0x2e, 0x31, 0x31,
	0x20, 0x2d, 0x20, 0x49, 0x66, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x1a, 0x0c, 0x30, 0x2e, 0x31,
	0x31, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x22, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x3f, 0x39, 0x39, 0x3a, 0x30, 0x2a, 0x17, 0x47, 0x49,
	0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x46, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x12, 0x93, 0x02, 0x0a, 0x19, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e,
	0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x8c, 0x01, 0x8a, 0x97, 0x22, 0x87, 0x01, 0x0a, 0x43, 0x57,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x27, 0x73, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x3f, 0x12, 0x21, 0x47, 0x45, 0x4e, 0x2e, 0x31, 0x32, 0x20, 0x2d, 0x20, 0x49, 0x66, 0x20,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x79, 0x1a, 0x04, 0x30, 0x2e, 0x31, 0x32, 0x2a, 0x17, 0x47, 0x49, 0x2e,
	0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x17, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xfc, 0x01,
	0x0a, 0x21, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb0, 0x01, 0x8a, 0x97, 0x22, 0xab,
	0x01, 0x0a, 0x2e, 0x49, 0x66, 0x20, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x27, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x27, 0x20, 0x74, 0x6f, 0x20, 0x47, 0x45, 0x4e, 0x2e, 0x31,
	0x32, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x79, 0x12, 0x21, 0x47, 0x45, 0x4e, 0x2e, 0x31, 0x32, 0x20, 0x2d, 0x20, 0x49, 0x66, 0x20, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x79, 0x1a, 0x0c, 0x30, 0x2e, 0x31, 0x32, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x79, 0x22, 0x2f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3f, 0x39,
	0x39, 0x3a, 0x30, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x1e, 0x66, 0x75,
	0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x12, 0x93, 0x02, 0x0a,
	0x1c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31,
	0x36, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x96,
	0x01, 0x8a, 0x97, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x73, 0x74, 0x61, 0x66, 0x66, 0x20, 0x68, 0x65, 0x61, 0x64, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x47, 0x45, 0x4e, 0x2e, 0x31, 0x32, 0x20, 0x2d, 0x20, 0x49,
	0x66, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x1a, 0x04, 0x30, 0x2e, 0x31, 0x33, 0x22, 0x2f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3f, 0x39, 0x39, 0x3a, 0x30, 0x2a, 0x17,
	0x47, 0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x19, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x66, 0x66, 0x48, 0x65, 0x61, 0x64, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x21,
	0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x43,
	0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x53, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x42, 0x45,
	0x48, 0x41, 0x4c, 0x46, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x63,
	0x22, 0x9b, 0x05, 0x0a, 0x18, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a,
	0x25, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x49,
	0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x12, 0x39, 0x0a, 0x35, 0x49,
	0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53,
	0x4f, 0x52, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x45, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x09, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x0a,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43,
	0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x4c,
	0x46, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x44, 0x49, 0x41, 0x4e, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x45,
	0x45, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x55,
	0x4e, 0x44, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52,
	0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x45, 0x52, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x55,
	0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45,
	0x52, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x46,
	0x55, 0x4e, 0x44, 0x53, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x63, 0x22, 0xd6,
	0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x64, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x15,
	0x48, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x45, 0x41, 0x44, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x31, 0x5f, 0x54, 0x4f, 0x5f, 0x33, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x48, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x34, 0x5f, 0x54, 0x4f, 0x5f,
	0x31, 0x30, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x31, 0x31, 0x5f, 0x54, 0x4f, 0x5f, 0x32, 0x30, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x48, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x32, 0x31, 0x5f, 0x54, 0x4f, 0x5f,
	0x35, 0x30, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x35, 0x31, 0x5f, 0x54, 0x4f, 0x5f, 0x32, 0x35, 0x30, 0x10, 0x05, 0x12, 0x18, 0x0a,
	0x14, 0x48, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x32, 0x35, 0x31, 0x5f, 0x54,
	0x4f, 0x5f, 0x35, 0x30, 0x30, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x45, 0x41, 0x44, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x5f, 0x35, 0x30, 0x30, 0x10, 0x07, 0x1a, 0xba, 0x1a, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0xaa, 0x02, 0x0a, 0x28, 0x69,
	0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x42, 0xad, 0x01, 0x8a, 0x97, 0x22, 0xa8, 0x01, 0x0a, 0x83, 0x01, 0x49, 0x73, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x27, 0x73, 0x20, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x27, 0x73,
	0x20, 0x74, 0x61, 0x78, 0x20, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x3f, 0x12,
	0x05, 0x4f, 0x50, 0x4d, 0x2e, 0x31, 0x1a, 0x03, 0x31, 0x2e, 0x31, 0x2a, 0x14, 0x4f, 0x50, 0x4d,
	0x2e, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x20, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x52, 0x24, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x78, 0x52, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xe3, 0x01, 0x0a, 0x2c, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x42, 0x5f, 0x8a, 0x97, 0x22, 0x5b, 0x0a, 0x37, 0x41, 0x72, 0x65, 0x20, 0x79, 0x6f,
	0x75, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61,
	0x20, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x3f, 0x12, 0x05, 0x4f, 0x50, 0x4d, 0x2e, 0x32, 0x1a, 0x03, 0x31, 0x2e, 0x32, 0x2a, 0x14, 0x4f,
	0x50, 0x4d, 0x2e, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x20, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x52, 0x28, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x89, 0x02,
	0x0a, 0x27, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xb1, 0x01, 0x8a, 0x97, 0x22, 0xac, 0x01, 0x0a, 0x2b, 0x49, 0x66, 0x20, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x27, 0x59, 0x45, 0x53, 0x27, 0x20, 0x74, 0x6f, 0x20, 0x4f,
	0x50, 0x4d, 0x2e, 0x32, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x79, 0x12, 0x20, 0x4f, 0x50, 0x4d, 0x2e, 0x32, 0x2e, 0x31, 0x20, 0x2d, 0x20,
	0x49, 0x66, 0x20, 0x59, 0x65, 0x73, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x1a, 0x05, 0x31, 0x2e, 0x32, 0x2e, 0x31, 0x22, 0x3b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x30, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x52, 0x24, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xf5, 0x02, 0x0a, 0x1f, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0x88, 0x02, 0x8a, 0x97, 0x22, 0x83, 0x02, 0x0a,
	0x9a, 0x01, 0x28, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x29, 0x20, 0x49, 0x73, 0x20, 0x79, 0x6f,
	0x75, 0x72, 0x20, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61,
	0x6e, 0x74, 0x69, 0x2d, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x20, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x41, 0x4d, 0x4c, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x6d, 0x20,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x43, 0x54, 0x46, 0x29, 0x20,
	0x6f, 0x62, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3f, 0x12, 0x07, 0x4f, 0x50,
	0x4d, 0x2e, 0x32, 0x2e, 0x32, 0x1a, 0x05, 0x31, 0x2e, 0x32, 0x2e, 0x32, 0x22, 0x3b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x30, 0x2a, 0x17, 0x47, 0x49, 0x2e, 0x09, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x52, 0x1d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0xa5, 0x02, 0x0a, 0x23, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x42, 0xb2, 0x01, 0x8a, 0x97, 0x22, 0xad, 0x01, 0x0a, 0x46, 0x28, 0x49, 0x66,
	0x20, 0x79, 0x65, 0x73, 0x29, 0x20, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x3a, 0x20, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x07, 0x4f, 0x50, 0x4d, 0x2e, 0x32, 0x2e, 0x33, 0x1a, 0x07, 0x31, 0x2e,
	0x32, 0x2e, 0x33, 0x2e, 0x31, 0x22, 0x3b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3f, 0x31,
	0x3a, 0x30, 0x2a, 0x14, 0x4f, 0x50, 0x4d, 0x2e, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x20, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x52, 0x1f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0xc8, 0x02, 0x0a, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x48, 0x4c, 0x31,
	0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0xbe, 0x01, 0x8a, 0x97, 0x22, 0xb9, 0x01, 0x0a,
	0x52, 0x28, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x29, 0x20, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75,
	0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x07, 0x4f, 0x50, 0x4d, 0x2e, 0x32, 0x2e, 0x33, 0x1a, 0x07, 0x31, 0x2e,
	0x32, 0x2e, 0x33, 0x2e, 0x32, 0x22, 0x3b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3f, 0x31,
	0x3a, 0x30, 0x2a, 0x14, 0x4f, 0x50, 0x4d, 0x2e, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x20, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x52, 0x2a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0xb5, 0x02, 0x0a, 0x28, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x66,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0xb9, 0x01, 0x8a, 0x97,
	0x22, 0xb4, 0x01, 0x0a, 0x4d, 0x28, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x29, 0x20, 0x44, 0x6f,
	0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x20, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x20, 0x2d, 0x20, 0x49,
	0x46, 0x41, 0x12, 0x07, 0x4f, 0x50, 0x4d, 0x2e, 0x32, 0x2e, 0x33, 0x1a, 0x07, 0x31, 0x2e, 0x32,
	0x2e, 0x33, 0x2e, 0x33, 0x22, 0x3b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a,
	0x30, 0x2a, 0x14, 0x4f, 0x50, 0x4d, 0x2e, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x20, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x52, 0x23, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x49, 0x66, 0x61, 0x12, 0x9e, 0x02, 0x0a,
	0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x48, 0x4c, 0x31, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0xb1, 0x01, 0x8a, 0x97,
	0x22, 0xac, 0x01, 0x0a, 0x45, 0x28, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x29, 0x20, 0x44, 0x6f,
	0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x20, 0x28, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x29, 0x12, 0x07, 0x4f, 0x50, 0x4d, 0x2e,
	0x32, 0x2e, 0x34, 0x1a, 0x07, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x2e, 0x33, 0x22, 0x3b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x30, 0x2a, 0x14, 0x4f, 0x50, 0x4d, 0x2e, 0x09,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x20, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x52,
	0x1c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x8f, 0x02,
	0x0a, 0x1e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x48, 0x4c, 0x31, 0x36, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x42, 0xa6, 0x01, 0x8a, 0x97, 0x22,
	0xa1, 0x01, 0x0a, 0x3a, 0x28, 0x49, 0x66, 0x20, 0x79, 0x65, 0x73, 0x29, 0x20, 0x44, 0x6f, 0x20,
	0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x69,
	0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x07,
	0x4f, 0x50, 0x4d, 0x2e, 0x32, 0x2e, 0x34, 0x1a, 0x07, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x2e, 0x34,
	0x22, 0x3b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x30, 0x2a, 0x14, 0x4f,
	0x50, 0x4d, 0x2e, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x20, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x52, 0x1a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12,
	0x87, 0x02, 0x0a, 0x26, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xb3, 0x01, 0x8a, 0x97, 0x22, 0xae, 0x01, 0x0a, 0x2f, 0x49, 0x66, 0x20, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x27, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x27, 0x20, 0x74,
	0x6f, 0x20, 0x4f, 0x50, 0x4d, 0x2e, 0x32, 0x2e, 0x33, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x12, 0x22, 0x4f, 0x50, 0x4d, 0x2e, 0x32,
	0x2e, 0x34, 0x2e, 0x31, 0x20, 0x2d, 0x20, 0x49, 0x66, 0x20, 0x59, 0x65, 0x73, 0x2c, 0x20, 0x70,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x1a, 0x0f, 0x31,
	0x2e, 0x32, 0x2e, 0x33, 0x2e, 0x34, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x22, 0x2d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x3f, 0x31, 0x3a, 0x30, 0x2a, 0x17, 0x47,
	0x49, 0x2e, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x21, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x12, 0xd8, 0x01, 0x0a, 0x0e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xb0, 0x01, 0x8a, 0x97, 0x22, 0xab, 0x01, 0x0a, 0x46, 0x28, 0x49, 0x66, 0x20,
	0x79, 0x65, 0x73, 0x29, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x07, 0x4f, 0x50, 0x4d, 0x2e, 0x32, 0x2e, 0x34, 0x1a, 0x05, 0x31, 0x2e, 0x32,
	0x2e, 0x34, 0x22, 0x3b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x30, 0x2a,
	0x14, 0x4f, 0x50, 0x4d, 0x2e, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x20,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0xcd, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x9f, 0x01, 0x8a, 0x97, 0x22, 0x9a, 0x01, 0x0a, 0x35, 0x28, 0x49, 0x66, 0x20, 0x79, 0x65,
	0x73, 0x29, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x07, 0x4f, 0x50, 0x4d, 0x2e, 0x32, 0x2e, 0x35, 0x1a, 0x05, 0x31, 0x2e, 0x32, 0x2e, 0x35, 0x22,
	0x3b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3f, 0x31, 0x3a, 0x30, 0x2a, 0x14, 0x4f, 0x50,
	0x4d, 0x2e, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x20, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x52, 0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x05, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x12, 0x19, 0x0a,
	0x15, 0x59, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x59, 0x10, 0x01, 0x12,
	0x05, 0x0a, 0x01, 0x4e, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x41, 0x10, 0x03, 0x42, 0x3d,
	0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_standards_open_v1_RT000HL16_proto_rawDescOnce sync.Once
	file_standards_open_v1_RT000HL16_proto_rawDescData = file_standards_open_v1_RT000HL16_proto_rawDesc
)

func file_standards_open_v1_RT000HL16_proto_rawDescGZIP() []byte {
	file_standards_open_v1_RT000HL16_proto_rawDescOnce.Do(func() {
		file_standards_open_v1_RT000HL16_proto_rawDescData = protoimpl.X.CompressGZIP(file_standards_open_v1_RT000HL16_proto_rawDescData)
	})
	return file_standards_open_v1_RT000HL16_proto_rawDescData
}

var file_standards_open_v1_RT000HL16_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_standards_open_v1_RT000HL16_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_standards_open_v1_RT000HL16_proto_goTypes = []interface{}{
	(RT000HL16_YesNo)(0), // 0: standards.open.v1.RT000HL16.YesNo
	(RT000HL16_GeneralInformation_FundRelatedActivities)(0),    // 1: standards.open.v1.RT000HL16.GeneralInformation.FundRelatedActivities
	(RT000HL16_GeneralInformation_FundBusinessDescriptions)(0), // 2: standards.open.v1.RT000HL16.GeneralInformation.FundBusinessDescriptions
	(RT000HL16_GeneralInformation_Headcount)(0),                // 3: standards.open.v1.RT000HL16.GeneralInformation.Headcount
	(*RT000HL16)(nil),                    // 4: standards.open.v1.RT000HL16
	(*RT000HL16_GeneralInformation)(nil), // 5: standards.open.v1.RT000HL16.GeneralInformation
	(*RT000HL16_OperatingModel)(nil),     // 6: standards.open.v1.RT000HL16.OperatingModel
}
var file_standards_open_v1_RT000HL16_proto_depIdxs = []int32{
	5,  // 0: standards.open.v1.RT000HL16.general_information:type_name -> standards.open.v1.RT000HL16.GeneralInformation
	0,  // 1: standards.open.v1.RT000HL16.GeneralInformation.facta_compliant:type_name -> standards.open.v1.RT000HL16.YesNo
	0,  // 2: standards.open.v1.RT000HL16.GeneralInformation.aeoi_or_crs_compliant:type_name -> standards.open.v1.RT000HL16.YesNo
	1,  // 3: standards.open.v1.RT000HL16.GeneralInformation.type_of_fund_related_activity:type_name -> standards.open.v1.RT000HL16.GeneralInformation.FundRelatedActivities
	2,  // 4: standards.open.v1.RT000HL16.GeneralInformation.fund_business_description:type_name -> standards.open.v1.RT000HL16.GeneralInformation.FundBusinessDescriptions
	3,  // 5: standards.open.v1.RT000HL16.GeneralInformation.legal_entity_staff_headcount:type_name -> standards.open.v1.RT000HL16.GeneralInformation.Headcount
	0,  // 6: standards.open.v1.RT000HL16.OperatingModel.incorporation_aligned_with_tax_residence:type_name -> standards.open.v1.RT000HL16.YesNo
	0,  // 7: standards.open.v1.RT000HL16.OperatingModel.regulated_by_financial_supervisory_authority:type_name -> standards.open.v1.RT000HL16.YesNo
	0,  // 8: standards.open.v1.RT000HL16.OperatingModel.financial_supervisory_authority:type_name -> standards.open.v1.RT000HL16.YesNo
	0,  // 9: standards.open.v1.RT000HL16.OperatingModel.licenses_in_place_insurance_company:type_name -> standards.open.v1.RT000HL16.YesNo
	0,  // 10: standards.open.v1.RT000HL16.OperatingModel.licenses_in_place_investment_management_company:type_name -> standards.open.v1.RT000HL16.YesNo
	0,  // 11: standards.open.v1.RT000HL16.OperatingModel.licenses_in_place_financial_advisory_ifa:type_name -> standards.open.v1.RT000HL16.YesNo
	0,  // 12: standards.open.v1.RT000HL16.OperatingModel.licenses_in_place_broker_trading:type_name -> standards.open.v1.RT000HL16.YesNo
	0,  // 13: standards.open.v1.RT000HL16.OperatingModel.licenses_in_place_broker_other:type_name -> standards.open.v1.RT000HL16.YesNo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_standards_open_v1_RT000HL16_proto_init() }
func file_standards_open_v1_RT000HL16_proto_init() {
	if File_standards_open_v1_RT000HL16_proto != nil {
		return
	}
	file_standards_open_v1_fieldOptionsExtentions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_standards_open_v1_RT000HL16_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000HL16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000HL16_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000HL16_GeneralInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_standards_open_v1_RT000HL16_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT000HL16_OperatingModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_standards_open_v1_RT000HL16_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_standards_open_v1_RT000HL16_proto_goTypes,
		DependencyIndexes: file_standards_open_v1_RT000HL16_proto_depIdxs,
		EnumInfos:         file_standards_open_v1_RT000HL16_proto_enumTypes,
		MessageInfos:      file_standards_open_v1_RT000HL16_proto_msgTypes,
	}.Build()
	File_standards_open_v1_RT000HL16_proto = out.File
	file_standards_open_v1_RT000HL16_proto_rawDesc = nil
	file_standards_open_v1_RT000HL16_proto_goTypes = nil
	file_standards_open_v1_RT000HL16_proto_depIdxs = nil
}
