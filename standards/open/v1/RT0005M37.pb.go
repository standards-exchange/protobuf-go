// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: RT0005M37.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	money "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RT0005M37_YesNoExplain_Response int32

const (
	RT0005M37_YesNoExplain_RESPONSE_UNSPECIFIED RT0005M37_YesNoExplain_Response = 0
	RT0005M37_YesNoExplain_YES                  RT0005M37_YesNoExplain_Response = 1
	RT0005M37_YesNoExplain_NO                   RT0005M37_YesNoExplain_Response = 2
)

// Enum value maps for RT0005M37_YesNoExplain_Response.
var (
	RT0005M37_YesNoExplain_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT0005M37_YesNoExplain_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT0005M37_YesNoExplain_Response) Enum() *RT0005M37_YesNoExplain_Response {
	p := new(RT0005M37_YesNoExplain_Response)
	*p = x
	return p
}

func (x RT0005M37_YesNoExplain_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_YesNoExplain_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[0].Descriptor()
}

func (RT0005M37_YesNoExplain_Response) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[0]
}

func (x RT0005M37_YesNoExplain_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_YesNoExplain_Response.Descriptor instead.
func (RT0005M37_YesNoExplain_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 0, 0}
}

type RT0005M37_YesExplainNo_Response int32

const (
	RT0005M37_YesExplainNo_RESPONSE_UNSPECIFIED RT0005M37_YesExplainNo_Response = 0
	RT0005M37_YesExplainNo_YES                  RT0005M37_YesExplainNo_Response = 1
	RT0005M37_YesExplainNo_NO                   RT0005M37_YesExplainNo_Response = 2
)

// Enum value maps for RT0005M37_YesExplainNo_Response.
var (
	RT0005M37_YesExplainNo_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT0005M37_YesExplainNo_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT0005M37_YesExplainNo_Response) Enum() *RT0005M37_YesExplainNo_Response {
	p := new(RT0005M37_YesExplainNo_Response)
	*p = x
	return p
}

func (x RT0005M37_YesExplainNo_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_YesExplainNo_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[1].Descriptor()
}

func (RT0005M37_YesExplainNo_Response) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[1]
}

func (x RT0005M37_YesExplainNo_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_YesExplainNo_Response.Descriptor instead.
func (RT0005M37_YesExplainNo_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 1, 0}
}

type RT0005M37_YesNoAndExplain_Response int32

const (
	RT0005M37_YesNoAndExplain_RESPONSE_UNSPECIFIED RT0005M37_YesNoAndExplain_Response = 0
	RT0005M37_YesNoAndExplain_YES                  RT0005M37_YesNoAndExplain_Response = 1
	RT0005M37_YesNoAndExplain_NO                   RT0005M37_YesNoAndExplain_Response = 2
)

// Enum value maps for RT0005M37_YesNoAndExplain_Response.
var (
	RT0005M37_YesNoAndExplain_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT0005M37_YesNoAndExplain_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT0005M37_YesNoAndExplain_Response) Enum() *RT0005M37_YesNoAndExplain_Response {
	p := new(RT0005M37_YesNoAndExplain_Response)
	*p = x
	return p
}

func (x RT0005M37_YesNoAndExplain_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_YesNoAndExplain_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[2].Descriptor()
}

func (RT0005M37_YesNoAndExplain_Response) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[2]
}

func (x RT0005M37_YesNoAndExplain_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_YesNoAndExplain_Response.Descriptor instead.
func (RT0005M37_YesNoAndExplain_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Enumerations of ownership type
type RT0005M37_EntityAndOwnership_OwnershipType int32

const (
	// The ownership type is unspecified
	RT0005M37_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED RT0005M37_EntityAndOwnership_OwnershipType = 0
	// Member owned / mutual
	RT0005M37_EntityAndOwnership_MEMBER_OR_MUTUAL RT0005M37_EntityAndOwnership_OwnershipType = 1
	// Government or state owned by more than 25%
	RT0005M37_EntityAndOwnership_GOVERNMENT_OR_STATE RT0005M37_EntityAndOwnership_OwnershipType = 2
	// Privately owned
	RT0005M37_EntityAndOwnership_PRIVATE RT0005M37_EntityAndOwnership_OwnershipType = 3
)

// Enum value maps for RT0005M37_EntityAndOwnership_OwnershipType.
var (
	RT0005M37_EntityAndOwnership_OwnershipType_name = map[int32]string{
		0: "OWNERSHIP_TYPE_UNSPECIFIED",
		1: "MEMBER_OR_MUTUAL",
		2: "GOVERNMENT_OR_STATE",
		3: "PRIVATE",
	}
	RT0005M37_EntityAndOwnership_OwnershipType_value = map[string]int32{
		"OWNERSHIP_TYPE_UNSPECIFIED": 0,
		"MEMBER_OR_MUTUAL":           1,
		"GOVERNMENT_OR_STATE":        2,
		"PRIVATE":                    3,
	}
)

func (x RT0005M37_EntityAndOwnership_OwnershipType) Enum() *RT0005M37_EntityAndOwnership_OwnershipType {
	p := new(RT0005M37_EntityAndOwnership_OwnershipType)
	*p = x
	return p
}

func (x RT0005M37_EntityAndOwnership_OwnershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_EntityAndOwnership_OwnershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[3].Descriptor()
}

func (RT0005M37_EntityAndOwnership_OwnershipType) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[3]
}

func (x RT0005M37_EntityAndOwnership_OwnershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_OwnershipType.Descriptor instead.
func (RT0005M37_EntityAndOwnership_OwnershipType) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 0}
}

// Enumerations of financial identifiers
type RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_IDENTIFIER_UNSPECIFIED RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 0
	// FIGI (Financial Instrument Global Identifier). To look up the FIGI navigate to https://www.openfigi.com/.
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FIGI RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 1
	// PermID (Refinitiv Permanent Identifier). To look up the PermID navigate to https://permid.org/
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_PERM_ID RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 2
)

// Enum value maps for RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier.
var (
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier_name = map[int32]string{
		0: "IDENTIFIER_UNSPECIFIED",
		1: "FIGI",
		2: "PERM_ID",
	}
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"FIGI":                   1,
		"PERM_ID":                2,
	}
)

func (x RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Enum() *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier {
	p := new(RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[4].Descriptor()
}

func (RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[4]
}

func (x RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier.Descriptor instead.
func (RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 1, 0}
}

// Types of account holders
type RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType int32

const (
	// Beneficial owner unspecified
	RT0005M37_EntityAndOwnership_SignificantShareholder_TYPE_UNSPECIFIED RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 0
	// The beneficial owner is a natural person
	RT0005M37_EntityAndOwnership_SignificantShareholder_NATURAL_PERSON RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 1
	// The beneficial owner is a legal entity
	RT0005M37_EntityAndOwnership_SignificantShareholder_LEGAL_ENTITY RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 2
)

// Enum value maps for RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType.
var (
	RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NATURAL_PERSON",
		2: "LEGAL_ENTITY",
	}
	RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"NATURAL_PERSON":   1,
		"LEGAL_ENTITY":     2,
	}
)

func (x RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Enum() *RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType {
	p := new(RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType)
	*p = x
	return p
}

func (x RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[5].Descriptor()
}

func (RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[5]
}

func (x RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType.Descriptor instead.
func (RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

// Wolfsberg Group Correspondent Banking Due Diligence Questionnaire (CBDDQ) V1.3.
// The questionnaire is required to be answered on a Legal Entity (LE) level. The Financial Institution should answer
// the questionnaire at the entity level including any branches for which the client base, products and control
// model are materially simialr to the LE Head Office. This Questionnaire should not cover more than one LE.
// Each question will need to be addressed from the perspective of the LE on behalf of all of its branches.
type RT0005M37 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the financial institution
	FinancialInstitutionName string `protobuf:"bytes,1,opt,name=financial_institution_name,json=financialInstitutionName,proto3" json:"financial_institution_name,omitempty"`
	// The three letter ISO code of the country in which the LE is located
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	// Section 1. Information related to legal entity and its ownership
	EntityAndOwnership *RT0005M37_EntityAndOwnership `protobuf:"bytes,3,opt,name=entity_and_ownership,json=entityAndOwnership,proto3" json:"entity_and_ownership,omitempty"`
	// Section 2. Information related to the products and services offered
	ProductsAndServices *RT0005M37_ProductsAndServices `protobuf:"bytes,4,opt,name=products_and_services,json=productsAndServices,proto3" json:"products_and_services,omitempty"`
	// Section 3. Information related to the AML, CTF and Sanctions program
	AmlCtfAndSanctionsProgram *RT0005M37_AMLAndCTFAndSanctionsProgram `protobuf:"bytes,5,opt,name=aml_ctf_and_sanctions_program,json=amlCtfAndSanctionsProgram,proto3" json:"aml_ctf_and_sanctions_program,omitempty"`
	// Section 4. Information related to the Anti Bribery and Corruption section program
	AntiBriberyAndCorruption *RT0005M37_AMLAndCTFAndSanctionsProgram `protobuf:"bytes,6,opt,name=anti_bribery_and_corruption,json=antiBriberyAndCorruption,proto3" json:"anti_bribery_and_corruption,omitempty"`
	// Section 5. Information related to the AML, CTF and Sanctions Policies and Procedures
	AmlCtfAndSanctionsPoliciesAndProcedures *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures `protobuf:"bytes,7,opt,name=aml_ctf_and_sanctions_policies_and_procedures,json=amlCtfAndSanctionsPoliciesAndProcedures,proto3" json:"aml_ctf_and_sanctions_policies_and_procedures,omitempty"`
	// Section 6. Information related to the AML, CTF and Sanctions Risk Assessment
	AmlCtfAndSanctionsRiskAssessment *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment `protobuf:"bytes,8,opt,name=aml_ctf_and_sanctions_risk_assessment,json=amlCtfAndSanctionsRiskAssessment,proto3" json:"aml_ctf_and_sanctions_risk_assessment,omitempty"`
	// Section 7. Information related to KYC, CDD and EDD
	KycAndCddAndEdd *RT0005M37_KYCAndCDDAndEDD `protobuf:"bytes,9,opt,name=kyc_and_cdd_and_edd,json=kycAndCddAndEdd,proto3" json:"kyc_and_cdd_and_edd,omitempty"`
}

func (x *RT0005M37) Reset() {
	*x = RT0005M37{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37) ProtoMessage() {}

func (x *RT0005M37) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37.ProtoReflect.Descriptor instead.
func (*RT0005M37) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0}
}

func (x *RT0005M37) GetFinancialInstitutionName() string {
	if x != nil {
		return x.FinancialInstitutionName
	}
	return ""
}

func (x *RT0005M37) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *RT0005M37) GetEntityAndOwnership() *RT0005M37_EntityAndOwnership {
	if x != nil {
		return x.EntityAndOwnership
	}
	return nil
}

func (x *RT0005M37) GetProductsAndServices() *RT0005M37_ProductsAndServices {
	if x != nil {
		return x.ProductsAndServices
	}
	return nil
}

func (x *RT0005M37) GetAmlCtfAndSanctionsProgram() *RT0005M37_AMLAndCTFAndSanctionsProgram {
	if x != nil {
		return x.AmlCtfAndSanctionsProgram
	}
	return nil
}

func (x *RT0005M37) GetAntiBriberyAndCorruption() *RT0005M37_AMLAndCTFAndSanctionsProgram {
	if x != nil {
		return x.AntiBriberyAndCorruption
	}
	return nil
}

func (x *RT0005M37) GetAmlCtfAndSanctionsPoliciesAndProcedures() *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures {
	if x != nil {
		return x.AmlCtfAndSanctionsPoliciesAndProcedures
	}
	return nil
}

func (x *RT0005M37) GetAmlCtfAndSanctionsRiskAssessment() *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment {
	if x != nil {
		return x.AmlCtfAndSanctionsRiskAssessment
	}
	return nil
}

func (x *RT0005M37) GetKycAndCddAndEdd() *RT0005M37_KYCAndCDDAndEDD {
	if x != nil {
		return x.KycAndCddAndEdd
	}
	return nil
}

// Batch set of RT0005M37 responses
type RT0005M37Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*RT0005M37 `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *RT0005M37Batch) Reset() {
	*x = RT0005M37Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37Batch) ProtoMessage() {}

func (x *RT0005M37Batch) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37Batch.ProtoReflect.Descriptor instead.
func (*RT0005M37Batch) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{1}
}

func (x *RT0005M37Batch) GetResponse() []*RT0005M37 {
	if x != nil {
		return x.Response
	}
	return nil
}

// Response where a NO requires further information
type RT0005M37_YesNoExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT0005M37_YesNoExplain_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT0005M37_YesNoExplain_Response" json:"response,omitempty"`
	// Explanation if the answer is `NO`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT0005M37_YesNoExplain) Reset() {
	*x = RT0005M37_YesNoExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_YesNoExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_YesNoExplain) ProtoMessage() {}

func (x *RT0005M37_YesNoExplain) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_YesNoExplain.ProtoReflect.Descriptor instead.
func (*RT0005M37_YesNoExplain) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT0005M37_YesNoExplain) GetResponse() RT0005M37_YesNoExplain_Response {
	if x != nil {
		return x.Response
	}
	return RT0005M37_YesNoExplain_RESPONSE_UNSPECIFIED
}

func (x *RT0005M37_YesNoExplain) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Response where a YES requires further information
type RT0005M37_YesExplainNo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT0005M37_YesExplainNo_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT0005M37_YesExplainNo_Response" json:"response,omitempty"`
	// Explanation if the answer is `YES`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT0005M37_YesExplainNo) Reset() {
	*x = RT0005M37_YesExplainNo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_YesExplainNo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_YesExplainNo) ProtoMessage() {}

func (x *RT0005M37_YesExplainNo) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_YesExplainNo.ProtoReflect.Descriptor instead.
func (*RT0005M37_YesExplainNo) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT0005M37_YesExplainNo) GetResponse() RT0005M37_YesExplainNo_Response {
	if x != nil {
		return x.Response
	}
	return RT0005M37_YesExplainNo_RESPONSE_UNSPECIFIED
}

func (x *RT0005M37_YesExplainNo) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Response where further information is required regardless of whether a Yes or No is provided
type RT0005M37_YesNoAndExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT0005M37_YesNoAndExplain_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT0005M37_YesNoAndExplain_Response" json:"response,omitempty"`
	// Provide further information for the response
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT0005M37_YesNoAndExplain) Reset() {
	*x = RT0005M37_YesNoAndExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_YesNoAndExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_YesNoAndExplain) ProtoMessage() {}

func (x *RT0005M37_YesNoAndExplain) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_YesNoAndExplain.ProtoReflect.Descriptor instead.
func (*RT0005M37_YesNoAndExplain) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT0005M37_YesNoAndExplain) GetResponse() RT0005M37_YesNoAndExplain_Response {
	if x != nil {
		return x.Response
	}
	return RT0005M37_YesNoAndExplain_RESPONSE_UNSPECIFIED
}

func (x *RT0005M37_YesNoAndExplain) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Definition of Entity and Ownership section
type RT0005M37_EntityAndOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q1.1. The full legal name of the entity
	LegalName string `protobuf:"bytes,1,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// Q1.2 List all foreign branches covered by this questionnaire.
	CoveredBranches []*RT0005M37_EntityAndOwnership_Branch `protobuf:"bytes,2,rep,name=covered_branches,json=coveredBranches,proto3" json:"covered_branches,omitempty"`
	// Q1.3 The full legal (registered) address of the entity
	LegalAddress string `protobuf:"bytes,3,opt,name=legal_address,json=legalAddress,proto3" json:"legal_address,omitempty"`
	// Q1.4 The full primary business address of the entity
	BusinessAddress string `protobuf:"bytes,4,opt,name=business_address,json=businessAddress,proto3" json:"business_address,omitempty"`
	// Q1.5 The date in which the entity was incorporated
	DateOfIncorporation *date.Date `protobuf:"bytes,5,opt,name=date_of_incorporation,json=dateOfIncorporation,proto3" json:"date_of_incorporation,omitempty"`
	// Q1.6 Select the ownership type
	OwnershipType RT0005M37_EntityAndOwnership_OwnershipType `protobuf:"varint,6,opt,name=ownership_type,json=ownershipType,proto3,enum=standards.open.v1.RT0005M37_EntityAndOwnership_OwnershipType" json:"ownership_type,omitempty"`
	// Q1.6aa If publicly traded, provide the primary security identifier the traded instrument
	SecurityIdentifier *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier `protobuf:"bytes,7,opt,name=security_identifier,json=securityIdentifier,proto3" json:"security_identifier,omitempty"`
	// Q1.6d1 If privately owned, provide details of shareholders with a holding of 10%
	// or more up the ownership chain
	SignificantShareholders []*RT0005M37_EntityAndOwnership_SignificantShareholder `protobuf:"bytes,8,rep,name=significant_shareholders,json=significantShareholders,proto3" json:"significant_shareholders,omitempty"`
	// If privately owned, has a beneficial ownership structure chart been attached?
	StructureChart *RT0005M37_YesNoExplain `protobuf:"bytes,9,opt,name=structure_chart,json=structureChart,proto3" json:"structure_chart,omitempty"`
	// Provide the % of the entity's total shares composed of bearer shares (for example 10% enter as 0.1)
	PercentBearerShares float32 `protobuf:"fixed32,10,opt,name=percent_bearer_shares,json=percentBearerShares,proto3" json:"percent_bearer_shares,omitempty"`
	// Q1.8 Does the entity operate any of its branches, operate under an Offshore Banking License (OBL)?
	AnyBranchesUnderOffshoreBankingLicense bool `protobuf:"varint,11,opt,name=any_branches_under_offshore_banking_license,json=anyBranchesUnderOffshoreBankingLicense,proto3" json:"any_branches_under_offshore_banking_license,omitempty"`
	// Q1.8a, List any branches operate under offshore banking license (if TRUE to Q1.8)
	BranchesUnderOffshoreBankingLicense []*RT0005M37_EntityAndOwnership_Branch `protobuf:"bytes,12,rep,name=branches_under_offshore_banking_license,json=branchesUnderOffshoreBankingLicense,proto3" json:"branches_under_offshore_banking_license,omitempty"`
	// Q1.9 Provide the name of the primary financial regulator / supervisory authority
	FinancialRegulatorOrSupervisoryAuthority string `protobuf:"bytes,13,opt,name=financial_regulator_or_supervisory_authority,json=financialRegulatorOrSupervisoryAuthority,proto3" json:"financial_regulator_or_supervisory_authority,omitempty"`
	// Q1.10 The LEI identifier of the company (if available)
	LEI string `protobuf:"bytes,14,opt,name=LEI,proto3" json:"LEI,omitempty"`
	// Q1.11 Provide the full legal name of the ultimate parent (if different from the entity completing the DDQ)
	UltimateParentLegalName string `protobuf:"bytes,15,opt,name=ultimate_parent_legal_name,json=ultimateParentLegalName,proto3" json:"ultimate_parent_legal_name,omitempty"`
	// Q1.12 Jurisdiction of licensing authority and regulator of ultimate parent (ISO three country code)
	JurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent string `protobuf:"bytes,16,opt,name=jurisdiction_of_licensing_authority_and_regulator_of_ultimate_parent,json=jurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent,proto3" json:"jurisdiction_of_licensing_authority_and_regulator_of_ultimate_parent,omitempty"`
	// Q13a. Mark true if an applicable business area - Retail banking.
	RetailBanking bool `protobuf:"varint,17,opt,name=retail_banking,json=retailBanking,proto3" json:"retail_banking,omitempty"`
	// Q13b. Mark true if an applicable business area - Private Banking / Wealth Management.
	PrivateBankingWealthManagement bool `protobuf:"varint,18,opt,name=private_banking_wealth_management,json=privateBankingWealthManagement,proto3" json:"private_banking_wealth_management,omitempty"`
	// Q13c. Mark true if an applicable business area - Commercial Banking.
	CommercialBanking bool `protobuf:"varint,19,opt,name=commercial_banking,json=commercialBanking,proto3" json:"commercial_banking,omitempty"`
	// Q13d. Mark true if an applicable business area - Transactional Banking.
	TransactionalBanking bool `protobuf:"varint,20,opt,name=transactional_banking,json=transactionalBanking,proto3" json:"transactional_banking,omitempty"`
	// Q13e. Mark true if an applicable business area - Investment Banking.
	InvestmentBanking bool `protobuf:"varint,21,opt,name=investment_banking,json=investmentBanking,proto3" json:"investment_banking,omitempty"`
	// Q13f. Mark true if an applicable business area - Financial Markets Trading.
	FinancialMarketsTrading bool `protobuf:"varint,22,opt,name=financial_markets_trading,json=financialMarketsTrading,proto3" json:"financial_markets_trading,omitempty"`
	// Q13g. Mark true if an applicable business area - Securities Services / Custody.
	SecuritiesServicesOrCustody bool `protobuf:"varint,23,opt,name=securities_services_or_custody,json=securitiesServicesOrCustody,proto3" json:"securities_services_or_custody,omitempty"`
	// Q13h. Mark true if an applicable business area - Broker / Dealer.
	BrokerDealer bool `protobuf:"varint,24,opt,name=broker_dealer,json=brokerDealer,proto3" json:"broker_dealer,omitempty"`
	// Q13i. Mark true if an applicable business area - Multilateral Development Bank.
	MultilateralDevelopmentBank bool `protobuf:"varint,25,opt,name=multilateral_development_bank,json=multilateralDevelopmentBank,proto3" json:"multilateral_development_bank,omitempty"`
	// Q13j. Mark true if an applicable business area - Other.
	OtherBusinessArea string `protobuf:"bytes,26,opt,name=other_business_area,json=otherBusinessArea,proto3" json:"other_business_area,omitempty"`
	// Q14. Does the Entity have a significant (10% or more) portfolio of non-resident customers or does it
	// derive more than 10% of its revenue from non-resident customers? (Non-resident means customers primarily
	//  resident in a different jurisdiction to the location where bank service are provided.)
	SignificantNonResidentCustomers bool `protobuf:"varint,27,opt,name=significant_non_resident_customers,json=significantNonResidentCustomers,proto3" json:"significant_non_resident_customers,omitempty"`
	// If TRUE to Q14a, list the three letter ISO codes of the top five countries where
	// non-resident customers are located
	TopFiveCountries []string `protobuf:"bytes,28,rep,name=top_five_countries,json=topFiveCountries,proto3" json:"top_five_countries,omitempty"`
	// Q15. To the closest value, provide Q15a the number of employees
	NumberOfEmployees int32 `protobuf:"varint,29,opt,name=number_of_employees,json=numberOfEmployees,proto3" json:"number_of_employees,omitempty"`
	// Q15. To the closest value, provide Q15b total assets
	TotalAssets *money.Money `protobuf:"bytes,30,opt,name=total_assets,json=totalAssets,proto3" json:"total_assets,omitempty"`
	// Q16. Confirm that all responses provided in this section are representative of all the LE's branches.
	// If NO, explain by clarifying which questions the differences relate to and the branches that his applies to.
	RepresentativeOfBranches *RT0005M37_YesNoExplain `protobuf:"bytes,31,opt,name=representative_of_branches,json=representativeOfBranches,proto3" json:"representative_of_branches,omitempty"`
	// Q16b. If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,32,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership) Reset() {
	*x = RT0005M37_EntityAndOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RT0005M37_EntityAndOwnership) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetCoveredBranches() []*RT0005M37_EntityAndOwnership_Branch {
	if x != nil {
		return x.CoveredBranches
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetLegalAddress() string {
	if x != nil {
		return x.LegalAddress
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetBusinessAddress() string {
	if x != nil {
		return x.BusinessAddress
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetDateOfIncorporation() *date.Date {
	if x != nil {
		return x.DateOfIncorporation
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetOwnershipType() RT0005M37_EntityAndOwnership_OwnershipType {
	if x != nil {
		return x.OwnershipType
	}
	return RT0005M37_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED
}

func (x *RT0005M37_EntityAndOwnership) GetSecurityIdentifier() *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier {
	if x != nil {
		return x.SecurityIdentifier
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetSignificantShareholders() []*RT0005M37_EntityAndOwnership_SignificantShareholder {
	if x != nil {
		return x.SignificantShareholders
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetStructureChart() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.StructureChart
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetPercentBearerShares() float32 {
	if x != nil {
		return x.PercentBearerShares
	}
	return 0
}

func (x *RT0005M37_EntityAndOwnership) GetAnyBranchesUnderOffshoreBankingLicense() bool {
	if x != nil {
		return x.AnyBranchesUnderOffshoreBankingLicense
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetBranchesUnderOffshoreBankingLicense() []*RT0005M37_EntityAndOwnership_Branch {
	if x != nil {
		return x.BranchesUnderOffshoreBankingLicense
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetFinancialRegulatorOrSupervisoryAuthority() string {
	if x != nil {
		return x.FinancialRegulatorOrSupervisoryAuthority
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetLEI() string {
	if x != nil {
		return x.LEI
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetUltimateParentLegalName() string {
	if x != nil {
		return x.UltimateParentLegalName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetJurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent() string {
	if x != nil {
		return x.JurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetRetailBanking() bool {
	if x != nil {
		return x.RetailBanking
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetPrivateBankingWealthManagement() bool {
	if x != nil {
		return x.PrivateBankingWealthManagement
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetCommercialBanking() bool {
	if x != nil {
		return x.CommercialBanking
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetTransactionalBanking() bool {
	if x != nil {
		return x.TransactionalBanking
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetInvestmentBanking() bool {
	if x != nil {
		return x.InvestmentBanking
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetFinancialMarketsTrading() bool {
	if x != nil {
		return x.FinancialMarketsTrading
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetSecuritiesServicesOrCustody() bool {
	if x != nil {
		return x.SecuritiesServicesOrCustody
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetBrokerDealer() bool {
	if x != nil {
		return x.BrokerDealer
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetMultilateralDevelopmentBank() bool {
	if x != nil {
		return x.MultilateralDevelopmentBank
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetOtherBusinessArea() string {
	if x != nil {
		return x.OtherBusinessArea
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetSignificantNonResidentCustomers() bool {
	if x != nil {
		return x.SignificantNonResidentCustomers
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetTopFiveCountries() []string {
	if x != nil {
		return x.TopFiveCountries
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetNumberOfEmployees() int32 {
	if x != nil {
		return x.NumberOfEmployees
	}
	return 0
}

func (x *RT0005M37_EntityAndOwnership) GetTotalAssets() *money.Money {
	if x != nil {
		return x.TotalAssets
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetRepresentativeOfBranches() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RepresentativeOfBranches
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Definition of Products & Services section
type RT0005M37_ProductsAndServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q17a. Does the entity offer Correspondent banking.
	OffersCorrespondentBanking bool `protobuf:"varint,1,opt,name=offers_correspondent_banking,json=offersCorrespondentBanking,proto3" json:"offers_correspondent_banking,omitempty"`
	// Q17a2 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity offer Correspondent
	// Banking services to domestic banks?
	OffersCorrespondentBankingToDomesticBanks *RT0005M37_YesNoAndExplain `protobuf:"bytes,2,opt,name=offers_correspondent_banking_to_domestic_banks,json=offersCorrespondentBankingToDomesticBanks,proto3" json:"offers_correspondent_banking_to_domestic_banks,omitempty"`
	// Q17a3 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity allow domestic bank clients to
	// provide downstream relationships? If Yes, describe.
	OffersCorrespondentBankingAndAllowsDomesticClientsToProvideDownstreamRelationships *RT0005M37_YesNoAndExplain `protobuf:"bytes,3,opt,name=offers_correspondent_banking_and_allows_domestic_clients_to_provide_downstream_relationships,json=offersCorrespondentBankingAndAllowsDomesticClientsToProvideDownstreamRelationships,proto3" json:"offers_correspondent_banking_and_allows_domestic_clients_to_provide_downstream_relationships,omitempty"`
	// Q17a4 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity have processes and procedures
	// in place to identify downstream relationships with domestic banks?
	OffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyDownstreamRelationshipsWithDomesticBanks *RT0005M37_YesNoAndExplain `protobuf:"bytes,4,opt,name=offers_correspondent_banking_and_has_procedures_in_place_to_identify_downstream_relationships_with_domestic_banks,json=offersCorrespondentBankingAndHasProceduresInPlaceToIdentifyDownstreamRelationshipsWithDomesticBanks,proto3" json:"offers_correspondent_banking_and_has_procedures_in_place_to_identify_downstream_relationships_with_domestic_banks,omitempty"`
	// Q17a5 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity offer Correspondent
	// Banking services to foreign banks?
	OffersCorrespondentBankingToForeignBanks *RT0005M37_YesNoAndExplain `protobuf:"bytes,5,opt,name=offers_correspondent_banking_to_foreign_banks,json=offersCorrespondentBankingToForeignBanks,proto3" json:"offers_correspondent_banking_to_foreign_banks,omitempty"`
	// Q17a6 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity allow foreign bank clients to
	// provide downstream relationships? If Yes, describe.
	OffersCorrespondentBankingAndAllowsForeignClientsToProvideDownstreamRelationships *RT0005M37_YesNoAndExplain `protobuf:"bytes,6,opt,name=offers_correspondent_banking_and_allows_foreign_clients_to_provide_downstream_relationships,json=offersCorrespondentBankingAndAllowsForeignClientsToProvideDownstreamRelationships,proto3" json:"offers_correspondent_banking_and_allows_foreign_clients_to_provide_downstream_relationships,omitempty"`
	// Q17a7 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity have processes and procedures
	// in place to identify downstream relationships with foreign banks?
	OffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyForeignRelationshipsWithDomesticBanks *RT0005M37_YesNoAndExplain `protobuf:"bytes,7,opt,name=offers_correspondent_banking_and_has_procedures_in_place_to_identify_foreign_relationships_with_domestic_banks,json=offersCorrespondentBankingAndHasProceduresInPlaceToIdentifyForeignRelationshipsWithDomesticBanks,proto3" json:"offers_correspondent_banking_and_has_procedures_in_place_to_identify_foreign_relationships_with_domestic_banks,omitempty"`
	// Q17a8 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity offer correspondent banking
	//services to regulated MSBs/MVTS?
	OffersCorrespondentBankingToRegulatedMsbsAndMvts *RT0005M37_YesNoAndExplain `protobuf:"bytes,8,opt,name=offers_correspondent_banking_to_regulated_msbs_and_mvts,json=offersCorrespondentBankingToRegulatedMsbsAndMvts,proto3" json:"offers_correspondent_banking_to_regulated_msbs_and_mvts,omitempty"`
	// Q17a8 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity offer correspondent banking
	//services to regulated MSBs/MVTS?
	OffersCorrespondentBankingAndHasProcessesToIdentifyDownstreamRelationshipsWithMsbAndMvts *RT0005M37_YesNoAndExplain `protobuf:"bytes,9,opt,name=offers_correspondent_banking_and_has_processes_to_identify_downstream_relationships_with_msb_and_mvts,json=offersCorrespondentBankingAndHasProcessesToIdentifyDownstreamRelationshipsWithMsbAndMvts,proto3" json:"offers_correspondent_banking_and_has_processes_to_identify_downstream_relationships_with_msb_and_mvts,omitempty"`
	// Q17b. Does the entity offer Private Banking?
	OffersPrivateBanking bool `protobuf:"varint,10,opt,name=offers_private_banking,json=offersPrivateBanking,proto3" json:"offers_private_banking,omitempty"`
	// Q17c. Does the entity offer Trade Finance?
	OffersTradeFinance bool `protobuf:"varint,11,opt,name=offers_trade_finance,json=offersTradeFinance,proto3" json:"offers_trade_finance,omitempty"`
	// Q17d. Does the entity offer Payable Through Accounts?
	OffersPayableThroughAccounts bool `protobuf:"varint,12,opt,name=offers_payable_through_accounts,json=offersPayableThroughAccounts,proto3" json:"offers_payable_through_accounts,omitempty"`
	// Q17e. Does the entity offer Stored Value Instruments?
	OffersStoredValueInstruments bool `protobuf:"varint,13,opt,name=offers_stored_value_instruments,json=offersStoredValueInstruments,proto3" json:"offers_stored_value_instruments,omitempty"`
	// Q17f. Does the entity offer Cross Border Bulk Cash Delivery?
	OffersCrossBorderBulkCashDelivery bool `protobuf:"varint,14,opt,name=offers_cross_border_bulk_cash_delivery,json=offersCrossBorderBulkCashDelivery,proto3" json:"offers_cross_border_bulk_cash_delivery,omitempty"`
	// Q17g. Does the entity offer Domestic Bulk Cash Delivery?
	OffersDomesticBulkCashDelivery bool `protobuf:"varint,15,opt,name=offers_domestic_bulk_cash_delivery,json=offersDomesticBulkCashDelivery,proto3" json:"offers_domestic_bulk_cash_delivery,omitempty"`
	// Q17h. Does the entity offer International Cash Letter?
	OffersInternationalCashLetter bool `protobuf:"varint,16,opt,name=offers_international_cash_letter,json=offersInternationalCashLetter,proto3" json:"offers_international_cash_letter,omitempty"`
	// Q17i. Does the entity offer Remote Deposit Capture?
	OffersRemoteDepositCapture bool `protobuf:"varint,17,opt,name=offers_remote_deposit_capture,json=offersRemoteDepositCapture,proto3" json:"offers_remote_deposit_capture,omitempty"`
	// Q17j. Does the entity offer Virtual / Digital Currencies?
	OffersVirtualDigitalCurrencies bool `protobuf:"varint,18,opt,name=offers_virtual_digital_currencies,json=offersVirtualDigitalCurrencies,proto3" json:"offers_virtual_digital_currencies,omitempty"`
	// Q17k. Does the entity offer Low Price Securities?
	OffersLowPriceSecurities bool `protobuf:"varint,19,opt,name=offers_low_price_securities,json=offersLowPriceSecurities,proto3" json:"offers_low_price_securities,omitempty"`
	// Q17l. Does the entity offer Hold Mail?
	OffersHoldMail bool `protobuf:"varint,20,opt,name=offers_hold_mail,json=offersHoldMail,proto3" json:"offers_hold_mail,omitempty"`
	// Q17m. Does the entity offer Cross Border Remittances?
	OffersCrossBorderRemittances bool `protobuf:"varint,21,opt,name=offers_cross_border_remittances,json=offersCrossBorderRemittances,proto3" json:"offers_cross_border_remittances,omitempty"`
	// Q17n. Does the entity offer Services to walk-in customers (non-account holders)?
	OffersServiceToWalkinCustomers bool `protobuf:"varint,22,opt,name=offers_service_to_walkin_customers,json=offersServiceToWalkinCustomers,proto3" json:"offers_service_to_walkin_customers,omitempty"`
	// Q17o. Does the entity offer Sponsoring Private ATMs?
	OffersSponsoringPrivateAtms bool `protobuf:"varint,23,opt,name=offers_sponsoring_private_atms,json=offersSponsoringPrivateAtms,proto3" json:"offers_sponsoring_private_atms,omitempty"`
	// Q17p. Does the entity offer Other high risk products and services identified by the Entity?
	OffersSponsoringOtherHighRiskProductsAndServices bool `protobuf:"varint,24,opt,name=offers_sponsoring_other_high_risk_products_and_services,json=offersSponsoringOtherHighRiskProductsAndServices,proto3" json:"offers_sponsoring_other_high_risk_products_and_services,omitempty"`
	// Q18. Confirm that all responses provided in the above Section PRODUCTS & SERVICES are representative of all the LE's branches
	// If NO, explain by clarifying which questions the differences relate to and the branches that his applies to.
	RepresentativeOfBranches *RT0005M37_YesNoExplain `protobuf:"bytes,25,opt,name=representative_of_branches,json=representativeOfBranches,proto3" json:"representative_of_branches,omitempty"`
	// Q18b. If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,32,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT0005M37_ProductsAndServices) Reset() {
	*x = RT0005M37_ProductsAndServices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_ProductsAndServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_ProductsAndServices) ProtoMessage() {}

func (x *RT0005M37_ProductsAndServices) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_ProductsAndServices.ProtoReflect.Descriptor instead.
func (*RT0005M37_ProductsAndServices) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBanking() bool {
	if x != nil {
		return x.OffersCorrespondentBanking
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingToDomesticBanks() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingToDomesticBanks
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndAllowsDomesticClientsToProvideDownstreamRelationships() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndAllowsDomesticClientsToProvideDownstreamRelationships
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyDownstreamRelationshipsWithDomesticBanks() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyDownstreamRelationshipsWithDomesticBanks
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingToForeignBanks() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingToForeignBanks
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndAllowsForeignClientsToProvideDownstreamRelationships() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndAllowsForeignClientsToProvideDownstreamRelationships
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyForeignRelationshipsWithDomesticBanks() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyForeignRelationshipsWithDomesticBanks
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingToRegulatedMsbsAndMvts() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingToRegulatedMsbsAndMvts
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndHasProcessesToIdentifyDownstreamRelationshipsWithMsbAndMvts() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndHasProcessesToIdentifyDownstreamRelationshipsWithMsbAndMvts
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersPrivateBanking() bool {
	if x != nil {
		return x.OffersPrivateBanking
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersTradeFinance() bool {
	if x != nil {
		return x.OffersTradeFinance
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersPayableThroughAccounts() bool {
	if x != nil {
		return x.OffersPayableThroughAccounts
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersStoredValueInstruments() bool {
	if x != nil {
		return x.OffersStoredValueInstruments
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersCrossBorderBulkCashDelivery() bool {
	if x != nil {
		return x.OffersCrossBorderBulkCashDelivery
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersDomesticBulkCashDelivery() bool {
	if x != nil {
		return x.OffersDomesticBulkCashDelivery
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersInternationalCashLetter() bool {
	if x != nil {
		return x.OffersInternationalCashLetter
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersRemoteDepositCapture() bool {
	if x != nil {
		return x.OffersRemoteDepositCapture
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersVirtualDigitalCurrencies() bool {
	if x != nil {
		return x.OffersVirtualDigitalCurrencies
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersLowPriceSecurities() bool {
	if x != nil {
		return x.OffersLowPriceSecurities
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersHoldMail() bool {
	if x != nil {
		return x.OffersHoldMail
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersCrossBorderRemittances() bool {
	if x != nil {
		return x.OffersCrossBorderRemittances
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersServiceToWalkinCustomers() bool {
	if x != nil {
		return x.OffersServiceToWalkinCustomers
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersSponsoringPrivateAtms() bool {
	if x != nil {
		return x.OffersSponsoringPrivateAtms
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersSponsoringOtherHighRiskProductsAndServices() bool {
	if x != nil {
		return x.OffersSponsoringOtherHighRiskProductsAndServices
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetRepresentativeOfBranches() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RepresentativeOfBranches
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Definition of AML, CTF and Sanctions Program Section
type RT0005M37_AMLAndCTFAndSanctionsProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q19 Does the Entity have a programme that sets minimum AML, CTF and Sanctions standards regarding the components in questions 19a-19o. If NO, explain.
	EntityHasProgramThatSetsMinimumAmlCtfAndSanctionsStandards *RT0005M37_YesNoExplain `protobuf:"bytes,1,opt,name=entity_has_program_that_sets_minimum_aml_ctf_and_sanctions_standards,json=entityHasProgramThatSetsMinimumAmlCtfAndSanctionsStandards,proto3" json:"entity_has_program_that_sets_minimum_aml_ctf_and_sanctions_standards,omitempty"`
	// Q19a-Q19o. Provide further information on the AML, CTF and Sanctions program stanards
	AmlCtfAndSanctionsProgram *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram `protobuf:"bytes,2,opt,name=aml_ctf_and_sanctions_program,json=amlCtfAndSanctionsProgram,proto3" json:"aml_ctf_and_sanctions_program,omitempty"`
	// Q20 How many full time employees are in the Entity's AML, CTF & Sanctions Compliance Department?
	HowManyFullTimeEmployeesInAmlCtfAndSanctionsProgram int32 `protobuf:"varint,3,opt,name=how_many_full_time_employees_in_aml_ctf_and_sanctions_program,json=howManyFullTimeEmployeesInAmlCtfAndSanctionsProgram,proto3" json:"how_many_full_time_employees_in_aml_ctf_and_sanctions_program,omitempty"`
	// Q21 Is the Entity's AML, CTF & Sanctions policy approved at least annually by the Board or equivalent Senior Management Committee? If NO, explain.
	PolicyApprovedAtLeastAnnuallyBySeniorCommittee *RT0005M37_YesNoExplain `protobuf:"bytes,4,opt,name=policy_approved_at_least_annually_by_senior_committee,json=policyApprovedAtLeastAnnuallyBySeniorCommittee,proto3" json:"policy_approved_at_least_annually_by_senior_committee,omitempty"`
	// Q22 Does the Board or equivalent Senior Management Committee receive regular reporting on the status of the AML, CTF & Sanctions programme? If NO, explain.
	SeniorManagementCommitteeReceivesRegularProgrammeReporting *RT0005M37_YesNoExplain `protobuf:"bytes,5,opt,name=senior_management_committee_receives_regular_programme_reporting,json=seniorManagementCommitteeReceivesRegularProgrammeReporting,proto3" json:"senior_management_committee_receives_regular_programme_reporting,omitempty"`
	// Q23 & Q23a. Does the Entity use third parties to carry out any components of its AML, CTF & Sanctions programme? If YES, explain.
	UseThirdParties *RT0005M37_YesExplainNo `protobuf:"bytes,6,opt,name=use_third_parties,json=useThirdParties,proto3" json:"use_third_parties,omitempty"`
	// Q24 & Q24a. Confirm that all responses provided in the above Section AML, CTF & SANCTIONS Programme are representative of all the LE's branches
	// If NO, explain by clarifying which questions the differences relate to and the branches that his applies to.
	RepresentativeOfBranches *RT0005M37_YesNoExplain `protobuf:"bytes,7,opt,name=representative_of_branches,json=representativeOfBranches,proto3" json:"representative_of_branches,omitempty"`
	// Q24b. If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,32,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) Reset() {
	*x = RT0005M37_AMLAndCTFAndSanctionsProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_AMLAndCTFAndSanctionsProgram) ProtoMessage() {}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_AMLAndCTFAndSanctionsProgram.ProtoReflect.Descriptor instead.
func (*RT0005M37_AMLAndCTFAndSanctionsProgram) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) GetEntityHasProgramThatSetsMinimumAmlCtfAndSanctionsStandards() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasProgramThatSetsMinimumAmlCtfAndSanctionsStandards
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) GetAmlCtfAndSanctionsProgram() *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram {
	if x != nil {
		return x.AmlCtfAndSanctionsProgram
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) GetHowManyFullTimeEmployeesInAmlCtfAndSanctionsProgram() int32 {
	if x != nil {
		return x.HowManyFullTimeEmployeesInAmlCtfAndSanctionsProgram
	}
	return 0
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) GetPolicyApprovedAtLeastAnnuallyBySeniorCommittee() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PolicyApprovedAtLeastAnnuallyBySeniorCommittee
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) GetSeniorManagementCommitteeReceivesRegularProgrammeReporting() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.SeniorManagementCommitteeReceivesRegularProgrammeReporting
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) GetUseThirdParties() *RT0005M37_YesExplainNo {
	if x != nil {
		return x.UseThirdParties
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) GetRepresentativeOfBranches() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RepresentativeOfBranches
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Definition of the Anti Bribery and Corruption section
type RT0005M37_AntiBriberyAndCorruption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q25 Has the Entity documented policies and procedures consistent with applicable ABC regulations and
	// requirements to [reasonably] prevent, detect and report bribery and corruption? If NO, explain
	DocumentedAntiBriberyAndCorruptionPoliciesAndProcedures *RT0005M37_YesNoExplain `protobuf:"bytes,1,opt,name=documented_anti_bribery_and_corruption_policies_and_procedures,json=documentedAntiBriberyAndCorruptionPoliciesAndProcedures,proto3" json:"documented_anti_bribery_and_corruption_policies_and_procedures,omitempty"`
	// Q26 Does the Entity have an enterprise wide programme that sets minimum ABC standards? If NO, explain
	EnterpriseWideProgramme *RT0005M37_YesNoExplain `protobuf:"bytes,2,opt,name=enterprise_wide_programme,json=enterpriseWideProgramme,proto3" json:"enterprise_wide_programme,omitempty"`
	// Q27 Has the Entity appointed a designated officer or officers with sufficient experience/expertise
	// responsible for coordinating the ABC programme? If NO, explain
	AppointedDesignatedOfficerOrOfficersWithSufficientExperience *RT0005M37_YesNoExplain `protobuf:"bytes,3,opt,name=appointed_designated_officer_or_officers_with_sufficient_experience,json=appointedDesignatedOfficerOrOfficersWithSufficientExperience,proto3" json:"appointed_designated_officer_or_officers_with_sufficient_experience,omitempty"`
	// Q28 Does the Entity have adequate staff with appropriate levels of experience/expertise to
	//  implement the ABC programme? If NO, explain
	EntityHasAdequateStaffWithAppropriateExperienceToImplementAbcProgramme *RT0005M37_YesNoExplain `protobuf:"bytes,4,opt,name=entity_has_adequate_staff_with_appropriate_experience_to_implement_abc_programme,json=entityHasAdequateStaffWithAppropriateExperienceToImplementAbcProgramme,proto3" json:"entity_has_adequate_staff_with_appropriate_experience_to_implement_abc_programme,omitempty"`
	// Q30a Does the Entity have a global ABC policy that:
	// Prohibits the giving and receiving of bribes? This includes promising, offering, giving, solicitation or
	// receiving of anything of value, directly or indirectly, if improperly intended to influence action or obtain an
	// advantage? If NO, explain.
	EntityHasGlobalAbcPolicyProhibitingBribes *RT0005M37_YesNoExplain `protobuf:"bytes,5,opt,name=entity_has_global_abc_policy_prohibiting_bribes,json=entityHasGlobalAbcPolicyProhibitingBribes,proto3" json:"entity_has_global_abc_policy_prohibiting_bribes,omitempty"`
	// Q30b Does the Entity have a global ABC policy that:
	// Includes enhanced requirements regarding interaction with public officials? If NO, explain.
	EntityHasGlobalAbcPolicyThatIncludesEnhancedRequirementsForInteractingWithPublicOfficials *RT0005M37_YesNoExplain `protobuf:"bytes,6,opt,name=entity_has_global_abc_policy_that_includes_enhanced_requirements_for_interacting_with_public_officials,json=entityHasGlobalAbcPolicyThatIncludesEnhancedRequirementsForInteractingWithPublicOfficials,proto3" json:"entity_has_global_abc_policy_that_includes_enhanced_requirements_for_interacting_with_public_officials,omitempty"`
	// Q30b Does the Entity have a global ABC policy that:
	// Includes a prohibition against the falsification of books and records
	// (this may be within the ABC policy or any other policy applicable to the Legal Entity)? If NO, explain
	EntityHasGlobalAbcPolicyThatIncludesAProhibitionAgainstTheFalsificationOfBooksAndRecords *RT0005M37_YesNoExplain `protobuf:"bytes,7,opt,name=entity_has_global_abc_policy_that_includes_a_prohibition_against_the_falsification_of_books_and_records,json=entityHasGlobalAbcPolicyThatIncludesAProhibitionAgainstTheFalsificationOfBooksAndRecords,proto3" json:"entity_has_global_abc_policy_that_includes_a_prohibition_against_the_falsification_of_books_and_records,omitempty"`
	// Q31 Does the Entity have controls in place to monitor the effectiveness of their ABC programme? If NO, explain.
	EntityHasControlsInPlaceToMonitorAbcProgramme *RT0005M37_YesNoExplain `protobuf:"bytes,8,opt,name=entity_has_controls_in_place_to_monitor_abc_programme,json=entityHasControlsInPlaceToMonitorAbcProgramme,proto3" json:"entity_has_controls_in_place_to_monitor_abc_programme,omitempty"`
	// Q32 Does the Entity's Board or Senior Management Committee receive regular Management Information on ABC matters?
	// If NO, explain
	BoardOrSeniorManagementReceivesRegularInformationOnAbcMatters *RT0005M37_YesNoExplain `protobuf:"bytes,9,opt,name=board_or_senior_management_receives_regular_information_on_abc_matters,json=boardOrSeniorManagementReceivesRegularInformationOnAbcMatters,proto3" json:"board_or_senior_management_receives_regular_information_on_abc_matters,omitempty"`
	// Q33 & Q33a Does the Entity perform an Enterprise Wide ABC risk assessment? If NO, explain. If YES, provide the frequency.
	EntityPerformsEnterpriseWideAbcRiskAssessment *RT0005M37_YesNoAndExplain `protobuf:"bytes,10,opt,name=entity_performs_enterprise_wide_abc_risk_assessment,json=entityPerformsEnterpriseWideAbcRiskAssessment,proto3" json:"entity_performs_enterprise_wide_abc_risk_assessment,omitempty"`
	// Q34 Does the Entity have an ABC residual risk rating that is the net result of the controls
	// effectiveness and the inherent risk assessment? If NO, explain
	EntityHasAbcResidualRiskRating *RT0005M37_YesNoExplain `protobuf:"bytes,11,opt,name=entity_has_abc_residual_risk_rating,json=entityHasAbcResidualRiskRating,proto3" json:"entity_has_abc_residual_risk_rating,omitempty"`
	// Q35a Does the Entity's ABC EWRA cover:
	// Potential liability created by intermediaries and other third-party providers as appropriate. If NO, explain
	EntityEwraCoversLiabilityCreatedByIntermediaries *RT0005M37_YesNoExplain `protobuf:"bytes,12,opt,name=entity_ewra_covers_liability_created_by_intermediaries,json=entityEwraCoversLiabilityCreatedByIntermediaries,proto3" json:"entity_ewra_covers_liability_created_by_intermediaries,omitempty"`
	// Q35b Does the Entity's ABC EWRA cover:
	// Corruption risks associated with the countries and industries in which the Entity does business, directly or through intermediaries.
	// If NO, explain
	EntityEwraCoversCorruptionRisksByCountry *RT0005M37_YesNoExplain `protobuf:"bytes,13,opt,name=entity_ewra_covers_corruption_risks_by_country,json=entityEwraCoversCorruptionRisksByCountry,proto3" json:"entity_ewra_covers_corruption_risks_by_country,omitempty"`
	// Q35c Does the Entity's ABC EWRA cover:
	// Transactions, products or services, including those that involve state-owned or state- controlled entities or public officials.
	// If NO, explain
	EntityEwraCoversTransactionProductsOrServicesInvolvingStateEntitiesOrPublicOfficials *RT0005M37_YesNoExplain `protobuf:"bytes,14,opt,name=entity_ewra_covers_transaction_products_or_services_involving_state_entities_or_public_officials,json=entityEwraCoversTransactionProductsOrServicesInvolvingStateEntitiesOrPublicOfficials,proto3" json:"entity_ewra_covers_transaction_products_or_services_involving_state_entities_or_public_officials,omitempty"`
	// Q35d Does the Entity's ABC EWRA cover:
	// Corruption risks associated with gifts and hospitality, hiring/internships, charitable donations and political contributions.
	// If NO, explain
	EntityEwraCoversRisksAssociatedWithGiftsAndHospitality *RT0005M37_YesNoExplain `protobuf:"bytes,15,opt,name=entity_ewra_covers_risks_associated_with_gifts_and_hospitality,json=entityEwraCoversRisksAssociatedWithGiftsAndHospitality,proto3" json:"entity_ewra_covers_risks_associated_with_gifts_and_hospitality,omitempty"`
	// Q35d Does the Entity's ABC EWRA cover:
	// Changes in business activities that may materially increase the Entity's corruption risk.
	// If NO, explain
	EntityEwraCoversChangesInBusinessActivitiesThatMayIncreaseRisk *RT0005M37_YesNoExplain `protobuf:"bytes,16,opt,name=entity_ewra_covers_changes_in_business_activities_that_may_increase_risk,json=entityEwraCoversChangesInBusinessActivitiesThatMayIncreaseRisk,proto3" json:"entity_ewra_covers_changes_in_business_activities_that_may_increase_risk,omitempty"`
	// Q36 Does the Entity's internal audit function or other independent third party cover ABC Policies and Procedures?
	// If NO, explain
	EntityInternalAuditFunctionCoversAbcPoliciesAndProcedures *RT0005M37_YesNoExplain `protobuf:"bytes,17,opt,name=entity_internal_audit_function_covers_abc_policies_and_procedures,json=entityInternalAuditFunctionCoversAbcPoliciesAndProcedures,proto3" json:"entity_internal_audit_function_covers_abc_policies_and_procedures,omitempty"`
	// Q37a Does the Entity provide mandatory ABC training to::
	// Board and senior Committee Management.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee *RT0005M37_YesNoExplain `protobuf:"bytes,18,opt,name=entity_provides_mandatory_abc_training_to_board_and_senior_management_committee,json=entityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee,proto3" json:"entity_provides_mandatory_abc_training_to_board_and_senior_management_committee,omitempty"`
	// Q37b Does the Entity provide mandatory ABC training to::
	// 1st Line of Defence.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToFirstLineOfDefence *RT0005M37_YesNoExplain `protobuf:"bytes,19,opt,name=entity_provides_mandatory_abc_training_to_first_line_of_defence,json=entityProvidesMandatoryAbcTrainingToFirstLineOfDefence,proto3" json:"entity_provides_mandatory_abc_training_to_first_line_of_defence,omitempty"`
	// Q37c Does the Entity provide mandatory ABC training to::
	// 2nd Line of Defence.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToSecondLineOfDefence *RT0005M37_YesNoExplain `protobuf:"bytes,20,opt,name=entity_provides_mandatory_abc_training_to_second_line_of_defence,json=entityProvidesMandatoryAbcTrainingToSecondLineOfDefence,proto3" json:"entity_provides_mandatory_abc_training_to_second_line_of_defence,omitempty"`
	// Q37d Does the Entity provide mandatory ABC training to::
	// 3rd Line of Defence.
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToThirdLineOfDefence *RT0005M37_YesNoExplain `protobuf:"bytes,21,opt,name=entity_provides_mandatory_abc_training_to_third_line_of_defence,json=entityProvidesMandatoryAbcTrainingToThirdLineOfDefence,proto3" json:"entity_provides_mandatory_abc_training_to_third_line_of_defence,omitempty"`
	// Q37e Does the Entity provide mandatory ABC training to::
	// 3rd parties to which specific compliance activities subject to ABC risk have been outsourced
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk *RT0005M37_YesNoExplain `protobuf:"bytes,22,opt,name=entity_provides_mandatory_abc_training_to_third_parties_subject_to_abc_risk,json=entityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk,proto3" json:"entity_provides_mandatory_abc_training_to_third_parties_subject_to_abc_risk,omitempty"`
	// Q37e Does the Entity provide mandatory ABC training to::
	// Non-employed workers as appropriate (contractors/consultants)
	// If NO, explain
	EntityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate *RT0005M37_YesNoExplain `protobuf:"bytes,23,opt,name=entity_provides_mandatory_abc_training_to_non_employed_workers_as_appropriate,json=entityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate,proto3" json:"entity_provides_mandatory_abc_training_to_non_employed_workers_as_appropriate,omitempty"`
	// Q38 Does the Entity provide ABC training that is targeted to specific roles, responsibilities and activities?
	// If NO, explain
	EntityProvidesAbcTrainingTargetedToSpecificRolesResponsibilitiesActivities *RT0005M37_YesNoExplain `protobuf:"bytes,24,opt,name=entity_provides_abc_training_targeted_to_specific_roles_responsibilities_activities,json=entityProvidesAbcTrainingTargetedToSpecificRolesResponsibilitiesActivities,proto3" json:"entity_provides_abc_training_targeted_to_specific_roles_responsibilities_activities,omitempty"`
	// Q39 & Q39a Confirm that all responses provided in the above Section Anti Bribery & Corruption are representative of all the LE's branches
	// If NO, clarify which questions the difference/s relate to and the branch/es that this applies to.
	RepresentativeOfBranches *RT0005M37_YesNoExplain `protobuf:"bytes,25,opt,name=representative_of_branches,json=representativeOfBranches,proto3" json:"representative_of_branches,omitempty"`
	// Q39b. If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,26,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT0005M37_AntiBriberyAndCorruption) Reset() {
	*x = RT0005M37_AntiBriberyAndCorruption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_AntiBriberyAndCorruption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_AntiBriberyAndCorruption) ProtoMessage() {}

func (x *RT0005M37_AntiBriberyAndCorruption) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_AntiBriberyAndCorruption.ProtoReflect.Descriptor instead.
func (*RT0005M37_AntiBriberyAndCorruption) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetDocumentedAntiBriberyAndCorruptionPoliciesAndProcedures() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.DocumentedAntiBriberyAndCorruptionPoliciesAndProcedures
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEnterpriseWideProgramme() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EnterpriseWideProgramme
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetAppointedDesignatedOfficerOrOfficersWithSufficientExperience() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.AppointedDesignatedOfficerOrOfficersWithSufficientExperience
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityHasAdequateStaffWithAppropriateExperienceToImplementAbcProgramme() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasAdequateStaffWithAppropriateExperienceToImplementAbcProgramme
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityHasGlobalAbcPolicyProhibitingBribes() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasGlobalAbcPolicyProhibitingBribes
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityHasGlobalAbcPolicyThatIncludesEnhancedRequirementsForInteractingWithPublicOfficials() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasGlobalAbcPolicyThatIncludesEnhancedRequirementsForInteractingWithPublicOfficials
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityHasGlobalAbcPolicyThatIncludesAProhibitionAgainstTheFalsificationOfBooksAndRecords() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasGlobalAbcPolicyThatIncludesAProhibitionAgainstTheFalsificationOfBooksAndRecords
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityHasControlsInPlaceToMonitorAbcProgramme() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasControlsInPlaceToMonitorAbcProgramme
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetBoardOrSeniorManagementReceivesRegularInformationOnAbcMatters() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.BoardOrSeniorManagementReceivesRegularInformationOnAbcMatters
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityPerformsEnterpriseWideAbcRiskAssessment() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.EntityPerformsEnterpriseWideAbcRiskAssessment
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityHasAbcResidualRiskRating() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasAbcResidualRiskRating
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityEwraCoversLiabilityCreatedByIntermediaries() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityEwraCoversLiabilityCreatedByIntermediaries
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityEwraCoversCorruptionRisksByCountry() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityEwraCoversCorruptionRisksByCountry
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityEwraCoversTransactionProductsOrServicesInvolvingStateEntitiesOrPublicOfficials() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityEwraCoversTransactionProductsOrServicesInvolvingStateEntitiesOrPublicOfficials
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityEwraCoversRisksAssociatedWithGiftsAndHospitality() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityEwraCoversRisksAssociatedWithGiftsAndHospitality
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityEwraCoversChangesInBusinessActivitiesThatMayIncreaseRisk() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityEwraCoversChangesInBusinessActivitiesThatMayIncreaseRisk
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityInternalAuditFunctionCoversAbcPoliciesAndProcedures() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityInternalAuditFunctionCoversAbcPoliciesAndProcedures
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToBoardAndSeniorManagementCommittee
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToFirstLineOfDefence() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToFirstLineOfDefence
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToSecondLineOfDefence() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToSecondLineOfDefence
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToThirdLineOfDefence() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToThirdLineOfDefence
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToThirdPartiesSubjectToAbcRisk
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityProvidesMandatoryAbcTrainingToNonEmployedWorkersAsAppropriate
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetEntityProvidesAbcTrainingTargetedToSpecificRolesResponsibilitiesActivities() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityProvidesAbcTrainingTargetedToSpecificRolesResponsibilitiesActivities
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetRepresentativeOfBranches() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RepresentativeOfBranches
	}
	return nil
}

func (x *RT0005M37_AntiBriberyAndCorruption) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Definition of the AML, CTF & Sanctions Policies & Procedures
type RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q40a Has the Entity documented policies and procedures consistent with applicable AML, CTF & Sanctions regulations and requirements to reasonably prevent, detect and report:
	// Money laundering
	// If NO, explain
	EntityHasDocumentedPoliciesAndProceduresForMoneyLaundering *RT0005M37_YesNoExplain `protobuf:"bytes,1,opt,name=entity_has_documented_policies_and_procedures_for_money_laundering,json=entityHasDocumentedPoliciesAndProceduresForMoneyLaundering,proto3" json:"entity_has_documented_policies_and_procedures_for_money_laundering,omitempty"`
	// Q40b Has the Entity documented policies and procedures consistent with applicable AML, CTF & Sanctions regulations and requirements to reasonably prevent, detect and report:
	// Terrorist financing
	// If NO, explain
	EntityHasDocumentedPoliciesAndProceduresForTerroristFinancing *RT0005M37_YesNoExplain `protobuf:"bytes,2,opt,name=entity_has_documented_policies_and_procedures_for_terrorist_financing,json=entityHasDocumentedPoliciesAndProceduresForTerroristFinancing,proto3" json:"entity_has_documented_policies_and_procedures_for_terrorist_financing,omitempty"`
	// Q40c Has the Entity documented policies and procedures consistent with applicable AML, CTF & Sanctions regulations and requirements to reasonably prevent, detect and report:
	// Sanctions violations
	// If NO, explain
	EntityHasDocumentedPoliciesAndProceduresForSanctionsViolations *RT0005M37_YesNoExplain `protobuf:"bytes,3,opt,name=entity_has_documented_policies_and_procedures_for_sanctions_violations,json=entityHasDocumentedPoliciesAndProceduresForSanctionsViolations,proto3" json:"entity_has_documented_policies_and_procedures_for_sanctions_violations,omitempty"`
	// Q41 Are the Entity's policies and procedures updated at least annually? If NO, explain
	PoliciesUpdatedAtLeastAnnually *RT0005M37_YesNoExplain `protobuf:"bytes,4,opt,name=policies_updated_at_least_annually,json=policiesUpdatedAtLeastAnnually,proto3" json:"policies_updated_at_least_annually,omitempty"`
	// Q42a & Q42a1 Are the Entity's policies and procedures gapped against/compared to: US Standards. If YES, does the entity retain a record of results
	PoliciesGappedAgainstUsaStandards *RT0005M37_YesNoAndExplain `protobuf:"bytes,5,opt,name=policies_gapped_against_usa_standards,json=policiesGappedAgainstUsaStandards,proto3" json:"policies_gapped_against_usa_standards,omitempty"`
	// Q42b & Q42b1 Are the Entity's policies and procedures gapped against/compared to: EU Standards. If YES, does the entity retain a record of results
	PoliciesGappedAgainstEuStandards *RT0005M37_YesNoAndExplain `protobuf:"bytes,6,opt,name=policies_gapped_against_eu_standards,json=policiesGappedAgainstEuStandards,proto3" json:"policies_gapped_against_eu_standards,omitempty"`
	// Q43a Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit the opening and keeping of anonymous and fictitious named accounts
	PoliciesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts *RT0005M37_YesNoExplain `protobuf:"bytes,7,opt,name=policies_that_prohibit_opening_and_keeping_anonymous_and_fictitious_named_accounts,json=policiesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts,proto3" json:"policies_that_prohibit_opening_and_keeping_anonymous_and_fictitious_named_accounts,omitempty"`
	// Q43b Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit the opening and keeping of accounts for unlicensed banks and/or NBFIs
	PoliciesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis *RT0005M37_YesNoExplain `protobuf:"bytes,8,opt,name=policies_that_prohibit_opening_accounts_for_unlicensed_banks_and_or_nbfis,json=policiesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis,proto3" json:"policies_that_prohibit_opening_accounts_for_unlicensed_banks_and_or_nbfis,omitempty"`
	// Q43c Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit dealing with other entities that provide banking services to unlicensed banks
	PoliciesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks *RT0005M37_YesNoExplain `protobuf:"bytes,9,opt,name=policies_that_prohibit_dealing_with_entities_providing_banking_to_unlicensed_banks,json=policiesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks,proto3" json:"policies_that_prohibit_dealing_with_entities_providing_banking_to_unlicensed_banks,omitempty"`
	// Q43d Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit accounts/relationships with shell banks
	PoliciesThatProhibitAccountsOrRelationshipsWithShellBanks *RT0005M37_YesNoExplain `protobuf:"bytes,10,opt,name=policies_that_prohibit_accounts_or_relationships_with_shell_banks,json=policiesThatProhibitAccountsOrRelationshipsWithShellBanks,proto3" json:"policies_that_prohibit_accounts_or_relationships_with_shell_banks,omitempty"`
	// Q43e Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit dealing with another entity that provides services to shell banks
	PoliciesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks *RT0005M37_YesNoExplain `protobuf:"bytes,11,opt,name=policies_that_prohibit_dealing_with_another_entity_that_provides_services_to_shell_banks,json=policiesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks,proto3" json:"policies_that_prohibit_dealing_with_another_entity_that_provides_services_to_shell_banks,omitempty"`
	// Q43f Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit opening and keeping of accounts for Section 311 designated entities
	PoliciesThatProhibitAccountsForSection_311Entities *RT0005M37_YesNoExplain `protobuf:"bytes,12,opt,name=policies_that_prohibit_accounts_for_section_311_entities,json=policiesThatProhibitAccountsForSection311Entities,proto3" json:"policies_that_prohibit_accounts_for_section_311_entities,omitempty"`
	// Q43g Does the Entity have policies and procedures that (If NO, explain):
	// Prohibit opening and keeping of accounts for any of unlicensed/unregulated remittance agents, exchanges houses,
	// casa de cambio, bureaux de change or money transfer agents
	PoliciesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents *RT0005M37_YesNoExplain `protobuf:"bytes,13,opt,name=policies_that_prohibit_accounts_for_unlicensed_or_regulated_remittance_agents_or_exchange_houses_or_money_transfer_agents,json=policiesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents,proto3" json:"policies_that_prohibit_accounts_for_unlicensed_or_regulated_remittance_agents_or_exchange_houses_or_money_transfer_agents,omitempty"`
	// Q43h Does the Entity have policies and procedures that (If NO, explain):
	// Assess the risks of relationships with domestic and foreign PEPs, including their family and close associates
	PoliciesThatAssessRisksOfRelationshipsWithPeps *RT0005M37_YesNoExplain `protobuf:"bytes,14,opt,name=policies_that_assess_risks_of_relationships_with_peps,json=policiesThatAssessRisksOfRelationshipsWithPeps,proto3" json:"policies_that_assess_risks_of_relationships_with_peps,omitempty"`
	// Q43i Does the Entity have policies and procedures that (If NO, explain):
	// Define escalation processes for financial crime risk issues
	PoliciesThatDefineEscalationProcessForFinancialCrime *RT0005M37_YesNoExplain `protobuf:"bytes,15,opt,name=policies_that_define_escalation_process_for_financial_crime,json=policiesThatDefineEscalationProcessForFinancialCrime,proto3" json:"policies_that_define_escalation_process_for_financial_crime,omitempty"`
	// Q43j Does the Entity have policies and procedures that (If NO, explain):
	// Define the process, where appropriate, for terminating existing customer relationships due to financial crime risk
	PoliciesThatDefineProcessForTerminatingExistingCustomerRelationshipsDueToFinancialCrimeRisk *RT0005M37_YesNoExplain `protobuf:"bytes,16,opt,name=policies_that_define_process_for_terminating_existing_customer_relationships_due_to_financial_crime_risk,json=policiesThatDefineProcessForTerminatingExistingCustomerRelationshipsDueToFinancialCrimeRisk,proto3" json:"policies_that_define_process_for_terminating_existing_customer_relationships_due_to_financial_crime_risk,omitempty"`
	// Q43k Does the Entity have policies and procedures that (If NO, explain):
	// Specify how potentially suspicious activity identified by employees is to be escalated and investigated
	PoliciesThatSpecifyHowSuspiciousActivitiesAreEscalated *RT0005M37_YesNoExplain `protobuf:"bytes,17,opt,name=policies_that_specify_how_suspicious_activities_are_escalated,json=policiesThatSpecifyHowSuspiciousActivitiesAreEscalated,proto3" json:"policies_that_specify_how_suspicious_activities_are_escalated,omitempty"`
	// Q43l Does the Entity have policies and procedures that (If NO, explain):
	// Outline the processes regarding screening for sanctions, PEPs and negative media
	PoliciesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia *RT0005M37_YesNoExplain `protobuf:"bytes,18,opt,name=policies_that_outline_process_for_screening_for_sanctions_peps_and_negative_media,json=policiesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia,proto3" json:"policies_that_outline_process_for_screening_for_sanctions_peps_and_negative_media,omitempty"`
	// Q43m Does the Entity have policies and procedures that (If NO, explain):
	// Outline the processes for the maintenance of internal "watchlists"
	PoliciesThatOutlineProcessForMaintenanceOfInternalWatchlists *RT0005M37_YesNoExplain `protobuf:"bytes,19,opt,name=policies_that_outline_process_for_maintenance_of_internal_watchlists,json=policiesThatOutlineProcessForMaintenanceOfInternalWatchlists,proto3" json:"policies_that_outline_process_for_maintenance_of_internal_watchlists,omitempty"`
	// Q44 Has the Entity defined a risk tolerance statement or similar document which defines a risk boundary around their business? If NO, explain.
	EntityHadDefinedARiskToleranceStatement *RT0005M37_YesNoExplain `protobuf:"bytes,20,opt,name=entity_had_defined_a_risk_tolerance_statement,json=entityHadDefinedARiskToleranceStatement,proto3" json:"entity_had_defined_a_risk_tolerance_statement,omitempty"`
	// Q45 Does the Entity have a record retention procedures that comply with applicable laws? If NO, explain. If YES, what is the retention period.
	EntityHasRecordRetentionProcedure *RT0005M37_YesNoAndExplain `protobuf:"bytes,21,opt,name=entity_has_record_retention_procedure,json=entityHasRecordRetentionProcedure,proto3" json:"entity_has_record_retention_procedure,omitempty"`
	// Q46 & Q46a Confirm that all responses provided in the above Section POLICIES & PROCEDURES are representative of all the LE's branches
	// If NO, clarify which questions the difference/s relate to and the branch/es that this applies to.
	RepresentativeOfBranches *RT0005M37_YesNoExplain `protobuf:"bytes,25,opt,name=representative_of_branches,json=representativeOfBranches,proto3" json:"representative_of_branches,omitempty"`
	// Q46b. If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,26,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) Reset() {
	*x = RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) ProtoMessage() {}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures.ProtoReflect.Descriptor instead.
func (*RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 7}
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasDocumentedPoliciesAndProceduresForMoneyLaundering() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasDocumentedPoliciesAndProceduresForMoneyLaundering
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasDocumentedPoliciesAndProceduresForTerroristFinancing() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasDocumentedPoliciesAndProceduresForTerroristFinancing
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasDocumentedPoliciesAndProceduresForSanctionsViolations() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasDocumentedPoliciesAndProceduresForSanctionsViolations
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesUpdatedAtLeastAnnually() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesUpdatedAtLeastAnnually
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesGappedAgainstUsaStandards() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.PoliciesGappedAgainstUsaStandards
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesGappedAgainstEuStandards() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.PoliciesGappedAgainstEuStandards
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitOpeningAndKeepingAnonymousAndFictitiousNamedAccounts
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitOpeningAccountsForUnlicensedBanksAndOrNbfis
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitDealingWithEntitiesProvidingBankingToUnlicensedBanks
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitAccountsOrRelationshipsWithShellBanks() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitAccountsOrRelationshipsWithShellBanks
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitDealingWithAnotherEntityThatProvidesServicesToShellBanks
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitAccountsForSection_311Entities() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitAccountsForSection_311Entities
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatProhibitAccountsForUnlicensedOrRegulatedRemittanceAgentsOrExchangeHousesOrMoneyTransferAgents
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatAssessRisksOfRelationshipsWithPeps() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatAssessRisksOfRelationshipsWithPeps
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatDefineEscalationProcessForFinancialCrime() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatDefineEscalationProcessForFinancialCrime
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatDefineProcessForTerminatingExistingCustomerRelationshipsDueToFinancialCrimeRisk() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatDefineProcessForTerminatingExistingCustomerRelationshipsDueToFinancialCrimeRisk
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatSpecifyHowSuspiciousActivitiesAreEscalated() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatSpecifyHowSuspiciousActivitiesAreEscalated
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatOutlineProcessForScreeningForSanctionsPepsAndNegativeMedia
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetPoliciesThatOutlineProcessForMaintenanceOfInternalWatchlists() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesThatOutlineProcessForMaintenanceOfInternalWatchlists
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHadDefinedARiskToleranceStatement() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHadDefinedARiskToleranceStatement
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetEntityHasRecordRetentionProcedure() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.EntityHasRecordRetentionProcedure
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetRepresentativeOfBranches() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RepresentativeOfBranches
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Definition of the AML, CTF & Sanctions Risk Assessment
type RT0005M37_AMLAndCTFAndSanctionsRiskAssessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q47a Does the Entity's AML & CTF EWRA cover the following inherent risk component (if NO, explain) - Client
	EntityAmlAndCtfEwraCoversClientRiskComponent *RT0005M37_YesNoExplain `protobuf:"bytes,1,opt,name=entity_aml_and_ctf_ewra_covers_client_risk_component,json=entityAmlAndCtfEwraCoversClientRiskComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_client_risk_component,omitempty"`
	// Q47b Does the Entity's AML & CTF EWRA cover the following inherent risk component (if NO, explain) - Product
	EntityAmlAndCtfEwraCoversProductRiskComponent *RT0005M37_YesNoExplain `protobuf:"bytes,2,opt,name=entity_aml_and_ctf_ewra_covers_product_risk_component,json=entityAmlAndCtfEwraCoversProductRiskComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_product_risk_component,omitempty"`
	// Q47c Does the Entity's AML & CTF EWRA cover the following inherent risk component (if NO, explain) - Channel
	EntityAmlAndCtfEwraCoversChannelRiskComponent *RT0005M37_YesNoExplain `protobuf:"bytes,3,opt,name=entity_aml_and_ctf_ewra_covers_channel_risk_component,json=entityAmlAndCtfEwraCoversChannelRiskComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_channel_risk_component,omitempty"`
	// Q47d Does the Entity's AML & CTF EWRA cover the following inherent risk component (if NO, explain) - Geography
	EntityAmlAndCtfEwraCoversGeographyRiskComponent *RT0005M37_YesNoExplain `protobuf:"bytes,4,opt,name=entity_aml_and_ctf_ewra_covers_geography_risk_component,json=entityAmlAndCtfEwraCoversGeographyRiskComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_geography_risk_component,omitempty"`
	// Q48a Does the Entity's AML & CTF EWRA cover the following controls effectiveness component (if NO, explain) - Transaction Monitoring
	EntityAmlAndCtfEwraCoversTransactionMonitoringEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,5,opt,name=entity_aml_and_ctf_ewra_covers_transaction_monitoring_effectiveness_component,json=entityAmlAndCtfEwraCoversTransactionMonitoringEffectivenessComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_transaction_monitoring_effectiveness_component,omitempty"`
	// Q48b Does the Entity's AML & CTF EWRA cover the following controls effectiveness component (if NO, explain) - Customer Due Diligence
	EntityAmlAndCtfEwraCoversCustomerDueDiligenceEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,6,opt,name=entity_aml_and_ctf_ewra_covers_customer_due_diligence_effectiveness_component,json=entityAmlAndCtfEwraCoversCustomerDueDiligenceEffectivenessComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_customer_due_diligence_effectiveness_component,omitempty"`
	// Q48c Does the Entity's AML & CTF EWRA cover the following controls effectiveness component (if NO, explain) - PEP Identification
	EntityAmlAndCtfEwraCoversPepIdentificationEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,7,opt,name=entity_aml_and_ctf_ewra_covers_pep_identification_effectiveness_component,json=entityAmlAndCtfEwraCoversPepIdentificationEffectivenessComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_pep_identification_effectiveness_component,omitempty"`
	// Q48d Does the Entity's AML & CTF EWRA cover the following controls effectiveness component (if NO, explain) - Transaction Screening
	EntityAmlAndCtfEwraCoversTransactionScreeningEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,8,opt,name=entity_aml_and_ctf_ewra_covers_transaction_screening_effectiveness_component,json=entityAmlAndCtfEwraCoversTransactionScreeningEffectivenessComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_transaction_screening_effectiveness_component,omitempty"`
	// Q48e Does the Entity's AML & CTF EWRA cover the following controls effectiveness component (if NO, explain) - Name Screening against Adverse Media & Negative News
	EntityAmlAndCtfEwraCoversNameScreeningEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,9,opt,name=entity_aml_and_ctf_ewra_covers_name_screening_effectiveness_component,json=entityAmlAndCtfEwraCoversNameScreeningEffectivenessComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_name_screening_effectiveness_component,omitempty"`
	// Q48f Does the Entity's AML & CTF EWRA cover the following controls effectiveness component (if NO, explain) - Training and Education
	EntityAmlAndCtfEwraCoversTrainingAndEducationEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,10,opt,name=entity_aml_and_ctf_ewra_covers_training_and_education_effectiveness_component,json=entityAmlAndCtfEwraCoversTrainingAndEducationEffectivenessComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_training_and_education_effectiveness_component,omitempty"`
	// Q48g Does the Entity's AML & CTF EWRA cover the following controls effectiveness component (if NO, explain) - Governance
	EntityAmlAndCtfEwraCoversGovernanceEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,11,opt,name=entity_aml_and_ctf_ewra_covers_governance_effectiveness_component,json=entityAmlAndCtfEwraCoversGovernanceEffectivenessComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_governance_effectiveness_component,omitempty"`
	// Q48h Does the Entity's AML & CTF EWRA cover the following controls effectiveness component (if NO, explain) - Management Information
	EntityAmlAndCtfEwraCoversManagementInformationEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,12,opt,name=entity_aml_and_ctf_ewra_covers_management_information_effectiveness_component,json=entityAmlAndCtfEwraCoversManagementInformationEffectivenessComponent,proto3" json:"entity_aml_and_ctf_ewra_covers_management_information_effectiveness_component,omitempty"`
	// Q49 Has the Entity's AML & CTF EWRA been completed in the last 12 months? If N, provide the date when the last AML & CTF EWRA was completed.
	EntityAmlAndCtfEwraCompletedInTheLast_12Months *RT0005M37_YesNoExplain `protobuf:"bytes,13,opt,name=entity_aml_and_ctf_ewra_completed_in_the_last_12_months,json=entityAmlAndCtfEwraCompletedInTheLast12Months,proto3" json:"entity_aml_and_ctf_ewra_completed_in_the_last_12_months,omitempty"`
	// Q50a Does the Entity's Sanctions EWRA cover the following inherent risk component (if NO, explain) - Client
	EntitySanctionsEwraCoversClientRiskComponent *RT0005M37_YesNoExplain `protobuf:"bytes,14,opt,name=entity_sanctions_ewra_covers_client_risk_component,json=entitySanctionsEwraCoversClientRiskComponent,proto3" json:"entity_sanctions_ewra_covers_client_risk_component,omitempty"`
	// Q50b Does the Entity's Sanctions EWRA cover the following inherent risk component (if NO, explain) - Product
	EntitySanctionsEwraCoversProductRiskComponent *RT0005M37_YesNoExplain `protobuf:"bytes,15,opt,name=entity_sanctions_ewra_covers_product_risk_component,json=entitySanctionsEwraCoversProductRiskComponent,proto3" json:"entity_sanctions_ewra_covers_product_risk_component,omitempty"`
	// Q50c Does the Entity's Sanctions EWRA cover the following inherent risk component (if NO, explain) - Channel
	EntitySanctionsEwraCoversChannelRiskComponent *RT0005M37_YesNoExplain `protobuf:"bytes,16,opt,name=entity_sanctions_ewra_covers_channel_risk_component,json=entitySanctionsEwraCoversChannelRiskComponent,proto3" json:"entity_sanctions_ewra_covers_channel_risk_component,omitempty"`
	// Q50d Does the Entity's Sanctions EWRA cover the following inherent risk component (if NO, explain) - Geography
	EntitySanctionsEwraCoversGeographyRiskComponent *RT0005M37_YesNoExplain `protobuf:"bytes,17,opt,name=entity_sanctions_ewra_covers_geography_risk_component,json=entitySanctionsEwraCoversGeographyRiskComponent,proto3" json:"entity_sanctions_ewra_covers_geography_risk_component,omitempty"`
	// Q51a Does the Entity's Sanctions EWRA cover the following controls effectiveness component (if NO, explain) - Customer Due Diligence
	EntitySanctionsEwraCoversCustomerDueDiligenceEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,18,opt,name=entity_sanctions_ewra_covers_customer_due_diligence_effectiveness_component,json=entitySanctionsEwraCoversCustomerDueDiligenceEffectivenessComponent,proto3" json:"entity_sanctions_ewra_covers_customer_due_diligence_effectiveness_component,omitempty"`
	// Q51b Does the Entity's Sanctions EWRA cover the following controls effectiveness component (if NO, explain) - Transaction Screening
	EntitySanctionsEwraCoversTransactionScreeningEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,19,opt,name=entity_sanctions_ewra_covers_transaction_screening_effectiveness_component,json=entitySanctionsEwraCoversTransactionScreeningEffectivenessComponent,proto3" json:"entity_sanctions_ewra_covers_transaction_screening_effectiveness_component,omitempty"`
	// Q51c Does the Entity's Sanctions EWRA cover the following controls effectiveness component (if NO, explain) - Name Screening
	EntitySanctionsEwraCoversNameScreeningEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,20,opt,name=entity_sanctions_ewra_covers_name_screening_effectiveness_component,json=entitySanctionsEwraCoversNameScreeningEffectivenessComponent,proto3" json:"entity_sanctions_ewra_covers_name_screening_effectiveness_component,omitempty"`
	// Q51d Does the Entity's Sanctions EWRA cover the following controls effectiveness component (if NO, explain) - List Management
	EntitySanctionsEwraCoversListManagementEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,21,opt,name=entity_sanctions_ewra_covers_list_management_effectiveness_component,json=entitySanctionsEwraCoversListManagementEffectivenessComponent,proto3" json:"entity_sanctions_ewra_covers_list_management_effectiveness_component,omitempty"`
	// Q51e Does the Entity's Sanctions EWRA cover the following controls effectiveness component (if NO, explain) - Training and Education
	EntitySanctionsEwraCoversTrainingAndEducationEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,22,opt,name=entity_sanctions_ewra_covers_training_and_education_effectiveness_component,json=entitySanctionsEwraCoversTrainingAndEducationEffectivenessComponent,proto3" json:"entity_sanctions_ewra_covers_training_and_education_effectiveness_component,omitempty"`
	// Q51f Does the Entity's Sanctions EWRA cover the following controls effectiveness component (if NO, explain) - Governance
	EntitySanctionsEwraCoversGovernanceEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,23,opt,name=entity_sanctions_ewra_covers_governance_effectiveness_component,json=entitySanctionsEwraCoversGovernanceEffectivenessComponent,proto3" json:"entity_sanctions_ewra_covers_governance_effectiveness_component,omitempty"`
	// Q51g Does the Entity's Sanctions EWRA cover the following controls effectiveness component (if NO, explain) - Management Information
	EntitySanctionsEwraCoversManagementInformationEffectivenessComponent *RT0005M37_YesNoExplain `protobuf:"bytes,24,opt,name=entity_sanctions_ewra_covers_management_information_effectiveness_component,json=entitySanctionsEwraCoversManagementInformationEffectivenessComponent,proto3" json:"entity_sanctions_ewra_covers_management_information_effectiveness_component,omitempty"`
	// Q52 & Q52a Has the Entity's Sanctions EWRA been completed in the last 12 months? If N, provide the date when the last Sanctions EWRA was completed.
	EntitySanctionsEwraCompletedInTheLast_12Months *RT0005M37_YesNoExplain `protobuf:"bytes,25,opt,name=entity_sanctions_ewra_completed_in_the_last_12_months,json=entitySanctionsEwraCompletedInTheLast12Months,proto3" json:"entity_sanctions_ewra_completed_in_the_last_12_months,omitempty"`
	// Q53 & Q53a Confirm that all responses provided in the above section are representative of all the LE's branches
	// If NO, clarify which questions the difference/s relate to and the branch/es that this applies to.
	RepresentativeOfBranches *RT0005M37_YesNoExplain `protobuf:"bytes,26,opt,name=representative_of_branches,json=representativeOfBranches,proto3" json:"representative_of_branches,omitempty"`
	// Q53b. If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,27,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) Reset() {
	*x = RT0005M37_AMLAndCTFAndSanctionsRiskAssessment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) ProtoMessage() {}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_AMLAndCTFAndSanctionsRiskAssessment.ProtoReflect.Descriptor instead.
func (*RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 8}
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversClientRiskComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversClientRiskComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversProductRiskComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversProductRiskComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversChannelRiskComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversChannelRiskComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversGeographyRiskComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversGeographyRiskComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversTransactionMonitoringEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversTransactionMonitoringEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversCustomerDueDiligenceEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversCustomerDueDiligenceEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversPepIdentificationEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversPepIdentificationEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversTransactionScreeningEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversTransactionScreeningEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversNameScreeningEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversNameScreeningEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversTrainingAndEducationEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversTrainingAndEducationEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversGovernanceEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversGovernanceEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCoversManagementInformationEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCoversManagementInformationEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntityAmlAndCtfEwraCompletedInTheLast_12Months() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityAmlAndCtfEwraCompletedInTheLast_12Months
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversClientRiskComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversClientRiskComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversProductRiskComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversProductRiskComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversChannelRiskComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversChannelRiskComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversGeographyRiskComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversGeographyRiskComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversCustomerDueDiligenceEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversCustomerDueDiligenceEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversTransactionScreeningEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversTransactionScreeningEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversNameScreeningEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversNameScreeningEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversListManagementEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversListManagementEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversTrainingAndEducationEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversTrainingAndEducationEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversGovernanceEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversGovernanceEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCoversManagementInformationEffectivenessComponent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCoversManagementInformationEffectivenessComponent
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetEntitySanctionsEwraCompletedInTheLast_12Months() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntitySanctionsEwraCompletedInTheLast_12Months
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetRepresentativeOfBranches() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RepresentativeOfBranches
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsRiskAssessment) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Definition of KYC, CDD and EDD information
type RT0005M37_KYCAndCDDAndEDD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q54 Does the Entity verify the identity of the customer? If NO, explain
	EntityVerifiesIdentityOfCustomer *RT0005M37_YesNoExplain `protobuf:"bytes,1,opt,name=entity_verifies_identity_of_customer,json=entityVerifiesIdentityOfCustomer,proto3" json:"entity_verifies_identity_of_customer,omitempty"`
	// Q55 Do the Entity's policies and procedures set out when CDD must be completed, e.g. at the time of onboarding or within 30 days? If NO, explain
	PoliciesAndProceduresSetOutWhenCddMustBeCompleted *RT0005M37_YesNoExplain `protobuf:"bytes,2,opt,name=policies_and_procedures_set_out_when_cdd_must_be_completed,json=policiesAndProceduresSetOutWhenCddMustBeCompleted,proto3" json:"policies_and_procedures_set_out_when_cdd_must_be_completed,omitempty"`
	// Q56a Does the Entity gather and retain Ownership structure information when conducting CDD? If NO, explain.
	EntityGathersOwnershipStructureInformation *RT0005M37_YesNoExplain `protobuf:"bytes,3,opt,name=entity_gathers_ownership_structure_information,json=entityGathersOwnershipStructureInformation,proto3" json:"entity_gathers_ownership_structure_information,omitempty"`
	// Q56b Does the Entity gather and retain Customer identification information when conducting CDD? If NO, explain.
	EntityGathersCustomerIdentificationInformation *RT0005M37_YesNoExplain `protobuf:"bytes,4,opt,name=entity_gathers_customer_identification_information,json=entityGathersCustomerIdentificationInformation,proto3" json:"entity_gathers_customer_identification_information,omitempty"`
	// Q56c Does the Entity gather and retain Expected activity information when conducting CDD? If NO, explain.
	EntityGathersExpectedActivityInformation *RT0005M37_YesNoExplain `protobuf:"bytes,5,opt,name=entity_gathers_expected_activity_information,json=entityGathersExpectedActivityInformation,proto3" json:"entity_gathers_expected_activity_information,omitempty"`
	// Q56d Does the Entity gather and retain Nature of business/employment information when conducting CDD? If NO, explain.
	EntityGathersNatureOfBusinessInformation *RT0005M37_YesNoExplain `protobuf:"bytes,6,opt,name=entity_gathers_nature_of_business_information,json=entityGathersNatureOfBusinessInformation,proto3" json:"entity_gathers_nature_of_business_information,omitempty"`
	// Q56e Does the Entity gather and retain Product usage information when conducting CDD? If NO, explain.
	EntityGathersProductUsageInformation *RT0005M37_YesNoExplain `protobuf:"bytes,7,opt,name=entity_gathers_product_usage_information,json=entityGathersProductUsageInformation,proto3" json:"entity_gathers_product_usage_information,omitempty"`
	// Q56f Does the Entity gather and retain Purpose and nature of relationship information when conducting CDD? If NO, explain.
	EntityGathersPurposeAndNatureOfRelationshipInformation *RT0005M37_YesNoExplain `protobuf:"bytes,8,opt,name=entity_gathers_purpose_and_nature_of_relationship_information,json=entityGathersPurposeAndNatureOfRelationshipInformation,proto3" json:"entity_gathers_purpose_and_nature_of_relationship_information,omitempty"`
	// Q56g Does the Entity gather and retain Source of funds information when conducting CDD? If NO, explain.
	EntityGathersSourceOfFundsInformation *RT0005M37_YesNoExplain `protobuf:"bytes,9,opt,name=entity_gathers_source_of_funds_information,json=entityGathersSourceOfFundsInformation,proto3" json:"entity_gathers_source_of_funds_information,omitempty"`
	// Q57a Is the Ultimate beneficial ownership identified. If NO, explain.
	UltimateBeneficialOwnershipIdentified *RT0005M37_YesNoExplain `protobuf:"bytes,10,opt,name=ultimate_beneficial_ownership_identified,json=ultimateBeneficialOwnershipIdentified,proto3" json:"ultimate_beneficial_ownership_identified,omitempty"`
	// Q57a1 Are ultimate beneficial owners verified?. If NO, explain.
	UltimateBeneficialOwnershipVerified *RT0005M37_YesNoExplain `protobuf:"bytes,11,opt,name=ultimate_beneficial_ownership_verified,json=ultimateBeneficialOwnershipVerified,proto3" json:"ultimate_beneficial_ownership_verified,omitempty"`
	// Q57b Are the Authorised signatories (where applicable) identified. If NO, explain.
	AuthorisedSignatoriesIdentified *RT0005M37_YesNoExplain `protobuf:"bytes,12,opt,name=authorised_signatories_identified,json=authorisedSignatoriesIdentified,proto3" json:"authorised_signatories_identified,omitempty"`
	// Q57c Are the key controllers identified. If NO, explain.
	KeyControllersIdentified *RT0005M37_YesNoExplain `protobuf:"bytes,13,opt,name=key_controllers_identified,json=keyControllersIdentified,proto3" json:"key_controllers_identified,omitempty"`
	// Q57 Are the other relevant parties identified. If NO, explain.
	OtherRelevantPartiesIdentified *RT0005M37_YesNoExplain `protobuf:"bytes,14,opt,name=other_relevant_parties_identified,json=otherRelevantPartiesIdentified,proto3" json:"other_relevant_parties_identified,omitempty"`
	// Q58 What is the Entity’s minimum (lowest) threshold applied to beneficial ownership identification? Complete as a decimal e.g. 10% as 0.1
	LowestThresholdAppliedToBeneficialOwnership float64 `protobuf:"fixed64,15,opt,name=lowest_threshold_applied_to_beneficial_ownership,json=lowestThresholdAppliedToBeneficialOwnership,proto3" json:"lowest_threshold_applied_to_beneficial_ownership,omitempty"`
	// Q59 Does the due diligence process result in customers receiving a risk classification? If NO, explain.
	DueDiligenceProcessResultsInRiskClassification *RT0005M37_YesNoExplain `protobuf:"bytes,16,opt,name=due_diligence_process_results_in_risk_classification,json=dueDiligenceProcessResultsInRiskClassification,proto3" json:"due_diligence_process_results_in_risk_classification,omitempty"`
	// Q60a If YES to Q59, is the following factor / criteria used to determine risk classification - Product Usage.
	ProductUsageInformsRiskClassification bool `protobuf:"varint,17,opt,name=product_usage_informs_risk_classification,json=productUsageInformsRiskClassification,proto3" json:"product_usage_informs_risk_classification,omitempty"`
	// Q60b If YES to Q59, is the following factor / criteria used to determine risk classification - Geography.
	GeographyInformsRiskClassification bool `protobuf:"varint,18,opt,name=geography_informs_risk_classification,json=geographyInformsRiskClassification,proto3" json:"geography_informs_risk_classification,omitempty"`
	// Q60c If YES to Q59, is the following factor / criteria used to determine risk classification - Business Type/Industry.
	BusinessTypeInformsRiskClassification bool `protobuf:"varint,19,opt,name=business_type_informs_risk_classification,json=businessTypeInformsRiskClassification,proto3" json:"business_type_informs_risk_classification,omitempty"`
	// Q60d If YES to Q59, is the following factor / criteria used to determine risk classification - Legal Entity type.
	LegalEntityTypeInformsRiskClassification bool `protobuf:"varint,20,opt,name=legal_entity_type_informs_risk_classification,json=legalEntityTypeInformsRiskClassification,proto3" json:"legal_entity_type_informs_risk_classification,omitempty"`
	// Q60e If YES to Q59, is the following factor / criteria used to determine risk classification - Adverse Information.
	AdverseInformationTypeInformsRiskClassification bool `protobuf:"varint,21,opt,name=adverse_information_type_informs_risk_classification,json=adverseInformationTypeInformsRiskClassification,proto3" json:"adverse_information_type_informs_risk_classification,omitempty"`
	// Q60f If YES to Q59, is the following factor / criteria used to determine risk classification - Other (if YES, specify).
	AnyOtherInformationInformsRiskClassification *RT0005M37_YesNoExplain `protobuf:"bytes,22,opt,name=any_other_information_informs_risk_classification,json=anyOtherInformationInformsRiskClassification,proto3" json:"any_other_information_informs_risk_classification,omitempty"`
	// Q61 Does the Entity have a risk based approach to screening customers for adverse media/negative news?
	EntityHasRiskBasedApproachToScreeningCustomersForAdverseMedia *RT0005M37_YesNoAndExplain `protobuf:"bytes,23,opt,name=entity_has_risk_based_approach_to_screening_customers_for_adverse_media,json=entityHasRiskBasedApproachToScreeningCustomersForAdverseMedia,proto3" json:"entity_has_risk_based_approach_to_screening_customers_for_adverse_media,omitempty"`
	// Q62a If YES to Q61, does the entity apply its risk based approach to screening customers for adverse media at onboarding
	RiskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtOnboarding *RT0005M37_YesNoExplain `protobuf:"bytes,24,opt,name=risk_based_approach_to_customer_screening_for_adverse_media_applied_at_onboarding,json=riskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtOnboarding,proto3" json:"risk_based_approach_to_customer_screening_for_adverse_media_applied_at_onboarding,omitempty"`
	// Q62b If YES to Q61, does the entity apply its risk based approach to screening customers for adverse media at KYC renewal
	RiskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtKycRenewal *RT0005M37_YesNoExplain `protobuf:"bytes,25,opt,name=risk_based_approach_to_customer_screening_for_adverse_media_applied_at_kyc_renewal,json=riskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtKycRenewal,proto3" json:"risk_based_approach_to_customer_screening_for_adverse_media_applied_at_kyc_renewal,omitempty"`
	// Q62c If YES to Q61, does the entity apply its risk based approach to screening customers for adverse media at a Trigger event
	RiskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtTriggerEvent *RT0005M37_YesNoExplain `protobuf:"bytes,26,opt,name=risk_based_approach_to_customer_screening_for_adverse_media_applied_at_trigger_event,json=riskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtTriggerEvent,proto3" json:"risk_based_approach_to_customer_screening_for_adverse_media_applied_at_trigger_event,omitempty"`
	// Q64 What is the method used by the Entity to screen for adverse media / negative news?
	MethodUsedToScreenForAdverseMedia string `protobuf:"bytes,27,opt,name=method_used_to_screen_for_adverse_media,json=methodUsedToScreenForAdverseMedia,proto3" json:"method_used_to_screen_for_adverse_media,omitempty"`
	// Q64 Does the Entity have a risk based approach to screening customers and connected parties to determine
	// whether they are PEPs, or controlled by PEPs?
	EntityHasRiskBasedApproachToScreeningForPepConnections *RT0005M37_YesNoAndExplain `protobuf:"bytes,28,opt,name=entity_has_risk_based_approach_to_screening_for_pep_connections,json=entityHasRiskBasedApproachToScreeningForPepConnections,proto3" json:"entity_has_risk_based_approach_to_screening_for_pep_connections,omitempty"`
	// Q65a If YES to Q64, does the entity apply its risk based approach to screening customers and connected parties to determine
	//  whether they are PEPs, or controlled by PEPs at onboarding
	EntityHasRiskBasedApproachToScreeningForPepConnectionsAtOnboarding *RT0005M37_YesNoExplain `protobuf:"bytes,29,opt,name=entity_has_risk_based_approach_to_screening_for_pep_connections_at_onboarding,json=entityHasRiskBasedApproachToScreeningForPepConnectionsAtOnboarding,proto3" json:"entity_has_risk_based_approach_to_screening_for_pep_connections_at_onboarding,omitempty"`
	// Q65b If YES to Q64, does the entity apply its risk based approach to screening customers and connected parties to determine
	//  whether they are PEPs, or controlled by PEPs at KYC renewal
	EntityHasRiskBasedApproachToScreeningForPepConnectionsAtKycRenewal *RT0005M37_YesNoExplain `protobuf:"bytes,30,opt,name=entity_has_risk_based_approach_to_screening_for_pep_connections_at_kyc_renewal,json=entityHasRiskBasedApproachToScreeningForPepConnectionsAtKycRenewal,proto3" json:"entity_has_risk_based_approach_to_screening_for_pep_connections_at_kyc_renewal,omitempty"`
	// Q65c If YES to Q64, does the entity apply its risk based approach to screening customers and connected parties to determine
	// whether they are PEPs, or controlled by PEPs at a Trigger event
	EntityHasRiskBasedApproachToScreeningForPepConnectionsAtTriggerEvent *RT0005M37_YesNoExplain `protobuf:"bytes,31,opt,name=entity_has_risk_based_approach_to_screening_for_pep_connections_at_trigger_event,json=entityHasRiskBasedApproachToScreeningForPepConnectionsAtTriggerEvent,proto3" json:"entity_has_risk_based_approach_to_screening_for_pep_connections_at_trigger_event,omitempty"`
	// Q66 What is the method used by the Entity to screen PEPs?
	MethodUsedByEntityToScreenPeps string `protobuf:"bytes,32,opt,name=method_used_by_entity_to_screen_peps,json=methodUsedByEntityToScreenPeps,proto3" json:"method_used_by_entity_to_screen_peps,omitempty"`
	// Q67 Does the Entity have policies, procedures and processes to review and escalate potential matches from screening customers and connected parties to determine whether they are PEPs, or controlled by PEPs? If NO, explain
	PoliciesAndProceduresInPlaceToReviewPepMatches *RT0005M37_YesNoExplain `protobuf:"bytes,33,opt,name=policies_and_procedures_in_place_to_review_pep_matches,json=policiesAndProceduresInPlaceToReviewPepMatches,proto3" json:"policies_and_procedures_in_place_to_review_pep_matches,omitempty"`
	// Q68a Does the Entity have a process to review and update customer information based on KYC renewal
	ProcessToReviewAndUpdateCustomerInformationOnKycRenewal *RT0005M37_YesNoExplain `protobuf:"bytes,34,opt,name=process_to_review_and_update_customer_information_on_kyc_renewal,json=processToReviewAndUpdateCustomerInformationOnKycRenewal,proto3" json:"process_to_review_and_update_customer_information_on_kyc_renewal,omitempty"`
	// Q68b Does the Entity have a process to review and update customer information based on Trigger Event
	ProcessToReviewAndUpdateCustomerInformationOnTriggerEvent *RT0005M37_YesNoExplain `protobuf:"bytes,35,opt,name=process_to_review_and_update_customer_information_on_trigger_event,json=processToReviewAndUpdateCustomerInformationOnTriggerEvent,proto3" json:"process_to_review_and_update_customer_information_on_trigger_event,omitempty"`
	// Q69 Does the Entity maintain and report metrics on current and past periodic or trigger event due diligence reviews?
	EntityMaintainsAndReportsMetricsOnCurrentAndPastPeriodicOrTriggerDdReviews *RT0005M37_YesNoExplain `protobuf:"bytes,36,opt,name=entity_maintains_and_reports_metrics_on_current_and_past_periodic_or_trigger_dd_reviews,json=entityMaintainsAndReportsMetricsOnCurrentAndPastPeriodicOrTriggerDdReviews,proto3" json:"entity_maintains_and_reports_metrics_on_current_and_past_periodic_or_trigger_dd_reviews,omitempty"`
	// Q70a Are Non-account customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	NonAccountCustomersRestrictedByFccProgramme *RT0005M37_YesExplainNo `protobuf:"bytes,37,opt,name=non_account_customers_restricted_by_fcc_programme,json=nonAccountCustomersRestrictedByFccProgramme,proto3" json:"non_account_customers_restricted_by_fcc_programme,omitempty"`
	// Q70b Are Non-resident customers subject to EDD and/or are restricted, or prohibited by the Entity's FCC programme? If YES (i.e. restricted), please provide details.
	NonResidentCustomersRestrictedByFccProgramme *RT0005M37_YesNoExplain `protobuf:"bytes,38,opt,name=non_resident_customers_restricted_by_fcc_programme,json=nonResidentCustomersRestrictedByFccProgramme,proto3" json:"non_resident_customers_restricted_by_fcc_programme,omitempty"`
}

func (x *RT0005M37_KYCAndCDDAndEDD) Reset() {
	*x = RT0005M37_KYCAndCDDAndEDD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_KYCAndCDDAndEDD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_KYCAndCDDAndEDD) ProtoMessage() {}

func (x *RT0005M37_KYCAndCDDAndEDD) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_KYCAndCDDAndEDD.ProtoReflect.Descriptor instead.
func (*RT0005M37_KYCAndCDDAndEDD) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 9}
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityVerifiesIdentityOfCustomer() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityVerifiesIdentityOfCustomer
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetPoliciesAndProceduresSetOutWhenCddMustBeCompleted() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesAndProceduresSetOutWhenCddMustBeCompleted
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityGathersOwnershipStructureInformation() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityGathersOwnershipStructureInformation
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityGathersCustomerIdentificationInformation() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityGathersCustomerIdentificationInformation
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityGathersExpectedActivityInformation() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityGathersExpectedActivityInformation
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityGathersNatureOfBusinessInformation() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityGathersNatureOfBusinessInformation
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityGathersProductUsageInformation() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityGathersProductUsageInformation
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityGathersPurposeAndNatureOfRelationshipInformation() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityGathersPurposeAndNatureOfRelationshipInformation
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityGathersSourceOfFundsInformation() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityGathersSourceOfFundsInformation
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetUltimateBeneficialOwnershipIdentified() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.UltimateBeneficialOwnershipIdentified
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetUltimateBeneficialOwnershipVerified() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.UltimateBeneficialOwnershipVerified
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetAuthorisedSignatoriesIdentified() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.AuthorisedSignatoriesIdentified
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetKeyControllersIdentified() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.KeyControllersIdentified
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetOtherRelevantPartiesIdentified() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.OtherRelevantPartiesIdentified
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetLowestThresholdAppliedToBeneficialOwnership() float64 {
	if x != nil {
		return x.LowestThresholdAppliedToBeneficialOwnership
	}
	return 0
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetDueDiligenceProcessResultsInRiskClassification() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.DueDiligenceProcessResultsInRiskClassification
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetProductUsageInformsRiskClassification() bool {
	if x != nil {
		return x.ProductUsageInformsRiskClassification
	}
	return false
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetGeographyInformsRiskClassification() bool {
	if x != nil {
		return x.GeographyInformsRiskClassification
	}
	return false
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetBusinessTypeInformsRiskClassification() bool {
	if x != nil {
		return x.BusinessTypeInformsRiskClassification
	}
	return false
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetLegalEntityTypeInformsRiskClassification() bool {
	if x != nil {
		return x.LegalEntityTypeInformsRiskClassification
	}
	return false
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetAdverseInformationTypeInformsRiskClassification() bool {
	if x != nil {
		return x.AdverseInformationTypeInformsRiskClassification
	}
	return false
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetAnyOtherInformationInformsRiskClassification() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.AnyOtherInformationInformsRiskClassification
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityHasRiskBasedApproachToScreeningCustomersForAdverseMedia() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.EntityHasRiskBasedApproachToScreeningCustomersForAdverseMedia
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetRiskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtOnboarding() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RiskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtOnboarding
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetRiskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtKycRenewal() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RiskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtKycRenewal
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetRiskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtTriggerEvent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RiskBasedApproachToCustomerScreeningForAdverseMediaAppliedAtTriggerEvent
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetMethodUsedToScreenForAdverseMedia() string {
	if x != nil {
		return x.MethodUsedToScreenForAdverseMedia
	}
	return ""
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityHasRiskBasedApproachToScreeningForPepConnections() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.EntityHasRiskBasedApproachToScreeningForPepConnections
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityHasRiskBasedApproachToScreeningForPepConnectionsAtOnboarding() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasRiskBasedApproachToScreeningForPepConnectionsAtOnboarding
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityHasRiskBasedApproachToScreeningForPepConnectionsAtKycRenewal() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasRiskBasedApproachToScreeningForPepConnectionsAtKycRenewal
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityHasRiskBasedApproachToScreeningForPepConnectionsAtTriggerEvent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityHasRiskBasedApproachToScreeningForPepConnectionsAtTriggerEvent
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetMethodUsedByEntityToScreenPeps() string {
	if x != nil {
		return x.MethodUsedByEntityToScreenPeps
	}
	return ""
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetPoliciesAndProceduresInPlaceToReviewPepMatches() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesAndProceduresInPlaceToReviewPepMatches
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetProcessToReviewAndUpdateCustomerInformationOnKycRenewal() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.ProcessToReviewAndUpdateCustomerInformationOnKycRenewal
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetProcessToReviewAndUpdateCustomerInformationOnTriggerEvent() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.ProcessToReviewAndUpdateCustomerInformationOnTriggerEvent
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetEntityMaintainsAndReportsMetricsOnCurrentAndPastPeriodicOrTriggerDdReviews() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EntityMaintainsAndReportsMetricsOnCurrentAndPastPeriodicOrTriggerDdReviews
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetNonAccountCustomersRestrictedByFccProgramme() *RT0005M37_YesExplainNo {
	if x != nil {
		return x.NonAccountCustomersRestrictedByFccProgramme
	}
	return nil
}

func (x *RT0005M37_KYCAndCDDAndEDD) GetNonResidentCustomersRestrictedByFccProgramme() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.NonResidentCustomersRestrictedByFccProgramme
	}
	return nil
}

// Information about a foreign branch
type RT0005M37_EntityAndOwnership_Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the branch
	BranchName string `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	// The country in which the branch is located (the three letter ISO code)
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_Branch) Reset() {
	*x = RT0005M37_EntityAndOwnership_Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_Branch) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_Branch) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_Branch.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_Branch) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *RT0005M37_EntityAndOwnership_Branch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_Branch) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Information to be provided if publicly traded
type RT0005M37_EntityAndOwnership_TradedSecurityIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Codification chosen to identify the financial instrument
	FinancialIdentifier RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier `protobuf:"varint,4,opt,name=financial_identifier,json=financialIdentifier,proto3,enum=standards.open.v1.RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier" json:"financial_identifier,omitempty"`
	// Identifier of the affected instrument
	Instrument string `protobuf:"bytes,5,opt,name=instrument,proto3" json:"instrument,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) Reset() {
	*x = RT0005M37_EntityAndOwnership_TradedSecurityIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_TradedSecurityIdentifier.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) GetFinancialIdentifier() RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier {
	if x != nil {
		return x.FinancialIdentifier
	}
	return RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_IDENTIFIER_UNSPECIFIED
}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

// The definition of a beneficial owner resource
type RT0005M37_EntityAndOwnership_SignificantShareholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the client
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The type of beneficial owner
	BeneficialOwnerType RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType `protobuf:"varint,2,opt,name=beneficial_owner_type,json=beneficialOwnerType,proto3,enum=standards.open.v1.RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType" json:"beneficial_owner_type,omitempty"`
	// The ultimate effective interest in the legal entity on a look through basis
	BeneficialOwnership float64 `protobuf:"fixed64,3,opt,name=beneficial_ownership,json=beneficialOwnership,proto3" json:"beneficial_ownership,omitempty"`
	// Complete if the beneficial person is a natural person
	NaturalPersonOwnershipDetails *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson `protobuf:"bytes,4,opt,name=natural_person_ownership_details,json=naturalPersonOwnershipDetails,proto3" json:"natural_person_ownership_details,omitempty"`
	// Complete if the `SignificantShareholder` is a legal entity
	LegalEntityOwnershipDetails *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity `protobuf:"bytes,5,opt,name=legal_entity_ownership_details,json=legalEntityOwnershipDetails,proto3" json:"legal_entity_ownership_details,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) Reset() {
	*x = RT0005M37_EntityAndOwnership_SignificantShareholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_SignificantShareholder) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_SignificantShareholder.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_SignificantShareholder) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetBeneficialOwnerType() RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType {
	if x != nil {
		return x.BeneficialOwnerType
	}
	return RT0005M37_EntityAndOwnership_SignificantShareholder_TYPE_UNSPECIFIED
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetBeneficialOwnership() float64 {
	if x != nil {
		return x.BeneficialOwnership
	}
	return 0
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetNaturalPersonOwnershipDetails() *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson {
	if x != nil {
		return x.NaturalPersonOwnershipDetails
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetLegalEntityOwnershipDetails() *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity {
	if x != nil {
		return x.LegalEntityOwnershipDetails
	}
	return nil
}

// Information relating to a natural person
type RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first name
	GivenName string `protobuf:"bytes,1,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// The last name
	FamilyName string `protobuf:"bytes,2,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// The phone number including country code
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The email address of the manager
	EmailAddress string `protobuf:"bytes,4,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// The three letter ISO code of the country of residence
	CountryOfResidence string `protobuf:"bytes,5,opt,name=country_of_residence,json=countryOfResidence,proto3" json:"country_of_residence,omitempty"`
	// Place of address
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) Reset() {
	*x = RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetCountryOfResidence() string {
	if x != nil {
		return x.CountryOfResidence
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Information relating to a legal beneficial owner
type RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the company
	LegalName string `protobuf:"bytes,1,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// The registered office of the company
	RegisteredOffice string `protobuf:"bytes,2,opt,name=registered_office,json=registeredOffice,proto3" json:"registered_office,omitempty"`
	// The LEI identifier of the company (if available)
	LEI string `protobuf:"bytes,3,opt,name=LEI,proto3" json:"LEI,omitempty"`
	// The directors or managers of the legal entity
	DirectorsOrManagers []*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson `protobuf:"bytes,4,rep,name=directors_or_managers,json=directorsOrManagers,proto3" json:"directors_or_managers,omitempty"`
	// The own
	OwnershipType RT0005M37_EntityAndOwnership_OwnershipType `protobuf:"varint,6,opt,name=ownership_type,json=ownershipType,proto3,enum=standards.open.v1.RT0005M37_EntityAndOwnership_OwnershipType" json:"ownership_type,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) Reset() {
	*x = RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 2, 1}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetRegisteredOffice() string {
	if x != nil {
		return x.RegisteredOffice
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetLEI() string {
	if x != nil {
		return x.LEI
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetDirectorsOrManagers() []*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson {
	if x != nil {
		return x.DirectorsOrManagers
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetOwnershipType() RT0005M37_EntityAndOwnership_OwnershipType {
	if x != nil {
		return x.OwnershipType
	}
	return RT0005M37_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED
}

// Definition of further information related to the AML,CTF and Sactions program
type RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q19a Appointed Officer with sufficient experience/expertise
	AppointedOfficerWithSufficientExperience *RT0005M37_YesNoExplain `protobuf:"bytes,1,opt,name=appointed_officer_with_sufficient_experience,json=appointedOfficerWithSufficientExperience,proto3" json:"appointed_officer_with_sufficient_experience,omitempty"`
	// Q19b Cash reporting
	CashReporting *RT0005M37_YesNoExplain `protobuf:"bytes,2,opt,name=cash_reporting,json=cashReporting,proto3" json:"cash_reporting,omitempty"`
	// Q19c CDD
	CDD *RT0005M37_YesNoExplain `protobuf:"bytes,3,opt,name=CDD,proto3" json:"CDD,omitempty"`
	// Q19d EDD
	EDD *RT0005M37_YesNoExplain `protobuf:"bytes,4,opt,name=EDD,proto3" json:"EDD,omitempty"`
	// Q19e Beneficial Ownership
	BeneficialOwnership *RT0005M37_YesNoExplain `protobuf:"bytes,5,opt,name=beneficial_ownership,json=beneficialOwnership,proto3" json:"beneficial_ownership,omitempty"`
	// Q19f Independent Testing
	IndependentTesting *RT0005M37_YesNoExplain `protobuf:"bytes,6,opt,name=independent_testing,json=independentTesting,proto3" json:"independent_testing,omitempty"`
	// Q19g Periodic Review
	PeriodicReview *RT0005M37_YesNoExplain `protobuf:"bytes,7,opt,name=periodic_review,json=periodicReview,proto3" json:"periodic_review,omitempty"`
	// Q19h Policies and Procedures
	PoliciesAndProcedures *RT0005M37_YesNoExplain `protobuf:"bytes,8,opt,name=policies_and_procedures,json=policiesAndProcedures,proto3" json:"policies_and_procedures,omitempty"`
	// Q19i Risk Assessment
	RiskAssessment *RT0005M37_YesNoExplain `protobuf:"bytes,9,opt,name=risk_assessment,json=riskAssessment,proto3" json:"risk_assessment,omitempty"`
	// Q19j Sanctions
	Sanctions *RT0005M37_YesNoExplain `protobuf:"bytes,10,opt,name=sanctions,proto3" json:"sanctions,omitempty"`
	// Q19k PEP Screening
	PepScreening *RT0005M37_YesNoExplain `protobuf:"bytes,11,opt,name=pep_screening,json=pepScreening,proto3" json:"pep_screening,omitempty"`
	// Q19l Adverse Information Screening
	AdverseInformationScreening *RT0005M37_YesNoExplain `protobuf:"bytes,12,opt,name=adverse_information_screening,json=adverseInformationScreening,proto3" json:"adverse_information_screening,omitempty"`
	// Q19m Suspicious Activity Reporting
	SuspiciousActivityReporting *RT0005M37_YesNoExplain `protobuf:"bytes,13,opt,name=suspicious_activity_reporting,json=suspiciousActivityReporting,proto3" json:"suspicious_activity_reporting,omitempty"`
	// Q19o Suspicious Activity Reporting
	TransactionMonitoring *RT0005M37_YesNoExplain `protobuf:"bytes,14,opt,name=transaction_monitoring,json=transactionMonitoring,proto3" json:"transaction_monitoring,omitempty"`
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) Reset() {
	*x = RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) ProtoMessage() {}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram.ProtoReflect.Descriptor instead.
func (*RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetAppointedOfficerWithSufficientExperience() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.AppointedOfficerWithSufficientExperience
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetCashReporting() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.CashReporting
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetCDD() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.CDD
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetEDD() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.EDD
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetBeneficialOwnership() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.BeneficialOwnership
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetIndependentTesting() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.IndependentTesting
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetPeriodicReview() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PeriodicReview
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetPoliciesAndProcedures() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PoliciesAndProcedures
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetRiskAssessment() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RiskAssessment
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetSanctions() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.Sanctions
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetPepScreening() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.PepScreening
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetAdverseInformationScreening() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.AdverseInformationScreening
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetSuspiciousActivityReporting() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.SuspiciousActivityReporting
	}
	return nil
}

func (x *RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram) GetTransactionMonitoring() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.TransactionMonitoring
	}
	return nil
}

var File_RT0005M37_proto protoreflect.FileDescriptor

var file_RT0005M37_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0xe7, 0x01, 0x0a, 0x09, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x61,
	0x0a, 0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x12, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x64, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x1d, 0x61, 0x6d, 0x6c, 0x5f, 0x63,
	0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x41, 0x4d, 0x4c,
	0x41, 0x6e, 0x64, 0x43, 0x54, 0x46, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x19, 0x61, 0x6d, 0x6c, 0x43, 0x74,
	0x66, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x78, 0x0a, 0x1b, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x62, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64, 0x43, 0x54,
	0x46, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x52, 0x18, 0x61, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7,
	0x01, 0x0a, 0x2d, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64, 0x43, 0x54, 0x46, 0x41, 0x6e,
	0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x27, 0x61, 0x6d, 0x6c, 0x43, 0x74, 0x66, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x25, 0x61, 0x6d, 0x6c,
	0x5f, 0x63, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64, 0x43, 0x54, 0x46,
	0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x69, 0x73, 0x6b,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x20, 0x61, 0x6d, 0x6c, 0x43,
	0x74, 0x66, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x13,
	0x6b, 0x79, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x64, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x65, 0x64, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x4b, 0x59, 0x43, 0x41, 0x6e, 0x64, 0x43, 0x44,
	0x44, 0x41, 0x6e, 0x64, 0x45, 0x44, 0x44, 0x52, 0x0f, 0x6b, 0x79, 0x63, 0x41, 0x6e, 0x64, 0x43,
	0x64, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x64, 0x64, 0x1a, 0xb7, 0x01, 0x0a, 0x0c, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f,
	0x10, 0x02, 0x1a, 0xb7, 0x01, 0x0a, 0x0c, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x1a, 0xbd, 0x01, 0x0a,
	0x0f, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x1a, 0x92, 0x1f, 0x0a,
	0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x13, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x49,
	0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0e,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x79, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x81, 0x01,
	0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x2b, 0x61, 0x6e, 0x79,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26,
	0x61, 0x6e, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x27, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x68, 0x6f,
	0x72, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x23, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x2c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x5f,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x28, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x4f,
	0x72, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4c, 0x45, 0x49, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x44, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x3c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x4f, 0x66, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x57, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x64, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x72,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x4b, 0x0a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x70, 0x46, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x67, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x18, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4f, 0x66, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66,
	0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a, 0x06,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xaa, 0x02, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x99, 0x01, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x66, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x1d,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47,
	0x49, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x02,
	0x1a, 0xd1, 0x09, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x15, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x9d, 0x01, 0x0a, 0x20, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x1d, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x1e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x1b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xe3, 0x01, 0x0a,
	0x0d, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xdc, 0x02, 0x0a, 0x0b, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x4c, 0x45, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x45, 0x49,
	0x12, 0x88, 0x01, 0x0a, 0x15, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6f,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x54, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x4f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x51, 0x0a, 0x13, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x10, 0x02, 0x22, 0x6b, 0x0a, 0x0d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x48,
	0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47,
	0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x1a, 0xb5, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x6e,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x2e,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x29, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0xe6, 0x01,
	0x0a, 0x5c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x52, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x8c, 0x02, 0x0a, 0x71, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x48,
	0x61, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x44, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63,
	0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x2d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x28, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0xe4, 0x01, 0x0a, 0x5b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41,
	0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x51, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x86, 0x02, 0x0a,
	0x6e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x60, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41,
	0x6e, 0x64, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x49,
	0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63,
	0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x37, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x62, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x76, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x30, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x62, 0x73,
	0x41, 0x6e, 0x64, 0x4d, 0x76, 0x74, 0x73, 0x12, 0xf5, 0x01, 0x0a, 0x65, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x73, 0x62, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x76, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x58, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x41, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x54, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x73, 0x62, 0x41, 0x6e, 0x64, 0x4d, 0x76, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x5f, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x45,
	0x0a, 0x1f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x26, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x6c,
	0x6b, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x61, 0x73, 0x68,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x22, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x75, 0x6c, 0x6b,
	0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x44, 0x6f, 0x6d, 0x65,
	0x73, 0x74, 0x69, 0x63, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x61, 0x73, 0x68, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x1d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x49, 0x0a, 0x21, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x48, 0x6f, 0x6c, 0x64,
	0x4d, 0x61, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x5f, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x74, 0x6d, 0x73, 0x12, 0x71, 0x0a, 0x37,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x30, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x67, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x18,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x72, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xba, 0x12, 0x0a, 0x1c, 0x41, 0x4d,
	0x4c, 0x41, 0x6e, 0x64, 0x43, 0x54, 0x46, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0xb3, 0x01, 0x0a, 0x44, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x73, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x6d, 0x6c, 0x43, 0x74, 0x66, 0x41, 0x6e, 0x64, 0x53, 0x61,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x95, 0x01, 0x0a, 0x1d, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64, 0x43, 0x54, 0x46,
	0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x2e, 0x41, 0x4d, 0x4c, 0x43, 0x54, 0x46, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x19, 0x61,
	0x6d, 0x6c, 0x43, 0x74, 0x66, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x7a, 0x0a, 0x3d, 0x68, 0x6f, 0x77, 0x5f,
	0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6c, 0x5f,
	0x63, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x33, 0x68, 0x6f, 0x77, 0x4d, 0x61, 0x6e, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x49, 0x6e, 0x41, 0x6d, 0x6c, 0x43, 0x74,
	0x66, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x98, 0x01, 0x0a, 0x35, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65,
	0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x42, 0x79,
	0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12,
	0xaf, 0x01, 0x0a, 0x40, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3a, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x55, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x18, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x91, 0x0a, 0x0a, 0x19, 0x41, 0x4d, 0x4c, 0x43, 0x54, 0x46, 0x41, 0x6e, 0x64,
	0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x89, 0x01, 0x0a, 0x2c, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x28, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0e,
	0x63, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x0d, 0x63, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x0a, 0x03, 0x43, 0x44, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x03, 0x43, 0x44, 0x44, 0x12, 0x3b, 0x0a, 0x03, 0x45,
	0x44, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x03, 0x45, 0x44, 0x44, 0x12, 0x5c, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x5a, 0x0a, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x12,
	0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x61, 0x0a, 0x17, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x72,
	0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x70, 0x65, 0x70, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0c, 0x70, 0x65, 0x70, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x1d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x1d, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1b, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69,
	0x6f, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x9c, 0x23, 0x0a, 0x18, 0x41, 0x6e, 0x74, 0x69, 0x42,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x3e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x62, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x41, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x69, 0x62, 0x65, 0x72, 0x79, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x65, 0x0a, 0x19, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x77,
	0x69, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x17,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x57, 0x69, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x43, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x3c, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x4f, 0x72, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xcb,
	0x01, 0x0a, 0x50, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64,
	0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x46, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x41,
	0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x62, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x69, 0x62, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x29, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x41, 0x62, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x69, 0x62, 0x65, 0x73, 0x12, 0xf4, 0x01, 0x0a,
	0x66, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x59, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x62, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0xf4, 0x01, 0x0a, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x5f, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x66, 0x61, 0x6c,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x58, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x41, 0x62, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x41, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x54, 0x68, 0x65, 0x46, 0x61, 0x6c, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6b, 0x73,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x35, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x6f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x62, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x46, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6f,
	0x72, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x3d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x72, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x73, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x41, 0x62, 0x63, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x98, 0x01, 0x0a, 0x33, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x77,
	0x69, 0x64, 0x65, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x57, 0x69, 0x64, 0x65, 0x41, 0x62, 0x63, 0x52, 0x69, 0x73, 0x6b,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x76, 0x0a, 0x23, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x1e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x41, 0x62, 0x63,
	0x52, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x77,
	0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x30,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x8b, 0x01, 0x0a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x77, 0x72, 0x61,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x28, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x77, 0x72, 0x61,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x69, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xe9,
	0x01, 0x0a, 0x60, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x54, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x77, 0x72, 0x61,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4f, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x3e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x69, 0x73, 0x6b, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x47, 0x69, 0x66, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xbb, 0x01, 0x0a, 0x48, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61,
	0x74, 0x5f, 0x6d, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x77, 0x72, 0x61,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x54, 0x68, 0x61, 0x74, 0x4d, 0x61, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x12, 0xaf, 0x01, 0x0a, 0x41, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x61,
	0x62, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x39, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x41, 0x62,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x4f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x45, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x3f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0xac, 0x01, 0x0a, 0x40, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62,
	0x63, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62,
	0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xaa,
	0x01, 0x0a, 0x3f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f,
	0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x40, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x41, 0x62, 0x63, 0x52, 0x69, 0x73, 0x6b, 0x12, 0xc5,
	0x01, 0x0a, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x63,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x43, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x63, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x41, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x12, 0xd2, 0x01, 0x0a, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x61, 0x62, 0x63, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x4a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x41,
	0x62, 0x63, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x1a, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x18, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8d, 0x1f, 0x0a, 0x2a, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64,
	0x43, 0x54, 0x46, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x42, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x61,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xb7, 0x01, 0x0a, 0x45, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x3d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x12, 0xb9, 0x01, 0x0a, 0x46, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61,
	0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75,
	0x0a, 0x22, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x7e, 0x0a, 0x25, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x67, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x5f, 0x75, 0x73, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x21, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x47, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x55, 0x73, 0x61, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x12, 0x7c, 0x0a, 0x24, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x67, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x5f, 0x65, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x47, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x45, 0x75, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x52, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x66, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x48, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x65, 0x70, 0x69,
	0x6e, 0x67, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x69,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x49, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x62,
	0x66, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68,
	0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x41, 0x6e, 0x64, 0x4f, 0x72,
	0x4e, 0x62, 0x66, 0x69, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x52, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x5f, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x48, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x41, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x39,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4f, 0x72, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x58, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x4c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x44, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x38, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x33, 0x31, 0x31, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x31, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61,
	0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x31, 0x31, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x97, 0x02, 0x0a, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75,
	0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x69, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54,
	0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64,
	0x4f, 0x72, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x72, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x4f, 0x72, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x98, 0x01, 0x0a, 0x35, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68,
	0x61, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x52,
	0x69, 0x73, 0x6b, 0x73, 0x4f, 0x66, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x70, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x3b,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x34, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x69,
	0x6d, 0x65, 0x12, 0xf8, 0x01, 0x0a, 0x68, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f,
	0x74, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x5b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x6d, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x12, 0xa8, 0x01,
	0x0a, 0x3d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x73, 0x70,
	0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x36, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x77, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f,
	0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x65, 0x45,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0xcc, 0x01, 0x0a, 0x51, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x70, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x46, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x65, 0x70, 0x73, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0xb5, 0x01, 0x0a, 0x44, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x3c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74, 0x4f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x89, 0x01, 0x0a, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x64, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x27, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x64, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x7e, 0x0a, 0x25, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e,
	0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x21, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x67, 0x0a, 0x1a, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x18, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8e, 0x24, 0x0a, 0x23, 0x41, 0x4d, 0x4c, 0x41, 0x6e, 0x64,
	0x43, 0x54, 0x46, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x95, 0x01,
	0x0a, 0x34, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x74, 0x66, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x35, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x65, 0x77, 0x72,
	0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74,
	0x66, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x97, 0x01, 0x0a, 0x35, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x69, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x37, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66,
	0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6d,
	0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xc6, 0x01, 0x0a, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x65,
	0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x44, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0xc5, 0x01, 0x0a, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x65,
	0x5f, 0x64, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x43, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6d, 0x6c, 0x41, 0x6e,
	0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x75, 0x65, 0x44, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xbe, 0x01, 0x0a, 0x49, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66, 0x5f,
	0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x70, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x40, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x50, 0x65, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xc4, 0x01, 0x0a, 0x4c, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66,
	0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0xb6, 0x01, 0x0a, 0x45, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xc5, 0x01, 0x0a, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66,
	0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72,
	0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x6e, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0xaf, 0x01, 0x0a, 0x41, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x39, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0xc6, 0x01, 0x0a, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x74, 0x66, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x44, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6d,
	0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a,
	0x37, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x74, 0x66, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31,
	0x32, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x41, 0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x74, 0x66, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x31, 0x32, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x32, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x77,
	0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x2c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x95,
	0x01, 0x0a, 0x33, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x33, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x77, 0x72, 0x61,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x99,
	0x01, 0x0a, 0x35, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f,
	0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x69, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xc3, 0x01, 0x0a, 0x4b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x77, 0x72, 0x61,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x75,
	0x65, 0x44, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0xc2, 0x01, 0x0a, 0x4a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x43, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x43, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xb6, 0x01, 0x0a,
	0x44, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x61,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xc3, 0x01, 0x0a, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x43, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x61,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xad, 0x01, 0x0a, 0x3f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x39, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x77, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xc4, 0x01, 0x0a, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x44, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x77, 0x72,
	0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x35, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x77, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x31, 0x32, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2d, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x77,
	0x72, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x68, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x31, 0x32, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x67, 0x0a, 0x1a,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x18, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xce, 0x2b, 0x0a, 0x0f, 0x4b, 0x59, 0x43, 0x41, 0x6e,
	0x64, 0x43, 0x44, 0x44, 0x41, 0x6e, 0x64, 0x45, 0x44, 0x44, 0x12, 0x79, 0x0a, 0x24, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x3a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x63,
	0x64, 0x64, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x31, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x53, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x64, 0x64, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x95, 0x01, 0x0a, 0x32, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x89, 0x01, 0x0a, 0x2c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x28, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01, 0x0a,
	0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x28, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x4e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x66, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x28, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x24, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01,
	0x0a, 0x3d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f,
	0x66, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x2a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x25, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x82, 0x01, 0x0a, 0x28, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x25, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x26, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x23, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x75, 0x0a, 0x21, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x1a, 0x6b,
	0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x18, 0x6b, 0x65, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x21, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x1e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x30, 0x6c, 0x6f,
	0x77, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x2b, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x97, 0x01, 0x0a, 0x34, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59,
	0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2e, 0x64, 0x75, 0x65,
	0x44, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x29, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x25, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x29, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x2d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x34, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x92, 0x01, 0x0a, 0x31, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2c, 0x61, 0x6e, 0x79, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbc, 0x01, 0x0a, 0x47, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x3d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x61, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0xcc, 0x01, 0x0a, 0x51, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x46, 0x72,
	0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68,
	0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0xcd, 0x01, 0x0a, 0x52, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x46, 0x72,
	0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68,
	0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x4b, 0x79, 0x63, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x61, 0x6c, 0x12, 0xd1, 0x01, 0x0a, 0x54, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x48, 0x72, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61,
	0x63, 0x68, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x27, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x55, 0x73, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0xad, 0x01,
	0x0a, 0x3f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x70, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x36, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73,
	0x52, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63,
	0x68, 0x54, 0x6f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50,
	0x65, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc4, 0x01,
	0x0a, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x70, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x42, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x70, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0xc5, 0x01, 0x0a, 0x4e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6b, 0x79, 0x63, 0x5f,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x42, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x46,
	0x6f, 0x72, 0x50, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x74, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x12, 0xc9, 0x01, 0x0a,
	0x50, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x70, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x44, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x52, 0x69, 0x73,
	0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x54, 0x6f,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x70, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x24, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x65, 0x70, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x50, 0x65, 0x70, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x36, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x54, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x40, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6b, 0x79, 0x63, 0x5f,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e,
	0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x37, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x12, 0xb0, 0x01, 0x0a, 0x42, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x39, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0xd6, 0x01, 0x0a, 0x57, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6f, 0x6e,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x4a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x4f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x50,
	0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x4f, 0x72, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x91, 0x01,
	0x0a, 0x31, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x4e, 0x6f, 0x52, 0x2b, 0x6e, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x12, 0x93, 0x01, 0x0a, 0x32, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x63, 0x63, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x2c, 0x6e, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x63, 0x63, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RT0005M37_proto_rawDescOnce sync.Once
	file_RT0005M37_proto_rawDescData = file_RT0005M37_proto_rawDesc
)

func file_RT0005M37_proto_rawDescGZIP() []byte {
	file_RT0005M37_proto_rawDescOnce.Do(func() {
		file_RT0005M37_proto_rawDescData = protoimpl.X.CompressGZIP(file_RT0005M37_proto_rawDescData)
	})
	return file_RT0005M37_proto_rawDescData
}

var file_RT0005M37_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_RT0005M37_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_RT0005M37_proto_goTypes = []interface{}{
	(RT0005M37_YesNoExplain_Response)(0),                                                     // 0: standards.open.v1.RT0005M37.YesNoExplain.Response
	(RT0005M37_YesExplainNo_Response)(0),                                                     // 1: standards.open.v1.RT0005M37.YesExplainNo.Response
	(RT0005M37_YesNoAndExplain_Response)(0),                                                  // 2: standards.open.v1.RT0005M37.YesNoAndExplain.Response
	(RT0005M37_EntityAndOwnership_OwnershipType)(0),                                          // 3: standards.open.v1.RT0005M37.EntityAndOwnership.OwnershipType
	(RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier)(0), // 4: standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier.FinancialInstrumentIdentifier
	(RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType)(0),             // 5: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.BeneficialOwnerType
	(*RT0005M37)(nil),                                                         // 6: standards.open.v1.RT0005M37
	(*RT0005M37Batch)(nil),                                                    // 7: standards.open.v1.RT0005M37_batch
	(*RT0005M37_YesNoExplain)(nil),                                            // 8: standards.open.v1.RT0005M37.YesNoExplain
	(*RT0005M37_YesExplainNo)(nil),                                            // 9: standards.open.v1.RT0005M37.YesExplainNo
	(*RT0005M37_YesNoAndExplain)(nil),                                         // 10: standards.open.v1.RT0005M37.YesNoAndExplain
	(*RT0005M37_EntityAndOwnership)(nil),                                      // 11: standards.open.v1.RT0005M37.EntityAndOwnership
	(*RT0005M37_ProductsAndServices)(nil),                                     // 12: standards.open.v1.RT0005M37.ProductsAndServices
	(*RT0005M37_AMLAndCTFAndSanctionsProgram)(nil),                            // 13: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram
	(*RT0005M37_AntiBriberyAndCorruption)(nil),                                // 14: standards.open.v1.RT0005M37.AntiBriberyAndCorruption
	(*RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures)(nil),              // 15: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures
	(*RT0005M37_AMLAndCTFAndSanctionsRiskAssessment)(nil),                     // 16: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment
	(*RT0005M37_KYCAndCDDAndEDD)(nil),                                         // 17: standards.open.v1.RT0005M37.KYCAndCDDAndEDD
	(*RT0005M37_EntityAndOwnership_Branch)(nil),                               // 18: standards.open.v1.RT0005M37.EntityAndOwnership.Branch
	(*RT0005M37_EntityAndOwnership_TradedSecurityIdentifier)(nil),             // 19: standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier
	(*RT0005M37_EntityAndOwnership_SignificantShareholder)(nil),               // 20: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder
	(*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson)(nil), // 21: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.NaturalPerson
	(*RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity)(nil),   // 22: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.LegalEntity
	(*RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram)(nil),  // 23: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram
	(*date.Date)(nil),                                                         // 24: google.type.Date
	(*money.Money)(nil),                                                       // 25: google.type.Money
}
var file_RT0005M37_proto_depIdxs = []int32{
	11,  // 0: standards.open.v1.RT0005M37.entity_and_ownership:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership
	12,  // 1: standards.open.v1.RT0005M37.products_and_services:type_name -> standards.open.v1.RT0005M37.ProductsAndServices
	13,  // 2: standards.open.v1.RT0005M37.aml_ctf_and_sanctions_program:type_name -> standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram
	13,  // 3: standards.open.v1.RT0005M37.anti_bribery_and_corruption:type_name -> standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram
	15,  // 4: standards.open.v1.RT0005M37.aml_ctf_and_sanctions_policies_and_procedures:type_name -> standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures
	16,  // 5: standards.open.v1.RT0005M37.aml_ctf_and_sanctions_risk_assessment:type_name -> standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment
	17,  // 6: standards.open.v1.RT0005M37.kyc_and_cdd_and_edd:type_name -> standards.open.v1.RT0005M37.KYCAndCDDAndEDD
	6,   // 7: standards.open.v1.RT0005M37_batch.response:type_name -> standards.open.v1.RT0005M37
	0,   // 8: standards.open.v1.RT0005M37.YesNoExplain.response:type_name -> standards.open.v1.RT0005M37.YesNoExplain.Response
	1,   // 9: standards.open.v1.RT0005M37.YesExplainNo.response:type_name -> standards.open.v1.RT0005M37.YesExplainNo.Response
	2,   // 10: standards.open.v1.RT0005M37.YesNoAndExplain.response:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain.Response
	18,  // 11: standards.open.v1.RT0005M37.EntityAndOwnership.covered_branches:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.Branch
	24,  // 12: standards.open.v1.RT0005M37.EntityAndOwnership.date_of_incorporation:type_name -> google.type.Date
	3,   // 13: standards.open.v1.RT0005M37.EntityAndOwnership.ownership_type:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.OwnershipType
	19,  // 14: standards.open.v1.RT0005M37.EntityAndOwnership.security_identifier:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier
	20,  // 15: standards.open.v1.RT0005M37.EntityAndOwnership.significant_shareholders:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder
	8,   // 16: standards.open.v1.RT0005M37.EntityAndOwnership.structure_chart:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	18,  // 17: standards.open.v1.RT0005M37.EntityAndOwnership.branches_under_offshore_banking_license:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.Branch
	25,  // 18: standards.open.v1.RT0005M37.EntityAndOwnership.total_assets:type_name -> google.type.Money
	8,   // 19: standards.open.v1.RT0005M37.EntityAndOwnership.representative_of_branches:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	10,  // 20: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_to_domestic_banks:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	10,  // 21: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_allows_domestic_clients_to_provide_downstream_relationships:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	10,  // 22: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_has_procedures_in_place_to_identify_downstream_relationships_with_domestic_banks:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	10,  // 23: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_to_foreign_banks:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	10,  // 24: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_allows_foreign_clients_to_provide_downstream_relationships:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	10,  // 25: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_has_procedures_in_place_to_identify_foreign_relationships_with_domestic_banks:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	10,  // 26: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_to_regulated_msbs_and_mvts:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	10,  // 27: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_has_processes_to_identify_downstream_relationships_with_msb_and_mvts:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	8,   // 28: standards.open.v1.RT0005M37.ProductsAndServices.representative_of_branches:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 29: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.entity_has_program_that_sets_minimum_aml_ctf_and_sanctions_standards:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	23,  // 30: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.aml_ctf_and_sanctions_program:type_name -> standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram
	8,   // 31: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.policy_approved_at_least_annually_by_senior_committee:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 32: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.senior_management_committee_receives_regular_programme_reporting:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	9,   // 33: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.use_third_parties:type_name -> standards.open.v1.RT0005M37.YesExplainNo
	8,   // 34: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.representative_of_branches:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 35: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.documented_anti_bribery_and_corruption_policies_and_procedures:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 36: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.enterprise_wide_programme:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 37: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.appointed_designated_officer_or_officers_with_sufficient_experience:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 38: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_has_adequate_staff_with_appropriate_experience_to_implement_abc_programme:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 39: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_has_global_abc_policy_prohibiting_bribes:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 40: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_has_global_abc_policy_that_includes_enhanced_requirements_for_interacting_with_public_officials:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 41: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_has_global_abc_policy_that_includes_a_prohibition_against_the_falsification_of_books_and_records:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 42: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_has_controls_in_place_to_monitor_abc_programme:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 43: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.board_or_senior_management_receives_regular_information_on_abc_matters:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	10,  // 44: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_performs_enterprise_wide_abc_risk_assessment:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	8,   // 45: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_has_abc_residual_risk_rating:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 46: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_ewra_covers_liability_created_by_intermediaries:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 47: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_ewra_covers_corruption_risks_by_country:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 48: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_ewra_covers_transaction_products_or_services_involving_state_entities_or_public_officials:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 49: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_ewra_covers_risks_associated_with_gifts_and_hospitality:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 50: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_ewra_covers_changes_in_business_activities_that_may_increase_risk:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 51: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_internal_audit_function_covers_abc_policies_and_procedures:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 52: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_board_and_senior_management_committee:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 53: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_first_line_of_defence:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 54: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_second_line_of_defence:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 55: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_third_line_of_defence:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 56: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_third_parties_subject_to_abc_risk:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 57: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_provides_mandatory_abc_training_to_non_employed_workers_as_appropriate:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 58: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.entity_provides_abc_training_targeted_to_specific_roles_responsibilities_activities:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 59: standards.open.v1.RT0005M37.AntiBriberyAndCorruption.representative_of_branches:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 60: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_documented_policies_and_procedures_for_money_laundering:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 61: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_documented_policies_and_procedures_for_terrorist_financing:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 62: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_documented_policies_and_procedures_for_sanctions_violations:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 63: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_updated_at_least_annually:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	10,  // 64: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_gapped_against_usa_standards:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	10,  // 65: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_gapped_against_eu_standards:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	8,   // 66: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_opening_and_keeping_anonymous_and_fictitious_named_accounts:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 67: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_opening_accounts_for_unlicensed_banks_and_or_nbfis:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 68: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_dealing_with_entities_providing_banking_to_unlicensed_banks:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 69: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_accounts_or_relationships_with_shell_banks:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 70: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_dealing_with_another_entity_that_provides_services_to_shell_banks:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 71: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_accounts_for_section_311_entities:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 72: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_prohibit_accounts_for_unlicensed_or_regulated_remittance_agents_or_exchange_houses_or_money_transfer_agents:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 73: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_assess_risks_of_relationships_with_peps:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 74: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_define_escalation_process_for_financial_crime:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 75: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_define_process_for_terminating_existing_customer_relationships_due_to_financial_crime_risk:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 76: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_specify_how_suspicious_activities_are_escalated:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 77: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_outline_process_for_screening_for_sanctions_peps_and_negative_media:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 78: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.policies_that_outline_process_for_maintenance_of_internal_watchlists:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 79: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_had_defined_a_risk_tolerance_statement:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	10,  // 80: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.entity_has_record_retention_procedure:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	8,   // 81: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsPoliciesAndProcedures.representative_of_branches:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 82: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_client_risk_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 83: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_product_risk_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 84: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_channel_risk_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 85: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_geography_risk_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 86: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_transaction_monitoring_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 87: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_customer_due_diligence_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 88: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_pep_identification_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 89: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_transaction_screening_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 90: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_name_screening_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 91: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_training_and_education_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 92: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_governance_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 93: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_covers_management_information_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 94: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_aml_and_ctf_ewra_completed_in_the_last_12_months:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 95: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_client_risk_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 96: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_product_risk_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 97: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_channel_risk_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 98: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_geography_risk_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 99: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_customer_due_diligence_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 100: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_transaction_screening_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 101: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_name_screening_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 102: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_list_management_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 103: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_training_and_education_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 104: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_governance_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 105: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_covers_management_information_effectiveness_component:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 106: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.entity_sanctions_ewra_completed_in_the_last_12_months:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 107: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsRiskAssessment.representative_of_branches:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 108: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_verifies_identity_of_customer:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 109: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.policies_and_procedures_set_out_when_cdd_must_be_completed:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 110: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_gathers_ownership_structure_information:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 111: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_gathers_customer_identification_information:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 112: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_gathers_expected_activity_information:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 113: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_gathers_nature_of_business_information:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 114: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_gathers_product_usage_information:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 115: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_gathers_purpose_and_nature_of_relationship_information:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 116: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_gathers_source_of_funds_information:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 117: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.ultimate_beneficial_ownership_identified:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 118: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.ultimate_beneficial_ownership_verified:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 119: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.authorised_signatories_identified:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 120: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.key_controllers_identified:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 121: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.other_relevant_parties_identified:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 122: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.due_diligence_process_results_in_risk_classification:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 123: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.any_other_information_informs_risk_classification:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	10,  // 124: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_has_risk_based_approach_to_screening_customers_for_adverse_media:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	8,   // 125: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.risk_based_approach_to_customer_screening_for_adverse_media_applied_at_onboarding:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 126: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.risk_based_approach_to_customer_screening_for_adverse_media_applied_at_kyc_renewal:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 127: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.risk_based_approach_to_customer_screening_for_adverse_media_applied_at_trigger_event:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	10,  // 128: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_has_risk_based_approach_to_screening_for_pep_connections:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	8,   // 129: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_has_risk_based_approach_to_screening_for_pep_connections_at_onboarding:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 130: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_has_risk_based_approach_to_screening_for_pep_connections_at_kyc_renewal:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 131: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_has_risk_based_approach_to_screening_for_pep_connections_at_trigger_event:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 132: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.policies_and_procedures_in_place_to_review_pep_matches:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 133: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.process_to_review_and_update_customer_information_on_kyc_renewal:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 134: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.process_to_review_and_update_customer_information_on_trigger_event:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 135: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.entity_maintains_and_reports_metrics_on_current_and_past_periodic_or_trigger_dd_reviews:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	9,   // 136: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.non_account_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT0005M37.YesExplainNo
	8,   // 137: standards.open.v1.RT0005M37.KYCAndCDDAndEDD.non_resident_customers_restricted_by_fcc_programme:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	4,   // 138: standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier.financial_identifier:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier.FinancialInstrumentIdentifier
	5,   // 139: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.beneficial_owner_type:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.BeneficialOwnerType
	21,  // 140: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.natural_person_ownership_details:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.NaturalPerson
	22,  // 141: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.legal_entity_ownership_details:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.LegalEntity
	21,  // 142: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.LegalEntity.directors_or_managers:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.NaturalPerson
	3,   // 143: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.LegalEntity.ownership_type:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.OwnershipType
	8,   // 144: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.appointed_officer_with_sufficient_experience:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 145: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.cash_reporting:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 146: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.CDD:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 147: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.EDD:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 148: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.beneficial_ownership:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 149: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.independent_testing:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 150: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.periodic_review:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 151: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.policies_and_procedures:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 152: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.risk_assessment:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 153: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.sanctions:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 154: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.pep_screening:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 155: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.adverse_information_screening:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 156: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.suspicious_activity_reporting:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	8,   // 157: standards.open.v1.RT0005M37.AMLAndCTFAndSanctionsProgram.AMLCTFAndSanctionsProgram.transaction_monitoring:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	158, // [158:158] is the sub-list for method output_type
	158, // [158:158] is the sub-list for method input_type
	158, // [158:158] is the sub-list for extension type_name
	158, // [158:158] is the sub-list for extension extendee
	0,   // [0:158] is the sub-list for field type_name
}

func init() { file_RT0005M37_proto_init() }
func file_RT0005M37_proto_init() {
	if File_RT0005M37_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RT0005M37_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_YesNoExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_YesExplainNo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_YesNoAndExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_ProductsAndServices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_AMLAndCTFAndSanctionsProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_AntiBriberyAndCorruption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_AMLAndCTFAndSanctionsPoliciesAndProcedures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_AMLAndCTFAndSanctionsRiskAssessment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_KYCAndCDDAndEDD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_TradedSecurityIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_SignificantShareholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_AMLAndCTFAndSanctionsProgram_AMLCTFAndSanctionsProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RT0005M37_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RT0005M37_proto_goTypes,
		DependencyIndexes: file_RT0005M37_proto_depIdxs,
		EnumInfos:         file_RT0005M37_proto_enumTypes,
		MessageInfos:      file_RT0005M37_proto_msgTypes,
	}.Build()
	File_RT0005M37_proto = out.File
	file_RT0005M37_proto_rawDesc = nil
	file_RT0005M37_proto_goTypes = nil
	file_RT0005M37_proto_depIdxs = nil
}
