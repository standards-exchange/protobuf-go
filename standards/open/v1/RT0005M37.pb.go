// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: RT0005M37.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	money "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RT0005M37_YesNoExplain_Response int32

const (
	RT0005M37_YesNoExplain_RESPONSE_UNSPECIFIED RT0005M37_YesNoExplain_Response = 0
	RT0005M37_YesNoExplain_YES                  RT0005M37_YesNoExplain_Response = 1
	RT0005M37_YesNoExplain_NO                   RT0005M37_YesNoExplain_Response = 2
)

// Enum value maps for RT0005M37_YesNoExplain_Response.
var (
	RT0005M37_YesNoExplain_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT0005M37_YesNoExplain_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT0005M37_YesNoExplain_Response) Enum() *RT0005M37_YesNoExplain_Response {
	p := new(RT0005M37_YesNoExplain_Response)
	*p = x
	return p
}

func (x RT0005M37_YesNoExplain_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_YesNoExplain_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[0].Descriptor()
}

func (RT0005M37_YesNoExplain_Response) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[0]
}

func (x RT0005M37_YesNoExplain_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_YesNoExplain_Response.Descriptor instead.
func (RT0005M37_YesNoExplain_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 0, 0}
}

type RT0005M37_YesExplainNo_Response int32

const (
	RT0005M37_YesExplainNo_RESPONSE_UNSPECIFIED RT0005M37_YesExplainNo_Response = 0
	RT0005M37_YesExplainNo_YES                  RT0005M37_YesExplainNo_Response = 1
	RT0005M37_YesExplainNo_NO                   RT0005M37_YesExplainNo_Response = 2
)

// Enum value maps for RT0005M37_YesExplainNo_Response.
var (
	RT0005M37_YesExplainNo_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT0005M37_YesExplainNo_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT0005M37_YesExplainNo_Response) Enum() *RT0005M37_YesExplainNo_Response {
	p := new(RT0005M37_YesExplainNo_Response)
	*p = x
	return p
}

func (x RT0005M37_YesExplainNo_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_YesExplainNo_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[1].Descriptor()
}

func (RT0005M37_YesExplainNo_Response) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[1]
}

func (x RT0005M37_YesExplainNo_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_YesExplainNo_Response.Descriptor instead.
func (RT0005M37_YesExplainNo_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 1, 0}
}

type RT0005M37_YesNoAndExplain_Response int32

const (
	RT0005M37_YesNoAndExplain_RESPONSE_UNSPECIFIED RT0005M37_YesNoAndExplain_Response = 0
	RT0005M37_YesNoAndExplain_YES                  RT0005M37_YesNoAndExplain_Response = 1
	RT0005M37_YesNoAndExplain_NO                   RT0005M37_YesNoAndExplain_Response = 2
)

// Enum value maps for RT0005M37_YesNoAndExplain_Response.
var (
	RT0005M37_YesNoAndExplain_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "YES",
		2: "NO",
	}
	RT0005M37_YesNoAndExplain_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED": 0,
		"YES":                  1,
		"NO":                   2,
	}
)

func (x RT0005M37_YesNoAndExplain_Response) Enum() *RT0005M37_YesNoAndExplain_Response {
	p := new(RT0005M37_YesNoAndExplain_Response)
	*p = x
	return p
}

func (x RT0005M37_YesNoAndExplain_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_YesNoAndExplain_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[2].Descriptor()
}

func (RT0005M37_YesNoAndExplain_Response) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[2]
}

func (x RT0005M37_YesNoAndExplain_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_YesNoAndExplain_Response.Descriptor instead.
func (RT0005M37_YesNoAndExplain_Response) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Enumerations of ownership type
type RT0005M37_EntityAndOwnership_OwnershipType int32

const (
	// The ownership type is unspecified
	RT0005M37_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED RT0005M37_EntityAndOwnership_OwnershipType = 0
	// Member owned / mutual
	RT0005M37_EntityAndOwnership_MEMBER_OR_MUTUAL RT0005M37_EntityAndOwnership_OwnershipType = 1
	// Government or state owned by more than 25%
	RT0005M37_EntityAndOwnership_GOVERNMENT_OR_STATE RT0005M37_EntityAndOwnership_OwnershipType = 2
	// Privately owned
	RT0005M37_EntityAndOwnership_PRIVATE RT0005M37_EntityAndOwnership_OwnershipType = 3
)

// Enum value maps for RT0005M37_EntityAndOwnership_OwnershipType.
var (
	RT0005M37_EntityAndOwnership_OwnershipType_name = map[int32]string{
		0: "OWNERSHIP_TYPE_UNSPECIFIED",
		1: "MEMBER_OR_MUTUAL",
		2: "GOVERNMENT_OR_STATE",
		3: "PRIVATE",
	}
	RT0005M37_EntityAndOwnership_OwnershipType_value = map[string]int32{
		"OWNERSHIP_TYPE_UNSPECIFIED": 0,
		"MEMBER_OR_MUTUAL":           1,
		"GOVERNMENT_OR_STATE":        2,
		"PRIVATE":                    3,
	}
)

func (x RT0005M37_EntityAndOwnership_OwnershipType) Enum() *RT0005M37_EntityAndOwnership_OwnershipType {
	p := new(RT0005M37_EntityAndOwnership_OwnershipType)
	*p = x
	return p
}

func (x RT0005M37_EntityAndOwnership_OwnershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_EntityAndOwnership_OwnershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[3].Descriptor()
}

func (RT0005M37_EntityAndOwnership_OwnershipType) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[3]
}

func (x RT0005M37_EntityAndOwnership_OwnershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_OwnershipType.Descriptor instead.
func (RT0005M37_EntityAndOwnership_OwnershipType) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 0}
}

// Enumerations of financial identifiers
type RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier int32

const (
	// Source not specified by the user.
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_IDENTIFIER_UNSPECIFIED RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 0
	// FIGI (Financial_Instrument Global Identifier). To look up the FIGI navigate to www.openfigi.org.
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FIGI RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 1
	// PermID (Refinitiv Permanent Identifier). To look up the PermID
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_PERM_ID RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier = 2
)

// Enum value maps for RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier.
var (
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier_name = map[int32]string{
		0: "IDENTIFIER_UNSPECIFIED",
		1: "FIGI",
		2: "PERM_ID",
	}
	RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier_value = map[string]int32{
		"IDENTIFIER_UNSPECIFIED": 0,
		"FIGI":                   1,
		"PERM_ID":                2,
	}
)

func (x RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Enum() *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier {
	p := new(RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier)
	*p = x
	return p
}

func (x RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[4].Descriptor()
}

func (RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[4]
}

func (x RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier.Descriptor instead.
func (RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 1, 0}
}

// Types of account holders
type RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType int32

const (
	// Beneficial owner unspecified
	RT0005M37_EntityAndOwnership_SignificantShareholder_TYPE_UNSPECIFIED RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 0
	// The beneficial owner is a natural person
	RT0005M37_EntityAndOwnership_SignificantShareholder_NATURAL_PERSON RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 1
	// The beneficial owner is a legal entity
	RT0005M37_EntityAndOwnership_SignificantShareholder_LEGAL_ENTITY RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType = 2
)

// Enum value maps for RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType.
var (
	RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NATURAL_PERSON",
		2: "LEGAL_ENTITY",
	}
	RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"NATURAL_PERSON":   1,
		"LEGAL_ENTITY":     2,
	}
)

func (x RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Enum() *RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType {
	p := new(RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType)
	*p = x
	return p
}

func (x RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_RT0005M37_proto_enumTypes[5].Descriptor()
}

func (RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Type() protoreflect.EnumType {
	return &file_RT0005M37_proto_enumTypes[5]
}

func (x RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType.Descriptor instead.
func (RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType) EnumDescriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

// Wolfsberg Group Correspondent Banking Due Diligence Questionnaire (CBDDQ) V1.3.
// The questionnaire is required to be answered on a Legal Entity (LE) level. The Financial Institution should answer
// the questionnaire at the entity level including any branches for which the client base, products and control
// model are materially simialr to the LE Head Office. This Questionnaire should not cover more than one LE.
// Each question will need to be addressed from the perspective of the LE on behalf of all of its branches.
type RT0005M37 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the financial institution
	FinancialInstitutionName string `protobuf:"bytes,1,opt,name=financial_institution_name,json=financialInstitutionName,proto3" json:"financial_institution_name,omitempty"`
	// The three letter ISO code of the country in which the LE is located
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	// Section 1. Information related to legal entity and its ownership
	EntityAndOwnership *RT0005M37_EntityAndOwnership `protobuf:"bytes,3,opt,name=entity_and_ownership,json=entityAndOwnership,proto3" json:"entity_and_ownership,omitempty"`
}

func (x *RT0005M37) Reset() {
	*x = RT0005M37{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37) ProtoMessage() {}

func (x *RT0005M37) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37.ProtoReflect.Descriptor instead.
func (*RT0005M37) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0}
}

func (x *RT0005M37) GetFinancialInstitutionName() string {
	if x != nil {
		return x.FinancialInstitutionName
	}
	return ""
}

func (x *RT0005M37) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *RT0005M37) GetEntityAndOwnership() *RT0005M37_EntityAndOwnership {
	if x != nil {
		return x.EntityAndOwnership
	}
	return nil
}

// Response where a NO requires further information
type RT0005M37_YesNoExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT0005M37_YesNoExplain_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT0005M37_YesNoExplain_Response" json:"response,omitempty"`
	// Explanation if the answer is `NO`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT0005M37_YesNoExplain) Reset() {
	*x = RT0005M37_YesNoExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_YesNoExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_YesNoExplain) ProtoMessage() {}

func (x *RT0005M37_YesNoExplain) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_YesNoExplain.ProtoReflect.Descriptor instead.
func (*RT0005M37_YesNoExplain) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RT0005M37_YesNoExplain) GetResponse() RT0005M37_YesNoExplain_Response {
	if x != nil {
		return x.Response
	}
	return RT0005M37_YesNoExplain_RESPONSE_UNSPECIFIED
}

func (x *RT0005M37_YesNoExplain) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Response where a YES requires further information
type RT0005M37_YesExplainNo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT0005M37_YesExplainNo_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT0005M37_YesExplainNo_Response" json:"response,omitempty"`
	// Explanation if the answer is `YES`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT0005M37_YesExplainNo) Reset() {
	*x = RT0005M37_YesExplainNo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_YesExplainNo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_YesExplainNo) ProtoMessage() {}

func (x *RT0005M37_YesExplainNo) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_YesExplainNo.ProtoReflect.Descriptor instead.
func (*RT0005M37_YesExplainNo) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RT0005M37_YesExplainNo) GetResponse() RT0005M37_YesExplainNo_Response {
	if x != nil {
		return x.Response
	}
	return RT0005M37_YesExplainNo_RESPONSE_UNSPECIFIED
}

func (x *RT0005M37_YesExplainNo) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Response where further information is required regardless of whether a Yes or No is provided
type RT0005M37_YesNoAndExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yes / No response.
	Response RT0005M37_YesNoAndExplain_Response `protobuf:"varint,1,opt,name=response,proto3,enum=standards.open.v1.RT0005M37_YesNoAndExplain_Response" json:"response,omitempty"`
	// Provide further information for the response
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *RT0005M37_YesNoAndExplain) Reset() {
	*x = RT0005M37_YesNoAndExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_YesNoAndExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_YesNoAndExplain) ProtoMessage() {}

func (x *RT0005M37_YesNoAndExplain) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_YesNoAndExplain.ProtoReflect.Descriptor instead.
func (*RT0005M37_YesNoAndExplain) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RT0005M37_YesNoAndExplain) GetResponse() RT0005M37_YesNoAndExplain_Response {
	if x != nil {
		return x.Response
	}
	return RT0005M37_YesNoAndExplain_RESPONSE_UNSPECIFIED
}

func (x *RT0005M37_YesNoAndExplain) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Definition of Entity and Ownership section
type RT0005M37_EntityAndOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q1.1. The full legal name of the entity
	LegalName string `protobuf:"bytes,1,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// Q1.2 List all foreign branches covered by this questionnaire.
	CoveredBranches []*RT0005M37_EntityAndOwnership_Branch `protobuf:"bytes,2,rep,name=covered_branches,json=coveredBranches,proto3" json:"covered_branches,omitempty"`
	// Q1.3 The full legal (registered) address of the entity
	LegalAddress string `protobuf:"bytes,3,opt,name=legal_address,json=legalAddress,proto3" json:"legal_address,omitempty"`
	// Q1.4 The full primary business address of the entity
	BusinessAddress string `protobuf:"bytes,4,opt,name=business_address,json=businessAddress,proto3" json:"business_address,omitempty"`
	// Q1.5 The date in which the entity was incorporated
	DateOfIncorporation *date.Date `protobuf:"bytes,5,opt,name=date_of_incorporation,json=dateOfIncorporation,proto3" json:"date_of_incorporation,omitempty"`
	// Q1.6 Select the ownership type
	OwnershipType RT0005M37_EntityAndOwnership_OwnershipType `protobuf:"varint,6,opt,name=ownership_type,json=ownershipType,proto3,enum=standards.open.v1.RT0005M37_EntityAndOwnership_OwnershipType" json:"ownership_type,omitempty"`
	// Q1.6aa If publicly traded, provide the primary security identifier the traded instrument
	SecurityIdentifier *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier `protobuf:"bytes,7,opt,name=security_identifier,json=securityIdentifier,proto3" json:"security_identifier,omitempty"`
	// Q1.6d1 If privately owned, provide details of shareholders with a holding of 10%
	// or more up the ownership chain
	SignificantShareholders []*RT0005M37_EntityAndOwnership_SignificantShareholder `protobuf:"bytes,8,rep,name=significant_shareholders,json=significantShareholders,proto3" json:"significant_shareholders,omitempty"`
	// If privately owned, has a beneficial ownership structure chart been attached?
	StructureChart *RT0005M37_YesNoExplain `protobuf:"bytes,9,opt,name=structure_chart,json=structureChart,proto3" json:"structure_chart,omitempty"`
	// Provide the % of the entity's total shares composed of bearer shares (for example 10% enter as 0.1)
	PercentBearerShares float32 `protobuf:"fixed32,10,opt,name=percent_bearer_shares,json=percentBearerShares,proto3" json:"percent_bearer_shares,omitempty"`
	// Q1.8 Does the entity operate any of its branches, operate under an Offshore Banking License (OBL)?
	AnyBranchesUnderOffshoreBankingLicense bool `protobuf:"varint,11,opt,name=any_branches_under_offshore_banking_license,json=anyBranchesUnderOffshoreBankingLicense,proto3" json:"any_branches_under_offshore_banking_license,omitempty"`
	// Q1.8a, List any branches operate under offshore banking license (if TRUE to Q1.8)
	BranchesUnderOffshoreBankingLicense []*RT0005M37_EntityAndOwnership_Branch `protobuf:"bytes,12,rep,name=branches_under_offshore_banking_license,json=branchesUnderOffshoreBankingLicense,proto3" json:"branches_under_offshore_banking_license,omitempty"`
	// Q1.9 Provide the name of the primary financial regulator / supervisory authority
	FinancialRegulatorOrSupervisoryAuthority string `protobuf:"bytes,13,opt,name=financial_regulator_or_supervisory_authority,json=financialRegulatorOrSupervisoryAuthority,proto3" json:"financial_regulator_or_supervisory_authority,omitempty"`
	// Q1.10 The LEI identifier of the company (if available)
	LEI string `protobuf:"bytes,14,opt,name=LEI,proto3" json:"LEI,omitempty"`
	// Q1.11 Provide the full legal name of the ultimate parent (if different from the entity completing the DDQ)
	UltimateParentLegalName string `protobuf:"bytes,15,opt,name=ultimate_parent_legal_name,json=ultimateParentLegalName,proto3" json:"ultimate_parent_legal_name,omitempty"`
	// Q1.12 Jurisdiction of licensing authority and regulator of ultimate parent (ISO three country code)
	JurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent string `protobuf:"bytes,16,opt,name=jurisdiction_of_licensing_authority_and_regulator_of_ultimate_parent,json=jurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent,proto3" json:"jurisdiction_of_licensing_authority_and_regulator_of_ultimate_parent,omitempty"`
	// Q13a. Mark true if an applicable business area - Retail banking.
	RetailBanking bool `protobuf:"varint,17,opt,name=retail_banking,json=retailBanking,proto3" json:"retail_banking,omitempty"`
	// Q13b. Mark true if an applicable business area - Private Banking / Wealth Management.
	PrivateBankingWealthManagement bool `protobuf:"varint,18,opt,name=private_banking_wealth_management,json=privateBankingWealthManagement,proto3" json:"private_banking_wealth_management,omitempty"`
	// Q13c. Mark true if an applicable business area - Commercial Banking.
	CommercialBanking bool `protobuf:"varint,19,opt,name=commercial_banking,json=commercialBanking,proto3" json:"commercial_banking,omitempty"`
	// Q13d. Mark true if an applicable business area - Transactional Banking.
	TransactionalBanking bool `protobuf:"varint,20,opt,name=transactional_banking,json=transactionalBanking,proto3" json:"transactional_banking,omitempty"`
	// Q13e. Mark true if an applicable business area - Investment Banking.
	InvestmentBanking bool `protobuf:"varint,21,opt,name=investment_banking,json=investmentBanking,proto3" json:"investment_banking,omitempty"`
	// Q13f. Mark true if an applicable business area - Financial Markets Trading.
	FinancialMarketsTrading bool `protobuf:"varint,22,opt,name=financial_markets_trading,json=financialMarketsTrading,proto3" json:"financial_markets_trading,omitempty"`
	// Q13g. Mark true if an applicable business area - Securities Services / Custody.
	SecuritiesServicesOrCustody bool `protobuf:"varint,23,opt,name=securities_services_or_custody,json=securitiesServicesOrCustody,proto3" json:"securities_services_or_custody,omitempty"`
	// Q13h. Mark true if an applicable business area - Broker / Dealer.
	BrokerDealer bool `protobuf:"varint,24,opt,name=broker_dealer,json=brokerDealer,proto3" json:"broker_dealer,omitempty"`
	// Q13i. Mark true if an applicable business area - Multilateral Development Bank.
	MultilateralDevelopmentBank bool `protobuf:"varint,25,opt,name=multilateral_development_bank,json=multilateralDevelopmentBank,proto3" json:"multilateral_development_bank,omitempty"`
	// Q13j. Mark true if an applicable business area - Other.
	OtherBusinessArea string `protobuf:"bytes,26,opt,name=other_business_area,json=otherBusinessArea,proto3" json:"other_business_area,omitempty"`
	// Q14. Does the Entity have a significant (10% or more) portfolio of non-resident customers or does it
	// derive more than 10% of its revenue from non-resident customers? (Non-resident means customers primarily
	//  resident in a different jurisdiction to the location where bank service are provided.)
	SignificantNonResidentCustomers bool `protobuf:"varint,27,opt,name=significant_non_resident_customers,json=significantNonResidentCustomers,proto3" json:"significant_non_resident_customers,omitempty"`
	// If TRUE to Q14a, list the three letter ISO codes of the top five countries where
	// non-resident customers are located
	TopFiveCountries []string `protobuf:"bytes,28,rep,name=top_five_countries,json=topFiveCountries,proto3" json:"top_five_countries,omitempty"`
	// Q15. To the closest value, provide Q15a the number of employees
	NumberOfEmployees int64 `protobuf:"varint,29,opt,name=number_of_employees,json=numberOfEmployees,proto3" json:"number_of_employees,omitempty"`
	// Q15. To the closest value, provide Q15b total assets
	TotalAssets *money.Money `protobuf:"bytes,30,opt,name=total_assets,json=totalAssets,proto3" json:"total_assets,omitempty"`
	// Q16. Confirm that all responses provided in this section are representative of all the LE's branches.
	// If NO, explain by clarifying which questions the differences relate to and the branches that his applies to.
	RepresentativeOfBranches *RT0005M37_YesNoExplain `protobuf:"bytes,31,opt,name=representative_of_branches,json=representativeOfBranches,proto3" json:"representative_of_branches,omitempty"`
	// Q16b. If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,32,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership) Reset() {
	*x = RT0005M37_EntityAndOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RT0005M37_EntityAndOwnership) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetCoveredBranches() []*RT0005M37_EntityAndOwnership_Branch {
	if x != nil {
		return x.CoveredBranches
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetLegalAddress() string {
	if x != nil {
		return x.LegalAddress
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetBusinessAddress() string {
	if x != nil {
		return x.BusinessAddress
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetDateOfIncorporation() *date.Date {
	if x != nil {
		return x.DateOfIncorporation
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetOwnershipType() RT0005M37_EntityAndOwnership_OwnershipType {
	if x != nil {
		return x.OwnershipType
	}
	return RT0005M37_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED
}

func (x *RT0005M37_EntityAndOwnership) GetSecurityIdentifier() *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier {
	if x != nil {
		return x.SecurityIdentifier
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetSignificantShareholders() []*RT0005M37_EntityAndOwnership_SignificantShareholder {
	if x != nil {
		return x.SignificantShareholders
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetStructureChart() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.StructureChart
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetPercentBearerShares() float32 {
	if x != nil {
		return x.PercentBearerShares
	}
	return 0
}

func (x *RT0005M37_EntityAndOwnership) GetAnyBranchesUnderOffshoreBankingLicense() bool {
	if x != nil {
		return x.AnyBranchesUnderOffshoreBankingLicense
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetBranchesUnderOffshoreBankingLicense() []*RT0005M37_EntityAndOwnership_Branch {
	if x != nil {
		return x.BranchesUnderOffshoreBankingLicense
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetFinancialRegulatorOrSupervisoryAuthority() string {
	if x != nil {
		return x.FinancialRegulatorOrSupervisoryAuthority
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetLEI() string {
	if x != nil {
		return x.LEI
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetUltimateParentLegalName() string {
	if x != nil {
		return x.UltimateParentLegalName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetJurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent() string {
	if x != nil {
		return x.JurisdictionOfLicensingAuthorityAndRegulatorOfUltimateParent
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetRetailBanking() bool {
	if x != nil {
		return x.RetailBanking
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetPrivateBankingWealthManagement() bool {
	if x != nil {
		return x.PrivateBankingWealthManagement
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetCommercialBanking() bool {
	if x != nil {
		return x.CommercialBanking
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetTransactionalBanking() bool {
	if x != nil {
		return x.TransactionalBanking
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetInvestmentBanking() bool {
	if x != nil {
		return x.InvestmentBanking
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetFinancialMarketsTrading() bool {
	if x != nil {
		return x.FinancialMarketsTrading
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetSecuritiesServicesOrCustody() bool {
	if x != nil {
		return x.SecuritiesServicesOrCustody
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetBrokerDealer() bool {
	if x != nil {
		return x.BrokerDealer
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetMultilateralDevelopmentBank() bool {
	if x != nil {
		return x.MultilateralDevelopmentBank
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetOtherBusinessArea() string {
	if x != nil {
		return x.OtherBusinessArea
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership) GetSignificantNonResidentCustomers() bool {
	if x != nil {
		return x.SignificantNonResidentCustomers
	}
	return false
}

func (x *RT0005M37_EntityAndOwnership) GetTopFiveCountries() []string {
	if x != nil {
		return x.TopFiveCountries
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetNumberOfEmployees() int64 {
	if x != nil {
		return x.NumberOfEmployees
	}
	return 0
}

func (x *RT0005M37_EntityAndOwnership) GetTotalAssets() *money.Money {
	if x != nil {
		return x.TotalAssets
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetRepresentativeOfBranches() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RepresentativeOfBranches
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Definition of Products & Services section
type RT0005M37_ProductsAndServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Q17a. Does the entity offer Correspondent banking.
	OffersCorrespondentBanking bool `protobuf:"varint,1,opt,name=offers_correspondent_banking,json=offersCorrespondentBanking,proto3" json:"offers_correspondent_banking,omitempty"`
	// Q17a2 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity offer Correspondent
	// Banking services to domestic banks?
	OffersCorrespondentBankingToDomesticBanks *RT0005M37_YesNoAndExplain `protobuf:"bytes,2,opt,name=offers_correspondent_banking_to_domestic_banks,json=offersCorrespondentBankingToDomesticBanks,proto3" json:"offers_correspondent_banking_to_domestic_banks,omitempty"`
	// Q17a3 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity allow domestic bank clients to
	// provide downstream relationships? If Yes, describe.
	OffersCorrespondentBankingAndAllowsDomesticClientsToProvideDownstreamRelationships *RT0005M37_YesNoAndExplain `protobuf:"bytes,3,opt,name=offers_correspondent_banking_and_allows_domestic_clients_to_provide_downstream_relationships,json=offersCorrespondentBankingAndAllowsDomesticClientsToProvideDownstreamRelationships,proto3" json:"offers_correspondent_banking_and_allows_domestic_clients_to_provide_downstream_relationships,omitempty"`
	// Q17a4 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity have processes and procedures
	// in place to identify downstream relationships with domestic banks?
	OffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyDownstreamRelationshipsWithDomesticBanks *RT0005M37_YesNoAndExplain `protobuf:"bytes,4,opt,name=offers_correspondent_banking_and_has_procedures_in_place_to_identify_downstream_relationships_with_domestic_banks,json=offersCorrespondentBankingAndHasProceduresInPlaceToIdentifyDownstreamRelationshipsWithDomesticBanks,proto3" json:"offers_correspondent_banking_and_has_procedures_in_place_to_identify_downstream_relationships_with_domestic_banks,omitempty"`
	// Q17a5 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity offer Correspondent
	// Banking services to foreign banks?
	OffersCorrespondentBankingToForeignBanks *RT0005M37_YesNoAndExplain `protobuf:"bytes,5,opt,name=offers_correspondent_banking_to_foreign_banks,json=offersCorrespondentBankingToForeignBanks,proto3" json:"offers_correspondent_banking_to_foreign_banks,omitempty"`
	// Q17a6 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity allow foreign bank clients to
	// provide downstream relationships? If Yes, describe.
	OffersCorrespondentBankingAndAllowsForeignClientsToProvideDownstreamRelationships *RT0005M37_YesNoAndExplain `protobuf:"bytes,6,opt,name=offers_correspondent_banking_and_allows_foreign_clients_to_provide_downstream_relationships,json=offersCorrespondentBankingAndAllowsForeignClientsToProvideDownstreamRelationships,proto3" json:"offers_correspondent_banking_and_allows_foreign_clients_to_provide_downstream_relationships,omitempty"`
	// Q17a7 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity have processes and procedures
	// in place to identify downstream relationships with foreign banks?
	OffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyForeignRelationshipsWithDomesticBanks *RT0005M37_YesNoAndExplain `protobuf:"bytes,7,opt,name=offers_correspondent_banking_and_has_procedures_in_place_to_identify_foreign_relationships_with_domestic_banks,json=offersCorrespondentBankingAndHasProceduresInPlaceToIdentifyForeignRelationshipsWithDomesticBanks,proto3" json:"offers_correspondent_banking_and_has_procedures_in_place_to_identify_foreign_relationships_with_domestic_banks,omitempty"`
	// Q17a8 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity offer correspondent banking
	//services to regulated MSBs/MVTS?
	OffersCorrespondentBankingToRegulatedMsbsAndMvts *RT0005M37_YesNoAndExplain `protobuf:"bytes,8,opt,name=offers_correspondent_banking_to_regulated_msbs_and_mvts,json=offersCorrespondentBankingToRegulatedMsbsAndMvts,proto3" json:"offers_correspondent_banking_to_regulated_msbs_and_mvts,omitempty"`
	// Q17a8 If TRUE to Q17a. Does the entity offer Correspondent banking, does the Entity offer correspondent banking
	//services to regulated MSBs/MVTS?
	OffersCorrespondentBankingAndHasProcessesToIdentifyDownstreamRelationshipsWithMsbAndMvts *RT0005M37_YesNoAndExplain `protobuf:"bytes,9,opt,name=offers_correspondent_banking_and_has_processes_to_identify_downstream_relationships_with_msb_and_mvts,json=offersCorrespondentBankingAndHasProcessesToIdentifyDownstreamRelationshipsWithMsbAndMvts,proto3" json:"offers_correspondent_banking_and_has_processes_to_identify_downstream_relationships_with_msb_and_mvts,omitempty"`
	// Q17b. Does the entity offer Private Banking?
	OffersPrivateBanking bool `protobuf:"varint,10,opt,name=offers_private_banking,json=offersPrivateBanking,proto3" json:"offers_private_banking,omitempty"`
	// Q17c. Does the entity offer Trade Finance?
	OffersTradeFinance bool `protobuf:"varint,11,opt,name=offers_trade_finance,json=offersTradeFinance,proto3" json:"offers_trade_finance,omitempty"`
	// Q17d. Does the entity offer Payable Through Accounts?
	OffersPayableThroughAccounts bool `protobuf:"varint,12,opt,name=offers_payable_through_accounts,json=offersPayableThroughAccounts,proto3" json:"offers_payable_through_accounts,omitempty"`
	// Q17e. Does the entity offer Stored Value Instruments?
	OffersStoredValueInstruments bool `protobuf:"varint,13,opt,name=offers_stored_value_instruments,json=offersStoredValueInstruments,proto3" json:"offers_stored_value_instruments,omitempty"`
	// Q17f. Does the entity offer Cross Border Bulk Cash Delivery?
	OffersCrossBorderBulkCashDelivery bool `protobuf:"varint,14,opt,name=offers_cross_border_bulk_cash_delivery,json=offersCrossBorderBulkCashDelivery,proto3" json:"offers_cross_border_bulk_cash_delivery,omitempty"`
	// Q17g. Does the entity offer Domestic Bulk Cash Delivery?
	OffersDomesticBulkCashDelivery bool `protobuf:"varint,15,opt,name=offers_domestic_bulk_cash_delivery,json=offersDomesticBulkCashDelivery,proto3" json:"offers_domestic_bulk_cash_delivery,omitempty"`
	// Q17h. Does the entity offer International Cash Letter?
	OffersInternationalCashLetter bool `protobuf:"varint,16,opt,name=offers_international_cash_letter,json=offersInternationalCashLetter,proto3" json:"offers_international_cash_letter,omitempty"`
	// Q17i. Does the entity offer Remote Deposit Capture?
	OffersRemoteDepositCapture bool `protobuf:"varint,17,opt,name=offers_remote_deposit_capture,json=offersRemoteDepositCapture,proto3" json:"offers_remote_deposit_capture,omitempty"`
	// Q17j. Does the entity offer Virtual / Digital Currencies?
	OffersVirtualDigitalCurrencies bool `protobuf:"varint,18,opt,name=offers_virtual_digital_currencies,json=offersVirtualDigitalCurrencies,proto3" json:"offers_virtual_digital_currencies,omitempty"`
	// Q17k. Does the entity offer Low Price Securities?
	OffersLowPriceSecurities bool `protobuf:"varint,19,opt,name=offers_low_price_securities,json=offersLowPriceSecurities,proto3" json:"offers_low_price_securities,omitempty"`
	// Q17l. Does the entity offer Hold Mail?
	OffersHoldMail bool `protobuf:"varint,20,opt,name=offers_hold_mail,json=offersHoldMail,proto3" json:"offers_hold_mail,omitempty"`
	// Q17m. Does the entity offer Cross Border Remittances?
	OffersCrossBorderRemittances bool `protobuf:"varint,21,opt,name=offers_cross_border_remittances,json=offersCrossBorderRemittances,proto3" json:"offers_cross_border_remittances,omitempty"`
	// Q17n. Does the entity offer Services to walk-in customers (non-account holders)?
	OffersServiceToWalkinCustomers bool `protobuf:"varint,22,opt,name=offers_service_to_walkin_customers,json=offersServiceToWalkinCustomers,proto3" json:"offers_service_to_walkin_customers,omitempty"`
	// Q17o. Does the entity offer Sponsoring Private ATMs?
	OffersSponsoringPrivateAtms bool `protobuf:"varint,23,opt,name=offers_sponsoring_private_atms,json=offersSponsoringPrivateAtms,proto3" json:"offers_sponsoring_private_atms,omitempty"`
	// Q17p. Does the entity offer Other high risk products and services identified by the Entity?
	OffersSponsoringOtherHighRiskProductsAndServices bool `protobuf:"varint,24,opt,name=offers_sponsoring_other_high_risk_products_and_services,json=offersSponsoringOtherHighRiskProductsAndServices,proto3" json:"offers_sponsoring_other_high_risk_products_and_services,omitempty"`
	// Q18. Confirm that all responses provided in the above Section PRODUCTS & SERVICES are representative of all the LE's branches
	// If NO, explain by clarifying which questions the differences relate to and the branches that his applies to.
	RepresentativeOfBranches *RT0005M37_YesNoExplain `protobuf:"bytes,25,opt,name=representative_of_branches,json=representativeOfBranches,proto3" json:"representative_of_branches,omitempty"`
	// Q18b. If appropriate, provide any further information / context to the answers in this section.
	FurtherInformation string `protobuf:"bytes,32,opt,name=further_information,json=furtherInformation,proto3" json:"further_information,omitempty"`
}

func (x *RT0005M37_ProductsAndServices) Reset() {
	*x = RT0005M37_ProductsAndServices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_ProductsAndServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_ProductsAndServices) ProtoMessage() {}

func (x *RT0005M37_ProductsAndServices) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_ProductsAndServices.ProtoReflect.Descriptor instead.
func (*RT0005M37_ProductsAndServices) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBanking() bool {
	if x != nil {
		return x.OffersCorrespondentBanking
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingToDomesticBanks() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingToDomesticBanks
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndAllowsDomesticClientsToProvideDownstreamRelationships() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndAllowsDomesticClientsToProvideDownstreamRelationships
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyDownstreamRelationshipsWithDomesticBanks() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyDownstreamRelationshipsWithDomesticBanks
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingToForeignBanks() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingToForeignBanks
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndAllowsForeignClientsToProvideDownstreamRelationships() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndAllowsForeignClientsToProvideDownstreamRelationships
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyForeignRelationshipsWithDomesticBanks() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndHasProceduresInPlaceToIdentifyForeignRelationshipsWithDomesticBanks
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingToRegulatedMsbsAndMvts() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingToRegulatedMsbsAndMvts
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersCorrespondentBankingAndHasProcessesToIdentifyDownstreamRelationshipsWithMsbAndMvts() *RT0005M37_YesNoAndExplain {
	if x != nil {
		return x.OffersCorrespondentBankingAndHasProcessesToIdentifyDownstreamRelationshipsWithMsbAndMvts
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetOffersPrivateBanking() bool {
	if x != nil {
		return x.OffersPrivateBanking
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersTradeFinance() bool {
	if x != nil {
		return x.OffersTradeFinance
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersPayableThroughAccounts() bool {
	if x != nil {
		return x.OffersPayableThroughAccounts
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersStoredValueInstruments() bool {
	if x != nil {
		return x.OffersStoredValueInstruments
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersCrossBorderBulkCashDelivery() bool {
	if x != nil {
		return x.OffersCrossBorderBulkCashDelivery
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersDomesticBulkCashDelivery() bool {
	if x != nil {
		return x.OffersDomesticBulkCashDelivery
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersInternationalCashLetter() bool {
	if x != nil {
		return x.OffersInternationalCashLetter
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersRemoteDepositCapture() bool {
	if x != nil {
		return x.OffersRemoteDepositCapture
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersVirtualDigitalCurrencies() bool {
	if x != nil {
		return x.OffersVirtualDigitalCurrencies
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersLowPriceSecurities() bool {
	if x != nil {
		return x.OffersLowPriceSecurities
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersHoldMail() bool {
	if x != nil {
		return x.OffersHoldMail
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersCrossBorderRemittances() bool {
	if x != nil {
		return x.OffersCrossBorderRemittances
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersServiceToWalkinCustomers() bool {
	if x != nil {
		return x.OffersServiceToWalkinCustomers
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersSponsoringPrivateAtms() bool {
	if x != nil {
		return x.OffersSponsoringPrivateAtms
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetOffersSponsoringOtherHighRiskProductsAndServices() bool {
	if x != nil {
		return x.OffersSponsoringOtherHighRiskProductsAndServices
	}
	return false
}

func (x *RT0005M37_ProductsAndServices) GetRepresentativeOfBranches() *RT0005M37_YesNoExplain {
	if x != nil {
		return x.RepresentativeOfBranches
	}
	return nil
}

func (x *RT0005M37_ProductsAndServices) GetFurtherInformation() string {
	if x != nil {
		return x.FurtherInformation
	}
	return ""
}

// Information about a foreign branch
type RT0005M37_EntityAndOwnership_Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the branch
	BranchName string `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	// The country in which the branch is located (the three letter ISO code)
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_Branch) Reset() {
	*x = RT0005M37_EntityAndOwnership_Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_Branch) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_Branch) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_Branch.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_Branch) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *RT0005M37_EntityAndOwnership_Branch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_Branch) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Information to be provided if publicly traded
type RT0005M37_EntityAndOwnership_TradedSecurityIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Codification chosen to identify the financial instrument
	FinancialIdentifier RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier `protobuf:"varint,4,opt,name=financial_identifier,json=financialIdentifier,proto3,enum=standards.open.v1.RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier" json:"financial_identifier,omitempty"`
	// Identifier of the affected instrument
	Instrument string `protobuf:"bytes,5,opt,name=instrument,proto3" json:"instrument,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) Reset() {
	*x = RT0005M37_EntityAndOwnership_TradedSecurityIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_TradedSecurityIdentifier.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) GetFinancialIdentifier() RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier {
	if x != nil {
		return x.FinancialIdentifier
	}
	return RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_IDENTIFIER_UNSPECIFIED
}

func (x *RT0005M37_EntityAndOwnership_TradedSecurityIdentifier) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

// The definition of a beneficial owner resource
type RT0005M37_EntityAndOwnership_SignificantShareholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the client
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The type of beneficial owner
	BeneficialOwnerType RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType `protobuf:"varint,2,opt,name=beneficial_owner_type,json=beneficialOwnerType,proto3,enum=standards.open.v1.RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType" json:"beneficial_owner_type,omitempty"`
	// The ultimate effective interest in the legal entity on a look through basis
	BeneficialOwnership float64 `protobuf:"fixed64,3,opt,name=beneficial_ownership,json=beneficialOwnership,proto3" json:"beneficial_ownership,omitempty"`
	// Complete if the beneficial person is a natural person
	NaturalPersonOwnershipDetails *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson `protobuf:"bytes,4,opt,name=natural_person_ownership_details,json=naturalPersonOwnershipDetails,proto3" json:"natural_person_ownership_details,omitempty"`
	// Complete if the `SignificantShareholder` is a legal entity
	LegalEntityOwnershipDetails *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity `protobuf:"bytes,5,opt,name=legal_entity_ownership_details,json=legalEntityOwnershipDetails,proto3" json:"legal_entity_ownership_details,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) Reset() {
	*x = RT0005M37_EntityAndOwnership_SignificantShareholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_SignificantShareholder) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_SignificantShareholder.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_SignificantShareholder) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetBeneficialOwnerType() RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType {
	if x != nil {
		return x.BeneficialOwnerType
	}
	return RT0005M37_EntityAndOwnership_SignificantShareholder_TYPE_UNSPECIFIED
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetBeneficialOwnership() float64 {
	if x != nil {
		return x.BeneficialOwnership
	}
	return 0
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetNaturalPersonOwnershipDetails() *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson {
	if x != nil {
		return x.NaturalPersonOwnershipDetails
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder) GetLegalEntityOwnershipDetails() *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity {
	if x != nil {
		return x.LegalEntityOwnershipDetails
	}
	return nil
}

// Information relating to a natural person
type RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first name
	GivenName string `protobuf:"bytes,1,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// The last name
	FamilyName string `protobuf:"bytes,2,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// The phone number including country code
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The email address of the manager
	EmailAddress string `protobuf:"bytes,4,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// The three letter ISO code of the country of residence
	CountryOfResidence string `protobuf:"bytes,5,opt,name=country_of_residence,json=countryOfResidence,proto3" json:"country_of_residence,omitempty"`
	// Place of address
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) Reset() {
	*x = RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetCountryOfResidence() string {
	if x != nil {
		return x.CountryOfResidence
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Information relating to a legal beneficial owner
type RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the company
	LegalName string `protobuf:"bytes,1,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// The registered office of the company
	RegisteredOffice string `protobuf:"bytes,2,opt,name=registered_office,json=registeredOffice,proto3" json:"registered_office,omitempty"`
	// The LEI identifier of the company (if available)
	LEI string `protobuf:"bytes,3,opt,name=LEI,proto3" json:"LEI,omitempty"`
	// The directors or managers of the legal entity
	DirectorsOrManagers []*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson `protobuf:"bytes,4,rep,name=directors_or_managers,json=directorsOrManagers,proto3" json:"directors_or_managers,omitempty"`
	// The own
	OwnershipType RT0005M37_EntityAndOwnership_OwnershipType `protobuf:"varint,6,opt,name=ownership_type,json=ownershipType,proto3,enum=standards.open.v1.RT0005M37_EntityAndOwnership_OwnershipType" json:"ownership_type,omitempty"`
	// If PRIVATE, then the shareholders owning more than 10% or more of the entity
	Shareholders []*RT0005M37_EntityAndOwnership_SignificantShareholder `protobuf:"bytes,7,rep,name=shareholders,proto3" json:"shareholders,omitempty"`
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) Reset() {
	*x = RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RT0005M37_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) ProtoMessage() {}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) ProtoReflect() protoreflect.Message {
	mi := &file_RT0005M37_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity.ProtoReflect.Descriptor instead.
func (*RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) Descriptor() ([]byte, []int) {
	return file_RT0005M37_proto_rawDescGZIP(), []int{0, 3, 2, 1}
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetRegisteredOffice() string {
	if x != nil {
		return x.RegisteredOffice
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetLEI() string {
	if x != nil {
		return x.LEI
	}
	return ""
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetDirectorsOrManagers() []*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson {
	if x != nil {
		return x.DirectorsOrManagers
	}
	return nil
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetOwnershipType() RT0005M37_EntityAndOwnership_OwnershipType {
	if x != nil {
		return x.OwnershipType
	}
	return RT0005M37_EntityAndOwnership_OWNERSHIP_TYPE_UNSPECIFIED
}

func (x *RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity) GetShareholders() []*RT0005M37_EntityAndOwnership_SignificantShareholder {
	if x != nil {
		return x.Shareholders
	}
	return nil
}

var File_RT0005M37_proto protoreflect.FileDescriptor

var file_RT0005M37_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x3d, 0x0a, 0x09, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x61, 0x0a,
	0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x12, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x1a, 0xb7, 0x01, 0x0a, 0x0c, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x1a, 0xb7, 0x01, 0x0a, 0x0c, 0x59,
	0x65, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x12, 0x4e, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x4f, 0x10, 0x02, 0x1a, 0xbd, 0x01, 0x0a, 0x0f, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e,
	0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e,
	0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x4f, 0x10, 0x02, 0x1a, 0xfe, 0x1f, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d,
	0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a,
	0x15, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x13, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x13, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37,
	0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x12, 0x5b, 0x0a, 0x2b, 0x61, 0x6e, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x61, 0x6e, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x8c,
	0x01, 0x0a, 0x27, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x23, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x2c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x28, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x4c, 0x45, 0x49, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x45, 0x49, 0x12,
	0x3b, 0x0a, 0x1a, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a,
	0x44, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x3c, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x66, 0x55, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x49, 0x0a, 0x21, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x0a, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x41, 0x72, 0x65, 0x61, 0x12, 0x4b, 0x0a, 0x22, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e,
	0x74, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x6f, 0x70, 0x46, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x1a, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x18, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xaa, 0x02, 0x0a, 0x18,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x47, 0x49, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x1a, 0xbd, 0x0a, 0x0a, 0x16, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x9d, 0x01, 0x0a, 0x20, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35,
	0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x1d, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x1e, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33,
	0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x1a, 0xe3, 0x01, 0x0a, 0x0d, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xc8, 0x03, 0x0a, 0x0b, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x45, 0x49, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x13,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x02, 0x22, 0x6b, 0x0a, 0x0d, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x1a, 0xb5, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x1c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x8f, 0x01, 0x0a, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x6e,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x29, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x42, 0x61, 0x6e, 0x6b,
	0x73, 0x12, 0xe6, 0x01, 0x0a, 0x5c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30,
	0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x52, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x44, 0x6f, 0x6d, 0x65, 0x73,
	0x74, 0x69, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x8c, 0x02, 0x0a, 0x71, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30,
	0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x41, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x65,
	0x73, 0x74, 0x69, 0x63, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x2d, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x28, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0xe4, 0x01, 0x0a, 0x5b, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x51, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x86, 0x02, 0x0a, 0x6e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41, 0x6e, 0x64,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x60, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x65,
	0x73, 0x74, 0x69, 0x63, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x37, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x62, 0x73, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x6d, 0x76, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41,
	0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x30, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x73, 0x62, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x76, 0x74, 0x73, 0x12, 0xf5, 0x01, 0x0a, 0x65,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x73, 0x62, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x6d, 0x76, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x54, 0x30, 0x30, 0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x41,
	0x6e, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x58, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x44, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x73, 0x62, 0x41, 0x6e, 0x64, 0x4d,
	0x76, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x50, 0x61, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x26, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x61, 0x73, 0x68, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x22,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x61, 0x73, 0x68,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x20, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x1d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x48, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x22, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x6d, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x53, 0x70, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x74, 0x6d, 0x73,
	0x12, 0x71, 0x0a, 0x37, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x30, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x30, 0x30,
	0x30, 0x35, 0x4d, 0x33, 0x37, 0x2e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x18, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4f, 0x66, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x32, 0x5a,
	0x30, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RT0005M37_proto_rawDescOnce sync.Once
	file_RT0005M37_proto_rawDescData = file_RT0005M37_proto_rawDesc
)

func file_RT0005M37_proto_rawDescGZIP() []byte {
	file_RT0005M37_proto_rawDescOnce.Do(func() {
		file_RT0005M37_proto_rawDescData = protoimpl.X.CompressGZIP(file_RT0005M37_proto_rawDescData)
	})
	return file_RT0005M37_proto_rawDescData
}

var file_RT0005M37_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_RT0005M37_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_RT0005M37_proto_goTypes = []interface{}{
	(RT0005M37_YesNoExplain_Response)(0),                                                     // 0: standards.open.v1.RT0005M37.YesNoExplain.Response
	(RT0005M37_YesExplainNo_Response)(0),                                                     // 1: standards.open.v1.RT0005M37.YesExplainNo.Response
	(RT0005M37_YesNoAndExplain_Response)(0),                                                  // 2: standards.open.v1.RT0005M37.YesNoAndExplain.Response
	(RT0005M37_EntityAndOwnership_OwnershipType)(0),                                          // 3: standards.open.v1.RT0005M37.EntityAndOwnership.OwnershipType
	(RT0005M37_EntityAndOwnership_TradedSecurityIdentifier_FinancialInstrumentIdentifier)(0), // 4: standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier.FinancialInstrumentIdentifier
	(RT0005M37_EntityAndOwnership_SignificantShareholder_BeneficialOwnerType)(0),             // 5: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.BeneficialOwnerType
	(*RT0005M37)(nil),                                                         // 6: standards.open.v1.RT0005M37
	(*RT0005M37_YesNoExplain)(nil),                                            // 7: standards.open.v1.RT0005M37.YesNoExplain
	(*RT0005M37_YesExplainNo)(nil),                                            // 8: standards.open.v1.RT0005M37.YesExplainNo
	(*RT0005M37_YesNoAndExplain)(nil),                                         // 9: standards.open.v1.RT0005M37.YesNoAndExplain
	(*RT0005M37_EntityAndOwnership)(nil),                                      // 10: standards.open.v1.RT0005M37.EntityAndOwnership
	(*RT0005M37_ProductsAndServices)(nil),                                     // 11: standards.open.v1.RT0005M37.ProductsAndServices
	(*RT0005M37_EntityAndOwnership_Branch)(nil),                               // 12: standards.open.v1.RT0005M37.EntityAndOwnership.Branch
	(*RT0005M37_EntityAndOwnership_TradedSecurityIdentifier)(nil),             // 13: standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier
	(*RT0005M37_EntityAndOwnership_SignificantShareholder)(nil),               // 14: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder
	(*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson)(nil), // 15: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.NaturalPerson
	(*RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity)(nil),   // 16: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.LegalEntity
	(*date.Date)(nil),                                                         // 17: google.type.Date
	(*money.Money)(nil),                                                       // 18: google.type.Money
}
var file_RT0005M37_proto_depIdxs = []int32{
	10, // 0: standards.open.v1.RT0005M37.entity_and_ownership:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership
	0,  // 1: standards.open.v1.RT0005M37.YesNoExplain.response:type_name -> standards.open.v1.RT0005M37.YesNoExplain.Response
	1,  // 2: standards.open.v1.RT0005M37.YesExplainNo.response:type_name -> standards.open.v1.RT0005M37.YesExplainNo.Response
	2,  // 3: standards.open.v1.RT0005M37.YesNoAndExplain.response:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain.Response
	12, // 4: standards.open.v1.RT0005M37.EntityAndOwnership.covered_branches:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.Branch
	17, // 5: standards.open.v1.RT0005M37.EntityAndOwnership.date_of_incorporation:type_name -> google.type.Date
	3,  // 6: standards.open.v1.RT0005M37.EntityAndOwnership.ownership_type:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.OwnershipType
	13, // 7: standards.open.v1.RT0005M37.EntityAndOwnership.security_identifier:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier
	14, // 8: standards.open.v1.RT0005M37.EntityAndOwnership.significant_shareholders:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder
	7,  // 9: standards.open.v1.RT0005M37.EntityAndOwnership.structure_chart:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	12, // 10: standards.open.v1.RT0005M37.EntityAndOwnership.branches_under_offshore_banking_license:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.Branch
	18, // 11: standards.open.v1.RT0005M37.EntityAndOwnership.total_assets:type_name -> google.type.Money
	7,  // 12: standards.open.v1.RT0005M37.EntityAndOwnership.representative_of_branches:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	9,  // 13: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_to_domestic_banks:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	9,  // 14: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_allows_domestic_clients_to_provide_downstream_relationships:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	9,  // 15: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_has_procedures_in_place_to_identify_downstream_relationships_with_domestic_banks:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	9,  // 16: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_to_foreign_banks:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	9,  // 17: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_allows_foreign_clients_to_provide_downstream_relationships:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	9,  // 18: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_has_procedures_in_place_to_identify_foreign_relationships_with_domestic_banks:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	9,  // 19: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_to_regulated_msbs_and_mvts:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	9,  // 20: standards.open.v1.RT0005M37.ProductsAndServices.offers_correspondent_banking_and_has_processes_to_identify_downstream_relationships_with_msb_and_mvts:type_name -> standards.open.v1.RT0005M37.YesNoAndExplain
	7,  // 21: standards.open.v1.RT0005M37.ProductsAndServices.representative_of_branches:type_name -> standards.open.v1.RT0005M37.YesNoExplain
	4,  // 22: standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier.financial_identifier:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.TradedSecurityIdentifier.FinancialInstrumentIdentifier
	5,  // 23: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.beneficial_owner_type:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.BeneficialOwnerType
	15, // 24: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.natural_person_ownership_details:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.NaturalPerson
	16, // 25: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.legal_entity_ownership_details:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.LegalEntity
	15, // 26: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.LegalEntity.directors_or_managers:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.NaturalPerson
	3,  // 27: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.LegalEntity.ownership_type:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.OwnershipType
	14, // 28: standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder.LegalEntity.shareholders:type_name -> standards.open.v1.RT0005M37.EntityAndOwnership.SignificantShareholder
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_RT0005M37_proto_init() }
func file_RT0005M37_proto_init() {
	if File_RT0005M37_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RT0005M37_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_YesNoExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_YesExplainNo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_YesNoAndExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_ProductsAndServices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_TradedSecurityIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_SignificantShareholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_SignificantShareholder_NaturalPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RT0005M37_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RT0005M37_EntityAndOwnership_SignificantShareholder_LegalEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RT0005M37_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RT0005M37_proto_goTypes,
		DependencyIndexes: file_RT0005M37_proto_depIdxs,
		EnumInfos:         file_RT0005M37_proto_enumTypes,
		MessageInfos:      file_RT0005M37_proto_msgTypes,
	}.Build()
	File_RT0005M37_proto = out.File
	file_RT0005M37_proto_rawDesc = nil
	file_RT0005M37_proto_goTypes = nil
	file_RT0005M37_proto_depIdxs = nil
}
